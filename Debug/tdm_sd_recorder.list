
tdm_sd_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d754  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800d8e4  0800d8e4  0000e8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0b8  0800e0b8  00010094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0b8  0800e0b8  0000f0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0c0  0800e0c0  00010094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0c0  0800e0c0  0000f0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0c4  0800e0c4  0000f0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800e0c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ea8  20000094  0800e15c  00010094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f3c  0800e15c  00010f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000172b3  00000000  00000000  000100c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381e  00000000  00000000  00027377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0002ab98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f41  00000000  00000000  0002bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a82b  00000000  00000000  0002cec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9ba  00000000  00000000  000576ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3c8d  00000000  00000000  000720a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00165d33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db4  00000000  00000000  00165d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016bb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d8cc 	.word	0x0800d8cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d8cc 	.word	0x0800d8cc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sd_card_init>:
static FATFS sdCard;
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
void sd_card_init()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	490c      	ldr	r1, [pc, #48]	@ (80005c8 <sd_card_init+0x38>)
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <sd_card_init+0x3c>)
 800059a:	f00a fb25 	bl	800abe8 <f_mount>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b0b      	ldr	r3, [pc, #44]	@ (80005d0 <sd_card_init+0x40>)
 80005a4:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005a6:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <sd_card_init+0x40>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d007      	beq.n	80005be <sd_card_init+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <sd_card_init+0x40>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	4807      	ldr	r0, [pc, #28]	@ (80005d4 <sd_card_init+0x44>)
 80005b6:	f00b fd2b 	bl	800c010 <iprintf>
		while(1);
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005be:	4806      	ldr	r0, [pc, #24]	@ (80005d8 <sd_card_init+0x48>)
 80005c0:	f00b fd8e 	bl	800c0e0 <puts>
	}
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20002bb0 	.word	0x20002bb0
 80005cc:	200000b4 	.word	0x200000b4
 80005d0:	200000b0 	.word	0x200000b0
 80005d4:	0800d8e4 	.word	0x0800d8e4
 80005d8:	0800d908 	.word	0x0800d908

080005dc <start_recording>:

void start_recording(uint32_t fs, char* file_name, uint8_t n_channels)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	4613      	mov	r3, r2
 80005e8:	71fb      	strb	r3, [r7, #7]
	//static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	//int file_number_digits = file_counter;
	uint32_t byte_rate = fs * 4 * n_channels; // fs * 32 bit (4 bytes) x n_channels
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	68fa      	ldr	r2, [r7, #12]
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	617b      	str	r3, [r7, #20]
	wav_file_header[22] = (uint8_t)n_channels;
 80005f6:	4a29      	ldr	r2, [pc, #164]	@ (800069c <start_recording+0xc0>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	7593      	strb	r3, [r2, #22]

	wav_file_header[24] = (uint8_t)fs;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b26      	ldr	r3, [pc, #152]	@ (800069c <start_recording+0xc0>)
 8000602:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(fs >> 8);
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b24      	ldr	r3, [pc, #144]	@ (800069c <start_recording+0xc0>)
 800060c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(fs >> 16);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	0c1b      	lsrs	r3, r3, #16
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b21      	ldr	r3, [pc, #132]	@ (800069c <start_recording+0xc0>)
 8000616:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(fs >> 24);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	0e1b      	lsrs	r3, r3, #24
 800061c:	b2da      	uxtb	r2, r3
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <start_recording+0xc0>)
 8000620:	76da      	strb	r2, [r3, #27]

	wav_file_header[28] = (uint8_t)byte_rate;
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <start_recording+0xc0>)
 8000628:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <start_recording+0xc0>)
 8000632:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	0c1b      	lsrs	r3, r3, #16
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <start_recording+0xc0>)
 800063c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	0e1b      	lsrs	r3, r3, #24
 8000642:	b2da      	uxtb	r2, r3
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <start_recording+0xc0>)
 8000646:	77da      	strb	r2, [r3, #31]

	wav_file_header[32] = (uint8_t)(4 * n_channels); // 32 bit (4 bytes) x n_channels
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b13      	ldr	r3, [pc, #76]	@ (800069c <start_recording+0xc0>)
 8000650:	f883 2020 	strb.w	r2, [r3, #32]
	//file_name[4] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[3] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[2] = file_number_digits%10 + 48;
	printf("file name %s \n", file_name);
 8000654:	68b9      	ldr	r1, [r7, #8]
 8000656:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <start_recording+0xc4>)
 8000658:	f00b fcda 	bl	800c010 <iprintf>
	//file_counter++;

	// creating a file
	sd_result = f_open(&wavFile ,file_name, FA_WRITE|FA_CREATE_ALWAYS);
 800065c:	220a      	movs	r2, #10
 800065e:	68b9      	ldr	r1, [r7, #8]
 8000660:	4810      	ldr	r0, [pc, #64]	@ (80006a4 <start_recording+0xc8>)
 8000662:	f00a fb07 	bl	800ac74 <f_open>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b0f      	ldr	r3, [pc, #60]	@ (80006a8 <start_recording+0xcc>)
 800066c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800066e:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <start_recording+0xcc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d007      	beq.n	8000686 <start_recording+0xaa>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000676:	4b0c      	ldr	r3, [pc, #48]	@ (80006a8 <start_recording+0xcc>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4619      	mov	r1, r3
 800067c:	480b      	ldr	r0, [pc, #44]	@ (80006ac <start_recording+0xd0>)
 800067e:	f00b fcc7 	bl	800c010 <iprintf>
		while(1);
 8000682:	bf00      	nop
 8000684:	e7fd      	b.n	8000682 <start_recording+0xa6>
	}
	else
	{
		printf("succeeded in opening a file \n");
 8000686:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <start_recording+0xd4>)
 8000688:	f00b fd2a 	bl	800c0e0 <puts>
	}
	wav_file_size = 0;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <start_recording+0xd8>)
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]


}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000000 	.word	0x20000000
 80006a0:	0800d92c 	.word	0x0800d92c
 80006a4:	200010ec 	.word	0x200010ec
 80006a8:	200000b0 	.word	0x200000b0
 80006ac:	0800d93c 	.word	0x0800d93c
 80006b0:	0800d95c 	.word	0x0800d95c
 80006b4:	2000211c 	.word	0x2000211c

080006b8 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size) // data size is in bytes.
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 80006c4:	481d      	ldr	r0, [pc, #116]	@ (800073c <write2wave_file+0x84>)
 80006c6:	f00b fd0b 	bl	800c0e0 <puts>
	if(first_time == 0)
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <write2wave_file+0x88>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d113      	bne.n	80006fa <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	e00a      	b.n	80006ee <write2wave_file+0x36>
		{
			*(data + i) = wav_file_header[i];
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	4919      	ldr	r1, [pc, #100]	@ (8000744 <write2wave_file+0x8c>)
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	440a      	add	r2, r1
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	2b2b      	cmp	r3, #43	@ 0x2b
 80006f2:	ddf1      	ble.n	80006d8 <write2wave_file+0x20>
		}
		first_time = 1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <write2wave_file+0x88>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 80006fa:	887a      	ldrh	r2, [r7, #2]
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	6879      	ldr	r1, [r7, #4]
 8000702:	4811      	ldr	r0, [pc, #68]	@ (8000748 <write2wave_file+0x90>)
 8000704:	f00a fc7e 	bl	800b004 <f_write>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <write2wave_file+0x94>)
 800070e:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000710:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <write2wave_file+0x94>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d007      	beq.n	8000728 <write2wave_file+0x70>
	{
		printf("error in writing to the file: %d \n", sd_result);
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <write2wave_file+0x94>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	480c      	ldr	r0, [pc, #48]	@ (8000750 <write2wave_file+0x98>)
 8000720:	f00b fc76 	bl	800c010 <iprintf>
		while(1);
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 8000728:	887a      	ldrh	r2, [r7, #2]
 800072a:	4b0a      	ldr	r3, [pc, #40]	@ (8000754 <write2wave_file+0x9c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a08      	ldr	r2, [pc, #32]	@ (8000754 <write2wave_file+0x9c>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	0800d97c 	.word	0x0800d97c
 8000740:	20002120 	.word	0x20002120
 8000744:	20000000 	.word	0x20000000
 8000748:	200010ec 	.word	0x200010ec
 800074c:	200000b0 	.word	0x200000b0
 8000750:	0800d980 	.word	0x0800d980
 8000754:	2000211c 	.word	0x2000211c

08000758 <stop_recording>:

void stop_recording()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 800075e:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <stop_recording+0xc4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3b08      	subs	r3, #8
 8000764:	4a2d      	ldr	r2, [pc, #180]	@ (800081c <stop_recording+0xc4>)
 8000766:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000768:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <stop_recording+0xc4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <stop_recording+0xc8>)
 8000770:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000772:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <stop_recording+0xc4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <stop_recording+0xc8>)
 800077c:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 800077e:	4b27      	ldr	r3, [pc, #156]	@ (800081c <stop_recording+0xc4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0c1b      	lsrs	r3, r3, #16
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <stop_recording+0xc8>)
 8000788:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800078a:	4b24      	ldr	r3, [pc, #144]	@ (800081c <stop_recording+0xc4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	0e1b      	lsrs	r3, r3, #24
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b23      	ldr	r3, [pc, #140]	@ (8000820 <stop_recording+0xc8>)
 8000794:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <stop_recording+0xc4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3b24      	subs	r3, #36	@ 0x24
 800079c:	4a1f      	ldr	r2, [pc, #124]	@ (800081c <stop_recording+0xc4>)
 800079e:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <stop_recording+0xc4>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000820 <stop_recording+0xc8>)
 80007a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <stop_recording+0xc4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <stop_recording+0xc8>)
 80007b6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <stop_recording+0xc4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	0c1b      	lsrs	r3, r3, #16
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <stop_recording+0xc8>)
 80007c4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <stop_recording+0xc4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	0e1b      	lsrs	r3, r3, #24
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <stop_recording+0xc8>)
 80007d2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80007d6:	2100      	movs	r1, #0
 80007d8:	4812      	ldr	r0, [pc, #72]	@ (8000824 <stop_recording+0xcc>)
 80007da:	f00a fe4f 	bl	800b47c <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80007de:	1dbb      	adds	r3, r7, #6
 80007e0:	222c      	movs	r2, #44	@ 0x2c
 80007e2:	490f      	ldr	r1, [pc, #60]	@ (8000820 <stop_recording+0xc8>)
 80007e4:	480f      	ldr	r0, [pc, #60]	@ (8000824 <stop_recording+0xcc>)
 80007e6:	f00a fc0d 	bl	800b004 <f_write>
	if(sd_result != 0)
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <stop_recording+0xd0>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d007      	beq.n	8000802 <stop_recording+0xaa>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 80007f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <stop_recording+0xd0>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <stop_recording+0xd4>)
 80007fa:	f00b fc09 	bl	800c010 <iprintf>
		while(1);
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <stop_recording+0xa6>
	}
	f_close(&wavFile);
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <stop_recording+0xcc>)
 8000804:	f00a fe10 	bl	800b428 <f_close>
	first_time = 0;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <stop_recording+0xd8>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
	printf("closed the file \n");
 800080e:	4809      	ldr	r0, [pc, #36]	@ (8000834 <stop_recording+0xdc>)
 8000810:	f00b fc66 	bl	800c0e0 <puts>
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000211c 	.word	0x2000211c
 8000820:	20000000 	.word	0x20000000
 8000824:	200010ec 	.word	0x200010ec
 8000828:	200000b0 	.word	0x200000b0
 800082c:	0800d9a4 	.word	0x0800d9a4
 8000830:	20002120 	.word	0x20002120
 8000834:	0800d9d0 	.word	0x0800d9d0

08000838 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a1b      	ldr	r2, [pc, #108]	@ (80008b4 <HAL_UART_RxCpltCallback+0x7c>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d130      	bne.n	80008ac <HAL_UART_RxCpltCallback+0x74>

        if (uart_rx_buffer[uart_rx_index] == '\n') {
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	461a      	mov	r2, r3
 8000852:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <HAL_UART_RxCpltCallback+0x84>)
 8000854:	5c9b      	ldrb	r3, [r3, r2]
 8000856:	2b0a      	cmp	r3, #10
 8000858:	d10d      	bne.n	8000876 <HAL_UART_RxCpltCallback+0x3e>
            uart_rx_buffer[uart_rx_index] = '\0';
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	461a      	mov	r2, r3
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <HAL_UART_RxCpltCallback+0x84>)
 8000864:	2100      	movs	r1, #0
 8000866:	5499      	strb	r1, [r3, r2]
            command_received = 1;
 8000868:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <HAL_UART_RxCpltCallback+0x88>)
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
            uart_rx_index = 0;
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
 8000874:	e00f      	b.n	8000896 <HAL_UART_RxCpltCallback+0x5e>
        } else if (uart_rx_index < CMD_BUFFER_SIZE - 1) {
 8000876:	4b10      	ldr	r3, [pc, #64]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b3e      	cmp	r3, #62	@ 0x3e
 800087e:	d807      	bhi.n	8000890 <HAL_UART_RxCpltCallback+0x58>
            uart_rx_index = uart_rx_index + 1;
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	3301      	adds	r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 800088c:	701a      	strb	r2, [r3, #0]
 800088e:	e002      	b.n	8000896 <HAL_UART_RxCpltCallback+0x5e>



        } else {
            uart_rx_index = 0; // Reset index on overflow
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_UART_RxCpltCallback+0x80>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <HAL_UART_RxCpltCallback+0x84>)
 80008a0:	4413      	add	r3, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	4807      	ldr	r0, [pc, #28]	@ (80008c4 <HAL_UART_RxCpltCallback+0x8c>)
 80008a8:	f005 fcec 	bl	8006284 <HAL_UART_Receive_IT>
    }
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40004400 	.word	0x40004400
 80008b8:	20002b94 	.word	0x20002b94
 80008bc:	20002b14 	.word	0x20002b14
 80008c0:	20002b98 	.word	0x20002b98
 80008c4:	20002304 	.word	0x20002304

080008c8 <process_command>:

void process_command(char *command) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b092      	sub	sp, #72	@ 0x48
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    if (command[0] == 's' && command[1] == ' ') {
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b73      	cmp	r3, #115	@ 0x73
 80008d6:	d115      	bne.n	8000904 <process_command+0x3c>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b20      	cmp	r3, #32
 80008e0:	d110      	bne.n	8000904 <process_command+0x3c>
        char filename[CMD_BUFFER_SIZE];
        sscanf(command, "s %s", filename);
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	461a      	mov	r2, r3
 80008e8:	4915      	ldr	r1, [pc, #84]	@ (8000940 <process_command+0x78>)
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f00b f9fc 	bl	800bce8 <siscanf>
        recording_state = 1;
 80008f0:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <process_command+0x7c>)
 80008f2:	2201      	movs	r2, #1
 80008f4:	601a      	str	r2, [r3, #0]
        StartRecording(filename);
 80008f6:	f107 0308 	add.w	r3, r7, #8
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 faa0 	bl	8000e40 <StartRecording>
    if (command[0] == 's' && command[1] == ' ') {
 8000900:	bf00      	nop
    } else if (strcmp(command, "c") == 0) {
        SendCurrentStatus();
    } else {
        IndicateInvalidCommand();
    }
}
 8000902:	e018      	b.n	8000936 <process_command+0x6e>
    } else if (strcmp(command, "e") == 0) {
 8000904:	4910      	ldr	r1, [pc, #64]	@ (8000948 <process_command+0x80>)
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fc6a 	bl	80001e0 <strcmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d105      	bne.n	800091e <process_command+0x56>
        recording_state = 0;
 8000912:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <process_command+0x7c>)
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
        StopRecording();
 8000918:	f000 fab6 	bl	8000e88 <StopRecording>
}
 800091c:	e00b      	b.n	8000936 <process_command+0x6e>
    } else if (strcmp(command, "c") == 0) {
 800091e:	490b      	ldr	r1, [pc, #44]	@ (800094c <process_command+0x84>)
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fc5d 	bl	80001e0 <strcmp>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <process_command+0x6a>
        SendCurrentStatus();
 800092c:	f000 faba 	bl	8000ea4 <SendCurrentStatus>
}
 8000930:	e001      	b.n	8000936 <process_command+0x6e>
        IndicateInvalidCommand();
 8000932:	f000 fad1 	bl	8000ed8 <IndicateInvalidCommand>
}
 8000936:	bf00      	nop
 8000938:	3748      	adds	r7, #72	@ 0x48
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	0800d9e4 	.word	0x0800d9e4
 8000944:	20002b9c 	.word	0x20002b9c
 8000948:	0800d9ec 	.word	0x0800d9ec
 800094c:	0800d9f0 	.word	0x0800d9f0

08000950 <UART_SendString>:

void UART_SendString(UART_HandleTypeDef *huart, char *str) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800095a:	6838      	ldr	r0, [r7, #0]
 800095c:	f7ff fc38 	bl	80001d0 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f005 fc00 	bl	8006170 <HAL_UART_Transmit>
}
 8000970:	bf00      	nop
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 800097c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a34 <main+0xbc>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f00b f8bf 	bl	800bb08 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f000 fe19 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f867 	bl	8000a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 f993 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000996:	f000 f963 	bl	8000c60 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800099a:	f000 f931 	bl	8000c00 <MX_USART2_UART_Init>
  MX_SAI1_Init();
 800099e:	f000 f8b1 	bl	8000b04 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80009a2:	f000 f909 	bl	8000bb8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80009a6:	f007 fcf5 	bl	8008394 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  sd_card_init();
 80009aa:	f7ff fdf1 	bl	8000590 <sd_card_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_rx_index = 0;
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <main+0xc0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80009b4:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <main+0xc0>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <main+0xc4>)
 80009be:	4413      	add	r3, r2
 80009c0:	2201      	movs	r2, #1
 80009c2:	4619      	mov	r1, r3
 80009c4:	481e      	ldr	r0, [pc, #120]	@ (8000a40 <main+0xc8>)
 80009c6:	f005 fc5d 	bl	8006284 <HAL_UART_Receive_IT>
  HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)data_tdm, sizeof(data_tdm));
 80009ca:	f44f 62f0 	mov.w	r2, #1920	@ 0x780
 80009ce:	491d      	ldr	r1, [pc, #116]	@ (8000a44 <main+0xcc>)
 80009d0:	481d      	ldr	r0, [pc, #116]	@ (8000a48 <main+0xd0>)
 80009d2:	f003 fee9 	bl	80047a8 <HAL_SAI_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (command_received) {
 80009d6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <main+0xd4>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d005      	beq.n	80009ea <main+0x72>
          process_command(uart_rx_buffer);
 80009de:	4817      	ldr	r0, [pc, #92]	@ (8000a3c <main+0xc4>)
 80009e0:	f7ff ff72 	bl	80008c8 <process_command>
          command_received = 0;
 80009e4:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <main+0xd4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
      }

	  if(recording_state && half_tdm)
 80009ea:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <main+0xd8>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00c      	beq.n	8000a0c <main+0x94>
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <main+0xdc>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d007      	beq.n	8000a0c <main+0x94>
	  {
		  write2wave_file(((uint8_t*)data_tdm),	 sizeof(data_tdm)/2); // half count * 4 byte per sample
 80009fc:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000a00:	4810      	ldr	r0, [pc, #64]	@ (8000a44 <main+0xcc>)
 8000a02:	f7ff fe59 	bl	80006b8 <write2wave_file>
		  half_tdm = 0;
 8000a06:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <main+0xdc>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
	  }
	  if(recording_state && full_tdm)
 8000a0c:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <main+0xd8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0e0      	beq.n	80009d6 <main+0x5e>
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <main+0xe0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0db      	beq.n	80009d6 <main+0x5e>
	  {
		  write2wave_file(((uint8_t*)data_tdm) + sizeof(data_tdm)/2, sizeof(data_tdm)/2);
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a5c <main+0xe4>)
 8000a20:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fe47 	bl	80006b8 <write2wave_file>
		  full_tdm = 0;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <main+0xe0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
      if (command_received) {
 8000a30:	e7d1      	b.n	80009d6 <main+0x5e>
 8000a32:	bf00      	nop
 8000a34:	20000044 	.word	0x20000044
 8000a38:	20002b94 	.word	0x20002b94
 8000a3c:	20002b14 	.word	0x20002b14
 8000a40:	20002304 	.word	0x20002304
 8000a44:	2000238c 	.word	0x2000238c
 8000a48:	20002124 	.word	0x20002124
 8000a4c:	20002b98 	.word	0x20002b98
 8000a50:	20002b9c 	.word	0x20002b9c
 8000a54:	20002b10 	.word	0x20002b10
 8000a58:	20002b11 	.word	0x20002b11
 8000a5c:	2000274c 	.word	0x2000274c

08000a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b096      	sub	sp, #88	@ 0x58
 8000a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2244      	movs	r2, #68	@ 0x44
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00b fb3e 	bl	800c0f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a74:	463b      	mov	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a82:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a86:	f001 fbab 	bl	80021e0 <HAL_PWREx_ControlVoltageScaling>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a90:	f000 fa44 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a94:	2302      	movs	r3, #2
 8000a96:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a9e:	2310      	movs	r3, #16
 8000aa0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000aae:	230a      	movs	r3, #10
 8000ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fbe2 	bl	800228c <HAL_RCC_OscConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ace:	f000 fa25 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 ffaa 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000af6:	f000 fa11 	bl	8000f1c <Error_Handler>
  }
}
 8000afa:	bf00      	nop
 8000afc:	3758      	adds	r7, #88	@ 0x58
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb4 <MX_SAI1_Init+0xb0>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b0e:	4b28      	ldr	r3, [pc, #160]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b14:	4b26      	ldr	r3, [pc, #152]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8000b1a:	4b25      	ldr	r3, [pc, #148]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b1c:	22e0      	movs	r2, #224	@ 0xe0
 8000b1e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b20:	4b23      	ldr	r3, [pc, #140]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000b26:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b32:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b44:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b46:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b4a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b52:	4b17      	ldr	r3, [pc, #92]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b58:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 256;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b64:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b6c:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000b72:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 8;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b8e:	2208      	movs	r2, #8
 8000b90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b98:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000b9a:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <MX_SAI1_Init+0xac>)
 8000b9c:	f003 fc92 	bl	80044c4 <HAL_SAI_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SAI1_Init+0xa6>
  {
    Error_Handler();
 8000ba6:	f000 f9b9 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20002124 	.word	0x20002124
 8000bb4:	40015404 	.word	0x40015404

08000bb8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <MX_SDMMC1_SD_Init+0x44>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 32;
 8000be0:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000be2:	2220      	movs	r2, #32
 8000be4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000be6:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <MX_SDMMC1_SD_Init+0x40>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	200021f0 	.word	0x200021f0
 8000bfc:	40012800 	.word	0x40012800

08000c00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c06:	4a15      	ldr	r2, [pc, #84]	@ (8000c5c <MX_USART2_UART_Init+0x5c>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0a:	4b13      	ldr	r3, [pc, #76]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	@ (8000c58 <MX_USART2_UART_Init+0x58>)
 8000c44:	f005 fa46 	bl	80060d4 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c4e:	f000 f965 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20002304 	.word	0x20002304
 8000c5c:	40004400 	.word	0x40004400

08000c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_DMA_Init+0x58>)
 8000c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c6a:	4a13      	ldr	r2, [pc, #76]	@ (8000cb8 <MX_DMA_Init+0x58>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c72:	4b11      	ldr	r3, [pc, #68]	@ (8000cb8 <MX_DMA_Init+0x58>)
 8000c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2038      	movs	r0, #56	@ 0x38
 8000c84:	f000 fe17 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000c88:	2038      	movs	r0, #56	@ 0x38
 8000c8a:	f000 fe30 	bl	80018ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	203b      	movs	r0, #59	@ 0x3b
 8000c94:	f000 fe0f 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000c98:	203b      	movs	r0, #59	@ 0x3b
 8000c9a:	f000 fe28 	bl	80018ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	203c      	movs	r0, #60	@ 0x3c
 8000ca4:	f000 fe07 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000ca8:	203c      	movs	r0, #60	@ 0x3c
 8000caa:	f000 fe20 	bl	80018ee <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b40      	ldr	r3, [pc, #256]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	4a39      	ldr	r2, [pc, #228]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000cf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf6:	4b37      	ldr	r3, [pc, #220]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a33      	ldr	r2, [pc, #204]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b31      	ldr	r3, [pc, #196]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b28      	ldr	r3, [pc, #160]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	4a27      	ldr	r2, [pc, #156]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3e:	4b25      	ldr	r3, [pc, #148]	@ (8000dd4 <MX_GPIO_Init+0x118>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2120      	movs	r1, #32
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d52:	f001 fa1f 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d5c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	481a      	ldr	r0, [pc, #104]	@ (8000dd8 <MX_GPIO_Init+0x11c>)
 8000d6e:	f001 f84f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d72:	2301      	movs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d82:	230d      	movs	r3, #13
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d90:	f001 f83e 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d94:	2320      	movs	r3, #32
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f001 f82f 	bl	8001e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000db2:	2310      	movs	r3, #16
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4805      	ldr	r0, [pc, #20]	@ (8000ddc <MX_GPIO_Init+0x120>)
 8000dc6:	f001 f823 	bl	8001e10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000400 	.word	0x48000400

08000de0 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

	full_tdm = 1;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_SAI_RxCpltCallback+0x24>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[0];
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_SAI_RxCpltCallback+0x28>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a06      	ldr	r2, [pc, #24]	@ (8000e0c <HAL_SAI_RxCpltCallback+0x2c>)
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20002b11 	.word	0x20002b11
 8000e08:	2000238c 	.word	0x2000238c
 8000e0c:	20002b0c 	.word	0x20002b0c

08000e10 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_tdm= 1;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[WAV_WRITE_SAMPLE_COUNT/2];
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8000e20:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8000e24:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	20002b10 	.word	0x20002b10
 8000e38:	2000238c 	.word	0x2000238c
 8000e3c:	20002b0c 	.word	0x20002b0c

08000e40 <StartRecording>:

void StartRecording(char *filename) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
    snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "Starting recording to file: %s\r\n", filename);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <StartRecording+0x38>)
 8000e4c:	2140      	movs	r1, #64	@ 0x40
 8000e4e:	480b      	ldr	r0, [pc, #44]	@ (8000e7c <StartRecording+0x3c>)
 8000e50:	f00a ff16 	bl	800bc80 <sniprintf>
    UART_SendString(&huart2, uart_tx_buffer);
 8000e54:	4909      	ldr	r1, [pc, #36]	@ (8000e7c <StartRecording+0x3c>)
 8000e56:	480a      	ldr	r0, [pc, #40]	@ (8000e80 <StartRecording+0x40>)
 8000e58:	f7ff fd7a 	bl	8000950 <UART_SendString>
    // Implement file opening/creation here
    start_recording(SAI_AUDIO_FREQUENCY_48K, filename, (uint8_t)hsai_BlockA1.SlotInit.SlotNumber);
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <StartRecording+0x44>)
 8000e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	461a      	mov	r2, r3
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8000e6a:	f7ff fbb7 	bl	80005dc <start_recording>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	0800d9f4 	.word	0x0800d9f4
 8000e7c:	20002b54 	.word	0x20002b54
 8000e80:	20002304 	.word	0x20002304
 8000e84:	20002124 	.word	0x20002124

08000e88 <StopRecording>:

void StopRecording() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
    UART_SendString(&huart2, "Stopping recording\r\n");
 8000e8c:	4903      	ldr	r1, [pc, #12]	@ (8000e9c <StopRecording+0x14>)
 8000e8e:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <StopRecording+0x18>)
 8000e90:	f7ff fd5e 	bl	8000950 <UART_SendString>
    // Implement file closing and clean-up here
    stop_recording();
 8000e94:	f7ff fc60 	bl	8000758 <stop_recording>
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	0800da18 	.word	0x0800da18
 8000ea0:	20002304 	.word	0x20002304

08000ea4 <SendCurrentStatus>:

void SendCurrentStatus() {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    if (recording_state == 1) {
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <SendCurrentStatus+0x24>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d104      	bne.n	8000eba <SendCurrentStatus+0x16>
        UART_SendString(&huart2, "Recording in progress\r\n");
 8000eb0:	4906      	ldr	r1, [pc, #24]	@ (8000ecc <SendCurrentStatus+0x28>)
 8000eb2:	4807      	ldr	r0, [pc, #28]	@ (8000ed0 <SendCurrentStatus+0x2c>)
 8000eb4:	f7ff fd4c 	bl	8000950 <UART_SendString>
    } else {
        UART_SendString(&huart2, "Recording stopped\r\n");
    }
}
 8000eb8:	e003      	b.n	8000ec2 <SendCurrentStatus+0x1e>
        UART_SendString(&huart2, "Recording stopped\r\n");
 8000eba:	4906      	ldr	r1, [pc, #24]	@ (8000ed4 <SendCurrentStatus+0x30>)
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <SendCurrentStatus+0x2c>)
 8000ebe:	f7ff fd47 	bl	8000950 <UART_SendString>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20002b9c 	.word	0x20002b9c
 8000ecc:	0800da30 	.word	0x0800da30
 8000ed0:	20002304 	.word	0x20002304
 8000ed4:	0800da48 	.word	0x0800da48

08000ed8 <IndicateInvalidCommand>:

void IndicateInvalidCommand() {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
    UART_SendString(&huart2, "Invalid command received\r\n");
 8000edc:	4902      	ldr	r1, [pc, #8]	@ (8000ee8 <IndicateInvalidCommand+0x10>)
 8000ede:	4803      	ldr	r0, [pc, #12]	@ (8000eec <IndicateInvalidCommand+0x14>)
 8000ee0:	f7ff fd36 	bl	8000950 <UART_SendString>
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	0800da5c 	.word	0x0800da5c
 8000eec:	20002304 	.word	0x20002304

08000ef0 <_write>:
int _write(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len, HAL_MAX_DELAY);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <_write+0x28>)
 8000f08:	f005 f932 	bl	8006170 <HAL_UART_Transmit>
  return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20002304 	.word	0x20002304

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f20:	b672      	cpsid	i
}
 8000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <Error_Handler+0x8>

08000f28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	4a08      	ldr	r2, [pc, #32]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f52:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_MspInit+0x44>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0ac      	sub	sp, #176	@ 0xb0
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2288      	movs	r2, #136	@ 0x88
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f8ad 	bl	800c0f0 <memset>
  if(hsd->Instance==SDMMC1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a63      	ldr	r2, [pc, #396]	@ (8001128 <HAL_SD_MspInit+0x1b8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f040 80be 	bne.w	800111e <HAL_SD_MspInit+0x1ae>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000fa2:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000fa6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8000fa8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 ff69 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000fc0:	f7ff ffac 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fc4:	4b59      	ldr	r3, [pc, #356]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc8:	4a58      	ldr	r2, [pc, #352]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000fca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fce:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd0:	4b56      	ldr	r3, [pc, #344]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fdc:	4b53      	ldr	r3, [pc, #332]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000fe2:	f043 0304 	orr.w	r3, r3, #4
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b50      	ldr	r3, [pc, #320]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001000:	4b4a      	ldr	r3, [pc, #296]	@ (800112c <HAL_SD_MspInit+0x1bc>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001004:	f003 0308 	and.w	r3, r3, #8
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800100c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001026:	230c      	movs	r3, #12
 8001028:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001030:	4619      	mov	r1, r3
 8001032:	483f      	ldr	r0, [pc, #252]	@ (8001130 <HAL_SD_MspInit+0x1c0>)
 8001034:	f000 feec 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001038:	2304      	movs	r3, #4
 800103a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001050:	230c      	movs	r3, #12
 8001052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	4835      	ldr	r0, [pc, #212]	@ (8001134 <HAL_SD_MspInit+0x1c4>)
 800105e:	f000 fed7 	bl	8001e10 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Channel4;
 8001062:	4b35      	ldr	r3, [pc, #212]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 8001064:	4a35      	ldr	r2, [pc, #212]	@ (800113c <HAL_SD_MspInit+0x1cc>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Request = DMA_REQUEST_7;
 8001068:	4b33      	ldr	r3, [pc, #204]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 800106a:	2207      	movs	r2, #7
 800106c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106e:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b30      	ldr	r3, [pc, #192]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b2f      	ldr	r3, [pc, #188]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 800107c:	2280      	movs	r2, #128	@ 0x80
 800107e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001080:	4b2d      	ldr	r3, [pc, #180]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 8001082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001086:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001088:	4b2b      	ldr	r3, [pc, #172]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 800108a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800108e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_NORMAL;
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001096:	4b28      	ldr	r3, [pc, #160]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800109c:	4826      	ldr	r0, [pc, #152]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 800109e:	f000 fc41 	bl	8001924 <HAL_DMA_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_SD_MspInit+0x13c>
    {
      Error_Handler();
 80010a8:	f7ff ff38 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a22      	ldr	r2, [pc, #136]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 80010b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80010b2:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <HAL_SD_MspInit+0x1c8>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Channel5;
 80010b8:	4b21      	ldr	r3, [pc, #132]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010ba:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <HAL_SD_MspInit+0x1d4>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Request = DMA_REQUEST_7;
 80010be:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010c6:	2210      	movs	r2, #16
 80010c8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010dc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010e4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_NORMAL;
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80010f2:	4813      	ldr	r0, [pc, #76]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 80010f4:	f000 fc16 	bl	8001924 <HAL_DMA_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_SD_MspInit+0x192>
    {
      Error_Handler();
 80010fe:	f7ff ff0d 	bl	8000f1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 8001106:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001108:	4a0d      	ldr	r2, [pc, #52]	@ (8001140 <HAL_SD_MspInit+0x1d0>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2031      	movs	r0, #49	@ 0x31
 8001114:	f000 fbcf 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001118:	2031      	movs	r0, #49	@ 0x31
 800111a:	f000 fbe8 	bl	80018ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 800111e:	bf00      	nop
 8001120:	37b0      	adds	r7, #176	@ 0xb0
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012800 	.word	0x40012800
 800112c:	40021000 	.word	0x40021000
 8001130:	48000800 	.word	0x48000800
 8001134:	48000c00 	.word	0x48000c00
 8001138:	20002274 	.word	0x20002274
 800113c:	40020444 	.word	0x40020444
 8001140:	200022bc 	.word	0x200022bc
 8001144:	40020458 	.word	0x40020458

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b0ac      	sub	sp, #176	@ 0xb0
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2288      	movs	r2, #136	@ 0x88
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00a ffc1 	bl	800c0f0 <memset>
  if(huart->Instance==USART2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a25      	ldr	r2, [pc, #148]	@ (8001208 <HAL_UART_MspInit+0xc0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d143      	bne.n	8001200 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800117c:	2300      	movs	r3, #0
 800117e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	4618      	mov	r0, r3
 8001186:	f001 fe81 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001190:	f7ff fec4 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <HAL_UART_MspInit+0xc4>)
 8001196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001198:	4a1c      	ldr	r2, [pc, #112]	@ (800120c <HAL_UART_MspInit+0xc4>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119e:	6593      	str	r3, [r2, #88]	@ 0x58
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <HAL_UART_MspInit+0xc4>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <HAL_UART_MspInit+0xc4>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	4a16      	ldr	r2, [pc, #88]	@ (800120c <HAL_UART_MspInit+0xc4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_UART_MspInit+0xc4>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011c4:	230c      	movs	r3, #12
 80011c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011e6:	4619      	mov	r1, r3
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ec:	f000 fe10 	bl	8001e10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2026      	movs	r0, #38	@ 0x26
 80011f6:	f000 fb5e 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011fa:	2026      	movs	r0, #38	@ 0x26
 80011fc:	f000 fb77 	bl	80018ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	@ 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40004400 	.word	0x40004400
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b0aa      	sub	sp, #168	@ 0xa8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2288      	movs	r2, #136	@ 0x88
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f00a ff65 	bl	800c0f0 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a4b      	ldr	r2, [pc, #300]	@ (8001358 <HAL_SAI_MspInit+0x148>)
 800122c:	4293      	cmp	r3, r2
 800122e:	f040 808f 	bne.w	8001350 <HAL_SAI_MspInit+0x140>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001232:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001236:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001238:	2300      	movs	r3, #0
 800123a:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800123c:	2302      	movs	r3, #2
 800123e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8001244:	230d      	movs	r3, #13
 8001246:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8001248:	2311      	movs	r3, #17
 800124a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001250:	2302      	movs	r3, #2
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001254:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fe14 	bl	8002e8c <HAL_RCCEx_PeriphCLKConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_SAI_MspInit+0x5e>
    {
      Error_Handler();
 800126a:	f7ff fe57 	bl	8000f1c <Error_Handler>
    }

    if (SAI1_client == 0)
 800126e:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <HAL_SAI_MspInit+0x14c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10b      	bne.n	800128e <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001276:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <HAL_SAI_MspInit+0x150>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800127a:	4a39      	ldr	r2, [pc, #228]	@ (8001360 <HAL_SAI_MspInit+0x150>)
 800127c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001280:	6613      	str	r3, [r2, #96]	@ 0x60
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_SAI_MspInit+0x150>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800128e:	4b33      	ldr	r3, [pc, #204]	@ (800135c <HAL_SAI_MspInit+0x14c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a31      	ldr	r2, [pc, #196]	@ (800135c <HAL_SAI_MspInit+0x14c>)
 8001296:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB9     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001298:	2308      	movs	r3, #8
 800129a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012b0:	230d      	movs	r3, #13
 80012b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012ba:	4619      	mov	r1, r3
 80012bc:	4829      	ldr	r0, [pc, #164]	@ (8001364 <HAL_SAI_MspInit+0x154>)
 80012be:	f000 fda7 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80012c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80012c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80012dc:	230d      	movs	r3, #13
 80012de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012e6:	4619      	mov	r1, r3
 80012e8:	481f      	ldr	r0, [pc, #124]	@ (8001368 <HAL_SAI_MspInit+0x158>)
 80012ea:	f000 fd91 	bl	8001e10 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 80012f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001370 <HAL_SAI_MspInit+0x160>)
 80012f2:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 800130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001312:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 8001316:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800131a:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 800131e:	2220      	movs	r2, #32
 8001320:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8001328:	4810      	ldr	r0, [pc, #64]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 800132a:	f000 fafb 	bl	8001924 <HAL_DMA_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_SAI_MspInit+0x128>
    {
      Error_Handler();
 8001334:	f7ff fdf2 	bl	8000f1c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 800133c:	671a      	str	r2, [r3, #112]	@ 0x70
 800133e:	4a0b      	ldr	r2, [pc, #44]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a09      	ldr	r2, [pc, #36]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 8001348:	66da      	str	r2, [r3, #108]	@ 0x6c
 800134a:	4a08      	ldr	r2, [pc, #32]	@ (800136c <HAL_SAI_MspInit+0x15c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 8001350:	bf00      	nop
 8001352:	37a8      	adds	r7, #168	@ 0xa8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40015404 	.word	0x40015404
 800135c:	20002ba0 	.word	0x20002ba0
 8001360:	40021000 	.word	0x40021000
 8001364:	48000800 	.word	0x48000800
 8001368:	48000400 	.word	0x48000400
 800136c:	200021a8 	.word	0x200021a8
 8001370:	40020408 	.word	0x40020408

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <NMI_Handler+0x4>

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <MemManage_Handler+0x4>

0800138c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <UsageFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f955 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <USART2_IRQHandler+0x10>)
 80013da:	f004 ff9f 	bl	800631c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20002304 	.word	0x20002304

080013e8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <SDMMC1_IRQHandler+0x10>)
 80013ee:	f003 fdc1 	bl	8004f74 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200021f0 	.word	0x200021f0

080013fc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <DMA2_Channel1_IRQHandler+0x10>)
 8001402:	f000 fc26 	bl	8001c52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200021a8 	.word	0x200021a8

08001410 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <DMA2_Channel4_IRQHandler+0x10>)
 8001416:	f000 fc1c 	bl	8001c52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20002274 	.word	0x20002274

08001424 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <DMA2_Channel5_IRQHandler+0x10>)
 800142a:	f000 fc12 	bl	8001c52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200022bc 	.word	0x200022bc

08001438 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	e00a      	b.n	8001460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800144a:	f3af 8000 	nop.w
 800144e:	4601      	mov	r1, r0
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	60ba      	str	r2, [r7, #8]
 8001456:	b2ca      	uxtb	r2, r1
 8001458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	3301      	adds	r3, #1
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	dbf0      	blt.n	800144a <_read+0x12>
  }

  return len;
 8001468:	687b      	ldr	r3, [r7, #4]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800149a:	605a      	str	r2, [r3, #4]
  return 0;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <_isatty>:

int _isatty(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014b2:	2301      	movs	r3, #1
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e4:	4a14      	ldr	r2, [pc, #80]	@ (8001538 <_sbrk+0x5c>)
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <_sbrk+0x60>)
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d102      	bne.n	80014fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f8:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <_sbrk+0x64>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	@ (8001544 <_sbrk+0x68>)
 80014fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fe:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <_sbrk+0x64>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4413      	add	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	429a      	cmp	r2, r3
 800150a:	d207      	bcs.n	800151c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800150c:	f00a fe60 	bl	800c1d0 <__errno>
 8001510:	4603      	mov	r3, r0
 8001512:	220c      	movs	r2, #12
 8001514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800151a:	e009      	b.n	8001530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800151c:	4b08      	ldr	r3, [pc, #32]	@ (8001540 <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <_sbrk+0x64>)
 800152c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152e:	68fb      	ldr	r3, [r7, #12]
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20018000 	.word	0x20018000
 800153c:	00000400 	.word	0x00000400
 8001540:	20002ba4 	.word	0x20002ba4
 8001544:	20002f40 	.word	0x20002f40

08001548 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <SystemInit+0x20>)
 800154e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001552:	4a05      	ldr	r2, [pc, #20]	@ (8001568 <SystemInit+0x20>)
 8001554:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001558:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001570:	f7ff ffea 	bl	8001548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	@ (80015ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <LoopForever+0xe>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	@ (80015b8 <LoopForever+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159a:	f00a fe1f 	bl	800c1dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159e:	f7ff f9eb 	bl	8000978 <main>

080015a2 <LoopForever>:

LoopForever:
    b LoopForever
 80015a2:	e7fe      	b.n	80015a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80015b0:	0800e0c8 	.word	0x0800e0c8
  ldr r2, =_sbss
 80015b4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80015b8:	20002f3c 	.word	0x20002f3c

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ca:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <HAL_Init+0x3c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <HAL_Init+0x3c>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f962 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 f80f 	bl	8001600 <HAL_InitTick>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	e001      	b.n	80015f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ee:	f7ff fc9b 	bl	8000f28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <HAL_InitTick+0x6c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <HAL_InitTick+0x70>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b14      	ldr	r3, [pc, #80]	@ (800166c <HAL_InitTick+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f96d 	bl	800190a <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d809      	bhi.n	8001650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001644:	f000 f937 	bl	80018b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001648:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_InitTick+0x74>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e007      	b.n	8001660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e004      	b.n	8001660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e001      	b.n	8001660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000034 	.word	0x20000034
 8001670:	2000002c 	.word	0x2000002c
 8001674:	20000030 	.word	0x20000030

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000034 	.word	0x20000034
 800169c:	20002ba8 	.word	0x20002ba8

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20002ba8 	.word	0x20002ba8

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000034 	.word	0x20000034

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	@ (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	@ (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	@ (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	@ 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	@ 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	@ (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c8:	f7ff ff3e 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	68b9      	ldr	r1, [r7, #8]
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f7ff ff8e 	bl	80017f4 <NVIC_EncodePriority>
 80018d8:	4602      	mov	r2, r0
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	4611      	mov	r1, r2
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff5d 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	4603      	mov	r3, r0
 80018f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff31 	bl	8001764 <__NVIC_EnableIRQ>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}

0800190a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff ffa2 	bl	800185c <SysTick_Config>
 8001918:	4603      	mov	r3, r0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e098      	b.n	8001a68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <HAL_DMA_Init+0x150>)
 800193e:	429a      	cmp	r2, r3
 8001940:	d80f      	bhi.n	8001962 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <HAL_DMA_Init+0x154>)
 800194a:	4413      	add	r3, r2
 800194c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a7c <HAL_DMA_Init+0x158>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	091b      	lsrs	r3, r3, #4
 8001954:	009a      	lsls	r2, r3, #2
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a48      	ldr	r2, [pc, #288]	@ (8001a80 <HAL_DMA_Init+0x15c>)
 800195e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001960:	e00e      	b.n	8001980 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	4b46      	ldr	r3, [pc, #280]	@ (8001a84 <HAL_DMA_Init+0x160>)
 800196a:	4413      	add	r3, r2
 800196c:	4a43      	ldr	r2, [pc, #268]	@ (8001a7c <HAL_DMA_Init+0x158>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	091b      	lsrs	r3, r3, #4
 8001974:	009a      	lsls	r2, r3, #2
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a42      	ldr	r2, [pc, #264]	@ (8001a88 <HAL_DMA_Init+0x164>)
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800199a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80019da:	d039      	beq.n	8001a50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a27      	ldr	r2, [pc, #156]	@ (8001a80 <HAL_DMA_Init+0x15c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d11a      	bne.n	8001a1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <HAL_DMA_Init+0x168>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f003 031c 	and.w	r3, r3, #28
 80019f2:	210f      	movs	r1, #15
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4924      	ldr	r1, [pc, #144]	@ (8001a8c <HAL_DMA_Init+0x168>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a00:	4b22      	ldr	r3, [pc, #136]	@ (8001a8c <HAL_DMA_Init+0x168>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0c:	f003 031c 	and.w	r3, r3, #28
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	491d      	ldr	r1, [pc, #116]	@ (8001a8c <HAL_DMA_Init+0x168>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
 8001a1a:	e019      	b.n	8001a50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a90 <HAL_DMA_Init+0x16c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a24:	f003 031c 	and.w	r3, r3, #28
 8001a28:	210f      	movs	r1, #15
 8001a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	4917      	ldr	r1, [pc, #92]	@ (8001a90 <HAL_DMA_Init+0x16c>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <HAL_DMA_Init+0x16c>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6859      	ldr	r1, [r3, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a42:	f003 031c 	and.w	r3, r3, #28
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	4911      	ldr	r1, [pc, #68]	@ (8001a90 <HAL_DMA_Init+0x16c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40020407 	.word	0x40020407
 8001a78:	bffdfff8 	.word	0xbffdfff8
 8001a7c:	cccccccd 	.word	0xcccccccd
 8001a80:	40020000 	.word	0x40020000
 8001a84:	bffdfbf8 	.word	0xbffdfbf8
 8001a88:	40020400 	.word	0x40020400
 8001a8c:	400200a8 	.word	0x400200a8
 8001a90:	400204a8 	.word	0x400204a8

08001a94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_DMA_Start_IT+0x20>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e04b      	b.n	8001b4c <HAL_DMA_Start_IT+0xb8>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d13a      	bne.n	8001b3e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 0201 	bic.w	r2, r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f95f 	bl	8001db0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 020e 	orr.w	r2, r2, #14
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00f      	b.n	8001b2c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0204 	bic.w	r2, r2, #4
 8001b1a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 020a 	orr.w	r2, r2, #10
 8001b2a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0201 	orr.w	r2, r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	e005      	b.n	8001b4a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b46:	2302      	movs	r3, #2
 8001b48:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d008      	beq.n	8001b7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2204      	movs	r2, #4
 8001b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e022      	b.n	8001bc4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 020e 	bic.w	r2, r2, #14
 8001b8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0201 	bic.w	r2, r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba2:	f003 021c 	and.w	r2, r3, #28
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	2101      	movs	r1, #1
 8001bac:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d005      	beq.n	8001bf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2204      	movs	r2, #4
 8001bec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
 8001bf2:	e029      	b.n	8001c48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020e 	bic.w	r2, r2, #14
 8001c02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c18:	f003 021c 	and.w	r2, r3, #28
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	2101      	movs	r1, #1
 8001c22:	fa01 f202 	lsl.w	r2, r1, r2
 8001c26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
    }
  }
  return status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f003 031c 	and.w	r3, r3, #28
 8001c72:	2204      	movs	r2, #4
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d026      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x7a>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d021      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d107      	bne.n	8001ca6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0204 	bic.w	r2, r2, #4
 8001ca4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	2104      	movs	r1, #4
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d071      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001cca:	e06c      	b.n	8001da6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd0:	f003 031c 	and.w	r3, r3, #28
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d02e      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xec>
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d029      	beq.n	8001d3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10b      	bne.n	8001d10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 020a 	bic.w	r2, r2, #10
 8001d06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	f003 021c 	and.w	r2, r3, #28
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1c:	2102      	movs	r1, #2
 8001d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d038      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001d3c:	e033      	b.n	8001da6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f003 031c 	and.w	r3, r3, #28
 8001d46:	2208      	movs	r2, #8
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02a      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x156>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d025      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 020e 	bic.w	r2, r2, #14
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d70:	f003 021c 	and.w	r2, r3, #28
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
}
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f003 021c 	and.w	r2, r3, #28
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	d108      	bne.n	8001df4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001df2:	e007      	b.n	8001e04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	60da      	str	r2, [r3, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	e17f      	b.n	8002120 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8171 	beq.w	800211a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d005      	beq.n	8001e50 <HAL_GPIO_Init+0x40>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d130      	bne.n	8001eb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	2203      	movs	r2, #3
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e86:	2201      	movs	r2, #1
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 0201 	and.w	r2, r3, #1
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d118      	bne.n	8001ef0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	08db      	lsrs	r3, r3, #3
 8001eda:	f003 0201 	and.w	r2, r3, #1
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d017      	beq.n	8001f2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d123      	bne.n	8001f80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	220f      	movs	r2, #15
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	6939      	ldr	r1, [r7, #16]
 8001f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0203 	and.w	r2, r3, #3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80ac 	beq.w	800211a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc2:	4b5f      	ldr	r3, [pc, #380]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fce:	4b5c      	ldr	r3, [pc, #368]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fda:	4a5a      	ldr	r2, [pc, #360]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002004:	d025      	beq.n	8002052 <HAL_GPIO_Init+0x242>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4f      	ldr	r2, [pc, #316]	@ (8002148 <HAL_GPIO_Init+0x338>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <HAL_GPIO_Init+0x23e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4e      	ldr	r2, [pc, #312]	@ (800214c <HAL_GPIO_Init+0x33c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x23a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4d      	ldr	r2, [pc, #308]	@ (8002150 <HAL_GPIO_Init+0x340>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x236>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4c      	ldr	r2, [pc, #304]	@ (8002154 <HAL_GPIO_Init+0x344>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x232>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4b      	ldr	r2, [pc, #300]	@ (8002158 <HAL_GPIO_Init+0x348>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x22e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a4a      	ldr	r2, [pc, #296]	@ (800215c <HAL_GPIO_Init+0x34c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x22a>
 8002036:	2306      	movs	r3, #6
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800203a:	2307      	movs	r3, #7
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x244>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x244>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x244>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x244>
 8002052:	2300      	movs	r3, #0
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002064:	4937      	ldr	r1, [pc, #220]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002072:	4b3b      	ldr	r3, [pc, #236]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002096:	4a32      	ldr	r2, [pc, #200]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800209c:	4b30      	ldr	r3, [pc, #192]	@ (8002160 <HAL_GPIO_Init+0x350>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020c0:	4a27      	ldr	r2, [pc, #156]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020c6:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002160 <HAL_GPIO_Init+0x350>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	4013      	ands	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002114:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa22 f303 	lsr.w	r3, r2, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ae78 	bne.w	8001e20 <HAL_GPIO_Init+0x10>
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40021000 	.word	0x40021000
 8002144:	40010000 	.word	0x40010000
 8002148:	48000400 	.word	0x48000400
 800214c:	48000800 	.word	0x48000800
 8002150:	48000c00 	.word	0x48000c00
 8002154:	48001000 	.word	0x48001000
 8002158:	48001400 	.word	0x48001400
 800215c:	48001800 	.word	0x48001800
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	887b      	ldrh	r3, [r7, #2]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e001      	b.n	8002186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002186:	7bfb      	ldrb	r3, [r7, #15]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b0:	e002      	b.n	80021b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021c8:	4b04      	ldr	r3, [pc, #16]	@ (80021dc <HAL_PWREx_GetVoltageRange+0x18>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40007000 	.word	0x40007000

080021e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021ee:	d130      	bne.n	8002252 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021fc:	d038      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002206:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002208:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800220c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2232      	movs	r2, #50	@ 0x32
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3301      	adds	r3, #1
 8002222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002224:	e002      	b.n	800222c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3b01      	subs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222c:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002238:	d102      	bne.n	8002240 <HAL_PWREx_ControlVoltageScaling+0x60>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f2      	bne.n	8002226 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224c:	d110      	bne.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e00f      	b.n	8002272 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002252:	4b0b      	ldr	r3, [pc, #44]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800225e:	d007      	beq.n	8002270 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002260:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002268:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800226a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800226e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40007000 	.word	0x40007000
 8002284:	2000002c 	.word	0x2000002c
 8002288:	431bde83 	.word	0x431bde83

0800228c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e3ca      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800229e:	4b97      	ldr	r3, [pc, #604]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	f003 030c 	and.w	r3, r3, #12
 80022a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022a8:	4b94      	ldr	r3, [pc, #592]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80e4 	beq.w	8002488 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_RCC_OscConfig+0x4a>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b0c      	cmp	r3, #12
 80022ca:	f040 808b 	bne.w	80023e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 8087 	bne.w	80023e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022d6:	4b89      	ldr	r3, [pc, #548]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_RCC_OscConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e3a2      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	4b82      	ldr	r3, [pc, #520]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_RCC_OscConfig+0x7c>
 80022fe:	4b7f      	ldr	r3, [pc, #508]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002306:	e005      	b.n	8002314 <HAL_RCC_OscConfig+0x88>
 8002308:	4b7c      	ldr	r3, [pc, #496]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002314:	4293      	cmp	r3, r2
 8002316:	d223      	bcs.n	8002360 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fd55 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e383      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232c:	4b73      	ldr	r3, [pc, #460]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a72      	ldr	r2, [pc, #456]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b70      	ldr	r3, [pc, #448]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	496d      	ldr	r1, [pc, #436]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234a:	4b6c      	ldr	r3, [pc, #432]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	4968      	ldr	r1, [pc, #416]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
 800235e:	e025      	b.n	80023ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002360:	4b66      	ldr	r3, [pc, #408]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	4b63      	ldr	r3, [pc, #396]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4960      	ldr	r1, [pc, #384]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237e:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	495b      	ldr	r1, [pc, #364]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fd15 	bl	8002dcc <RCC_SetFlashLatencyFromMSIRange>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e343      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ac:	f000 fc4a 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b52      	ldr	r3, [pc, #328]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	4950      	ldr	r1, [pc, #320]	@ (8002500 <HAL_RCC_OscConfig+0x274>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002504 <HAL_RCC_OscConfig+0x278>)
 80023ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002508 <HAL_RCC_OscConfig+0x27c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff f915 	bl	8001600 <HAL_InitTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d052      	beq.n	8002486 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	e327      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ec:	4b43      	ldr	r3, [pc, #268]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a42      	ldr	r2, [pc, #264]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80023f2:	f043 0301 	orr.w	r3, r3, #1
 80023f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f952 	bl	80016a0 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002400:	f7ff f94e 	bl	80016a0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e310      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002412:	4b3a      	ldr	r3, [pc, #232]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a36      	ldr	r2, [pc, #216]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b34      	ldr	r3, [pc, #208]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4931      	ldr	r1, [pc, #196]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243c:	4b2f      	ldr	r3, [pc, #188]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	492c      	ldr	r1, [pc, #176]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e01a      	b.n	8002488 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800245e:	f7ff f91f 	bl	80016a0 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002466:	f7ff f91b 	bl	80016a0 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e2dd      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002478:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x1da>
 8002484:	e000      	b.n	8002488 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002486:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d074      	beq.n	800257e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x21a>
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b0c      	cmp	r3, #12
 800249e:	d10e      	bne.n	80024be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d10b      	bne.n	80024be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a6:	4b15      	ldr	r3, [pc, #84]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d064      	beq.n	800257c <HAL_RCC_OscConfig+0x2f0>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d160      	bne.n	800257c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e2ba      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x24a>
 80024c8:	4b0c      	ldr	r3, [pc, #48]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0b      	ldr	r2, [pc, #44]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e026      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024de:	d115      	bne.n	800250c <HAL_RCC_OscConfig+0x280>
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a05      	ldr	r2, [pc, #20]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ea:	6013      	str	r3, [r2, #0]
 80024ec:	4b03      	ldr	r3, [pc, #12]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a02      	ldr	r2, [pc, #8]	@ (80024fc <HAL_RCC_OscConfig+0x270>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
 80024f8:	e014      	b.n	8002524 <HAL_RCC_OscConfig+0x298>
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	0800dacc 	.word	0x0800dacc
 8002504:	2000002c 	.word	0x2000002c
 8002508:	20000030 	.word	0x20000030
 800250c:	4ba0      	ldr	r3, [pc, #640]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a9f      	ldr	r2, [pc, #636]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b9d      	ldr	r3, [pc, #628]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a9c      	ldr	r2, [pc, #624]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff f8b8 	bl	80016a0 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f8b4 	bl	80016a0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	@ 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e276      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002546:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x2a8>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff f8a4 	bl	80016a0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f8a0 	bl	80016a0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	@ 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e262      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800256e:	4b88      	ldr	r3, [pc, #544]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x2d0>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d060      	beq.n	800264c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d005      	beq.n	800259c <HAL_RCC_OscConfig+0x310>
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b0c      	cmp	r3, #12
 8002594:	d119      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d116      	bne.n	80025ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259c:	4b7c      	ldr	r3, [pc, #496]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_OscConfig+0x328>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e23f      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b76      	ldr	r3, [pc, #472]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4973      	ldr	r1, [pc, #460]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c8:	e040      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d023      	beq.n	800261a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7ff f85f 	bl	80016a0 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e6:	f7ff f85b 	bl	80016a0 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e21d      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f8:	4b65      	ldr	r3, [pc, #404]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b62      	ldr	r3, [pc, #392]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	061b      	lsls	r3, r3, #24
 8002612:	495f      	ldr	r1, [pc, #380]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	e018      	b.n	800264c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b5d      	ldr	r3, [pc, #372]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5c      	ldr	r2, [pc, #368]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002624:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002626:	f7ff f83b 	bl	80016a0 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800262e:	f7ff f837 	bl	80016a0 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e1f9      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002640:	4b53      	ldr	r3, [pc, #332]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d03c      	beq.n	80026d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002660:	4b4b      	ldr	r3, [pc, #300]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002666:	4a4a      	ldr	r2, [pc, #296]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7ff f816 	bl	80016a0 <HAL_GetTick>
 8002674:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7ff f812 	bl	80016a0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e1d4      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800268a:	4b41      	ldr	r3, [pc, #260]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ef      	beq.n	8002678 <HAL_RCC_OscConfig+0x3ec>
 8002698:	e01b      	b.n	80026d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269a:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800269c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe fff9 	bl	80016a0 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026b2:	f7fe fff5 	bl	80016a0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e1b7      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026c4:	4b32      	ldr	r3, [pc, #200]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1ef      	bne.n	80026b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80a6 	beq.w	800282c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fc:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_RCC_OscConfig+0x508>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d118      	bne.n	800274a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002718:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_RCC_OscConfig+0x508>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_RCC_OscConfig+0x508>)
 800271e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002722:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002724:	f7fe ffbc 	bl	80016a0 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272c:	f7fe ffb8 	bl	80016a0 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e17a      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x508>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_RCC_OscConfig+0x4d8>
 8002752:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002758:	4a0d      	ldr	r2, [pc, #52]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800275a:	f043 0301 	orr.w	r3, r3, #1
 800275e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002762:	e029      	b.n	80027b8 <HAL_RCC_OscConfig+0x52c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d115      	bne.n	8002798 <HAL_RCC_OscConfig+0x50c>
 800276c:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002772:	4a07      	ldr	r2, [pc, #28]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002774:	f043 0304 	orr.w	r3, r3, #4
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800277c:	4b04      	ldr	r3, [pc, #16]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 800277e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002782:	4a03      	ldr	r2, [pc, #12]	@ (8002790 <HAL_RCC_OscConfig+0x504>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800278c:	e014      	b.n	80027b8 <HAL_RCC_OscConfig+0x52c>
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	4b9c      	ldr	r3, [pc, #624]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	4a9b      	ldr	r2, [pc, #620]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a8:	4b98      	ldr	r3, [pc, #608]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80027aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ae:	4a97      	ldr	r2, [pc, #604]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80027b0:	f023 0304 	bic.w	r3, r3, #4
 80027b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d016      	beq.n	80027ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c0:	f7fe ff6e 	bl	80016a0 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe ff6a 	bl	80016a0 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e12a      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027de:	4b8b      	ldr	r3, [pc, #556]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ed      	beq.n	80027c8 <HAL_RCC_OscConfig+0x53c>
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ee:	f7fe ff57 	bl	80016a0 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027f4:	e00a      	b.n	800280c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f6:	f7fe ff53 	bl	80016a0 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002804:	4293      	cmp	r3, r2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e113      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800280c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ed      	bne.n	80027f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281a:	7ffb      	ldrb	r3, [r7, #31]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b7a      	ldr	r3, [pc, #488]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002824:	4a79      	ldr	r2, [pc, #484]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80fe 	beq.w	8002a32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800283a:	2b02      	cmp	r3, #2
 800283c:	f040 80d0 	bne.w	80029e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002840:	4b72      	ldr	r3, [pc, #456]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0203 	and.w	r2, r3, #3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002850:	429a      	cmp	r2, r3
 8002852:	d130      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	3b01      	subs	r3, #1
 8002860:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d127      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002870:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002880:	2a07      	cmp	r2, #7
 8002882:	bf14      	ite	ne
 8002884:	2201      	movne	r2, #1
 8002886:	2200      	moveq	r2, #0
 8002888:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288a:	4293      	cmp	r3, r2
 800288c:	d113      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	085b      	lsrs	r3, r3, #1
 800289a:	3b01      	subs	r3, #1
 800289c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	3b01      	subs	r3, #1
 80028b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d06e      	beq.n	8002994 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d069      	beq.n	8002990 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028bc:	4b53      	ldr	r3, [pc, #332]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d105      	bne.n	80028d4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028c8:	4b50      	ldr	r3, [pc, #320]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0ad      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a4b      	ldr	r2, [pc, #300]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80028de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e4:	f7fe fedc 	bl	80016a0 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ec:	f7fe fed8 	bl	80016a0 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e09a      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fe:	4b43      	ldr	r3, [pc, #268]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290a:	4b40      	ldr	r3, [pc, #256]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 800290c:	68da      	ldr	r2, [r3, #12]
 800290e:	4b40      	ldr	r3, [pc, #256]	@ (8002a10 <HAL_RCC_OscConfig+0x784>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800291a:	3a01      	subs	r2, #1
 800291c:	0112      	lsls	r2, r2, #4
 800291e:	4311      	orrs	r1, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002924:	0212      	lsls	r2, r2, #8
 8002926:	4311      	orrs	r1, r2
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	3a01      	subs	r2, #1
 8002930:	0552      	lsls	r2, r2, #21
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002938:	0852      	lsrs	r2, r2, #1
 800293a:	3a01      	subs	r2, #1
 800293c:	0652      	lsls	r2, r2, #25
 800293e:	4311      	orrs	r1, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002944:	0912      	lsrs	r2, r2, #4
 8002946:	0452      	lsls	r2, r2, #17
 8002948:	430a      	orrs	r2, r1
 800294a:	4930      	ldr	r1, [pc, #192]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002950:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a2d      	ldr	r2, [pc, #180]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002968:	f7fe fe9a 	bl	80016a0 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe fe96 	bl	80016a0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e058      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298e:	e050      	b.n	8002a32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e04f      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002994:	4b1d      	ldr	r3, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d148      	bne.n	8002a32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b17      	ldr	r3, [pc, #92]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a16      	ldr	r2, [pc, #88]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b8:	f7fe fe72 	bl	80016a0 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fe6e 	bl	80016a0 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e030      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x734>
 80029de:	e028      	b.n	8002a32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d023      	beq.n	8002a2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a08      	ldr	r2, [pc, #32]	@ (8002a0c <HAL_RCC_OscConfig+0x780>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fe55 	bl	80016a0 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f8:	e00c      	b.n	8002a14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fa:	f7fe fe51 	bl	80016a0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d905      	bls.n	8002a14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e013      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a14:	4b09      	ldr	r3, [pc, #36]	@ (8002a3c <HAL_RCC_OscConfig+0x7b0>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ec      	bne.n	80029fa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCC_OscConfig+0x7b0>)
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	4905      	ldr	r1, [pc, #20]	@ (8002a3c <HAL_RCC_OscConfig+0x7b0>)
 8002a26:	4b06      	ldr	r3, [pc, #24]	@ (8002a40 <HAL_RCC_OscConfig+0x7b4>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60cb      	str	r3, [r1, #12]
 8002a2c:	e001      	b.n	8002a32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	feeefffc 	.word	0xfeeefffc

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0e7      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d910      	bls.n	8002a88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b72      	ldr	r3, [pc, #456]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f023 0207 	bic.w	r2, r3, #7
 8002a6e:	4970      	ldr	r1, [pc, #448]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a76:	4b6e      	ldr	r3, [pc, #440]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0cf      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d010      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b66      	ldr	r3, [pc, #408]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d908      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa4:	4b63      	ldr	r3, [pc, #396]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4960      	ldr	r1, [pc, #384]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d04c      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d107      	bne.n	8002ada <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	4b5a      	ldr	r3, [pc, #360]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0a6      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ae2:	4b54      	ldr	r3, [pc, #336]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d115      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e09a      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002afa:	4b4e      	ldr	r3, [pc, #312]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d109      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08e      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e086      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b1a:	4b46      	ldr	r3, [pc, #280]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	4943      	ldr	r1, [pc, #268]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fdb8 	bl	80016a0 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fdb4 	bl	80016a0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e06e      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 020c 	and.w	r2, r3, #12
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1eb      	bne.n	8002b34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d208      	bcs.n	8002b8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b2e      	ldr	r3, [pc, #184]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	492b      	ldr	r1, [pc, #172]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b29      	ldr	r3, [pc, #164]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d210      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	4b25      	ldr	r3, [pc, #148]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 0207 	bic.w	r2, r3, #7
 8002ba0:	4923      	ldr	r1, [pc, #140]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <HAL_RCC_ClockConfig+0x1ec>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e036      	b.n	8002c28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	4918      	ldr	r1, [pc, #96]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be4:	4b13      	ldr	r3, [pc, #76]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4910      	ldr	r1, [pc, #64]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bf8:	f000 f824 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	490b      	ldr	r1, [pc, #44]	@ (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	4a09      	ldr	r2, [pc, #36]	@ (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002c16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c18:	4b09      	ldr	r3, [pc, #36]	@ (8002c40 <HAL_RCC_ClockConfig+0x1fc>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fe fcef 	bl	8001600 <HAL_InitTick>
 8002c22:	4603      	mov	r3, r0
 8002c24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c26:	7afb      	ldrb	r3, [r7, #11]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40022000 	.word	0x40022000
 8002c34:	40021000 	.word	0x40021000
 8002c38:	0800dacc 	.word	0x0800dacc
 8002c3c:	2000002c 	.word	0x2000002c
 8002c40:	20000030 	.word	0x20000030

08002c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b089      	sub	sp, #36	@ 0x24
 8002c48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c52:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d121      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d11e      	bne.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c78:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c84:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	f003 030f 	and.w	r3, r3, #15
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	e005      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c94:	4b2d      	ldr	r3, [pc, #180]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ca8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d102      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cbc:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	e004      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cc8:	4b23      	ldr	r3, [pc, #140]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d134      	bne.n	8002d3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0xa6>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ce8:	e005      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cec:	617b      	str	r3, [r7, #20]
      break;
 8002cee:	e005      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cf0:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cf2:	617b      	str	r3, [r7, #20]
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	617b      	str	r3, [r7, #20]
      break;
 8002cfa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cfc:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	091b      	lsrs	r3, r3, #4
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	3301      	adds	r3, #1
 8002d08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	fb03 f202 	mul.w	r2, r3, r2
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	0e5b      	lsrs	r3, r3, #25
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	@ 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	0800dae4 	.word	0x0800dae4
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	01770000 	.word	0x01770000

08002d5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d60:	4b03      	ldr	r3, [pc, #12]	@ (8002d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d62:	681b      	ldr	r3, [r3, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	2000002c 	.word	0x2000002c

08002d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d78:	f7ff fff0 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	4b06      	ldr	r3, [pc, #24]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	4904      	ldr	r1, [pc, #16]	@ (8002d9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d8a:	5ccb      	ldrb	r3, [r1, r3]
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	0800dadc 	.word	0x0800dadc

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002da4:	f7ff ffda 	bl	8002d5c <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0adb      	lsrs	r3, r3, #11
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4904      	ldr	r1, [pc, #16]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	0800dadc 	.word	0x0800dadc

08002dcc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002de4:	f7ff f9ee 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002de8:	6178      	str	r0, [r7, #20]
 8002dea:	e014      	b.n	8002e16 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	4a24      	ldr	r2, [pc, #144]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002df2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002df8:	4b22      	ldr	r3, [pc, #136]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e04:	f7ff f9de 	bl	80021c4 <HAL_PWREx_GetVoltageRange>
 8002e08:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e14:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e1c:	d10b      	bne.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	@ 0x80
 8002e22:	d919      	bls.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e28:	d902      	bls.n	8002e30 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	e013      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	e010      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b80      	cmp	r3, #128	@ 0x80
 8002e3a:	d902      	bls.n	8002e42 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	e00a      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b80      	cmp	r3, #128	@ 0x80
 8002e46:	d102      	bne.n	8002e4e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e48:	2302      	movs	r3, #2
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e004      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b70      	cmp	r3, #112	@ 0x70
 8002e52:	d101      	bne.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e54:	2301      	movs	r3, #1
 8002e56:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f023 0207 	bic.w	r2, r3, #7
 8002e60:	4909      	ldr	r1, [pc, #36]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e68:	4b07      	ldr	r3, [pc, #28]	@ (8002e88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40022000 	.word	0x40022000

08002e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e94:	2300      	movs	r3, #0
 8002e96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e98:	2300      	movs	r3, #0
 8002e9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d041      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eac:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002eb0:	d02a      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002eb2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002eb6:	d824      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002eb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ebc:	d008      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ebe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ec2:	d81e      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ec8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ecc:	d010      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ece:	e018      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed0:	4b86      	ldr	r3, [pc, #536]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	4a85      	ldr	r2, [pc, #532]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eda:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002edc:	e015      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f001 f829 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eee:	e00c      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3320      	adds	r3, #32
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f914 	bl	8004124 <RCCEx_PLLSAI2_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f00:	e003      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	74fb      	strb	r3, [r7, #19]
      break;
 8002f06:	e000      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f10:	4b76      	ldr	r3, [pc, #472]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f1e:	4973      	ldr	r1, [pc, #460]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f26:	e001      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d041      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f40:	d02a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f46:	d824      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f4c:	d008      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f52:	d81e      	bhi.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00a      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f5c:	d010      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f5e:	e018      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f60:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a61      	ldr	r2, [pc, #388]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e015      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 ffe1 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f7e:	e00c      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3320      	adds	r3, #32
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f001 f8cc 	bl	8004124 <RCCEx_PLLSAI2_Config>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f90:	e003      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	74fb      	strb	r3, [r7, #19]
      break;
 8002f96:	e000      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fa0:	4b52      	ldr	r3, [pc, #328]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fae:	494f      	ldr	r1, [pc, #316]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fb6:	e001      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a0 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fce:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe4:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	4a40      	ldr	r2, [pc, #256]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b3b      	ldr	r3, [pc, #236]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a3a      	ldr	r2, [pc, #232]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800300c:	f7fe fb48 	bl	80016a0 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003012:	e009      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003014:	f7fe fb44 	bl	80016a0 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d902      	bls.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	74fb      	strb	r3, [r7, #19]
        break;
 8003026:	e005      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003028:	4b31      	ldr	r3, [pc, #196]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ef      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003034:	7cfb      	ldrb	r3, [r7, #19]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d15c      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800303a:	4b2c      	ldr	r3, [pc, #176]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003040:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01f      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	429a      	cmp	r2, r3
 8003056:	d019      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003058:	4b24      	ldr	r3, [pc, #144]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003062:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003064:	4b21      	ldr	r3, [pc, #132]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306a:	4a20      	ldr	r2, [pc, #128]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003074:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003084:	4a19      	ldr	r2, [pc, #100]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe fb03 	bl	80016a0 <HAL_GetTick>
 800309a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309c:	e00b      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe faff 	bl	80016a0 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d902      	bls.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	74fb      	strb	r3, [r7, #19]
            break;
 80030b4:	e006      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b6:	4b0d      	ldr	r3, [pc, #52]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ec      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10c      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ca:	4b08      	ldr	r3, [pc, #32]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030da:	4904      	ldr	r1, [pc, #16]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030e2:	e009      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
 80030e8:	e006      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f8:	7c7b      	ldrb	r3, [r7, #17]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d105      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fe:	4b9e      	ldr	r3, [pc, #632]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003102:	4a9d      	ldr	r2, [pc, #628]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003108:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003116:	4b98      	ldr	r3, [pc, #608]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f023 0203 	bic.w	r2, r3, #3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003124:	4994      	ldr	r1, [pc, #592]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003138:	4b8f      	ldr	r3, [pc, #572]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f023 020c 	bic.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	498c      	ldr	r1, [pc, #560]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800315a:	4b87      	ldr	r3, [pc, #540]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	4983      	ldr	r1, [pc, #524]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800317c:	4b7e      	ldr	r3, [pc, #504]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	497b      	ldr	r1, [pc, #492]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800319e:	4b76      	ldr	r3, [pc, #472]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ac:	4972      	ldr	r1, [pc, #456]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031c0:	4b6d      	ldr	r3, [pc, #436]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ce:	496a      	ldr	r1, [pc, #424]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e2:	4b65      	ldr	r3, [pc, #404]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f0:	4961      	ldr	r1, [pc, #388]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00a      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003204:	4b5c      	ldr	r3, [pc, #368]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003212:	4959      	ldr	r1, [pc, #356]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003226:	4b54      	ldr	r3, [pc, #336]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003234:	4950      	ldr	r1, [pc, #320]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003236:	4313      	orrs	r3, r2
 8003238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003248:	4b4b      	ldr	r3, [pc, #300]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	4948      	ldr	r1, [pc, #288]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800326a:	4b43      	ldr	r3, [pc, #268]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	493f      	ldr	r1, [pc, #252]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d028      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800328c:	4b3a      	ldr	r3, [pc, #232]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003292:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800329a:	4937      	ldr	r1, [pc, #220]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032aa:	d106      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032ac:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a31      	ldr	r2, [pc, #196]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032b6:	60d3      	str	r3, [r2, #12]
 80032b8:	e011      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032c2:	d10c      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	2101      	movs	r1, #1
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fe36 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d028      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032ea:	4b23      	ldr	r3, [pc, #140]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f8:	491f      	ldr	r1, [pc, #124]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003308:	d106      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800330a:	4b1b      	ldr	r3, [pc, #108]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	4a1a      	ldr	r2, [pc, #104]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003314:	60d3      	str	r3, [r2, #12]
 8003316:	e011      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2101      	movs	r1, #1
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fe07 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003332:	7cfb      	ldrb	r3, [r7, #19]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003338:	7cfb      	ldrb	r3, [r7, #19]
 800333a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02b      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003356:	4908      	ldr	r1, [pc, #32]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003366:	d109      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a02      	ldr	r2, [pc, #8]	@ (8003378 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003372:	60d3      	str	r3, [r2, #12]
 8003374:	e014      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	3304      	adds	r3, #4
 800338a:	2101      	movs	r1, #1
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fdd5 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003396:	7cfb      	ldrb	r3, [r7, #19]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800339c:	7cfb      	ldrb	r3, [r7, #19]
 800339e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02f      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033ac:	4b2b      	ldr	r3, [pc, #172]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ba:	4928      	ldr	r1, [pc, #160]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	2102      	movs	r1, #2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fdb2 	bl	8003f3c <RCCEx_PLLSAI1_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d014      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	74bb      	strb	r3, [r7, #18]
 80033e6:	e011      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033f0:	d10c      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3320      	adds	r3, #32
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fe93 	bl	8004124 <RCCEx_PLLSAI2_Config>
 80033fe:	4603      	mov	r3, r0
 8003400:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003426:	490d      	ldr	r1, [pc, #52]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003440:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800344a:	4904      	ldr	r1, [pc, #16]	@ (800345c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800344c:	4313      	orrs	r3, r2
 800344e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003452:	7cbb      	ldrb	r3, [r7, #18]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40021000 	.word	0x40021000

08003460 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003472:	d13e      	bne.n	80034f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003474:	4bb2      	ldr	r3, [pc, #712]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800347e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003486:	d028      	beq.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800348e:	f200 8542 	bhi.w	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003498:	d005      	beq.n	80034a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034a0:	d00e      	beq.n	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80034a2:	f000 bd38 	b.w	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80034a6:	4ba6      	ldr	r3, [pc, #664]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	f040 8532 	bne.w	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80034b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ba:	61fb      	str	r3, [r7, #28]
      break;
 80034bc:	f000 bd2d 	b.w	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80034c0:	4b9f      	ldr	r3, [pc, #636]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	f040 8527 	bne.w	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80034d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80034d4:	61fb      	str	r3, [r7, #28]
      break;
 80034d6:	f000 bd22 	b.w	8003f1e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034da:	4b99      	ldr	r3, [pc, #612]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034e6:	f040 851c 	bne.w	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80034ea:	4b96      	ldr	r3, [pc, #600]	@ (8003744 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80034ec:	61fb      	str	r3, [r7, #28]
      break;
 80034ee:	f000 bd18 	b.w	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034f2:	4b93      	ldr	r3, [pc, #588]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0303 	and.w	r3, r3, #3
 80034fa:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d036      	beq.n	8003570 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b03      	cmp	r3, #3
 8003506:	d840      	bhi.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d003      	beq.n	8003516 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d020      	beq.n	8003556 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003514:	e039      	b.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003516:	4b8a      	ldr	r3, [pc, #552]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d116      	bne.n	8003550 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003522:	4b87      	ldr	r3, [pc, #540]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800352e:	4b84      	ldr	r3, [pc, #528]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	f003 030f 	and.w	r3, r3, #15
 8003538:	e005      	b.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800353a:	4b81      	ldr	r3, [pc, #516]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	4a80      	ldr	r2, [pc, #512]	@ (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800354e:	e01f      	b.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003550:	2300      	movs	r3, #0
 8003552:	61bb      	str	r3, [r7, #24]
      break;
 8003554:	e01c      	b.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003556:	4b7a      	ldr	r3, [pc, #488]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800355e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003562:	d102      	bne.n	800356a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003564:	4b79      	ldr	r3, [pc, #484]	@ (800374c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003566:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003568:	e012      	b.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
      break;
 800356e:	e00f      	b.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003570:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800357c:	d102      	bne.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800357e:	4b74      	ldr	r3, [pc, #464]	@ (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003580:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003582:	e005      	b.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
      break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	61bb      	str	r3, [r7, #24]
      break;
 800358e:	bf00      	nop
    }

    switch(PeriphClk)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003596:	f000 80dd 	beq.w	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80035a0:	f200 84c1 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035aa:	f000 80d3 	beq.w	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035b4:	f200 84b7 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035be:	f000 835f 	beq.w	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035c8:	f200 84ad 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d2:	f000 847e 	beq.w	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035dc:	f200 84a3 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035e6:	f000 82cd 	beq.w	8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035f0:	f200 8499 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	f000 80ab 	beq.w	8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003604:	f200 848f 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360e:	f000 8090 	beq.w	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003618:	f200 8485 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003622:	d07f      	beq.n	8003724 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800362a:	f200 847c 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003634:	f000 8403 	beq.w	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363e:	f200 8472 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003648:	f000 83af 	beq.w	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003652:	f200 8468 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800365c:	f000 8379 	beq.w	8003d52 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003666:	f200 845e 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b80      	cmp	r3, #128	@ 0x80
 800366e:	f000 8344 	beq.w	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b80      	cmp	r3, #128	@ 0x80
 8003676:	f200 8456 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b20      	cmp	r3, #32
 800367e:	d84b      	bhi.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 844f 	beq.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	2b1f      	cmp	r3, #31
 800368e:	f200 844a 	bhi.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003692:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003698:	08003881 	.word	0x08003881
 800369c:	080038ef 	.word	0x080038ef
 80036a0:	08003f27 	.word	0x08003f27
 80036a4:	08003983 	.word	0x08003983
 80036a8:	08003f27 	.word	0x08003f27
 80036ac:	08003f27 	.word	0x08003f27
 80036b0:	08003f27 	.word	0x08003f27
 80036b4:	08003a09 	.word	0x08003a09
 80036b8:	08003f27 	.word	0x08003f27
 80036bc:	08003f27 	.word	0x08003f27
 80036c0:	08003f27 	.word	0x08003f27
 80036c4:	08003f27 	.word	0x08003f27
 80036c8:	08003f27 	.word	0x08003f27
 80036cc:	08003f27 	.word	0x08003f27
 80036d0:	08003f27 	.word	0x08003f27
 80036d4:	08003a81 	.word	0x08003a81
 80036d8:	08003f27 	.word	0x08003f27
 80036dc:	08003f27 	.word	0x08003f27
 80036e0:	08003f27 	.word	0x08003f27
 80036e4:	08003f27 	.word	0x08003f27
 80036e8:	08003f27 	.word	0x08003f27
 80036ec:	08003f27 	.word	0x08003f27
 80036f0:	08003f27 	.word	0x08003f27
 80036f4:	08003f27 	.word	0x08003f27
 80036f8:	08003f27 	.word	0x08003f27
 80036fc:	08003f27 	.word	0x08003f27
 8003700:	08003f27 	.word	0x08003f27
 8003704:	08003f27 	.word	0x08003f27
 8003708:	08003f27 	.word	0x08003f27
 800370c:	08003f27 	.word	0x08003f27
 8003710:	08003f27 	.word	0x08003f27
 8003714:	08003b03 	.word	0x08003b03
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b40      	cmp	r3, #64	@ 0x40
 800371c:	f000 82c1 	beq.w	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003720:	f000 bc01 	b.w	8003f26 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003724:	69b9      	ldr	r1, [r7, #24]
 8003726:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800372a:	f000 fdd9 	bl	80042e0 <RCCEx_GetSAIxPeriphCLKFreq>
 800372e:	61f8      	str	r0, [r7, #28]
      break;
 8003730:	e3fa      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003732:	69b9      	ldr	r1, [r7, #24]
 8003734:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003738:	f000 fdd2 	bl	80042e0 <RCCEx_GetSAIxPeriphCLKFreq>
 800373c:	61f8      	str	r0, [r7, #28]
      break;
 800373e:	e3f3      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003740:	40021000 	.word	0x40021000
 8003744:	000bb800 	.word	0x000bb800
 8003748:	0800dae4 	.word	0x0800dae4
 800374c:	00f42400 	.word	0x00f42400
 8003750:	01770000 	.word	0x01770000
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003754:	4ba9      	ldr	r3, [pc, #676]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003766:	d00c      	beq.n	8003782 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800376e:	d87f      	bhi.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003776:	d04e      	beq.n	8003816 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800377e:	d01d      	beq.n	80037bc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003780:	e076      	b.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003782:	4b9e      	ldr	r3, [pc, #632]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	d172      	bne.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800378e:	4b9b      	ldr	r3, [pc, #620]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800379a:	4b98      	ldr	r3, [pc, #608]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	e005      	b.n	80037b2 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80037a6:	4b95      	ldr	r3, [pc, #596]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	4a93      	ldr	r2, [pc, #588]	@ (8003a00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80037b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b8:	61fb      	str	r3, [r7, #28]
          break;
 80037ba:	e05b      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80037bc:	4b8f      	ldr	r3, [pc, #572]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80037c8:	d156      	bne.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80037ca:	4b8c      	ldr	r3, [pc, #560]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d6:	d14f      	bne.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80037d8:	4b88      	ldr	r3, [pc, #544]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	0a1b      	lsrs	r3, r3, #8
 80037de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037e2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	fb03 f202 	mul.w	r2, r3, r2
 80037ec:	4b83      	ldr	r3, [pc, #524]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	3301      	adds	r3, #1
 80037f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80037fe:	4b7f      	ldr	r3, [pc, #508]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	0d5b      	lsrs	r3, r3, #21
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	3301      	adds	r3, #1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	61fb      	str	r3, [r7, #28]
          break;
 8003814:	e030      	b.n	8003878 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003816:	4b79      	ldr	r3, [pc, #484]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003822:	d12b      	bne.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003824:	4b75      	ldr	r3, [pc, #468]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800382c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003830:	d124      	bne.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003832:	4b72      	ldr	r3, [pc, #456]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800383c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	fb03 f202 	mul.w	r2, r3, r2
 8003846:	4b6d      	ldr	r3, [pc, #436]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	091b      	lsrs	r3, r3, #4
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	3301      	adds	r3, #1
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003858:	4b68      	ldr	r3, [pc, #416]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	3301      	adds	r3, #1
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	61fb      	str	r3, [r7, #28]
          break;
 800386e:	e005      	b.n	800387c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003870:	bf00      	nop
 8003872:	e359      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003874:	bf00      	nop
 8003876:	e357      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003878:	bf00      	nop
 800387a:	e355      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800387c:	bf00      	nop
        break;
 800387e:	e353      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003880:	4b5e      	ldr	r3, [pc, #376]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b03      	cmp	r3, #3
 8003890:	d827      	bhi.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003892:	a201      	add	r2, pc, #4	@ (adr r2, 8003898 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003898:	080038a9 	.word	0x080038a9
 800389c:	080038b1 	.word	0x080038b1
 80038a0:	080038b9 	.word	0x080038b9
 80038a4:	080038cd 	.word	0x080038cd
          frequency = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7ff fa7a 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 80038ac:	61f8      	str	r0, [r7, #28]
          break;
 80038ae:	e01d      	b.n	80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80038b0:	f7ff f9c8 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 80038b4:	61f8      	str	r0, [r7, #28]
          break;
 80038b6:	e019      	b.n	80038ec <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038b8:	4b50      	ldr	r3, [pc, #320]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c4:	d10f      	bne.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80038c6:	4b4f      	ldr	r3, [pc, #316]	@ (8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80038c8:	61fb      	str	r3, [r7, #28]
          break;
 80038ca:	e00c      	b.n	80038e6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038cc:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d107      	bne.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80038da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038de:	61fb      	str	r3, [r7, #28]
          break;
 80038e0:	e003      	b.n	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80038e2:	bf00      	nop
 80038e4:	e320      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038e6:	bf00      	nop
 80038e8:	e31e      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038ea:	bf00      	nop
        break;
 80038ec:	e31c      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80038ee:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	2b0c      	cmp	r3, #12
 80038fe:	d83a      	bhi.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003900:	a201      	add	r2, pc, #4	@ (adr r2, 8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003906:	bf00      	nop
 8003908:	0800393d 	.word	0x0800393d
 800390c:	08003977 	.word	0x08003977
 8003910:	08003977 	.word	0x08003977
 8003914:	08003977 	.word	0x08003977
 8003918:	08003945 	.word	0x08003945
 800391c:	08003977 	.word	0x08003977
 8003920:	08003977 	.word	0x08003977
 8003924:	08003977 	.word	0x08003977
 8003928:	0800394d 	.word	0x0800394d
 800392c:	08003977 	.word	0x08003977
 8003930:	08003977 	.word	0x08003977
 8003934:	08003977 	.word	0x08003977
 8003938:	08003961 	.word	0x08003961
          frequency = HAL_RCC_GetPCLK1Freq();
 800393c:	f7ff fa1a 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003940:	61f8      	str	r0, [r7, #28]
          break;
 8003942:	e01d      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003944:	f7ff f97e 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003948:	61f8      	str	r0, [r7, #28]
          break;
 800394a:	e019      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003958:	d10f      	bne.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 800395a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800395c:	61fb      	str	r3, [r7, #28]
          break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003960:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d107      	bne.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003972:	61fb      	str	r3, [r7, #28]
          break;
 8003974:	e003      	b.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003976:	bf00      	nop
 8003978:	e2d6      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800397a:	bf00      	nop
 800397c:	e2d4      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800397e:	bf00      	nop
        break;
 8003980:	e2d2      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003982:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b30      	cmp	r3, #48	@ 0x30
 8003992:	d021      	beq.n	80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b30      	cmp	r3, #48	@ 0x30
 8003998:	d829      	bhi.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2b20      	cmp	r3, #32
 800399e:	d011      	beq.n	80039c4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d823      	bhi.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d004      	beq.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80039b2:	e01c      	b.n	80039ee <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7ff f9de 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 80039b8:	61f8      	str	r0, [r7, #28]
          break;
 80039ba:	e01d      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80039bc:	f7ff f942 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 80039c0:	61f8      	str	r0, [r7, #28]
          break;
 80039c2:	e019      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039c4:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d0:	d10f      	bne.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80039d4:	61fb      	str	r3, [r7, #28]
          break;
 80039d6:	e00c      	b.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80039d8:	4b08      	ldr	r3, [pc, #32]	@ (80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d107      	bne.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80039e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ea:	61fb      	str	r3, [r7, #28]
          break;
 80039ec:	e003      	b.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80039ee:	bf00      	nop
 80039f0:	e29a      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039f2:	bf00      	nop
 80039f4:	e298      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039f6:	bf00      	nop
        break;
 80039f8:	e296      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	0800dae4 	.word	0x0800dae4
 8003a04:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003a08:	4b9b      	ldr	r3, [pc, #620]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a18:	d021      	beq.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a1e:	d829      	bhi.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	2b80      	cmp	r3, #128	@ 0x80
 8003a24:	d011      	beq.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b80      	cmp	r3, #128	@ 0x80
 8003a2a:	d823      	bhi.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d004      	beq.n	8003a42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003a38:	e01c      	b.n	8003a74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a3a:	f7ff f99b 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003a3e:	61f8      	str	r0, [r7, #28]
          break;
 8003a40:	e01d      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a42:	f7ff f8ff 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003a46:	61f8      	str	r0, [r7, #28]
          break;
 8003a48:	e019      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d10f      	bne.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003a58:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003a5a:	61fb      	str	r3, [r7, #28]
          break;
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a5e:	4b86      	ldr	r3, [pc, #536]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003a6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a70:	61fb      	str	r3, [r7, #28]
          break;
 8003a72:	e003      	b.n	8003a7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003a74:	bf00      	nop
 8003a76:	e257      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a78:	bf00      	nop
 8003a7a:	e255      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a7c:	bf00      	nop
        break;
 8003a7e:	e253      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003a80:	4b7d      	ldr	r3, [pc, #500]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a92:	d025      	beq.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a9a:	d82c      	bhi.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aa2:	d013      	beq.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003aaa:	d824      	bhi.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ab8:	d004      	beq.n	8003ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003aba:	e01c      	b.n	8003af6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003abc:	f7ff f95a 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003ac0:	61f8      	str	r0, [r7, #28]
          break;
 8003ac2:	e01d      	b.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ac4:	f7ff f8be 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003ac8:	61f8      	str	r0, [r7, #28]
          break;
 8003aca:	e019      	b.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003acc:	4b6a      	ldr	r3, [pc, #424]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad8:	d10f      	bne.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003ada:	4b68      	ldr	r3, [pc, #416]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003adc:	61fb      	str	r3, [r7, #28]
          break;
 8003ade:	e00c      	b.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ae0:	4b65      	ldr	r3, [pc, #404]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d107      	bne.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af2:	61fb      	str	r3, [r7, #28]
          break;
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003af6:	bf00      	nop
 8003af8:	e216      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003afa:	bf00      	nop
 8003afc:	e214      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003afe:	bf00      	nop
        break;
 8003b00:	e212      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003b02:	4b5d      	ldr	r3, [pc, #372]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b14:	d025      	beq.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b1c:	d82c      	bhi.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b24:	d013      	beq.n	8003b4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b2c:	d824      	bhi.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d004      	beq.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3a:	d004      	beq.n	8003b46 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003b3c:	e01c      	b.n	8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7ff f919 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003b42:	61f8      	str	r0, [r7, #28]
          break;
 8003b44:	e01d      	b.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b46:	f7ff f87d 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003b4a:	61f8      	str	r0, [r7, #28]
          break;
 8003b4c:	e019      	b.n	8003b82 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5a:	d10f      	bne.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003b5c:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003b5e:	61fb      	str	r3, [r7, #28]
          break;
 8003b60:	e00c      	b.n	8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003b62:	4b45      	ldr	r3, [pc, #276]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b74:	61fb      	str	r3, [r7, #28]
          break;
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003b78:	bf00      	nop
 8003b7a:	e1d5      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b7c:	bf00      	nop
 8003b7e:	e1d3      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b80:	bf00      	nop
        break;
 8003b82:	e1d1      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003b84:	4b3c      	ldr	r3, [pc, #240]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b96:	d00c      	beq.n	8003bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b9e:	d864      	bhi.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ba6:	d008      	beq.n	8003bba <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bae:	d030      	beq.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003bb0:	e05b      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003bb2:	f7ff f847 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003bb6:	61f8      	str	r0, [r7, #28]
          break;
 8003bb8:	e05c      	b.n	8003c74 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003bba:	4b2f      	ldr	r3, [pc, #188]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bc6:	d152      	bne.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d04c      	beq.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003bd4:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bde:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	fb03 f202 	mul.w	r2, r3, r2
 8003be8:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	091b      	lsrs	r3, r3, #4
 8003bee:	f003 0307 	and.w	r3, r3, #7
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	0e5b      	lsrs	r3, r3, #25
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	3301      	adds	r3, #1
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	61fb      	str	r3, [r7, #28]
          break;
 8003c10:	e02d      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003c12:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1e:	d128      	bne.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003c20:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d022      	beq.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003c2c:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c36:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	fb03 f202 	mul.w	r2, r3, r2
 8003c40:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003c52:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	0e5b      	lsrs	r3, r3, #25
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	61fb      	str	r3, [r7, #28]
          break;
 8003c68:	e003      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003c6a:	bf00      	nop
 8003c6c:	e15c      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c6e:	bf00      	nop
 8003c70:	e15a      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c72:	bf00      	nop
        break;
 8003c74:	e158      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003c76:	bf00      	nop
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003c80:	4b9d      	ldr	r3, [pc, #628]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c8a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003c92:	f7ff f885 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8003c96:	61f8      	str	r0, [r7, #28]
        break;
 8003c98:	e146      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c9a:	f7fe ffd3 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003c9e:	61f8      	str	r0, [r7, #28]
        break;
 8003ca0:	e142      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003ca2:	4b95      	ldr	r3, [pc, #596]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	d013      	beq.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cbc:	d819      	bhi.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cca:	d004      	beq.n	8003cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003ccc:	e011      	b.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cce:	f7ff f851 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003cd2:	61f8      	str	r0, [r7, #28]
          break;
 8003cd4:	e010      	b.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7fe ffb5 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003cda:	61f8      	str	r0, [r7, #28]
          break;
 8003cdc:	e00c      	b.n	8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cde:	4b86      	ldr	r3, [pc, #536]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cea:	d104      	bne.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003cec:	4b83      	ldr	r3, [pc, #524]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003cee:	61fb      	str	r3, [r7, #28]
          break;
 8003cf0:	e001      	b.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003cf2:	bf00      	nop
 8003cf4:	e118      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cf6:	bf00      	nop
        break;
 8003cf8:	e116      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003cfa:	4b7f      	ldr	r3, [pc, #508]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d00:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d0c:	d013      	beq.n	8003d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d14:	d819      	bhi.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d22:	d004      	beq.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003d24:	e011      	b.n	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d26:	f7ff f825 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003d2a:	61f8      	str	r0, [r7, #28]
          break;
 8003d2c:	e010      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d2e:	f7fe ff89 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003d32:	61f8      	str	r0, [r7, #28]
          break;
 8003d34:	e00c      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d36:	4b70      	ldr	r3, [pc, #448]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d104      	bne.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003d44:	4b6d      	ldr	r3, [pc, #436]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d46:	61fb      	str	r3, [r7, #28]
          break;
 8003d48:	e001      	b.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003d4a:	bf00      	nop
 8003d4c:	e0ec      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d4e:	bf00      	nop
        break;
 8003d50:	e0ea      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003d52:	4b69      	ldr	r3, [pc, #420]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d64:	d013      	beq.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d6c:	d819      	bhi.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003d7c:	e011      	b.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d7e:	f7fe fff9 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003d82:	61f8      	str	r0, [r7, #28]
          break;
 8003d84:	e010      	b.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe ff5d 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8003d8a:	61f8      	str	r0, [r7, #28]
          break;
 8003d8c:	e00c      	b.n	8003da8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d9a:	d104      	bne.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003d9c:	4b57      	ldr	r3, [pc, #348]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d9e:	61fb      	str	r3, [r7, #28]
          break;
 8003da0:	e001      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003da2:	bf00      	nop
 8003da4:	e0c0      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003da6:	bf00      	nop
        break;
 8003da8:	e0be      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003daa:	4b53      	ldr	r3, [pc, #332]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dbc:	d02c      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dc4:	d833      	bhi.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dcc:	d01a      	beq.n	8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dd4:	d82b      	bhi.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003de2:	d004      	beq.n	8003dee <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003de4:	e023      	b.n	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003de6:	f7fe ffc5 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003dea:	61f8      	str	r0, [r7, #28]
          break;
 8003dec:	e026      	b.n	8003e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003dee:	4b42      	ldr	r3, [pc, #264]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d11a      	bne.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003dfc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e00:	61fb      	str	r3, [r7, #28]
          break;
 8003e02:	e016      	b.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e04:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e10:	d111      	bne.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003e12:	4b3a      	ldr	r3, [pc, #232]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003e14:	61fb      	str	r3, [r7, #28]
          break;
 8003e16:	e00e      	b.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e18:	4b37      	ldr	r3, [pc, #220]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d109      	bne.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2a:	61fb      	str	r3, [r7, #28]
          break;
 8003e2c:	e005      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003e2e:	bf00      	nop
 8003e30:	e07a      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e32:	bf00      	nop
 8003e34:	e078      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e36:	bf00      	nop
 8003e38:	e076      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e3a:	bf00      	nop
        break;
 8003e3c:	e074      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e44:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e50:	d02c      	beq.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e58:	d833      	bhi.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e60:	d01a      	beq.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e68:	d82b      	bhi.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e76:	d004      	beq.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003e78:	e023      	b.n	8003ec2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e7a:	f7fe ff7b 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003e7e:	61f8      	str	r0, [r7, #28]
          break;
 8003e80:	e026      	b.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003e82:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d11a      	bne.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003e90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e94:	61fb      	str	r3, [r7, #28]
          break;
 8003e96:	e016      	b.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e98:	4b17      	ldr	r3, [pc, #92]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea4:	d111      	bne.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003ea8:	61fb      	str	r3, [r7, #28]
          break;
 8003eaa:	e00e      	b.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d109      	bne.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ebe:	61fb      	str	r3, [r7, #28]
          break;
 8003ec0:	e005      	b.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003ec2:	bf00      	nop
 8003ec4:	e030      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ec6:	bf00      	nop
 8003ec8:	e02e      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003eca:	bf00      	nop
 8003ecc:	e02c      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ece:	bf00      	nop
        break;
 8003ed0:	e02a      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003ed2:	4b09      	ldr	r3, [pc, #36]	@ (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eea:	d009      	beq.n	8003f00 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003eec:	e012      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7fe ff41 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8003ef2:	61f8      	str	r0, [r7, #28]
          break;
 8003ef4:	e00e      	b.n	8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f00:	4b0c      	ldr	r3, [pc, #48]	@ (8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003f10:	61fb      	str	r3, [r7, #28]
          break;
 8003f12:	bf00      	nop
        break;
 8003f14:	e008      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003f16:	bf00      	nop
 8003f18:	e006      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e004      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e002      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003f22:	bf00      	nop
 8003f24:	e000      	b.n	8003f28 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003f26:	bf00      	nop
    }
  }

  return(frequency);
 8003f28:	69fb      	ldr	r3, [r7, #28]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	00f42400 	.word	0x00f42400

08003f3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f4a:	4b75      	ldr	r3, [pc, #468]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d018      	beq.n	8003f88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f56:	4b72      	ldr	r3, [pc, #456]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 0203 	and.w	r2, r3, #3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10d      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
       ||
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
       ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d047      	beq.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e044      	b.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d018      	beq.n	8003fc2 <RCCEx_PLLSAI1_Config+0x86>
 8003f90:	2b03      	cmp	r3, #3
 8003f92:	d825      	bhi.n	8003fe0 <RCCEx_PLLSAI1_Config+0xa4>
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d002      	beq.n	8003f9e <RCCEx_PLLSAI1_Config+0x62>
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d009      	beq.n	8003fb0 <RCCEx_PLLSAI1_Config+0x74>
 8003f9c:	e020      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9e:	4b60      	ldr	r3, [pc, #384]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d11d      	bne.n	8003fe6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fae:	e01a      	b.n	8003fe6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d116      	bne.n	8003fea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc0:	e013      	b.n	8003fea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fc2:	4b57      	ldr	r3, [pc, #348]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10f      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fce:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d109      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fde:	e006      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe4:	e004      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e002      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fea:	bf00      	nop
 8003fec:	e000      	b.n	8003ff0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	430b      	orrs	r3, r1
 800400c:	4944      	ldr	r1, [pc, #272]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004012:	7bfb      	ldrb	r3, [r7, #15]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d17d      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004018:	4b41      	ldr	r3, [pc, #260]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a40      	ldr	r2, [pc, #256]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004022:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fd fb3c 	bl	80016a0 <HAL_GetTick>
 8004028:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800402a:	e009      	b.n	8004040 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800402c:	f7fd fb38 	bl	80016a0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d902      	bls.n	8004040 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	73fb      	strb	r3, [r7, #15]
        break;
 800403e:	e005      	b.n	800404c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004040:	4b37      	ldr	r3, [pc, #220]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ef      	bne.n	800402c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d160      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d111      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004058:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004060:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6892      	ldr	r2, [r2, #8]
 8004068:	0211      	lsls	r1, r2, #8
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68d2      	ldr	r2, [r2, #12]
 800406e:	0912      	lsrs	r2, r2, #4
 8004070:	0452      	lsls	r2, r2, #17
 8004072:	430a      	orrs	r2, r1
 8004074:	492a      	ldr	r1, [pc, #168]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	610b      	str	r3, [r1, #16]
 800407a:	e027      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d112      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004082:	4b27      	ldr	r3, [pc, #156]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800408a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6892      	ldr	r2, [r2, #8]
 8004092:	0211      	lsls	r1, r2, #8
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6912      	ldr	r2, [r2, #16]
 8004098:	0852      	lsrs	r2, r2, #1
 800409a:	3a01      	subs	r2, #1
 800409c:	0552      	lsls	r2, r2, #21
 800409e:	430a      	orrs	r2, r1
 80040a0:	491f      	ldr	r1, [pc, #124]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	610b      	str	r3, [r1, #16]
 80040a6:	e011      	b.n	80040cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6892      	ldr	r2, [r2, #8]
 80040b8:	0211      	lsls	r1, r2, #8
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6952      	ldr	r2, [r2, #20]
 80040be:	0852      	lsrs	r2, r2, #1
 80040c0:	3a01      	subs	r2, #1
 80040c2:	0652      	lsls	r2, r2, #25
 80040c4:	430a      	orrs	r2, r1
 80040c6:	4916      	ldr	r1, [pc, #88]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a13      	ldr	r2, [pc, #76]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d8:	f7fd fae2 	bl	80016a0 <HAL_GetTick>
 80040dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040de:	e009      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e0:	f7fd fade 	bl	80016a0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d902      	bls.n	80040f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	73fb      	strb	r3, [r7, #15]
          break;
 80040f2:	e005      	b.n	8004100 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ef      	beq.n	80040e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	4904      	ldr	r1, [pc, #16]	@ (8004120 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	4313      	orrs	r3, r2
 8004112:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40021000 	.word	0x40021000

08004124 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004132:	4b6a      	ldr	r3, [pc, #424]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d018      	beq.n	8004170 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800413e:	4b67      	ldr	r3, [pc, #412]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f003 0203 	and.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d10d      	bne.n	800416a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
       ||
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004156:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
       ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d047      	beq.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	e044      	b.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b03      	cmp	r3, #3
 8004176:	d018      	beq.n	80041aa <RCCEx_PLLSAI2_Config+0x86>
 8004178:	2b03      	cmp	r3, #3
 800417a:	d825      	bhi.n	80041c8 <RCCEx_PLLSAI2_Config+0xa4>
 800417c:	2b01      	cmp	r3, #1
 800417e:	d002      	beq.n	8004186 <RCCEx_PLLSAI2_Config+0x62>
 8004180:	2b02      	cmp	r3, #2
 8004182:	d009      	beq.n	8004198 <RCCEx_PLLSAI2_Config+0x74>
 8004184:	e020      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004186:	4b55      	ldr	r3, [pc, #340]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d11d      	bne.n	80041ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004196:	e01a      	b.n	80041ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004198:	4b50      	ldr	r3, [pc, #320]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d116      	bne.n	80041d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041a8:	e013      	b.n	80041d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041aa:	4b4c      	ldr	r3, [pc, #304]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10f      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041b6:	4b49      	ldr	r3, [pc, #292]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041c6:	e006      	b.n	80041d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	73fb      	strb	r3, [r7, #15]
      break;
 80041cc:	e004      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10d      	bne.n	80041fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041de:	4b3f      	ldr	r3, [pc, #252]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6819      	ldr	r1, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	430b      	orrs	r3, r1
 80041f4:	4939      	ldr	r1, [pc, #228]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d167      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004200:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a35      	ldr	r2, [pc, #212]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7fd fa48 	bl	80016a0 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004214:	f7fd fa44 	bl	80016a0 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
        break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004228:	4b2c      	ldr	r3, [pc, #176]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ef      	bne.n	8004214 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d14a      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004240:	4b26      	ldr	r3, [pc, #152]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	6892      	ldr	r2, [r2, #8]
 8004250:	0211      	lsls	r1, r2, #8
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	0912      	lsrs	r2, r2, #4
 8004258:	0452      	lsls	r2, r2, #17
 800425a:	430a      	orrs	r2, r1
 800425c:	491f      	ldr	r1, [pc, #124]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800425e:	4313      	orrs	r3, r2
 8004260:	614b      	str	r3, [r1, #20]
 8004262:	e011      	b.n	8004288 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004264:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004266:	695b      	ldr	r3, [r3, #20]
 8004268:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800426c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6912      	ldr	r2, [r2, #16]
 800427a:	0852      	lsrs	r2, r2, #1
 800427c:	3a01      	subs	r2, #1
 800427e:	0652      	lsls	r2, r2, #25
 8004280:	430a      	orrs	r2, r1
 8004282:	4916      	ldr	r1, [pc, #88]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a13      	ldr	r2, [pc, #76]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800428e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd fa04 	bl	80016a0 <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800429a:	e009      	b.n	80042b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800429c:	f7fd fa00 	bl	80016a0 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d902      	bls.n	80042b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	73fb      	strb	r3, [r7, #15]
          break;
 80042ae:	e005      	b.n	80042bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ef      	beq.n	800429c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	4904      	ldr	r1, [pc, #16]	@ (80042dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042fc:	d10c      	bne.n	8004318 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80042fe:	4b6e      	ldr	r3, [pc, #440]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004304:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004308:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004310:	d112      	bne.n	8004338 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004312:	4b6a      	ldr	r3, [pc, #424]	@ (80044bc <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004314:	61fb      	str	r3, [r7, #28]
 8004316:	e00f      	b.n	8004338 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431e:	d10b      	bne.n	8004338 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004320:	4b65      	ldr	r3, [pc, #404]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004326:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800432a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004332:	d101      	bne.n	8004338 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004334:	4b62      	ldr	r3, [pc, #392]	@ (80044c0 <RCCEx_GetSAIxPeriphCLKFreq+0x1e0>)
 8004336:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 80b4 	bne.w	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800434a:	d003      	beq.n	8004354 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004352:	d135      	bne.n	80043c0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004354:	4b58      	ldr	r3, [pc, #352]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004360:	f040 80a1 	bne.w	80044a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004364:	4b54      	ldr	r3, [pc, #336]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 809a 	beq.w	80044a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004372:	4b51      	ldr	r3, [pc, #324]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	3301      	adds	r3, #1
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004386:	4b4c      	ldr	r3, [pc, #304]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	0a1b      	lsrs	r3, r3, #8
 800438c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004390:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004398:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80043a4:	2311      	movs	r3, #17
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e001      	b.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80043aa:	2307      	movs	r3, #7
 80043ac:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	fb03 f202 	mul.w	r2, r3, r2
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80043be:	e072      	b.n	80044a6 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d133      	bne.n	800442e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80043c6:	4b3c      	ldr	r3, [pc, #240]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043d2:	d169      	bne.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80043d4:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d063      	beq.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80043e0:	4b35      	ldr	r3, [pc, #212]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	3301      	adds	r3, #1
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80043f4:	4b30      	ldr	r3, [pc, #192]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	0a1b      	lsrs	r3, r3, #8
 80043fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043fe:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004406:	4b2c      	ldr	r3, [pc, #176]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004412:	2311      	movs	r3, #17
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e001      	b.n	800441c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004418:	2307      	movs	r3, #7
 800441a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	fb03 f202 	mul.w	r2, r3, r2
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e03c      	b.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004434:	d003      	beq.n	800443e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800443c:	d134      	bne.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800443e:	4b1e      	ldr	r3, [pc, #120]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800444a:	d12d      	bne.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800444c:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d027      	beq.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004458:	4b17      	ldr	r3, [pc, #92]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	3301      	adds	r3, #1
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	fbb2 f3f3 	udiv	r3, r2, r3
 800446a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800446c:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004476:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800447e:	4b0e      	ldr	r3, [pc, #56]	@ (80044b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800448a:	2311      	movs	r3, #17
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e001      	b.n	8004494 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004490:	2307      	movs	r3, #7
 8004492:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	fb03 f202 	mul.w	r2, r3, r2
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]
 80044a4:	e000      	b.n	80044a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80044a6:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80044a8:	69fb      	ldr	r3, [r7, #28]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3724      	adds	r7, #36	@ 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	01770000 	.word	0x01770000
 80044c0:	001fff68 	.word	0x001fff68

080044c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e155      	b.n	8004782 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fc fe90 	bl	8001210 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 fa29 	bl	8004948 <SAI_Disable>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e140      	b.n	8004782 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	2b02      	cmp	r3, #2
 800450e:	d00c      	beq.n	800452a <HAL_SAI_Init+0x66>
 8004510:	2b02      	cmp	r3, #2
 8004512:	d80d      	bhi.n	8004530 <HAL_SAI_Init+0x6c>
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_SAI_Init+0x5a>
 8004518:	2b01      	cmp	r3, #1
 800451a:	d003      	beq.n	8004524 <HAL_SAI_Init+0x60>
 800451c:	e008      	b.n	8004530 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
      break;
 8004522:	e008      	b.n	8004536 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004524:	2310      	movs	r3, #16
 8004526:	61fb      	str	r3, [r7, #28]
      break;
 8004528:	e005      	b.n	8004536 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800452a:	2320      	movs	r3, #32
 800452c:	61fb      	str	r3, [r7, #28]
      break;
 800452e:	e002      	b.n	8004536 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
      break;
 8004534:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d81d      	bhi.n	800457a <HAL_SAI_Init+0xb6>
 800453e:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <HAL_SAI_Init+0x80>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004555 	.word	0x08004555
 8004548:	0800455b 	.word	0x0800455b
 800454c:	08004563 	.word	0x08004563
 8004550:	0800456b 	.word	0x0800456b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
      break;
 8004558:	e012      	b.n	8004580 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800455a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800455e:	617b      	str	r3, [r7, #20]
      break;
 8004560:	e00e      	b.n	8004580 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004562:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004566:	617b      	str	r3, [r7, #20]
      break;
 8004568:	e00a      	b.n	8004580 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800456a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800456e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f043 0301 	orr.w	r3, r3, #1
 8004576:	61fb      	str	r3, [r7, #28]
      break;
 8004578:	e002      	b.n	8004580 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
      break;
 800457e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a81      	ldr	r2, [pc, #516]	@ (800478c <HAL_SAI_Init+0x2c8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_SAI_Init+0xd0>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a80      	ldr	r2, [pc, #512]	@ (8004790 <HAL_SAI_Init+0x2cc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d103      	bne.n	800459c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004594:	4a7f      	ldr	r2, [pc, #508]	@ (8004794 <HAL_SAI_Init+0x2d0>)
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e002      	b.n	80045a2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800459c:	4a7e      	ldr	r2, [pc, #504]	@ (8004798 <HAL_SAI_Init+0x2d4>)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d041      	beq.n	800462e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a77      	ldr	r2, [pc, #476]	@ (800478c <HAL_SAI_Init+0x2c8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_SAI_Init+0xfa>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a75      	ldr	r2, [pc, #468]	@ (8004790 <HAL_SAI_Init+0x2cc>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d105      	bne.n	80045ca <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80045be:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80045c2:	f7fe ff4d 	bl	8003460 <HAL_RCCEx_GetPeriphCLKFreq>
 80045c6:	6138      	str	r0, [r7, #16]
 80045c8:	e004      	b.n	80045d4 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80045ca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80045ce:	f7fe ff47 	bl	8003460 <HAL_RCCEx_GetPeriphCLKFreq>
 80045d2:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	461a      	mov	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	025b      	lsls	r3, r3, #9
 80045e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ea:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a6b      	ldr	r2, [pc, #428]	@ (800479c <HAL_SAI_Init+0x2d8>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	08da      	lsrs	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	4b67      	ldr	r3, [pc, #412]	@ (800479c <HAL_SAI_Init+0x2d8>)
 80045fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004602:	08da      	lsrs	r2, r3, #3
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	1aca      	subs	r2, r1, r3
 800460e:	2a08      	cmp	r2, #8
 8004610:	d904      	bls.n	800461c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004620:	2b04      	cmp	r3, #4
 8004622:	d104      	bne.n	800462e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	085a      	lsrs	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_SAI_Init+0x17a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d109      	bne.n	8004652 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_SAI_Init+0x186>
 8004646:	2300      	movs	r3, #0
 8004648:	e001      	b.n	800464e <HAL_SAI_Init+0x18a>
 800464a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e008      	b.n	8004664 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004656:	2b01      	cmp	r3, #1
 8004658:	d102      	bne.n	8004660 <HAL_SAI_Init+0x19c>
 800465a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800465e:	e000      	b.n	8004662 <HAL_SAI_Init+0x19e>
 8004660:	2300      	movs	r3, #0
 8004662:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6819      	ldr	r1, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	4b4c      	ldr	r3, [pc, #304]	@ (80047a0 <HAL_SAI_Init+0x2dc>)
 8004670:	400b      	ands	r3, r1
 8004672:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6819      	ldr	r1, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004688:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468e:	431a      	orrs	r2, r3
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 800469c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80046a8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	051b      	lsls	r3, r3, #20
 80046b0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80046c8:	f023 030f 	bic.w	r3, r3, #15
 80046cc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6859      	ldr	r1, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	699a      	ldr	r2, [r3, #24]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e2:	431a      	orrs	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	6899      	ldr	r1, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_SAI_Init+0x2e0>)
 80046f8:	400b      	ands	r3, r1
 80046fa:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6899      	ldr	r1, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004706:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800470c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004712:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004718:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	3b01      	subs	r3, #1
 8004720:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004722:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68d9      	ldr	r1, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800473a:	400b      	ands	r3, r1
 800473c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68d9      	ldr	r1, [r3, #12]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004754:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	3b01      	subs	r3, #1
 800475c:	021b      	lsls	r3, r3, #8
 800475e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40015404 	.word	0x40015404
 8004790:	40015424 	.word	0x40015424
 8004794:	40015400 	.word	0x40015400
 8004798:	40015800 	.word	0x40015800
 800479c:	cccccccd 	.word	0xcccccccd
 80047a0:	ff05c010 	.word	0xff05c010
 80047a4:	fff88000 	.word	0xfff88000

080047a8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d002      	beq.n	80047c2 <HAL_SAI_Receive_DMA+0x1a>
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e074      	b.n	80048b0 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d16d      	bne.n	80048ae <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_SAI_Receive_DMA+0x38>
 80047dc:	2302      	movs	r3, #2
 80047de:	e067      	b.n	80048b0 <HAL_SAI_Receive_DMA+0x108>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	88fa      	ldrh	r2, [r7, #6]
 80047fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2222      	movs	r2, #34	@ 0x22
 800480a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004812:	4a29      	ldr	r2, [pc, #164]	@ (80048b8 <HAL_SAI_Receive_DMA+0x110>)
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	4a28      	ldr	r2, [pc, #160]	@ (80048bc <HAL_SAI_Receive_DMA+0x114>)
 800481c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004822:	4a27      	ldr	r2, [pc, #156]	@ (80048c0 <HAL_SAI_Receive_DMA+0x118>)
 8004824:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482a:	2200      	movs	r2, #0
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	331c      	adds	r3, #28
 8004838:	4619      	mov	r1, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800483e:	461a      	mov	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004846:	f7fd f925 	bl	8001a94 <HAL_DMA_Start_IT>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e029      	b.n	80048b0 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800485c:	2100      	movs	r1, #0
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f83a 	bl	80048d8 <SAI_InterruptFlag>
 8004864:	4601      	mov	r1, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004882:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d107      	bne.n	80048a2 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048a0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	e000      	b.n	80048b0 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80048ae:	2302      	movs	r3, #2
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08004a1b 	.word	0x08004a1b
 80048bc:	080049bd 	.word	0x080049bd
 80048c0:	08004a37 	.word	0x08004a37

080048c4 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	460b      	mov	r3, r1
 80048e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d103      	bne.n	80048f6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f043 0308 	orr.w	r3, r3, #8
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d10b      	bne.n	8004916 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004902:	2b03      	cmp	r3, #3
 8004904:	d003      	beq.n	800490e <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d103      	bne.n	8004916 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f043 0310 	orr.w	r3, r3, #16
 8004914:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d003      	beq.n	8004926 <SAI_InterruptFlag+0x4e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d104      	bne.n	8004930 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	e003      	b.n	8004938 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f043 0304 	orr.w	r3, r3, #4
 8004936:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004938:	68fb      	ldr	r3, [r7, #12]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004950:	4b18      	ldr	r3, [pc, #96]	@ (80049b4 <SAI_Disable+0x6c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a18      	ldr	r2, [pc, #96]	@ (80049b8 <SAI_Disable+0x70>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0b1b      	lsrs	r3, r3, #12
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004972:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10a      	bne.n	8004990 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004980:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	72fb      	strb	r3, [r7, #11]
      break;
 800498e:	e009      	b.n	80049a4 <SAI_Disable+0x5c>
    }
    count--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3b01      	subs	r3, #1
 8004994:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1e7      	bne.n	8004974 <SAI_Disable+0x2c>

  return status;
 80049a4:	7afb      	ldrb	r3, [r7, #11]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000002c 	.word	0x2000002c
 80049b8:	95cbec1b 	.word	0x95cbec1b

080049bc <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b20      	cmp	r3, #32
 80049d0:	d01c      	beq.n	8004a0c <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80049e0:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049ea:	2100      	movs	r1, #0
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff ff73 	bl	80048d8 <SAI_InterruptFlag>
 80049f2:	4603      	mov	r3, r0
 80049f4:	43d9      	mvns	r1, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	400a      	ands	r2, r1
 8004a02:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f7fc f9e7 	bl	8000de0 <HAL_SAI_RxCpltCallback>
#endif
}
 8004a12:	bf00      	nop
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7fc f9f1 	bl	8000e10 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004a62:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff ff6f 	bl	8004948 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff22 	bl	80048c4 <HAL_SAI_ErrorCallback>
#endif
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e02d      	b.n	8004af6 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d105      	bne.n	8004ab2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7fc fa5f 	bl	8000f70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2203      	movs	r2, #3
 8004ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f820 	bl	8004b00 <HAL_SD_InitCard>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e015      	b.n	8004af6 <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fd9f 	bl	8005614 <HAL_SD_ConfigWideBusOperation>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e00a      	b.n	8004af6 <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b00:	b5b0      	push	{r4, r5, r7, lr}
 8004b02:	b08e      	sub	sp, #56	@ 0x38
 8004b04:	af04      	add	r7, sp, #16
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004b1c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004b20:	f7fe fc9e 	bl	8003460 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b24:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e07b      	b.n	8004c38 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	09db      	lsrs	r3, r3, #7
 8004b44:	4a3e      	ldr	r2, [pc, #248]	@ (8004c40 <HAL_SD_InitCard+0x140>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	3b02      	subs	r3, #2
 8004b4e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681d      	ldr	r5, [r3, #0]
 8004b54:	466c      	mov	r4, sp
 8004b56:	f107 0314 	add.w	r3, r7, #20
 8004b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f002 fe9d 	bl	80078a8 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b7c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f002 fedb 	bl	800793e <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b96:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004ba4:	4a27      	ldr	r2, [pc, #156]	@ (8004c44 <HAL_SD_InitCard+0x144>)
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	3301      	adds	r3, #1
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc fd82 	bl	80016b8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 ffd1 	bl	8005b5c <SD_PowerON>
 8004bba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02e      	b.n	8004c38 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 fefe 	bl	80059dc <SD_InitCard>
 8004be0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00b      	beq.n	8004c00 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e01b      	b.n	8004c38 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f002 ff2b 	bl	8007a64 <SDMMC_CmdBlockLength>
 8004c0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00f      	beq.n	8004c36 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c48 <HAL_SD_InitCard+0x148>)
 8004c1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e000      	b.n	8004c38 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3728      	adds	r7, #40	@ 0x28
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c40:	014f8b59 	.word	0x014f8b59
 8004c44:	00012110 	.word	0x00012110
 8004c48:	004005ff 	.word	0x004005ff

08004c4c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08c      	sub	sp, #48	@ 0x30
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c68:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0a9      	b.n	8004dc8 <HAL_SD_ReadBlocks_DMA+0x17c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	f040 80a2 	bne.w	8004dc6 <HAL_SD_ReadBlocks_DMA+0x17a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d907      	bls.n	8004ca6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e090      	b.n	8004dc8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2203      	movs	r2, #3
 8004caa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	62da      	str	r2, [r3, #44]	@ 0x2c

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	4a45      	ldr	r2, [pc, #276]	@ (8004dd0 <HAL_SD_ReadBlocks_DMA+0x184>)
 8004cbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	4a44      	ldr	r2, [pc, #272]	@ (8004dd4 <HAL_SD_ReadBlocks_DMA+0x188>)
 8004cc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	2200      	movs	r2, #0
 8004ccc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3380      	adds	r3, #128	@ 0x80
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	025b      	lsls	r3, r3, #9
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	f7fc fed7 	bl	8001a94 <HAL_DMA_Start_IT>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00f      	beq.n	8004d0c <HAL_SD_ReadBlocks_DMA+0xc0>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a39      	ldr	r2, [pc, #228]	@ (8004dd8 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004cf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e05d      	b.n	8004dc8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
      hsd->pRxBuffPtr = pData;
      hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d002      	beq.n	8004d2a <HAL_SD_ReadBlocks_DMA+0xde>
      {
        add *= 512U;
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	025b      	lsls	r3, r3, #9
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d2e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	025b      	lsls	r3, r3, #9
 8004d34:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d36:	2390      	movs	r3, #144	@ 0x90
 8004d38:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	623b      	str	r3, [r7, #32]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      config.DPSM          = SDMMC_DPSM_DISABLE;
#else
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f107 0210 	add.w	r2, r7, #16
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f002 fe5b 	bl	8007a0c <SDMMC_ConfigData>
      hsd->Instance->IDMABASE0 = (uint32_t) pData ;
      hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d90a      	bls.n	8004d72 <HAL_SD_ReadBlocks_DMA+0x126>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2282      	movs	r2, #130	@ 0x82
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f002 febf 	bl	8007aec <SDMMC_CmdReadMultiBlock>
 8004d6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004d70:	e009      	b.n	8004d86 <HAL_SD_ReadBlocks_DMA+0x13a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2281      	movs	r2, #129	@ 0x81
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f002 fe92 	bl	8007aa8 <SDMMC_CmdReadSingleBlock>
 8004d84:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d012      	beq.n	8004db2 <HAL_SD_ReadBlocks_DMA+0x166>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a11      	ldr	r2, [pc, #68]	@ (8004dd8 <HAL_SD_ReadBlocks_DMA+0x18c>)
 8004d92:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e00a      	b.n	8004dc8 <HAL_SD_ReadBlocks_DMA+0x17c>
      }

      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8004dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

      return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	e000      	b.n	8004dc8 <HAL_SD_ReadBlocks_DMA+0x17c>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8004dc6:	2302      	movs	r3, #2
  }
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3730      	adds	r7, #48	@ 0x30
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080057f7 	.word	0x080057f7
 8004dd4:	08005869 	.word	0x08005869
 8004dd8:	004005ff 	.word	0x004005ff

08004ddc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08c      	sub	sp, #48	@ 0x30
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0ac      	b.n	8004f5e <HAL_SD_WriteBlocks_DMA+0x182>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 80a5 	bne.w	8004f5c <HAL_SD_WriteBlocks_DMA+0x180>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	441a      	add	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d907      	bls.n	8004e36 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e093      	b.n	8004f5e <HAL_SD_WriteBlocks_DMA+0x182>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2203      	movs	r2, #3
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    hsd->pTxBuffPtr = pData;
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
#else
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4a:	4a47      	ldr	r2, [pc, #284]	@ (8004f68 <HAL_SD_WriteBlocks_DMA+0x18c>)
 8004e4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e52:	4a46      	ldr	r2, [pc, #280]	@ (8004f6c <HAL_SD_WriteBlocks_DMA+0x190>)
 8004e54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d002      	beq.n	8004e6c <HAL_SD_WriteBlocks_DMA+0x90>
    {
      add *= 512U;
 8004e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e68:	025b      	lsls	r3, r3, #9
 8004e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d90a      	bls.n	8004e88 <HAL_SD_WriteBlocks_DMA+0xac>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22a0      	movs	r2, #160	@ 0xa0
 8004e76:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f002 fe78 	bl	8007b74 <SDMMC_CmdWriteMultiBlock>
 8004e84:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004e86:	e009      	b.n	8004e9c <HAL_SD_WriteBlocks_DMA+0xc0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2290      	movs	r2, #144	@ 0x90
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e94:	4618      	mov	r0, r3
 8004e96:	f002 fe4b 	bl	8007b30 <SDMMC_CmdWriteSingleBlock>
 8004e9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d012      	beq.n	8004ec8 <HAL_SD_WriteBlocks_DMA+0xec>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a32      	ldr	r2, [pc, #200]	@ (8004f70 <HAL_SD_WriteBlocks_DMA+0x194>)
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e04a      	b.n	8004f5e <HAL_SD_WriteBlocks_DMA+0x182>
    }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0208 	orr.w	r2, r2, #8
 8004ed6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3380      	adds	r3, #128	@ 0x80
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	025b      	lsls	r3, r3, #9
 8004eea:	089b      	lsrs	r3, r3, #2
 8004eec:	f7fc fdd2 	bl	8001a94 <HAL_DMA_Start_IT>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d012      	beq.n	8004f1c <HAL_SD_WriteBlocks_DMA+0x140>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a1d      	ldr	r2, [pc, #116]	@ (8004f70 <HAL_SD_WriteBlocks_DMA+0x194>)
 8004efc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f02:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e020      	b.n	8004f5e <HAL_SD_WriteBlocks_DMA+0x182>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f20:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f28:	2390      	movs	r3, #144	@ 0x90
 8004f2a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8004f34:	2301      	movs	r3, #1
 8004f36:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f107 0210 	add.w	r2, r7, #16
 8004f40:	4611      	mov	r1, r2
 8004f42:	4618      	mov	r0, r3
 8004f44:	f002 fd62 	bl	8007a0c <SDMMC_ConfigData>

      /* Enable SD Error interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 021a 	orr.w	r2, r2, #26
 8004f56:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
      /* Enable transfer interrupts */
      __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

      return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_SD_WriteBlocks_DMA+0x182>
    }
#endif
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3730      	adds	r7, #48	@ 0x30
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	080057cd 	.word	0x080057cd
 8004f6c:	08005869 	.word	0x08005869
 8004f70:	004005ff 	.word	0x004005ff

08004f74 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <HAL_SD_IRQHandler+0x2e>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fff4 	bl	8005f88 <SD_Read_IT>
 8004fa0:	e155      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 808f 	beq.w	80050d0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8004fca:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004fce:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d039      	beq.n	800505e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 0302 	and.w	r3, r3, #2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <HAL_SD_IRQHandler+0x8a>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d011      	beq.n	8005022 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f002 fdd8 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 8005008:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f91f 	bl	8005260 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f240 523a 	movw	r2, #1338	@ 0x53a
 800502a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <HAL_SD_IRQHandler+0xda>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f003 fa38 	bl	80084c4 <HAL_SD_RxCpltCallback>
 8005054:	e0fb      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f003 fa2a 	bl	80084b0 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 800505c:	e0f7      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80f2 	beq.w	800524e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d011      	beq.n	8005098 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f002 fd9d 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 800507e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d008      	beq.n	8005098 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f8e4 	bl	8005260 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 80d5 	bne.w	800524e <HAL_SD_IRQHandler+0x2da>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f040 80cf 	bne.w	800524e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0208 	bic.w	r2, r2, #8
 80050be:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f003 f9f1 	bl	80084b0 <HAL_SD_TxCpltCallback>
}
 80050ce:	e0be      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_SD_IRQHandler+0x17c>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d003      	beq.n	80050f0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 ff9e 	bl	800602a <SD_Write_IT>
 80050ee:	e0ae      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80a7 	beq.w	800524e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	f043 0202 	orr.w	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f043 0208 	orr.w	r2, r3, #8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d005      	beq.n	800514e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	f043 0220 	orr.w	r2, r3, #32
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d005      	beq.n	8005168 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005160:	f043 0210 	orr.w	r2, r3, #16
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005170:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005180:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4618      	mov	r0, r3
 8005188:	f002 fd16 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 800518c:	4602      	mov	r2, r0
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 f855 	bl	8005260 <HAL_SD_ErrorCallback>
}
 80051b6:	e04a      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d045      	beq.n	800524e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d104      	bne.n	80051d6 <HAL_SD_IRQHandler+0x262>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d011      	beq.n	80051fa <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051da:	4a1f      	ldr	r2, [pc, #124]	@ (8005258 <HAL_SD_IRQHandler+0x2e4>)
 80051dc:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fc fcf4 	bl	8001bd0 <HAL_DMA_Abort_IT>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d02f      	beq.n	800524e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fb84 	bl	8005900 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80051f8:	e029      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d104      	bne.n	800520e <HAL_SD_IRQHandler+0x29a>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d011      	beq.n	8005232 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	4a12      	ldr	r2, [pc, #72]	@ (800525c <HAL_SD_IRQHandler+0x2e8>)
 8005214:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	4618      	mov	r0, r3
 800521c:	f7fc fcd8 	bl	8001bd0 <HAL_DMA_Abort_IT>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d013      	beq.n	800524e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fb9f 	bl	800596e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005230:	e00d      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f003 f928 	bl	800849c <HAL_SD_AbortCallback>
}
 800524c:	e7ff      	b.n	800524e <HAL_SD_IRQHandler+0x2da>
 800524e:	bf00      	nop
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	08005901 	.word	0x08005901
 800525c:	0800596f 	.word	0x0800596f

08005260 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005282:	0f9b      	lsrs	r3, r3, #30
 8005284:	b2da      	uxtb	r2, r3
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800528e:	0e9b      	lsrs	r3, r3, #26
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	b2da      	uxtb	r2, r3
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a0:	0e1b      	lsrs	r3, r3, #24
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052d4:	0d1b      	lsrs	r3, r3, #20
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052f2:	0bdb      	lsrs	r3, r3, #15
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005304:	0b9b      	lsrs	r3, r3, #14
 8005306:	b2db      	uxtb	r3, r3
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	b2da      	uxtb	r2, r3
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005316:	0b5b      	lsrs	r3, r3, #13
 8005318:	b2db      	uxtb	r3, r3
 800531a:	f003 0301 	and.w	r3, r3, #1
 800531e:	b2da      	uxtb	r2, r3
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005328:	0b1b      	lsrs	r3, r3, #12
 800532a:	b2db      	uxtb	r3, r3
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	b2da      	uxtb	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005340:	2b00      	cmp	r3, #0
 8005342:	d163      	bne.n	800540c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005348:	009a      	lsls	r2, r3, #2
 800534a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005354:	0f92      	lsrs	r2, r2, #30
 8005356:	431a      	orrs	r2, r3
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005360:	0edb      	lsrs	r3, r3, #27
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	b2da      	uxtb	r2, r3
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005372:	0e1b      	lsrs	r3, r3, #24
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	b2da      	uxtb	r2, r3
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005384:	0d5b      	lsrs	r3, r3, #21
 8005386:	b2db      	uxtb	r3, r3
 8005388:	f003 0307 	and.w	r3, r3, #7
 800538c:	b2da      	uxtb	r2, r3
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005396:	0c9b      	lsrs	r3, r3, #18
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0307 	and.w	r3, r3, #7
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053a8:	0bdb      	lsrs	r3, r3, #15
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	7e1b      	ldrb	r3, [r3, #24]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	3302      	adds	r3, #2
 80053cc:	2201      	movs	r2, #1
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80053d6:	fb03 f202 	mul.w	r2, r3, r2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	7a1b      	ldrb	r3, [r3, #8]
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	f003 030f 	and.w	r3, r3, #15
 80053e8:	2201      	movs	r2, #1
 80053ea:	409a      	lsls	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80053f8:	0a52      	lsrs	r2, r2, #9
 80053fa:	fb03 f202 	mul.w	r2, r3, r2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005408:	661a      	str	r2, [r3, #96]	@ 0x60
 800540a:	e031      	b.n	8005470 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005410:	2b01      	cmp	r3, #1
 8005412:	d11d      	bne.n	8005450 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005422:	0c1b      	lsrs	r3, r3, #16
 8005424:	431a      	orrs	r2, r3
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	3301      	adds	r3, #1
 8005430:	029a      	lsls	r2, r3, #10
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005444:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	661a      	str	r2, [r3, #96]	@ 0x60
 800544e:	e00f      	b.n	8005470 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a58      	ldr	r2, [pc, #352]	@ (80055b8 <HAL_SD_GetCardCSD+0x344>)
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e09d      	b.n	80055ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005474:	0b9b      	lsrs	r3, r3, #14
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005486:	09db      	lsrs	r3, r3, #7
 8005488:	b2db      	uxtb	r3, r3
 800548a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a8:	0fdb      	lsrs	r3, r3, #31
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b4:	0f5b      	lsrs	r3, r3, #29
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	b2da      	uxtb	r2, r3
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c6:	0e9b      	lsrs	r3, r3, #26
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d8:	0d9b      	lsrs	r3, r3, #22
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ea:	0d5b      	lsrs	r3, r3, #21
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	b2da      	uxtb	r2, r3
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	0bdb      	lsrs	r3, r3, #15
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	b2da      	uxtb	r2, r3
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	0b9b      	lsrs	r3, r3, #14
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	b2da      	uxtb	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005542:	0b5b      	lsrs	r3, r3, #13
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	b2da      	uxtb	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005556:	0b1b      	lsrs	r3, r3, #12
 8005558:	b2db      	uxtb	r3, r3
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	b2da      	uxtb	r2, r3
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556a:	0a9b      	lsrs	r3, r3, #10
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	b2da      	uxtb	r2, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557e:	0a1b      	lsrs	r3, r3, #8
 8005580:	b2db      	uxtb	r3, r3
 8005582:	f003 0303 	and.w	r3, r3, #3
 8005586:	b2da      	uxtb	r2, r3
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	b2db      	uxtb	r3, r3
 8005596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800559a:	b2da      	uxtb	r2, r3
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	004005ff 	.word	0x004005ff

080055bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005614:	b5b0      	push	{r4, r5, r7, lr}
 8005616:	b090      	sub	sp, #64	@ 0x40
 8005618:	af04      	add	r7, sp, #16
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2203      	movs	r2, #3
 8005628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005630:	2b03      	cmp	r3, #3
 8005632:	d02e      	beq.n	8005692 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800563a:	d106      	bne.n	800564a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005640:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	@ 0x38
 8005648:	e029      	b.n	800569e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005650:	d10a      	bne.n	8005668 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fb38 	bl	8005cc8 <SD_WideBus_Enable>
 8005658:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38
 8005666:	e01a      	b.n	800569e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fb75 	bl	8005d5e <SD_WideBus_Disable>
 8005674:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	639a      	str	r2, [r3, #56]	@ 0x38
 8005682:	e00c      	b.n	800569e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005688:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005690:	e005      	b.n	800569e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a35      	ldr	r2, [pc, #212]	@ (8005780 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80056ac:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80056b4:	e042      	b.n	800573c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80056b6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80056ba:	f7fd fed1 	bl	8003460 <HAL_RCCEx_GetPeriphCLKFreq>
 80056be:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d031      	beq.n	800572a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	695b      	ldr	r3, [r3, #20]
 80056e0:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	3302      	adds	r3, #2
 80056e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ee:	4a25      	ldr	r2, [pc, #148]	@ (8005784 <HAL_SD_ConfigWideBusOperation+0x170>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d907      	bls.n	8005704 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80056f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f6:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_SD_ConfigWideBusOperation+0x174>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	0ddb      	lsrs	r3, r3, #23
 80056fe:	3b02      	subs	r3, #2
 8005700:	623b      	str	r3, [r7, #32]
 8005702:	e002      	b.n	800570a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681d      	ldr	r5, [r3, #0]
 800570e:	466c      	mov	r4, sp
 8005710:	f107 0318 	add.w	r3, r7, #24
 8005714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005722:	4628      	mov	r0, r5
 8005724:	f002 f8c0 	bl	80078a8 <SDMMC_Init>
 8005728:	e008      	b.n	800573c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005744:	4618      	mov	r0, r3
 8005746:	f002 f98d 	bl	8007a64 <SDMMC_CmdBlockLength>
 800574a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a0a      	ldr	r2, [pc, #40]	@ (8005780 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005758:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005774:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005778:	4618      	mov	r0, r3
 800577a:	3730      	adds	r7, #48	@ 0x30
 800577c:	46bd      	mov	sp, r7
 800577e:	bdb0      	pop	{r4, r5, r7, pc}
 8005780:	004005ff 	.word	0x004005ff
 8005784:	017d7840 	.word	0x017d7840
 8005788:	55e63b89 	.word	0x55e63b89

0800578c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005798:	f107 030c 	add.w	r3, r7, #12
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa6a 	bl	8005c78 <SD_SendStatus>
 80057a4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	0a5b      	lsrs	r3, r3, #9
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80057c2:	693b      	ldr	r3, [r7, #16]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3718      	adds	r7, #24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005802:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005808:	2b82      	cmp	r3, #130	@ 0x82
 800580a:	d111      	bne.n	8005830 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4618      	mov	r0, r3
 8005812:	f002 f9d1 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 8005816:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d008      	beq.n	8005830 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fd18 	bl	8005260 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0208 	bic.w	r2, r2, #8
 800583e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f002 fe33 	bl	80084c4 <HAL_SD_RxCpltCallback>
#endif
}
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005874:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  RxErrorCode = hsd->hdmarx->ErrorCode;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800587c:	613b      	str	r3, [r7, #16]
  TxErrorCode = hsd->hdmatx->ErrorCode;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005884:	60fb      	str	r3, [r7, #12]
  if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d002      	beq.n	8005892 <SD_DMAError+0x2a>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d12d      	bne.n	80058ee <SD_DMAError+0x86>
  {
    /* Clear All flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a19      	ldr	r2, [pc, #100]	@ (80058fc <SD_DMAError+0x94>)
 8005898:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable All interrupts */
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80058a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

    hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	639a      	str	r2, [r3, #56]	@ 0x38
    CardState = HAL_SD_GetCardState(hsd);
 80058b6:	6978      	ldr	r0, [r7, #20]
 80058b8:	f7ff ff68 	bl	800578c <HAL_SD_GetCardState>
 80058bc:	60b8      	str	r0, [r7, #8]
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b06      	cmp	r3, #6
 80058c2:	d002      	beq.n	80058ca <SD_DMAError+0x62>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d10a      	bne.n	80058e0 <SD_DMAError+0x78>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f002 f972 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	431a      	orrs	r2, r3
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    hsd->State= HAL_SD_STATE_READY;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->Context = SD_CONTEXT_NONE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->ErrorCallback(hsd);
#else
  HAL_SD_ErrorCallback(hsd);
 80058ee:	6978      	ldr	r0, [r7, #20]
 80058f0:	f7ff fcb6 	bl	8005260 <HAL_SD_ErrorCallback>
#endif
}
 80058f4:	bf00      	nop
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	004005ff 	.word	0x004005ff

08005900 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005916:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff ff37 	bl	800578c <HAL_SD_GetCardState>
 800591e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b06      	cmp	r3, #6
 8005932:	d002      	beq.n	800593a <SD_DMATxAbort+0x3a>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b05      	cmp	r3, #5
 8005938:	d10a      	bne.n	8005950 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f002 f93a 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800594a:	431a      	orrs	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f002 fd9f 	bl	800849c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800595e:	e002      	b.n	8005966 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fc7d 	bl	8005260 <HAL_SD_ErrorCallback>
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005984:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f7ff ff00 	bl	800578c <HAL_SD_GetCardState>
 800598c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b06      	cmp	r3, #6
 80059a0:	d002      	beq.n	80059a8 <SD_DMARxAbort+0x3a>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d10a      	bne.n	80059be <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 f903 	bl	8007bb8 <SDMMC_CmdStopTransfer>
 80059b2:	4602      	mov	r2, r0
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f002 fd68 	bl	800849c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80059cc:	e002      	b.n	80059d4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f7ff fc46 	bl	8005260 <HAL_SD_ErrorCallback>
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b090      	sub	sp, #64	@ 0x40
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80059e4:	2301      	movs	r3, #1
 80059e6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 ffb5 	bl	800795c <SDMMC_GetPowerState>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d102      	bne.n	80059fe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059f8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80059fc:	e0aa      	b.n	8005b54 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d02f      	beq.n	8005a66 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f002 f9de 	bl	8007dcc <SDMMC_CmdSendCID>
 8005a10:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <SD_InitCard+0x40>
    {
      return errorstate;
 8005a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1a:	e09b      	b.n	8005b54 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 ffdf 	bl	80079e6 <SDMMC_GetResponse>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2104      	movs	r1, #4
 8005a34:	4618      	mov	r0, r3
 8005a36:	f001 ffd6 	bl	80079e6 <SDMMC_GetResponse>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2108      	movs	r1, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 ffcd 	bl	80079e6 <SDMMC_GetResponse>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	210c      	movs	r1, #12
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 ffc4 	bl	80079e6 <SDMMC_GetResponse>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	d00d      	beq.n	8005a8a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f107 020e 	add.w	r2, r7, #14
 8005a76:	4611      	mov	r1, r2
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f002 f9e4 	bl	8007e46 <SDMMC_CmdSetRelAdd>
 8005a7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <SD_InitCard+0xae>
    {
      return errorstate;
 8005a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a88:	e064      	b.n	8005b54 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	d036      	beq.n	8005b00 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a92:	89fb      	ldrh	r3, [r7, #14]
 8005a94:	461a      	mov	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	f002 f9ae 	bl	8007e08 <SDMMC_CmdSendCSD>
 8005aac:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ab6:	e04d      	b.n	8005b54 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2100      	movs	r1, #0
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 ff91 	bl	80079e6 <SDMMC_GetResponse>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2104      	movs	r1, #4
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 ff88 	bl	80079e6 <SDMMC_GetResponse>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2108      	movs	r1, #8
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 ff7f 	bl	80079e6 <SDMMC_GetResponse>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	210c      	movs	r1, #12
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 ff76 	bl	80079e6 <SDMMC_GetResponse>
 8005afa:	4602      	mov	r2, r0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2104      	movs	r1, #4
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 ff6d 	bl	80079e6 <SDMMC_GetResponse>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	0d1a      	lsrs	r2, r3, #20
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005b14:	f107 0310 	add.w	r3, r7, #16
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff fbaa 	bl	8005274 <HAL_SD_GetCardCSD>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b26:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005b2a:	e013      	b.n	8005b54 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	2200      	movs	r2, #0
 8005b38:	461c      	mov	r4, r3
 8005b3a:	4615      	mov	r5, r2
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	462b      	mov	r3, r5
 8005b40:	4608      	mov	r0, r1
 8005b42:	f002 f85b 	bl	8007bfc <SDMMC_CmdSelDesel>
 8005b46:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <SD_InitCard+0x176>
  {
    return errorstate;
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b50:	e000      	b.n	8005b54 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3740      	adds	r7, #64	@ 0x40
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bdb0      	pop	{r4, r5, r7, pc}

08005b5c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f002 f864 	bl	8007c42 <SDMMC_CmdGoIdleState>
 8005b7a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	e072      	b.n	8005c6c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f002 f877 	bl	8007c7e <SDMMC_CmdOperCond>
 8005b90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00d      	beq.n	8005bb4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f002 f84d 	bl	8007c42 <SDMMC_CmdGoIdleState>
 8005ba8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <SD_PowerON+0x5e>
    {
      return errorstate;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	e05b      	b.n	8005c6c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d137      	bne.n	8005c32 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f002 f877 	bl	8007cbc <SDMMC_CmdAppCommand>
 8005bce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d02d      	beq.n	8005c32 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bd6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005bda:	e047      	b.n	8005c6c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f002 f86a 	bl	8007cbc <SDMMC_CmdAppCommand>
 8005be8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <SD_PowerON+0x98>
    {
      return errorstate;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	e03b      	b.n	8005c6c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	491e      	ldr	r1, [pc, #120]	@ (8005c74 <SD_PowerON+0x118>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 f880 	bl	8007d00 <SDMMC_CmdAppOperCommand>
 8005c00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c08:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005c0c:	e02e      	b.n	8005c6c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fee6 	bl	80079e6 <SDMMC_GetResponse>
 8005c1a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	0fdb      	lsrs	r3, r3, #31
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <SD_PowerON+0xcc>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <SD_PowerON+0xce>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]

    count++;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d802      	bhi.n	8005c42 <SD_PowerON+0xe6>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0cc      	beq.n	8005bdc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d902      	bls.n	8005c52 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c50:	e00c      	b.n	8005c6c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
 8005c62:	e002      	b.n	8005c6a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	c1100000 	.word	0xc1100000

08005c78 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005c88:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005c8c:	e018      	b.n	8005cc0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f002 f8f4 	bl	8007e88 <SDMMC_CmdSendStatus>
 8005ca0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <SD_SendStatus+0x34>
  {
    return errorstate;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	e009      	b.n	8005cc0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 fe97 	bl	80079e6 <SDMMC_GetResponse>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f001 fe81 	bl	80079e6 <SDMMC_GetResponse>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cee:	d102      	bne.n	8005cf6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005cf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005cf4:	e02f      	b.n	8005d56 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005cf6:	f107 030c 	add.w	r3, r7, #12
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f879 	bl	8005df4 <SD_FindSCR>
 8005d02:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	e023      	b.n	8005d56 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01c      	beq.n	8005d52 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f001 ffc9 	bl	8007cbc <SDMMC_CmdAppCommand>
 8005d2a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	e00f      	b.n	8005d56 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f002 f802 	bl	8007d46 <SDMMC_CmdBusWidth>
 8005d42:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	e003      	b.n	8005d56 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	e001      	b.n	8005d56 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b086      	sub	sp, #24
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fe36 	bl	80079e6 <SDMMC_GetResponse>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d84:	d102      	bne.n	8005d8c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005d8a:	e02f      	b.n	8005dec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d8c:	f107 030c 	add.w	r3, r7, #12
 8005d90:	4619      	mov	r1, r3
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 f82e 	bl	8005df4 <SD_FindSCR>
 8005d98:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	e023      	b.n	8005dec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01c      	beq.n	8005de8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db6:	041b      	lsls	r3, r3, #16
 8005db8:	4619      	mov	r1, r3
 8005dba:	4610      	mov	r0, r2
 8005dbc:	f001 ff7e 	bl	8007cbc <SDMMC_CmdAppCommand>
 8005dc0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	e00f      	b.n	8005dec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 ffb7 	bl	8007d46 <SDMMC_CmdBusWidth>
 8005dd8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	e003      	b.n	8005dec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	e001      	b.n	8005dec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005de8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b08f      	sub	sp, #60	@ 0x3c
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005dfe:	f7fb fc4f 	bl	80016a0 <HAL_GetTick>
 8005e02:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60bb      	str	r3, [r7, #8]
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2108      	movs	r1, #8
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fe22 	bl	8007a64 <SDMMC_CmdBlockLength>
 8005e20:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d001      	beq.n	8005e2c <SD_FindSCR+0x38>
  {
    return errorstate;
 8005e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2a:	e0a9      	b.n	8005f80 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f001 ff3f 	bl	8007cbc <SDMMC_CmdAppCommand>
 8005e3e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <SD_FindSCR+0x56>
  {
    return errorstate;
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	e09a      	b.n	8005f80 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005e4e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005e50:	2308      	movs	r3, #8
 8005e52:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005e54:	2330      	movs	r3, #48	@ 0x30
 8005e56:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005e60:	2301      	movs	r3, #1
 8005e62:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f107 0210 	add.w	r2, r7, #16
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 fdcc 	bl	8007a0c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f001 ff86 	bl	8007d8a <SDMMC_CmdSendSCR>
 8005e7e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d022      	beq.n	8005ecc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	e07a      	b.n	8005f80 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6819      	ldr	r1, [r3, #0]
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	f107 0208 	add.w	r2, r7, #8
 8005ea4:	18d4      	adds	r4, r2, r3
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	f001 fd2b 	bl	8007902 <SDMMC_ReadFIFO>
 8005eac:	4603      	mov	r3, r0
 8005eae:	6023      	str	r3, [r4, #0]
      index++;
 8005eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005eb6:	f7fb fbf3 	bl	80016a0 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec4:	d102      	bne.n	8005ecc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ec6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005eca:	e059      	b.n	8005f80 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ed2:	f240 432a 	movw	r3, #1066	@ 0x42a
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0d6      	beq.n	8005e8a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d005      	beq.n	8005ef6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2208      	movs	r2, #8
 8005ef0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005ef2:	2308      	movs	r3, #8
 8005ef4:	e044      	b.n	8005f80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e037      	b.n	8005f80 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f16:	f003 0320 	and.w	r3, r3, #32
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2220      	movs	r2, #32
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005f26:	2320      	movs	r3, #32
 8005f28:	e02a      	b.n	8005f80 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005f32:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	061a      	lsls	r2, r3, #24
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f40:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	0a1b      	lsrs	r3, r3, #8
 8005f46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005f4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	0e1b      	lsrs	r3, r3, #24
 8005f50:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	601a      	str	r2, [r3, #0]
    scr++;
 8005f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f58:	3304      	adds	r3, #4
 8005f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	061a      	lsls	r2, r3, #24
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f68:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	0a1b      	lsrs	r3, r3, #8
 8005f6e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005f72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	0e1b      	lsrs	r3, r3, #24
 8005f78:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	373c      	adds	r7, #60	@ 0x3c
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}

08005f88 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03f      	beq.n	8006022 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	e033      	b.n	8006010 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f001 fca8 	bl	8007902 <SDMMC_ReadFIFO>
 8005fb2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	0a1b      	lsrs	r3, r3, #8
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3301      	adds	r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	0e1b      	lsrs	r3, r3, #24
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3301      	adds	r3, #1
 8006002:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	3b01      	subs	r3, #1
 8006008:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3301      	adds	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b07      	cmp	r3, #7
 8006014:	d9c8      	bls.n	8005fa8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8006022:	bf00      	nop
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b086      	sub	sp, #24
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d043      	beq.n	80060cc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006044:	2300      	movs	r3, #0
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e037      	b.n	80060ba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3301      	adds	r3, #1
 8006054:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	3b01      	subs	r3, #1
 800605a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	021a      	lsls	r2, r3, #8
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	4313      	orrs	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3301      	adds	r3, #1
 800606c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3b01      	subs	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	041a      	lsls	r2, r3, #16
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4313      	orrs	r3, r2
 800607e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	3b01      	subs	r3, #1
 800608a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	061a      	lsls	r2, r3, #24
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	4313      	orrs	r3, r2
 8006096:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3301      	adds	r3, #1
 800609c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f107 0208 	add.w	r2, r7, #8
 80060ac:	4611      	mov	r1, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 fc34 	bl	800791c <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	3301      	adds	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b07      	cmp	r3, #7
 80060be:	d9c4      	bls.n	800604a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80060cc:	bf00      	nop
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e040      	b.n	8006168 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fb f826 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2224      	movs	r2, #36	@ 0x24
 8006100:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0201 	bic.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fedc 	bl	8006ed8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fc21 	bl	8006968 <UART_SetConfig>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e01b      	b.n	8006168 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800613e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689a      	ldr	r2, [r3, #8]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800614e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f000 ff5b 	bl	800701c <UART_CheckIdleState>
 8006166:	4603      	mov	r3, r0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	@ 0x28
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4613      	mov	r3, r2
 800617e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006184:	2b20      	cmp	r3, #32
 8006186:	d177      	bne.n	8006278 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_UART_Transmit+0x24>
 800618e:	88fb      	ldrh	r3, [r7, #6]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e070      	b.n	800627a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2221      	movs	r2, #33	@ 0x21
 80061a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061a6:	f7fb fa7b 	bl	80016a0 <HAL_GetTick>
 80061aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c4:	d108      	bne.n	80061d8 <HAL_UART_Transmit+0x68>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e003      	b.n	80061e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061e0:	e02f      	b.n	8006242 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2180      	movs	r1, #128	@ 0x80
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 ffbd 	bl	800716c <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2220      	movs	r2, #32
 80061fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e03b      	b.n	800627a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10b      	bne.n	8006220 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	881a      	ldrh	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006214:	b292      	uxth	r2, r2
 8006216:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	3302      	adds	r3, #2
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e007      	b.n	8006230 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	3301      	adds	r3, #1
 800622e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006248:	b29b      	uxth	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1c9      	bne.n	80061e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	2200      	movs	r2, #0
 8006256:	2140      	movs	r1, #64	@ 0x40
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 ff87 	bl	800716c <UART_WaitOnFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d004      	beq.n	800626e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e005      	b.n	800627a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2220      	movs	r2, #32
 8006272:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006274:	2300      	movs	r3, #0
 8006276:	e000      	b.n	800627a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006278:	2302      	movs	r3, #2
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	@ 0x28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006298:	2b20      	cmp	r3, #32
 800629a:	d137      	bne.n	800630c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <HAL_UART_Receive_IT+0x24>
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d101      	bne.n	80062ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e030      	b.n	800630e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a18      	ldr	r2, [pc, #96]	@ (8006318 <HAL_UART_Receive_IT+0x94>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01f      	beq.n	80062fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d018      	beq.n	80062fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	613b      	str	r3, [r7, #16]
   return(result);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	623b      	str	r3, [r7, #32]
 80062ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	69f9      	ldr	r1, [r7, #28]
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062fc:	88fb      	ldrh	r3, [r7, #6]
 80062fe:	461a      	mov	r2, r3
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 ffa0 	bl	8007248 <UART_Start_Receive_IT>
 8006308:	4603      	mov	r3, r0
 800630a:	e000      	b.n	800630e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3728      	adds	r7, #40	@ 0x28
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	40008000 	.word	0x40008000

0800631c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b0ba      	sub	sp, #232	@ 0xe8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006346:	f640 030f 	movw	r3, #2063	@ 0x80f
 800634a:	4013      	ands	r3, r2
 800634c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d115      	bne.n	8006384 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800635c:	f003 0320 	and.w	r3, r3, #32
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00f      	beq.n	8006384 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 82ca 	beq.w	800690e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	4798      	blx	r3
      }
      return;
 8006382:	e2c4      	b.n	800690e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8117 	beq.w	80065bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800638e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b00      	cmp	r3, #0
 8006398:	d106      	bne.n	80063a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800639a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800639e:	4b85      	ldr	r3, [pc, #532]	@ (80065b4 <HAL_UART_IRQHandler+0x298>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 810a 	beq.w	80065bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80063a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d011      	beq.n	80063d8 <HAL_UART_IRQHandler+0xbc>
 80063b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2201      	movs	r2, #1
 80063c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063ce:	f043 0201 	orr.w	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d011      	beq.n	8006408 <HAL_UART_IRQHandler+0xec>
 80063e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2202      	movs	r2, #2
 80063f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80063fe:	f043 0204 	orr.w	r2, r3, #4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d011      	beq.n	8006438 <HAL_UART_IRQHandler+0x11c>
 8006414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00b      	beq.n	8006438 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2204      	movs	r2, #4
 8006426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800642e:	f043 0202 	orr.w	r2, r3, #2
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643c:	f003 0308 	and.w	r3, r3, #8
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006454:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00b      	beq.n	8006474 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2208      	movs	r2, #8
 8006462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800646a:	f043 0208 	orr.w	r2, r3, #8
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <HAL_UART_IRQHandler+0x18a>
 8006480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006484:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00c      	beq.n	80064a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8230 	beq.w	8006912 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00d      	beq.n	80064da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d003      	beq.n	80064da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ee:	2b40      	cmp	r3, #64	@ 0x40
 80064f0:	d005      	beq.n	80064fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d04f      	beq.n	800659e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 ff68 	bl	80073d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650e:	2b40      	cmp	r3, #64	@ 0x40
 8006510:	d141      	bne.n	8006596 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	3308      	adds	r3, #8
 8006518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006520:	e853 3f00 	ldrex	r3, [r3]
 8006524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006528:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800652c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3308      	adds	r3, #8
 800653a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800653e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006546:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800654a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1d9      	bne.n	8006512 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006562:	2b00      	cmp	r3, #0
 8006564:	d013      	beq.n	800658e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800656a:	4a13      	ldr	r2, [pc, #76]	@ (80065b8 <HAL_UART_IRQHandler+0x29c>)
 800656c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006572:	4618      	mov	r0, r3
 8006574:	f7fb fb2c 	bl	8001bd0 <HAL_DMA_Abort_IT>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658c:	e00f      	b.n	80065ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9d4 	bl	800693c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006594:	e00b      	b.n	80065ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9d0 	bl	800693c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800659c:	e007      	b.n	80065ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9cc 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80065ac:	e1b1      	b.n	8006912 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ae:	bf00      	nop
    return;
 80065b0:	e1af      	b.n	8006912 <HAL_UART_IRQHandler+0x5f6>
 80065b2:	bf00      	nop
 80065b4:	04000120 	.word	0x04000120
 80065b8:	0800749d 	.word	0x0800749d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	f040 816a 	bne.w	800689a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8163 	beq.w	800689a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80065d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 815c 	beq.w	800689a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2210      	movs	r2, #16
 80065e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f4:	2b40      	cmp	r3, #64	@ 0x40
 80065f6:	f040 80d4 	bne.w	80067a2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006606:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800660a:	2b00      	cmp	r3, #0
 800660c:	f000 80ad 	beq.w	800676a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800661a:	429a      	cmp	r2, r3
 800661c:	f080 80a5 	bcs.w	800676a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006626:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 8086 	bne.w	8006748 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006658:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	461a      	mov	r2, r3
 8006662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006666:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800666a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006672:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800667e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1da      	bne.n	800663c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3308      	adds	r3, #8
 800668c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006698:	f023 0301 	bic.w	r3, r3, #1
 800669c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	3308      	adds	r3, #8
 80066a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1e1      	bne.n	8006686 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	3308      	adds	r3, #8
 80066e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e3      	bne.n	80066c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006716:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006718:	f023 0310 	bic.w	r3, r3, #16
 800671c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	461a      	mov	r2, r3
 8006726:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800672a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800672c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006730:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006732:	e841 2300 	strex	r3, r2, [r1]
 8006736:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1e4      	bne.n	8006708 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006742:	4618      	mov	r0, r3
 8006744:	f7fb fa06 	bl	8001b54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800675a:	b29b      	uxth	r3, r3
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	b29b      	uxth	r3, r3
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f8f4 	bl	8006950 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006768:	e0d5      	b.n	8006916 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006770:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006774:	429a      	cmp	r2, r3
 8006776:	f040 80ce 	bne.w	8006916 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b20      	cmp	r3, #32
 8006788:	f040 80c5 	bne.w	8006916 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8d8 	bl	8006950 <HAL_UARTEx_RxEventCallback>
      return;
 80067a0:	e0b9      	b.n	8006916 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 80ab 	beq.w	800691a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80067c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 80a6 	beq.w	800691a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e4      	bne.n	80067ce <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	623b      	str	r3, [r7, #32]
   return(result);
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	f023 0301 	bic.w	r3, r3, #1
 800681a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006828:	633a      	str	r2, [r7, #48]	@ 0x30
 800682a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800682e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e3      	bne.n	8006804 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	60fb      	str	r3, [r7, #12]
   return(result);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0310 	bic.w	r3, r3, #16
 8006864:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	617b      	str	r3, [r7, #20]
   return(result);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e4      	bne.n	8006850 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2202      	movs	r2, #2
 800688a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800688c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f85c 	bl	8006950 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006898:	e03f      	b.n	800691a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800689a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00e      	beq.n	80068c4 <HAL_UART_IRQHandler+0x5a8>
 80068a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d008      	beq.n	80068c4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80068ba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 ffe9 	bl	8007894 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068c2:	e02d      	b.n	8006920 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00e      	beq.n	80068ee <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d01c      	beq.n	800691e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
    }
    return;
 80068ec:	e017      	b.n	800691e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80068ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d012      	beq.n	8006920 <HAL_UART_IRQHandler+0x604>
 80068fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fdde 	bl	80074c8 <UART_EndTransmit_IT>
    return;
 800690c:	e008      	b.n	8006920 <HAL_UART_IRQHandler+0x604>
      return;
 800690e:	bf00      	nop
 8006910:	e006      	b.n	8006920 <HAL_UART_IRQHandler+0x604>
    return;
 8006912:	bf00      	nop
 8006914:	e004      	b.n	8006920 <HAL_UART_IRQHandler+0x604>
      return;
 8006916:	bf00      	nop
 8006918:	e002      	b.n	8006920 <HAL_UART_IRQHandler+0x604>
      return;
 800691a:	bf00      	nop
 800691c:	e000      	b.n	8006920 <HAL_UART_IRQHandler+0x604>
    return;
 800691e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006920:	37e8      	adds	r7, #232	@ 0xe8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop

08006928 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800696c:	b08a      	sub	sp, #40	@ 0x28
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	431a      	orrs	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	431a      	orrs	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	4313      	orrs	r3, r2
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4ba4      	ldr	r3, [pc, #656]	@ (8006c28 <UART_SetConfig+0x2c0>)
 8006998:	4013      	ands	r3, r2
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a99      	ldr	r2, [pc, #612]	@ (8006c2c <UART_SetConfig+0x2c4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d0:	4313      	orrs	r3, r2
 80069d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e4:	430a      	orrs	r2, r1
 80069e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a90      	ldr	r2, [pc, #576]	@ (8006c30 <UART_SetConfig+0x2c8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d126      	bne.n	8006a40 <UART_SetConfig+0xd8>
 80069f2:	4b90      	ldr	r3, [pc, #576]	@ (8006c34 <UART_SetConfig+0x2cc>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d81b      	bhi.n	8006a38 <UART_SetConfig+0xd0>
 8006a00:	a201      	add	r2, pc, #4	@ (adr r2, 8006a08 <UART_SetConfig+0xa0>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	08006a21 	.word	0x08006a21
 8006a14:	08006a31 	.word	0x08006a31
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1e:	e116      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006a20:	2302      	movs	r3, #2
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a26:	e112      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006a28:	2304      	movs	r3, #4
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2e:	e10e      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006a30:	2308      	movs	r3, #8
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a36:	e10a      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006a38:	2310      	movs	r3, #16
 8006a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a3e:	e106      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a7c      	ldr	r2, [pc, #496]	@ (8006c38 <UART_SetConfig+0x2d0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d138      	bne.n	8006abc <UART_SetConfig+0x154>
 8006a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006c34 <UART_SetConfig+0x2cc>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a50:	f003 030c 	and.w	r3, r3, #12
 8006a54:	2b0c      	cmp	r3, #12
 8006a56:	d82d      	bhi.n	8006ab4 <UART_SetConfig+0x14c>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0xf8>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006ab5 	.word	0x08006ab5
 8006a68:	08006ab5 	.word	0x08006ab5
 8006a6c:	08006ab5 	.word	0x08006ab5
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006ab5 	.word	0x08006ab5
 8006a78:	08006ab5 	.word	0x08006ab5
 8006a7c:	08006ab5 	.word	0x08006ab5
 8006a80:	08006a9d 	.word	0x08006a9d
 8006a84:	08006ab5 	.word	0x08006ab5
 8006a88:	08006ab5 	.word	0x08006ab5
 8006a8c:	08006ab5 	.word	0x08006ab5
 8006a90:	08006aad 	.word	0x08006aad
 8006a94:	2300      	movs	r3, #0
 8006a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a9a:	e0d8      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aa2:	e0d4      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aaa:	e0d0      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006aac:	2308      	movs	r3, #8
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ab2:	e0cc      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006ab4:	2310      	movs	r3, #16
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aba:	e0c8      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a5e      	ldr	r2, [pc, #376]	@ (8006c3c <UART_SetConfig+0x2d4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d125      	bne.n	8006b12 <UART_SetConfig+0x1aa>
 8006ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8006c34 <UART_SetConfig+0x2cc>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006acc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ad0:	2b30      	cmp	r3, #48	@ 0x30
 8006ad2:	d016      	beq.n	8006b02 <UART_SetConfig+0x19a>
 8006ad4:	2b30      	cmp	r3, #48	@ 0x30
 8006ad6:	d818      	bhi.n	8006b0a <UART_SetConfig+0x1a2>
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d00a      	beq.n	8006af2 <UART_SetConfig+0x18a>
 8006adc:	2b20      	cmp	r3, #32
 8006ade:	d814      	bhi.n	8006b0a <UART_SetConfig+0x1a2>
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <UART_SetConfig+0x182>
 8006ae4:	2b10      	cmp	r3, #16
 8006ae6:	d008      	beq.n	8006afa <UART_SetConfig+0x192>
 8006ae8:	e00f      	b.n	8006b0a <UART_SetConfig+0x1a2>
 8006aea:	2300      	movs	r3, #0
 8006aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af0:	e0ad      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006af2:	2302      	movs	r3, #2
 8006af4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006af8:	e0a9      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006afa:	2304      	movs	r3, #4
 8006afc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b00:	e0a5      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b02:	2308      	movs	r3, #8
 8006b04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b08:	e0a1      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b10:	e09d      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a4a      	ldr	r2, [pc, #296]	@ (8006c40 <UART_SetConfig+0x2d8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d125      	bne.n	8006b68 <UART_SetConfig+0x200>
 8006b1c:	4b45      	ldr	r3, [pc, #276]	@ (8006c34 <UART_SetConfig+0x2cc>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006b26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b28:	d016      	beq.n	8006b58 <UART_SetConfig+0x1f0>
 8006b2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b2c:	d818      	bhi.n	8006b60 <UART_SetConfig+0x1f8>
 8006b2e:	2b80      	cmp	r3, #128	@ 0x80
 8006b30:	d00a      	beq.n	8006b48 <UART_SetConfig+0x1e0>
 8006b32:	2b80      	cmp	r3, #128	@ 0x80
 8006b34:	d814      	bhi.n	8006b60 <UART_SetConfig+0x1f8>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <UART_SetConfig+0x1d8>
 8006b3a:	2b40      	cmp	r3, #64	@ 0x40
 8006b3c:	d008      	beq.n	8006b50 <UART_SetConfig+0x1e8>
 8006b3e:	e00f      	b.n	8006b60 <UART_SetConfig+0x1f8>
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b46:	e082      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b4e:	e07e      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b56:	e07a      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5e:	e076      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b66:	e072      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a35      	ldr	r2, [pc, #212]	@ (8006c44 <UART_SetConfig+0x2dc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d12a      	bne.n	8006bc8 <UART_SetConfig+0x260>
 8006b72:	4b30      	ldr	r3, [pc, #192]	@ (8006c34 <UART_SetConfig+0x2cc>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b80:	d01a      	beq.n	8006bb8 <UART_SetConfig+0x250>
 8006b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b86:	d81b      	bhi.n	8006bc0 <UART_SetConfig+0x258>
 8006b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b8c:	d00c      	beq.n	8006ba8 <UART_SetConfig+0x240>
 8006b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b92:	d815      	bhi.n	8006bc0 <UART_SetConfig+0x258>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <UART_SetConfig+0x238>
 8006b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b9c:	d008      	beq.n	8006bb0 <UART_SetConfig+0x248>
 8006b9e:	e00f      	b.n	8006bc0 <UART_SetConfig+0x258>
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba6:	e052      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bae:	e04e      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006bb0:	2304      	movs	r3, #4
 8006bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bb6:	e04a      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006bb8:	2308      	movs	r3, #8
 8006bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bbe:	e046      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006bc0:	2310      	movs	r3, #16
 8006bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc6:	e042      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a17      	ldr	r2, [pc, #92]	@ (8006c2c <UART_SetConfig+0x2c4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d13a      	bne.n	8006c48 <UART_SetConfig+0x2e0>
 8006bd2:	4b18      	ldr	r3, [pc, #96]	@ (8006c34 <UART_SetConfig+0x2cc>)
 8006bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be0:	d01a      	beq.n	8006c18 <UART_SetConfig+0x2b0>
 8006be2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006be6:	d81b      	bhi.n	8006c20 <UART_SetConfig+0x2b8>
 8006be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bec:	d00c      	beq.n	8006c08 <UART_SetConfig+0x2a0>
 8006bee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bf2:	d815      	bhi.n	8006c20 <UART_SetConfig+0x2b8>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d003      	beq.n	8006c00 <UART_SetConfig+0x298>
 8006bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bfc:	d008      	beq.n	8006c10 <UART_SetConfig+0x2a8>
 8006bfe:	e00f      	b.n	8006c20 <UART_SetConfig+0x2b8>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c06:	e022      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c0e:	e01e      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006c10:	2304      	movs	r3, #4
 8006c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c16:	e01a      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c1e:	e016      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006c20:	2310      	movs	r3, #16
 8006c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c26:	e012      	b.n	8006c4e <UART_SetConfig+0x2e6>
 8006c28:	efff69f3 	.word	0xefff69f3
 8006c2c:	40008000 	.word	0x40008000
 8006c30:	40013800 	.word	0x40013800
 8006c34:	40021000 	.word	0x40021000
 8006c38:	40004400 	.word	0x40004400
 8006c3c:	40004800 	.word	0x40004800
 8006c40:	40004c00 	.word	0x40004c00
 8006c44:	40005000 	.word	0x40005000
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a9f      	ldr	r2, [pc, #636]	@ (8006ed0 <UART_SetConfig+0x568>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d17a      	bne.n	8006d4e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d824      	bhi.n	8006caa <UART_SetConfig+0x342>
 8006c60:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <UART_SetConfig+0x300>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006cab 	.word	0x08006cab
 8006c70:	08006c95 	.word	0x08006c95
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006c9b 	.word	0x08006c9b
 8006c7c:	08006cab 	.word	0x08006cab
 8006c80:	08006cab 	.word	0x08006cab
 8006c84:	08006cab 	.word	0x08006cab
 8006c88:	08006ca3 	.word	0x08006ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fc f872 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8006c90:	61f8      	str	r0, [r7, #28]
        break;
 8006c92:	e010      	b.n	8006cb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c94:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed4 <UART_SetConfig+0x56c>)
 8006c96:	61fb      	str	r3, [r7, #28]
        break;
 8006c98:	e00d      	b.n	8006cb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c9a:	f7fb ffd3 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8006c9e:	61f8      	str	r0, [r7, #28]
        break;
 8006ca0:	e009      	b.n	8006cb6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ca2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca6:	61fb      	str	r3, [r7, #28]
        break;
 8006ca8:	e005      	b.n	8006cb6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 80fb 	beq.w	8006eb4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d305      	bcc.n	8006cda <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d903      	bls.n	8006ce2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006ce0:	e0e8      	b.n	8006eb4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	461c      	mov	r4, r3
 8006ce8:	4615      	mov	r5, r2
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	022b      	lsls	r3, r5, #8
 8006cf4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006cf8:	0222      	lsls	r2, r4, #8
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	6849      	ldr	r1, [r1, #4]
 8006cfe:	0849      	lsrs	r1, r1, #1
 8006d00:	2000      	movs	r0, #0
 8006d02:	4688      	mov	r8, r1
 8006d04:	4681      	mov	r9, r0
 8006d06:	eb12 0a08 	adds.w	sl, r2, r8
 8006d0a:	eb43 0b09 	adc.w	fp, r3, r9
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	603b      	str	r3, [r7, #0]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	4650      	mov	r0, sl
 8006d1e:	4659      	mov	r1, fp
 8006d20:	f7f9 fabe 	bl	80002a0 <__aeabi_uldivmod>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	4613      	mov	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2c:	69bb      	ldr	r3, [r7, #24]
 8006d2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d32:	d308      	bcc.n	8006d46 <UART_SetConfig+0x3de>
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d3a:	d204      	bcs.n	8006d46 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	60da      	str	r2, [r3, #12]
 8006d44:	e0b6      	b.n	8006eb4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d4c:	e0b2      	b.n	8006eb4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d56:	d15e      	bne.n	8006e16 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d828      	bhi.n	8006db2 <UART_SetConfig+0x44a>
 8006d60:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <UART_SetConfig+0x400>)
 8006d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d66:	bf00      	nop
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fb fff2 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8006d90:	61f8      	str	r0, [r7, #28]
        break;
 8006d92:	e014      	b.n	8006dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fc f804 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8006d98:	61f8      	str	r0, [r7, #28]
        break;
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8006ed4 <UART_SetConfig+0x56c>)
 8006d9e:	61fb      	str	r3, [r7, #28]
        break;
 8006da0:	e00d      	b.n	8006dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fb ff4f 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8006da6:	61f8      	str	r0, [r7, #28]
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dae:	61fb      	str	r3, [r7, #28]
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d077      	beq.n	8006eb4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	005a      	lsls	r2, r3, #1
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	441a      	add	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b0f      	cmp	r3, #15
 8006dde:	d916      	bls.n	8006e0e <UART_SetConfig+0x4a6>
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de6:	d212      	bcs.n	8006e0e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f023 030f 	bic.w	r3, r3, #15
 8006df0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	085b      	lsrs	r3, r3, #1
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	8afb      	ldrh	r3, [r7, #22]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	8afa      	ldrh	r2, [r7, #22]
 8006e0a:	60da      	str	r2, [r3, #12]
 8006e0c:	e052      	b.n	8006eb4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e14:	e04e      	b.n	8006eb4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d827      	bhi.n	8006e6e <UART_SetConfig+0x506>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <UART_SetConfig+0x4bc>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e49 	.word	0x08006e49
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e59 	.word	0x08006e59
 8006e30:	08006e6f 	.word	0x08006e6f
 8006e34:	08006e5f 	.word	0x08006e5f
 8006e38:	08006e6f 	.word	0x08006e6f
 8006e3c:	08006e6f 	.word	0x08006e6f
 8006e40:	08006e6f 	.word	0x08006e6f
 8006e44:	08006e67 	.word	0x08006e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e48:	f7fb ff94 	bl	8002d74 <HAL_RCC_GetPCLK1Freq>
 8006e4c:	61f8      	str	r0, [r7, #28]
        break;
 8006e4e:	e014      	b.n	8006e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e50:	f7fb ffa6 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8006e54:	61f8      	str	r0, [r7, #28]
        break;
 8006e56:	e010      	b.n	8006e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e58:	4b1e      	ldr	r3, [pc, #120]	@ (8006ed4 <UART_SetConfig+0x56c>)
 8006e5a:	61fb      	str	r3, [r7, #28]
        break;
 8006e5c:	e00d      	b.n	8006e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fb fef1 	bl	8002c44 <HAL_RCC_GetSysClockFreq>
 8006e62:	61f8      	str	r0, [r7, #28]
        break;
 8006e64:	e009      	b.n	8006e7a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e6a:	61fb      	str	r3, [r7, #28]
        break;
 8006e6c:	e005      	b.n	8006e7a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006e78:	bf00      	nop
    }

    if (pclk != 0U)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d019      	beq.n	8006eb4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	085a      	lsrs	r2, r3, #1
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	441a      	add	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e92:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b0f      	cmp	r3, #15
 8006e98:	d909      	bls.n	8006eae <UART_SetConfig+0x546>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ea0:	d205      	bcs.n	8006eae <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60da      	str	r2, [r3, #12]
 8006eac:	e002      	b.n	8006eb4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006ec0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3728      	adds	r7, #40	@ 0x28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ece:	bf00      	nop
 8006ed0:	40008000 	.word	0x40008000
 8006ed4:	00f42400 	.word	0x00f42400

08006ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01a      	beq.n	8006fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fd6:	d10a      	bne.n	8006fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b098      	sub	sp, #96	@ 0x60
 8007020:	af02      	add	r7, sp, #8
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800702c:	f7fa fb38 	bl	80016a0 <HAL_GetTick>
 8007030:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b08      	cmp	r3, #8
 800703e:	d12e      	bne.n	800709e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007048:	2200      	movs	r2, #0
 800704a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f88c 	bl	800716c <UART_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d021      	beq.n	800709e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800706a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800706e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007078:	647b      	str	r3, [r7, #68]	@ 0x44
 800707a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800707e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007080:	e841 2300 	strex	r3, r2, [r1]
 8007084:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1e6      	bne.n	800705a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2220      	movs	r2, #32
 8007090:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e062      	b.n	8007164 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b04      	cmp	r3, #4
 80070aa:	d149      	bne.n	8007140 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b4:	2200      	movs	r2, #0
 80070b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f856 	bl	800716c <UART_WaitOnFlagUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d03c      	beq.n	8007140 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	623b      	str	r3, [r7, #32]
   return(result);
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80070e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e6      	bne.n	80070c6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3308      	adds	r3, #8
 80070fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	60fb      	str	r3, [r7, #12]
   return(result);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3308      	adds	r3, #8
 8007116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007118:	61fa      	str	r2, [r7, #28]
 800711a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	69b9      	ldr	r1, [r7, #24]
 800711e:	69fa      	ldr	r2, [r7, #28]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	617b      	str	r3, [r7, #20]
   return(result);
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e011      	b.n	8007164 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2220      	movs	r2, #32
 800714a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3758      	adds	r7, #88	@ 0x58
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	603b      	str	r3, [r7, #0]
 8007178:	4613      	mov	r3, r2
 800717a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800717c:	e04f      	b.n	800721e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007184:	d04b      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007186:	f7fa fa8b 	bl	80016a0 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	429a      	cmp	r2, r3
 8007194:	d302      	bcc.n	800719c <UART_WaitOnFlagUntilTimeout+0x30>
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e04e      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d037      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b80      	cmp	r3, #128	@ 0x80
 80071b2:	d034      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0xb2>
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2b40      	cmp	r3, #64	@ 0x40
 80071b8:	d031      	beq.n	800721e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d110      	bne.n	80071ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2208      	movs	r2, #8
 80071ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f8ff 	bl	80073d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2208      	movs	r2, #8
 80071da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e029      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071f8:	d111      	bne.n	800721e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f000 f8e5 	bl	80073d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e00f      	b.n	800723e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69da      	ldr	r2, [r3, #28]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4013      	ands	r3, r2
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	429a      	cmp	r2, r3
 800722c:	bf0c      	ite	eq
 800722e:	2301      	moveq	r3, #1
 8007230:	2300      	movne	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	79fb      	ldrb	r3, [r7, #7]
 8007238:	429a      	cmp	r2, r3
 800723a:	d0a0      	beq.n	800717e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007248:	b480      	push	{r7}
 800724a:	b097      	sub	sp, #92	@ 0x5c
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	88fa      	ldrh	r2, [r7, #6]
 8007268:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727a:	d10e      	bne.n	800729a <UART_Start_Receive_IT+0x52>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <UART_Start_Receive_IT+0x48>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800728a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800728e:	e02d      	b.n	80072ec <UART_Start_Receive_IT+0xa4>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	22ff      	movs	r2, #255	@ 0xff
 8007294:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007298:	e028      	b.n	80072ec <UART_Start_Receive_IT+0xa4>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10d      	bne.n	80072be <UART_Start_Receive_IT+0x76>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <UART_Start_Receive_IT+0x6c>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	22ff      	movs	r2, #255	@ 0xff
 80072ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072b2:	e01b      	b.n	80072ec <UART_Start_Receive_IT+0xa4>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	227f      	movs	r2, #127	@ 0x7f
 80072b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072bc:	e016      	b.n	80072ec <UART_Start_Receive_IT+0xa4>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072c6:	d10d      	bne.n	80072e4 <UART_Start_Receive_IT+0x9c>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d104      	bne.n	80072da <UART_Start_Receive_IT+0x92>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	227f      	movs	r2, #127	@ 0x7f
 80072d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072d8:	e008      	b.n	80072ec <UART_Start_Receive_IT+0xa4>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	223f      	movs	r2, #63	@ 0x3f
 80072de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80072e2:	e003      	b.n	80072ec <UART_Start_Receive_IT+0xa4>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2222      	movs	r2, #34	@ 0x22
 80072f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3308      	adds	r3, #8
 8007302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007306:	e853 3f00 	ldrex	r3, [r3]
 800730a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800730c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730e:	f043 0301 	orr.w	r3, r3, #1
 8007312:	657b      	str	r3, [r7, #84]	@ 0x54
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800731c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800731e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007320:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007324:	e841 2300 	strex	r3, r2, [r1]
 8007328:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800732a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1e5      	bne.n	80072fc <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007338:	d107      	bne.n	800734a <UART_Start_Receive_IT+0x102>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d103      	bne.n	800734a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4a21      	ldr	r2, [pc, #132]	@ (80073cc <UART_Start_Receive_IT+0x184>)
 8007346:	669a      	str	r2, [r3, #104]	@ 0x68
 8007348:	e002      	b.n	8007350 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4a20      	ldr	r2, [pc, #128]	@ (80073d0 <UART_Start_Receive_IT+0x188>)
 800734e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d019      	beq.n	800738c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007368:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800736c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	461a      	mov	r2, r3
 8007374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
 8007378:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800737c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007386:	2b00      	cmp	r3, #0
 8007388:	d1e6      	bne.n	8007358 <UART_Start_Receive_IT+0x110>
 800738a:	e018      	b.n	80073be <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	e853 3f00 	ldrex	r3, [r3]
 8007398:	613b      	str	r3, [r7, #16]
   return(result);
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f043 0320 	orr.w	r3, r3, #32
 80073a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073aa:	623b      	str	r3, [r7, #32]
 80073ac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	69f9      	ldr	r1, [r7, #28]
 80073b0:	6a3a      	ldr	r2, [r7, #32]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e6      	bne.n	800738c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	375c      	adds	r7, #92	@ 0x5c
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	080076d9 	.word	0x080076d9
 80073d0:	0800751d 	.word	0x0800751d

080073d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b095      	sub	sp, #84	@ 0x54
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80073fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007400:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e6      	bne.n	80073dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3308      	adds	r3, #8
 8007414:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	61fb      	str	r3, [r7, #28]
   return(result);
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f023 0301 	bic.w	r3, r3, #1
 8007424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3308      	adds	r3, #8
 800742c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800742e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007430:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007434:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007436:	e841 2300 	strex	r3, r2, [r1]
 800743a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1e5      	bne.n	800740e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007446:	2b01      	cmp	r3, #1
 8007448:	d118      	bne.n	800747c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	60bb      	str	r3, [r7, #8]
   return(result);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f023 0310 	bic.w	r3, r3, #16
 800745e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007468:	61bb      	str	r3, [r7, #24]
 800746a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6979      	ldr	r1, [r7, #20]
 800746e:	69ba      	ldr	r2, [r7, #24]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	613b      	str	r3, [r7, #16]
   return(result);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007490:	bf00      	nop
 8007492:	3754      	adds	r7, #84	@ 0x54
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fa3e 	bl	800693c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b088      	sub	sp, #32
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	e853 3f00 	ldrex	r3, [r3]
 80074dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074e4:	61fb      	str	r3, [r7, #28]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	61bb      	str	r3, [r7, #24]
 80074f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	6979      	ldr	r1, [r7, #20]
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	613b      	str	r3, [r7, #16]
   return(result);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1e6      	bne.n	80074d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fa0a 	bl	8006928 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007514:	bf00      	nop
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b09c      	sub	sp, #112	@ 0x70
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800752a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007534:	2b22      	cmp	r3, #34	@ 0x22
 8007536:	f040 80be 	bne.w	80076b6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007540:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007544:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007548:	b2d9      	uxtb	r1, r3
 800754a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800754e:	b2da      	uxtb	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007554:	400a      	ands	r2, r1
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800756a:	b29b      	uxth	r3, r3
 800756c:	3b01      	subs	r3, #1
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	f040 80a3 	bne.w	80076ca <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800758c:	e853 3f00 	ldrex	r3, [r3]
 8007590:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e6      	bne.n	8007584 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075c0:	e853 3f00 	ldrex	r3, [r3]
 80075c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075c8:	f023 0301 	bic.w	r3, r3, #1
 80075cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3308      	adds	r3, #8
 80075d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80075d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075de:	e841 2300 	strex	r3, r2, [r1]
 80075e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1e5      	bne.n	80075b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2220      	movs	r2, #32
 80075ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a34      	ldr	r2, [pc, #208]	@ (80076d4 <UART_RxISR_8BIT+0x1b8>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d01f      	beq.n	8007648 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d018      	beq.n	8007648 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	623b      	str	r3, [r7, #32]
   return(result);
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800762a:	663b      	str	r3, [r7, #96]	@ 0x60
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	461a      	mov	r2, r3
 8007632:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007634:	633b      	str	r3, [r7, #48]	@ 0x30
 8007636:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007638:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800763a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800763c:	e841 2300 	strex	r3, r2, [r1]
 8007640:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e6      	bne.n	8007616 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800764c:	2b01      	cmp	r3, #1
 800764e:	d12e      	bne.n	80076ae <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	e853 3f00 	ldrex	r3, [r3]
 8007662:	60fb      	str	r3, [r7, #12]
   return(result);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0310 	bic.w	r3, r3, #16
 800766a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	461a      	mov	r2, r3
 8007672:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007674:	61fb      	str	r3, [r7, #28]
 8007676:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007678:	69b9      	ldr	r1, [r7, #24]
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	e841 2300 	strex	r3, r2, [r1]
 8007680:	617b      	str	r3, [r7, #20]
   return(result);
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1e6      	bne.n	8007656 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	2b10      	cmp	r3, #16
 8007694:	d103      	bne.n	800769e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2210      	movs	r2, #16
 800769c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7ff f952 	bl	8006950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076ac:	e00d      	b.n	80076ca <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7f9 f8c2 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 80076b4:	e009      	b.n	80076ca <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	8b1b      	ldrh	r3, [r3, #24]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0208 	orr.w	r2, r2, #8
 80076c6:	b292      	uxth	r2, r2
 80076c8:	831a      	strh	r2, [r3, #24]
}
 80076ca:	bf00      	nop
 80076cc:	3770      	adds	r7, #112	@ 0x70
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40008000 	.word	0x40008000

080076d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b09c      	sub	sp, #112	@ 0x70
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f0:	2b22      	cmp	r3, #34	@ 0x22
 80076f2:	f040 80be 	bne.w	8007872 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80076fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007704:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007706:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800770a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800770e:	4013      	ands	r3, r2
 8007710:	b29a      	uxth	r2, r3
 8007712:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007714:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771a:	1c9a      	adds	r2, r3, #2
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	f040 80a3 	bne.w	8007886 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007748:	e853 3f00 	ldrex	r3, [r3]
 800774c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800774e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007750:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007754:	667b      	str	r3, [r7, #100]	@ 0x64
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800775e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007760:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007764:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800776c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e6      	bne.n	8007740 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	3308      	adds	r3, #8
 8007778:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800777c:	e853 3f00 	ldrex	r3, [r3]
 8007780:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	f023 0301 	bic.w	r3, r3, #1
 8007788:	663b      	str	r3, [r7, #96]	@ 0x60
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007792:	643a      	str	r2, [r7, #64]	@ 0x40
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007798:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e5      	bne.n	8007772 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a34      	ldr	r2, [pc, #208]	@ (8007890 <UART_RxISR_16BIT+0x1b8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d01f      	beq.n	8007804 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d018      	beq.n	8007804 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	e853 3f00 	ldrex	r3, [r3]
 80077de:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077f2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f8:	e841 2300 	strex	r3, r2, [r1]
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1e6      	bne.n	80077d2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007808:	2b01      	cmp	r3, #1
 800780a:	d12e      	bne.n	800786a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	e853 3f00 	ldrex	r3, [r3]
 800781e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f023 0310 	bic.w	r3, r3, #16
 8007826:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007830:	61bb      	str	r3, [r7, #24]
 8007832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6979      	ldr	r1, [r7, #20]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	613b      	str	r3, [r7, #16]
   return(result);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e6      	bne.n	8007812 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69db      	ldr	r3, [r3, #28]
 800784a:	f003 0310 	and.w	r3, r3, #16
 800784e:	2b10      	cmp	r3, #16
 8007850:	d103      	bne.n	800785a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2210      	movs	r2, #16
 8007858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff f874 	bl	8006950 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007868:	e00d      	b.n	8007886 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7f8 ffe4 	bl	8000838 <HAL_UART_RxCpltCallback>
}
 8007870:	e009      	b.n	8007886 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	8b1b      	ldrh	r3, [r3, #24]
 8007878:	b29a      	uxth	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f042 0208 	orr.w	r2, r2, #8
 8007882:	b292      	uxth	r2, r2
 8007884:	831a      	strh	r2, [r3, #24]
}
 8007886:	bf00      	nop
 8007888:	3770      	adds	r7, #112	@ 0x70
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40008000 	.word	0x40008000

08007894 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80078a8:	b084      	sub	sp, #16
 80078aa:	b480      	push	{r7}
 80078ac:	b085      	sub	sp, #20
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	f107 001c 	add.w	r0, r7, #28
 80078b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80078c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80078c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 80078ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80078cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80078ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80078d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80078d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80078d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80078d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80078e6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	b004      	add	sp, #16
 8007900:	4770      	bx	lr

08007902 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2203      	movs	r2, #3
 800794a:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800794c:	2002      	movs	r0, #2
 800794e:	f7f9 feb3 	bl	80016b8 <HAL_Delay>

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0303 	and.w	r3, r3, #3
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007982:	2300      	movs	r3, #0
 8007984:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007996:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800799c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80079a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80079b2:	f023 030f 	bic.w	r3, r3, #15
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3714      	adds	r7, #20
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	b2db      	uxtb	r3, r3
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3314      	adds	r3, #20
 80079f4:	461a      	mov	r2, r3
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	4413      	add	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3714      	adds	r7, #20
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a32:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007a38:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007a3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a4a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0

}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b088      	sub	sp, #32
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007a72:	2310      	movs	r3, #16
 8007a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a76:	2340      	movs	r3, #64	@ 0x40
 8007a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a84:	f107 0308 	add.w	r3, r7, #8
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff ff74 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a94:	2110      	movs	r1, #16
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 fa18 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007a9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a9e:	69fb      	ldr	r3, [r7, #28]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3720      	adds	r7, #32
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007ab6:	2311      	movs	r3, #17
 8007ab8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007aba:	2340      	movs	r3, #64	@ 0x40
 8007abc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ac2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ac6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ac8:	f107 0308 	add.w	r3, r7, #8
 8007acc:	4619      	mov	r1, r3
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff ff52 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007ad4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ad8:	2111      	movs	r1, #17
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f9f6 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007ae0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b088      	sub	sp, #32
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007afa:	2312      	movs	r3, #18
 8007afc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007afe:	2340      	movs	r3, #64	@ 0x40
 8007b00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b02:	2300      	movs	r3, #0
 8007b04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b0c:	f107 0308 	add.w	r3, r7, #8
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff ff30 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007b18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b1c:	2112      	movs	r1, #18
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 f9d4 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007b24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b26:	69fb      	ldr	r3, [r7, #28]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3720      	adds	r7, #32
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b088      	sub	sp, #32
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007b3e:	2318      	movs	r3, #24
 8007b40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b42:	2340      	movs	r3, #64	@ 0x40
 8007b44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b50:	f107 0308 	add.w	r3, r7, #8
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff ff0e 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b60:	2118      	movs	r1, #24
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f9b2 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007b82:	2319      	movs	r3, #25
 8007b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b86:	2340      	movs	r3, #64	@ 0x40
 8007b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b94:	f107 0308 	add.w	r3, r7, #8
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff feec 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba4:	2119      	movs	r1, #25
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f990 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bae:	69fb      	ldr	r3, [r7, #28]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bc8:	2340      	movs	r3, #64	@ 0x40
 8007bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bd4:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fecb 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007be2:	4a05      	ldr	r2, [pc, #20]	@ (8007bf8 <SDMMC_CmdStopTransfer+0x40>)
 8007be4:	210c      	movs	r1, #12
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f970 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007bec:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8007bee:	69fb      	ldr	r3, [r7, #28]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	05f5e100 	.word	0x05f5e100

08007bfc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08a      	sub	sp, #40	@ 0x28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007c0c:	2307      	movs	r3, #7
 8007c0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c10:	2340      	movs	r3, #64	@ 0x40
 8007c12:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c14:	2300      	movs	r3, #0
 8007c16:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c1c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c1e:	f107 0310 	add.w	r3, r7, #16
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fea7 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c2e:	2107      	movs	r1, #7
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f94b 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007c36:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3728      	adds	r7, #40	@ 0x28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b088      	sub	sp, #32
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007c52:	2300      	movs	r3, #0
 8007c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c56:	2300      	movs	r3, #0
 8007c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c60:	f107 0308 	add.w	r3, r7, #8
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7ff fe86 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fb65 	bl	800833c <SDMMC_GetCmdError>
 8007c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c74:	69fb      	ldr	r3, [r7, #28]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b088      	sub	sp, #32
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007c86:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007c8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c90:	2340      	movs	r3, #64	@ 0x40
 8007c92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c9e:	f107 0308 	add.w	r3, r7, #8
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7ff fe67 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 faf8 	bl	80082a0 <SDMMC_GetCmdResp7>
 8007cb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3720      	adds	r7, #32
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b088      	sub	sp, #32
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007cca:	2337      	movs	r3, #55	@ 0x37
 8007ccc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cce:	2340      	movs	r3, #64	@ 0x40
 8007cd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007cdc:	f107 0308 	add.w	r3, r7, #8
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff fe48 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cec:	2137      	movs	r1, #55	@ 0x37
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f8ec 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007cf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cf6:	69fb      	ldr	r3, [r7, #28]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3720      	adds	r7, #32
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d14:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007d16:	2329      	movs	r3, #41	@ 0x29
 8007d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d1a:	2340      	movs	r3, #64	@ 0x40
 8007d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff fe22 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9ff 	bl	8008138 <SDMMC_GetCmdResp3>
 8007d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b088      	sub	sp, #32
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007d54:	2306      	movs	r3, #6
 8007d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d58:	2340      	movs	r3, #64	@ 0x40
 8007d5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d66:	f107 0308 	add.w	r3, r7, #8
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fe03 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d76:	2106      	movs	r1, #6
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f8a7 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007d7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d80:	69fb      	ldr	r3, [r7, #28]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3720      	adds	r7, #32
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b088      	sub	sp, #32
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007d96:	2333      	movs	r3, #51	@ 0x33
 8007d98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d9a:	2340      	movs	r3, #64	@ 0x40
 8007d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007da6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007da8:	f107 0308 	add.w	r3, r7, #8
 8007dac:	4619      	mov	r1, r3
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f7ff fde2 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007db8:	2133      	movs	r1, #51	@ 0x33
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f886 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dc2:	69fb      	ldr	r3, [r7, #28]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3720      	adds	r7, #32
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b088      	sub	sp, #32
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007dd8:	2302      	movs	r3, #2
 8007dda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007ddc:	23c0      	movs	r3, #192	@ 0xc0
 8007dde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007de4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007de8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7ff fdc1 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f956 	bl	80080a8 <SDMMC_GetCmdResp2>
 8007dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3720      	adds	r7, #32
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e16:	2309      	movs	r3, #9
 8007e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007e1a:	23c0      	movs	r3, #192	@ 0xc0
 8007e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e28:	f107 0308 	add.w	r3, r7, #8
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7ff fda2 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f937 	bl	80080a8 <SDMMC_GetCmdResp2>
 8007e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e3c:	69fb      	ldr	r3, [r7, #28]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b088      	sub	sp, #32
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007e54:	2303      	movs	r3, #3
 8007e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e58:	2340      	movs	r3, #64	@ 0x40
 8007e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e66:	f107 0308 	add.w	r3, r7, #8
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff fd83 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	2103      	movs	r1, #3
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f99c 	bl	80081b4 <SDMMC_GetCmdResp6>
 8007e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007e96:	230d      	movs	r3, #13
 8007e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e9a:	2340      	movs	r3, #64	@ 0x40
 8007e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ea6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff fd62 	bl	8007978 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb8:	210d      	movs	r1, #13
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f806 	bl	8007ecc <SDMMC_GetCmdResp1>
 8007ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007eda:	4b70      	ldr	r3, [pc, #448]	@ (800809c <SDMMC_GetCmdResp1+0x1d0>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a70      	ldr	r2, [pc, #448]	@ (80080a0 <SDMMC_GetCmdResp1+0x1d4>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	0a5a      	lsrs	r2, r3, #9
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	fb02 f303 	mul.w	r3, r2, r3
 8007eec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	1e5a      	subs	r2, r3, #1
 8007ef2:	61fa      	str	r2, [r7, #28]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ef8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007efc:	e0c9      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f02:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0ef      	beq.n	8007eee <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1ea      	bne.n	8007eee <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2204      	movs	r2, #4
 8007f28:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f2a:	2304      	movs	r3, #4
 8007f2c:	e0b1      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d004      	beq.n	8007f44 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0a6      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	22c5      	movs	r2, #197	@ 0xc5
 8007f48:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fd3e 	bl	80079cc <SDMMC_GetCommandResponse>
 8007f50:	4603      	mov	r3, r0
 8007f52:	461a      	mov	r2, r3
 8007f54:	7afb      	ldrb	r3, [r7, #11]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d001      	beq.n	8007f5e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e099      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007f5e:	2100      	movs	r1, #0
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff fd40 	bl	80079e6 <SDMMC_GetResponse>
 8007f66:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80080a4 <SDMMC_GetCmdResp1+0x1d8>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e08d      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da02      	bge.n	8007f82 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007f80:	e087      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007f8c:	2340      	movs	r3, #64	@ 0x40
 8007f8e:	e080      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007f9a:	2380      	movs	r3, #128	@ 0x80
 8007f9c:	e079      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007fac:	e071      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fbc:	e069      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007fc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fcc:	e061      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007fd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007fdc:	e059      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d002      	beq.n	8007fee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007fe8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007fec:	e051      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007ffc:	e049      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008008:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800800c:	e041      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d002      	beq.n	800801e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008018:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800801c:	e039      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008028:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800802c:	e031      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008038:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800803c:	e029      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008048:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800804c:	e021      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d002      	beq.n	800805e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008058:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800805c:	e019      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008068:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800806c:	e011      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d002      	beq.n	800807e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008078:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800807c:	e009      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	f003 0308 	and.w	r3, r3, #8
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008088:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800808c:	e001      	b.n	8008092 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800808e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	2000002c 	.word	0x2000002c
 80080a0:	10624dd3 	.word	0x10624dd3
 80080a4:	fdffe008 	.word	0xfdffe008

080080a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80080b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008130 <SDMMC_GetCmdResp2+0x88>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008134 <SDMMC_GetCmdResp2+0x8c>)
 80080b6:	fba2 2303 	umull	r2, r3, r2, r3
 80080ba:	0a5b      	lsrs	r3, r3, #9
 80080bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080c0:	fb02 f303 	mul.w	r3, r2, r3
 80080c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	1e5a      	subs	r2, r3, #1
 80080ca:	60fa      	str	r2, [r7, #12]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80080d4:	e026      	b.n	8008124 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0ef      	beq.n	80080c6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1ea      	bne.n	80080c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d004      	beq.n	8008106 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2204      	movs	r2, #4
 8008100:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008102:	2304      	movs	r3, #4
 8008104:	e00e      	b.n	8008124 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008118:	2301      	movs	r3, #1
 800811a:	e003      	b.n	8008124 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	22c5      	movs	r2, #197	@ 0xc5
 8008120:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	2000002c 	.word	0x2000002c
 8008134:	10624dd3 	.word	0x10624dd3

08008138 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008140:	4b1a      	ldr	r3, [pc, #104]	@ (80081ac <SDMMC_GetCmdResp3+0x74>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a1a      	ldr	r2, [pc, #104]	@ (80081b0 <SDMMC_GetCmdResp3+0x78>)
 8008146:	fba2 2303 	umull	r2, r3, r2, r3
 800814a:	0a5b      	lsrs	r3, r3, #9
 800814c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008150:	fb02 f303 	mul.w	r3, r2, r3
 8008154:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1e5a      	subs	r2, r3, #1
 800815a:	60fa      	str	r2, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008160:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008164:	e01b      	b.n	800819e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0ef      	beq.n	8008156 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1ea      	bne.n	8008156 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008184:	f003 0304 	and.w	r3, r3, #4
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2204      	movs	r2, #4
 8008190:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008192:	2304      	movs	r3, #4
 8008194:	e003      	b.n	800819e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	22c5      	movs	r2, #197	@ 0xc5
 800819a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	2000002c 	.word	0x2000002c
 80081b0:	10624dd3 	.word	0x10624dd3

080081b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	460b      	mov	r3, r1
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081c2:	4b35      	ldr	r3, [pc, #212]	@ (8008298 <SDMMC_GetCmdResp6+0xe4>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a35      	ldr	r2, [pc, #212]	@ (800829c <SDMMC_GetCmdResp6+0xe8>)
 80081c8:	fba2 2303 	umull	r2, r3, r2, r3
 80081cc:	0a5b      	lsrs	r3, r3, #9
 80081ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	1e5a      	subs	r2, r3, #1
 80081dc:	61fa      	str	r2, [r7, #28]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80081e6:	e052      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0ef      	beq.n	80081d8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1ea      	bne.n	80081d8 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b00      	cmp	r3, #0
 800820c:	d004      	beq.n	8008218 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2204      	movs	r2, #4
 8008212:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008214:	2304      	movs	r3, #4
 8008216:	e03a      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800822a:	2301      	movs	r3, #1
 800822c:	e02f      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800822e:	68f8      	ldr	r0, [r7, #12]
 8008230:	f7ff fbcc 	bl	80079cc <SDMMC_GetCommandResponse>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
 8008238:	7afb      	ldrb	r3, [r7, #11]
 800823a:	4293      	cmp	r3, r2
 800823c:	d001      	beq.n	8008242 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800823e:	2301      	movs	r3, #1
 8008240:	e025      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	22c5      	movs	r2, #197	@ 0xc5
 8008246:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008248:	2100      	movs	r1, #0
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fbcb 	bl	80079e6 <SDMMC_GetResponse>
 8008250:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	0c1b      	lsrs	r3, r3, #16
 8008260:	b29a      	uxth	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008266:	2300      	movs	r3, #0
 8008268:	e011      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008274:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008278:	e009      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008288:	e001      	b.n	800828e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800828a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800828e:	4618      	mov	r0, r3
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	2000002c 	.word	0x2000002c
 800829c:	10624dd3 	.word	0x10624dd3

080082a0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082a8:	4b22      	ldr	r3, [pc, #136]	@ (8008334 <SDMMC_GetCmdResp7+0x94>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a22      	ldr	r2, [pc, #136]	@ (8008338 <SDMMC_GetCmdResp7+0x98>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	0a5b      	lsrs	r3, r3, #9
 80082b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	1e5a      	subs	r2, r3, #1
 80082c2:	60fa      	str	r2, [r7, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80082cc:	e02c      	b.n	8008328 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d0ef      	beq.n	80082be <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1ea      	bne.n	80082be <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ec:	f003 0304 	and.w	r3, r3, #4
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d004      	beq.n	80082fe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2204      	movs	r2, #4
 80082f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80082fa:	2304      	movs	r3, #4
 80082fc:	e014      	b.n	8008328 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008310:	2301      	movs	r3, #1
 8008312:	e009      	b.n	8008328 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2240      	movs	r2, #64	@ 0x40
 8008324:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008326:	2300      	movs	r3, #0

}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	2000002c 	.word	0x2000002c
 8008338:	10624dd3 	.word	0x10624dd3

0800833c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008344:	4b11      	ldr	r3, [pc, #68]	@ (800838c <SDMMC_GetCmdError+0x50>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a11      	ldr	r2, [pc, #68]	@ (8008390 <SDMMC_GetCmdError+0x54>)
 800834a:	fba2 2303 	umull	r2, r3, r2, r3
 800834e:	0a5b      	lsrs	r3, r3, #9
 8008350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008354:	fb02 f303 	mul.w	r3, r2, r3
 8008358:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	60fa      	str	r2, [r7, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008364:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008368:	e009      	b.n	800837e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f1      	beq.n	800835a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	22c5      	movs	r2, #197	@ 0xc5
 800837a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2000002c 	.word	0x2000002c
 8008390:	10624dd3 	.word	0x10624dd3

08008394 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008398:	4904      	ldr	r1, [pc, #16]	@ (80083ac <MX_FATFS_Init+0x18>)
 800839a:	4805      	ldr	r0, [pc, #20]	@ (80083b0 <MX_FATFS_Init+0x1c>)
 800839c:	f003 fade 	bl	800b95c <FATFS_LinkDriver>
 80083a0:	4603      	mov	r3, r0
 80083a2:	461a      	mov	r2, r3
 80083a4:	4b03      	ldr	r3, [pc, #12]	@ (80083b4 <MX_FATFS_Init+0x20>)
 80083a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80083a8:	bf00      	nop
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20002bb0 	.word	0x20002bb0
 80083b0:	0800db14 	.word	0x0800db14
 80083b4:	20002bac 	.word	0x20002bac

080083b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80083b8:	b480      	push	{r7}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80083bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80083be:	4618      	mov	r0, r3
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80083d2:	f000 f888 	bl	80084e6 <BSP_SD_IsDetected>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d001      	beq.n	80083e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80083dc:	2302      	movs	r3, #2
 80083de:	e005      	b.n	80083ec <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80083e0:	4804      	ldr	r0, [pc, #16]	@ (80083f4 <BSP_SD_Init+0x2c>)
 80083e2:	f7fc fb51 	bl	8004a88 <HAL_SD_Init>
 80083e6:	4603      	mov	r3, r0
 80083e8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80083ea:	79fb      	ldrb	r3, [r7, #7]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200021f0 	.word	0x200021f0

080083f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	68f9      	ldr	r1, [r7, #12]
 800840e:	4806      	ldr	r0, [pc, #24]	@ (8008428 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008410:	f7fc fc1c 	bl	8004c4c <HAL_SD_ReadBlocks_DMA>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800841e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	200021f0 	.word	0x200021f0

0800842c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b086      	sub	sp, #24
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	68f9      	ldr	r1, [r7, #12]
 8008442:	4806      	ldr	r0, [pc, #24]	@ (800845c <BSP_SD_WriteBlocks_DMA+0x30>)
 8008444:	f7fc fcca 	bl	8004ddc <HAL_SD_WriteBlocks_DMA>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008452:	7dfb      	ldrb	r3, [r7, #23]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200021f0 	.word	0x200021f0

08008460 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008464:	4805      	ldr	r0, [pc, #20]	@ (800847c <BSP_SD_GetCardState+0x1c>)
 8008466:	f7fd f991 	bl	800578c <HAL_SD_GetCardState>
 800846a:	4603      	mov	r3, r0
 800846c:	2b04      	cmp	r3, #4
 800846e:	bf14      	ite	ne
 8008470:	2301      	movne	r3, #1
 8008472:	2300      	moveq	r3, #0
 8008474:	b2db      	uxtb	r3, r3
}
 8008476:	4618      	mov	r0, r3
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	200021f0 	.word	0x200021f0

08008480 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	4803      	ldr	r0, [pc, #12]	@ (8008498 <BSP_SD_GetCardInfo+0x18>)
 800848c:	f7fd f896 	bl	80055bc <HAL_SD_GetCardInfo>
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	200021f0 	.word	0x200021f0

0800849c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80084a4:	f000 f818 	bl	80084d8 <BSP_SD_AbortCallback>
}
 80084a8:	bf00      	nop
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80084b8:	f000 f9a8 	bl	800880c <BSP_SD_WriteCpltCallback>
}
 80084bc:	bf00      	nop
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80084cc:	f000 f9aa 	bl	8008824 <BSP_SD_ReadCpltCallback>
}
 80084d0:	bf00      	nop
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0

}
 80084dc:	bf00      	nop
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80084ec:	2301      	movs	r3, #1
 80084ee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80084f0:	f000 f80c 	bl	800850c <BSP_PlatformIsDetected>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80084fa:	2300      	movs	r3, #0
 80084fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	b2db      	uxtb	r3, r3
}
 8008502:	4618      	mov	r0, r3
 8008504:	3708      	adds	r7, #8
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
	...

0800850c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008512:	2301      	movs	r3, #1
 8008514:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008516:	2110      	movs	r1, #16
 8008518:	4806      	ldr	r0, [pc, #24]	@ (8008534 <BSP_PlatformIsDetected+0x28>)
 800851a:	f7f9 fe23 	bl	8002164 <HAL_GPIO_ReadPin>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8008524:	2300      	movs	r3, #0
 8008526:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008528:	79fb      	ldrb	r3, [r7, #7]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	48000400 	.word	0x48000400

08008538 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008540:	f7f9 f8ae 	bl	80016a0 <HAL_GetTick>
 8008544:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008546:	e006      	b.n	8008556 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008548:	f7ff ff8a 	bl	8008460 <BSP_SD_GetCardState>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008552:	2300      	movs	r3, #0
 8008554:	e009      	b.n	800856a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008556:	f7f9 f8a3 	bl	80016a0 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	429a      	cmp	r2, r3
 8008564:	d8f0      	bhi.n	8008548 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	4603      	mov	r3, r0
 800857c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800857e:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <SD_CheckStatus+0x38>)
 8008580:	2201      	movs	r2, #1
 8008582:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008584:	f7ff ff6c 	bl	8008460 <BSP_SD_GetCardState>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d107      	bne.n	800859e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800858e:	4b07      	ldr	r3, [pc, #28]	@ (80085ac <SD_CheckStatus+0x38>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	b2db      	uxtb	r3, r3
 8008594:	f023 0301 	bic.w	r3, r3, #1
 8008598:	b2da      	uxtb	r2, r3
 800859a:	4b04      	ldr	r3, [pc, #16]	@ (80085ac <SD_CheckStatus+0x38>)
 800859c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800859e:	4b03      	ldr	r3, [pc, #12]	@ (80085ac <SD_CheckStatus+0x38>)
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	b2db      	uxtb	r3, r3
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3708      	adds	r7, #8
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20000035 	.word	0x20000035

080085b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	4603      	mov	r3, r0
 80085b8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80085ba:	f7ff ff05 	bl	80083c8 <BSP_SD_Init>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d107      	bne.n	80085d4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80085c4:	79fb      	ldrb	r3, [r7, #7]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7ff ffd4 	bl	8008574 <SD_CheckStatus>
 80085cc:	4603      	mov	r3, r0
 80085ce:	461a      	mov	r2, r3
 80085d0:	4b04      	ldr	r3, [pc, #16]	@ (80085e4 <SD_initialize+0x34>)
 80085d2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80085d4:	4b03      	ldr	r3, [pc, #12]	@ (80085e4 <SD_initialize+0x34>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	b2db      	uxtb	r3, r3
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000035 	.word	0x20000035

080085e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f7ff ffbd 	bl	8008574 <SD_CheckStatus>
 80085fa:	4603      	mov	r3, r0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	60b9      	str	r1, [r7, #8]
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008618:	f247 5030 	movw	r0, #30000	@ 0x7530
 800861c:	f7ff ff8c 	bl	8008538 <SD_CheckStatusWithTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	da01      	bge.n	800862a <SD_read+0x26>
  {
    return res;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	e03b      	b.n	80086a2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	68b8      	ldr	r0, [r7, #8]
 8008630:	f7ff fee2 	bl	80083f8 <BSP_SD_ReadBlocks_DMA>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d132      	bne.n	80086a0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800863a:	4b1c      	ldr	r3, [pc, #112]	@ (80086ac <SD_read+0xa8>)
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008640:	f7f9 f82e 	bl	80016a0 <HAL_GetTick>
 8008644:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008646:	bf00      	nop
 8008648:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <SD_read+0xa8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d108      	bne.n	8008662 <SD_read+0x5e>
 8008650:	f7f9 f826 	bl	80016a0 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f247 522f 	movw	r2, #29999	@ 0x752f
 800865e:	4293      	cmp	r3, r2
 8008660:	d9f2      	bls.n	8008648 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <SD_read+0xa8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d102      	bne.n	8008670 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	75fb      	strb	r3, [r7, #23]
 800866e:	e017      	b.n	80086a0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008670:	4b0e      	ldr	r3, [pc, #56]	@ (80086ac <SD_read+0xa8>)
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008676:	f7f9 f813 	bl	80016a0 <HAL_GetTick>
 800867a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800867c:	e007      	b.n	800868e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800867e:	f7ff feef 	bl	8008460 <BSP_SD_GetCardState>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d102      	bne.n	800868e <SD_read+0x8a>
          {
            res = RES_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800868c:	e008      	b.n	80086a0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800868e:	f7f9 f807 	bl	80016a0 <HAL_GetTick>
 8008692:	4602      	mov	r2, r0
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	f247 522f 	movw	r2, #29999	@ 0x752f
 800869c:	4293      	cmp	r3, r2
 800869e:	d9ee      	bls.n	800867e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20002bb8 	.word	0x20002bb8

080086b0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60b9      	str	r1, [r7, #8]
 80086b8:	607a      	str	r2, [r7, #4]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80086c4:	4b24      	ldr	r3, [pc, #144]	@ (8008758 <SD_write+0xa8>)
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80086ca:	f247 5030 	movw	r0, #30000	@ 0x7530
 80086ce:	f7ff ff33 	bl	8008538 <SD_CheckStatusWithTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	da01      	bge.n	80086dc <SD_write+0x2c>
  {
    return res;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	e038      	b.n	800874e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	68b8      	ldr	r0, [r7, #8]
 80086e2:	f7ff fea3 	bl	800842c <BSP_SD_WriteBlocks_DMA>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d12f      	bne.n	800874c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80086ec:	f7f8 ffd8 	bl	80016a0 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80086f2:	bf00      	nop
 80086f4:	4b18      	ldr	r3, [pc, #96]	@ (8008758 <SD_write+0xa8>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d108      	bne.n	800870e <SD_write+0x5e>
 80086fc:	f7f8 ffd0 	bl	80016a0 <HAL_GetTick>
 8008700:	4602      	mov	r2, r0
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	1ad3      	subs	r3, r2, r3
 8008706:	f247 522f 	movw	r2, #29999	@ 0x752f
 800870a:	4293      	cmp	r3, r2
 800870c:	d9f2      	bls.n	80086f4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800870e:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <SD_write+0xa8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d102      	bne.n	800871c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	75fb      	strb	r3, [r7, #23]
 800871a:	e017      	b.n	800874c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800871c:	4b0e      	ldr	r3, [pc, #56]	@ (8008758 <SD_write+0xa8>)
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008722:	f7f8 ffbd 	bl	80016a0 <HAL_GetTick>
 8008726:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008728:	e007      	b.n	800873a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800872a:	f7ff fe99 	bl	8008460 <BSP_SD_GetCardState>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d102      	bne.n	800873a <SD_write+0x8a>
          {
            res = RES_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	75fb      	strb	r3, [r7, #23]
            break;
 8008738:	e008      	b.n	800874c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800873a:	f7f8 ffb1 	bl	80016a0 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008748:	4293      	cmp	r3, r2
 800874a:	d9ee      	bls.n	800872a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800874c:	7dfb      	ldrb	r3, [r7, #23]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20002bb4 	.word	0x20002bb4

0800875c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b08c      	sub	sp, #48	@ 0x30
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	603a      	str	r2, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
 8008768:	460b      	mov	r3, r1
 800876a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008772:	4b25      	ldr	r3, [pc, #148]	@ (8008808 <SD_ioctl+0xac>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <SD_ioctl+0x28>
 8008780:	2303      	movs	r3, #3
 8008782:	e03c      	b.n	80087fe <SD_ioctl+0xa2>

  switch (cmd)
 8008784:	79bb      	ldrb	r3, [r7, #6]
 8008786:	2b03      	cmp	r3, #3
 8008788:	d834      	bhi.n	80087f4 <SD_ioctl+0x98>
 800878a:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <SD_ioctl+0x34>)
 800878c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a9 	.word	0x080087a9
 8008798:	080087c1 	.word	0x080087c1
 800879c:	080087db 	.word	0x080087db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80087a6:	e028      	b.n	80087fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80087a8:	f107 030c 	add.w	r3, r7, #12
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7ff fe67 	bl	8008480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80087b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80087be:	e01c      	b.n	80087fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fe5b 	bl	8008480 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80087d8:	e00f      	b.n	80087fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80087da:	f107 030c 	add.w	r3, r7, #12
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff fe4e 	bl	8008480 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	0a5a      	lsrs	r2, r3, #9
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80087f2:	e002      	b.n	80087fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80087f4:	2304      	movs	r3, #4
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80087fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3730      	adds	r7, #48	@ 0x30
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000035 	.word	0x20000035

0800880c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008810:	4b03      	ldr	r3, [pc, #12]	@ (8008820 <BSP_SD_WriteCpltCallback+0x14>)
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
}
 8008816:	bf00      	nop
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	20002bb4 	.word	0x20002bb4

08008824 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008828:	4b03      	ldr	r3, [pc, #12]	@ (8008838 <BSP_SD_ReadCpltCallback+0x14>)
 800882a:	2201      	movs	r2, #1
 800882c:	601a      	str	r2, [r3, #0]
}
 800882e:	bf00      	nop
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	20002bb8 	.word	0x20002bb8

0800883c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	4603      	mov	r3, r0
 8008844:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008846:	79fb      	ldrb	r3, [r7, #7]
 8008848:	4a08      	ldr	r2, [pc, #32]	@ (800886c <disk_status+0x30>)
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	4413      	add	r3, r2
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	79fa      	ldrb	r2, [r7, #7]
 8008854:	4905      	ldr	r1, [pc, #20]	@ (800886c <disk_status+0x30>)
 8008856:	440a      	add	r2, r1
 8008858:	7a12      	ldrb	r2, [r2, #8]
 800885a:	4610      	mov	r0, r2
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20002de4 	.word	0x20002de4

08008870 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	4a0d      	ldr	r2, [pc, #52]	@ (80088b8 <disk_initialize+0x48>)
 8008882:	5cd3      	ldrb	r3, [r2, r3]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d111      	bne.n	80088ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008888:	79fb      	ldrb	r3, [r7, #7]
 800888a:	4a0b      	ldr	r2, [pc, #44]	@ (80088b8 <disk_initialize+0x48>)
 800888c:	2101      	movs	r1, #1
 800888e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	4a09      	ldr	r2, [pc, #36]	@ (80088b8 <disk_initialize+0x48>)
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	79fa      	ldrb	r2, [r7, #7]
 800889e:	4906      	ldr	r1, [pc, #24]	@ (80088b8 <disk_initialize+0x48>)
 80088a0:	440a      	add	r2, r1
 80088a2:	7a12      	ldrb	r2, [r2, #8]
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	4603      	mov	r3, r0
 80088aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80088ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20002de4 	.word	0x20002de4

080088bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80088bc:	b590      	push	{r4, r7, lr}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60b9      	str	r1, [r7, #8]
 80088c4:	607a      	str	r2, [r7, #4]
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	4a0a      	ldr	r2, [pc, #40]	@ (80088f8 <disk_read+0x3c>)
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	689c      	ldr	r4, [r3, #8]
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	4a07      	ldr	r2, [pc, #28]	@ (80088f8 <disk_read+0x3c>)
 80088dc:	4413      	add	r3, r2
 80088de:	7a18      	ldrb	r0, [r3, #8]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	47a0      	blx	r4
 80088e8:	4603      	mov	r3, r0
 80088ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	371c      	adds	r7, #28
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd90      	pop	{r4, r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20002de4 	.word	0x20002de4

080088fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80088fc:	b590      	push	{r4, r7, lr}
 80088fe:	b087      	sub	sp, #28
 8008900:	af00      	add	r7, sp, #0
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	607a      	str	r2, [r7, #4]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	4a0a      	ldr	r2, [pc, #40]	@ (8008938 <disk_write+0x3c>)
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	68dc      	ldr	r4, [r3, #12]
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	4a07      	ldr	r2, [pc, #28]	@ (8008938 <disk_write+0x3c>)
 800891c:	4413      	add	r3, r2
 800891e:	7a18      	ldrb	r0, [r3, #8]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	47a0      	blx	r4
 8008928:	4603      	mov	r3, r0
 800892a:	75fb      	strb	r3, [r7, #23]
  return res;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
}
 800892e:	4618      	mov	r0, r3
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	bd90      	pop	{r4, r7, pc}
 8008936:	bf00      	nop
 8008938:	20002de4 	.word	0x20002de4

0800893c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	4603      	mov	r3, r0
 8008944:	603a      	str	r2, [r7, #0]
 8008946:	71fb      	strb	r3, [r7, #7]
 8008948:	460b      	mov	r3, r1
 800894a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800894c:	79fb      	ldrb	r3, [r7, #7]
 800894e:	4a09      	ldr	r2, [pc, #36]	@ (8008974 <disk_ioctl+0x38>)
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	79fa      	ldrb	r2, [r7, #7]
 800895a:	4906      	ldr	r1, [pc, #24]	@ (8008974 <disk_ioctl+0x38>)
 800895c:	440a      	add	r2, r1
 800895e:	7a10      	ldrb	r0, [r2, #8]
 8008960:	79b9      	ldrb	r1, [r7, #6]
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	4798      	blx	r3
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
  return res;
 800896a:	7bfb      	ldrb	r3, [r7, #15]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20002de4 	.word	0x20002de4

08008978 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3301      	adds	r3, #1
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008988:	89fb      	ldrh	r3, [r7, #14]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	b21a      	sxth	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b21b      	sxth	r3, r3
 8008994:	4313      	orrs	r3, r2
 8008996:	b21b      	sxth	r3, r3
 8008998:	81fb      	strh	r3, [r7, #14]
	return rv;
 800899a:	89fb      	ldrh	r3, [r7, #14]
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	3303      	adds	r3, #3
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	021b      	lsls	r3, r3, #8
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	3202      	adds	r2, #2
 80089c0:	7812      	ldrb	r2, [r2, #0]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	3201      	adds	r2, #1
 80089ce:	7812      	ldrb	r2, [r2, #0]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	021b      	lsls	r3, r3, #8
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7812      	ldrb	r2, [r2, #0]
 80089dc:	4313      	orrs	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
	return rv;
 80089e0:	68fb      	ldr	r3, [r7, #12]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	1c5a      	adds	r2, r3, #1
 80089fe:	607a      	str	r2, [r7, #4]
 8008a00:	887a      	ldrh	r2, [r7, #2]
 8008a02:	b2d2      	uxtb	r2, r2
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	887b      	ldrh	r3, [r7, #2]
 8008a08:	0a1b      	lsrs	r3, r3, #8
 8008a0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	887a      	ldrh	r2, [r7, #2]
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	701a      	strb	r2, [r3, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	b2d2      	uxtb	r2, r2
 8008a38:	701a      	strb	r2, [r3, #0]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	0a1b      	lsrs	r3, r3, #8
 8008a3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	607a      	str	r2, [r7, #4]
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	607a      	str	r2, [r7, #4]
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	b2d2      	uxtb	r2, r2
 8008a5c:	701a      	strb	r2, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	0a1b      	lsrs	r3, r3, #8
 8008a62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	607a      	str	r2, [r7, #4]
 8008a6a:	683a      	ldr	r2, [r7, #0]
 8008a6c:	b2d2      	uxtb	r2, r2
 8008a6e:	701a      	strb	r2, [r3, #0]
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a7c:	b480      	push	{r7}
 8008a7e:	b087      	sub	sp, #28
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00d      	beq.n	8008ab2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	1c53      	adds	r3, r2, #1
 8008a9a:	613b      	str	r3, [r7, #16]
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	1c59      	adds	r1, r3, #1
 8008aa0:	6179      	str	r1, [r7, #20]
 8008aa2:	7812      	ldrb	r2, [r2, #0]
 8008aa4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	607b      	str	r3, [r7, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f1      	bne.n	8008a96 <mem_cpy+0x1a>
	}
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008abe:	b480      	push	{r7}
 8008ac0:	b087      	sub	sp, #28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	1c5a      	adds	r2, r3, #1
 8008ad2:	617a      	str	r2, [r7, #20]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3b01      	subs	r3, #1
 8008ade:	607b      	str	r3, [r7, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f3      	bne.n	8008ace <mem_set+0x10>
}
 8008ae6:	bf00      	nop
 8008ae8:	bf00      	nop
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008af4:	b480      	push	{r7}
 8008af6:	b089      	sub	sp, #36	@ 0x24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	61fb      	str	r3, [r7, #28]
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	1c5a      	adds	r2, r3, #1
 8008b10:	61fa      	str	r2, [r7, #28]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	4619      	mov	r1, r3
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	61ba      	str	r2, [r7, #24]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	1acb      	subs	r3, r1, r3
 8008b20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	607b      	str	r3, [r7, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <mem_cmp+0x40>
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0eb      	beq.n	8008b0c <mem_cmp+0x18>

	return r;
 8008b34:	697b      	ldr	r3, [r7, #20]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3724      	adds	r7, #36	@ 0x24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008b42:	b480      	push	{r7}
 8008b44:	b083      	sub	sp, #12
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008b4c:	e002      	b.n	8008b54 <chk_chr+0x12>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	3301      	adds	r3, #1
 8008b52:	607b      	str	r3, [r7, #4]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <chk_chr+0x26>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d1f2      	bne.n	8008b4e <chk_chr+0xc>
	return *str;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e029      	b.n	8008be0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008b8c:	4a27      	ldr	r2, [pc, #156]	@ (8008c2c <chk_lock+0xb4>)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	011b      	lsls	r3, r3, #4
 8008b92:	4413      	add	r3, r2
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01d      	beq.n	8008bd6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b9a:	4a24      	ldr	r2, [pc, #144]	@ (8008c2c <chk_lock+0xb4>)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	011b      	lsls	r3, r3, #4
 8008ba0:	4413      	add	r3, r2
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d116      	bne.n	8008bda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008bac:	4a1f      	ldr	r2, [pc, #124]	@ (8008c2c <chk_lock+0xb4>)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	011b      	lsls	r3, r3, #4
 8008bb2:	4413      	add	r3, r2
 8008bb4:	3304      	adds	r3, #4
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d10c      	bne.n	8008bda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8008c2c <chk_lock+0xb4>)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	4413      	add	r3, r2
 8008bc8:	3308      	adds	r3, #8
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d102      	bne.n	8008bda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008bd4:	e007      	b.n	8008be6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d9d2      	bls.n	8008b8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d109      	bne.n	8008c00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <chk_lock+0x80>
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d101      	bne.n	8008bfc <chk_lock+0x84>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	e010      	b.n	8008c1e <chk_lock+0xa6>
 8008bfc:	2312      	movs	r3, #18
 8008bfe:	e00e      	b.n	8008c1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d108      	bne.n	8008c18 <chk_lock+0xa0>
 8008c06:	4a09      	ldr	r2, [pc, #36]	@ (8008c2c <chk_lock+0xb4>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	4413      	add	r3, r2
 8008c0e:	330c      	adds	r3, #12
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c16:	d101      	bne.n	8008c1c <chk_lock+0xa4>
 8008c18:	2310      	movs	r3, #16
 8008c1a:	e000      	b.n	8008c1e <chk_lock+0xa6>
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3714      	adds	r7, #20
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20002bc4 	.word	0x20002bc4

08008c30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c36:	2300      	movs	r3, #0
 8008c38:	607b      	str	r3, [r7, #4]
 8008c3a:	e002      	b.n	8008c42 <enq_lock+0x12>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d806      	bhi.n	8008c56 <enq_lock+0x26>
 8008c48:	4a09      	ldr	r2, [pc, #36]	@ (8008c70 <enq_lock+0x40>)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	011b      	lsls	r3, r3, #4
 8008c4e:	4413      	add	r3, r2
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1f2      	bne.n	8008c3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	bf14      	ite	ne
 8008c5c:	2301      	movne	r3, #1
 8008c5e:	2300      	moveq	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20002bc4 	.word	0x20002bc4

08008c74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	e01f      	b.n	8008cc4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008c84:	4a41      	ldr	r2, [pc, #260]	@ (8008d8c <inc_lock+0x118>)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	4413      	add	r3, r2
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d113      	bne.n	8008cbe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008c96:	4a3d      	ldr	r2, [pc, #244]	@ (8008d8c <inc_lock+0x118>)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	4413      	add	r3, r2
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d109      	bne.n	8008cbe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008caa:	4a38      	ldr	r2, [pc, #224]	@ (8008d8c <inc_lock+0x118>)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	4413      	add	r3, r2
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d006      	beq.n	8008ccc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d9dc      	bls.n	8008c84 <inc_lock+0x10>
 8008cca:	e000      	b.n	8008cce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ccc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d132      	bne.n	8008d3a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e002      	b.n	8008ce0 <inc_lock+0x6c>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d806      	bhi.n	8008cf4 <inc_lock+0x80>
 8008ce6:	4a29      	ldr	r2, [pc, #164]	@ (8008d8c <inc_lock+0x118>)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	4413      	add	r3, r2
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1f2      	bne.n	8008cda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d101      	bne.n	8008cfe <inc_lock+0x8a>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e040      	b.n	8008d80 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	4922      	ldr	r1, [pc, #136]	@ (8008d8c <inc_lock+0x118>)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	011b      	lsls	r3, r3, #4
 8008d08:	440b      	add	r3, r1
 8008d0a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	491e      	ldr	r1, [pc, #120]	@ (8008d8c <inc_lock+0x118>)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	440b      	add	r3, r1
 8008d18:	3304      	adds	r3, #4
 8008d1a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695a      	ldr	r2, [r3, #20]
 8008d20:	491a      	ldr	r1, [pc, #104]	@ (8008d8c <inc_lock+0x118>)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	011b      	lsls	r3, r3, #4
 8008d26:	440b      	add	r3, r1
 8008d28:	3308      	adds	r3, #8
 8008d2a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008d2c:	4a17      	ldr	r2, [pc, #92]	@ (8008d8c <inc_lock+0x118>)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	011b      	lsls	r3, r3, #4
 8008d32:	4413      	add	r3, r2
 8008d34:	330c      	adds	r3, #12
 8008d36:	2200      	movs	r2, #0
 8008d38:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <inc_lock+0xe0>
 8008d40:	4a12      	ldr	r2, [pc, #72]	@ (8008d8c <inc_lock+0x118>)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	011b      	lsls	r3, r3, #4
 8008d46:	4413      	add	r3, r2
 8008d48:	330c      	adds	r3, #12
 8008d4a:	881b      	ldrh	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <inc_lock+0xe0>
 8008d50:	2300      	movs	r3, #0
 8008d52:	e015      	b.n	8008d80 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d108      	bne.n	8008d6c <inc_lock+0xf8>
 8008d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d8c <inc_lock+0x118>)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	011b      	lsls	r3, r3, #4
 8008d60:	4413      	add	r3, r2
 8008d62:	330c      	adds	r3, #12
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	e001      	b.n	8008d70 <inc_lock+0xfc>
 8008d6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d70:	4906      	ldr	r1, [pc, #24]	@ (8008d8c <inc_lock+0x118>)
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	440b      	add	r3, r1
 8008d78:	330c      	adds	r3, #12
 8008d7a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	3301      	adds	r3, #1
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	20002bc4 	.word	0x20002bc4

08008d90 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b085      	sub	sp, #20
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d825      	bhi.n	8008df0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008da4:	4a17      	ldr	r2, [pc, #92]	@ (8008e04 <dec_lock+0x74>)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	011b      	lsls	r3, r3, #4
 8008daa:	4413      	add	r3, r2
 8008dac:	330c      	adds	r3, #12
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008db2:	89fb      	ldrh	r3, [r7, #14]
 8008db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008db8:	d101      	bne.n	8008dbe <dec_lock+0x2e>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008dbe:	89fb      	ldrh	r3, [r7, #14]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <dec_lock+0x3a>
 8008dc4:	89fb      	ldrh	r3, [r7, #14]
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008dca:	4a0e      	ldr	r2, [pc, #56]	@ (8008e04 <dec_lock+0x74>)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	011b      	lsls	r3, r3, #4
 8008dd0:	4413      	add	r3, r2
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	89fa      	ldrh	r2, [r7, #14]
 8008dd6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008dd8:	89fb      	ldrh	r3, [r7, #14]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d105      	bne.n	8008dea <dec_lock+0x5a>
 8008dde:	4a09      	ldr	r2, [pc, #36]	@ (8008e04 <dec_lock+0x74>)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	4413      	add	r3, r2
 8008de6:	2200      	movs	r2, #0
 8008de8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	737b      	strb	r3, [r7, #13]
 8008dee:	e001      	b.n	8008df4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008df0:	2302      	movs	r3, #2
 8008df2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008df4:	7b7b      	ldrb	r3, [r7, #13]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3714      	adds	r7, #20
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	20002bc4 	.word	0x20002bc4

08008e08 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	e010      	b.n	8008e38 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008e16:	4a0d      	ldr	r2, [pc, #52]	@ (8008e4c <clear_lock+0x44>)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	4413      	add	r3, r2
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d105      	bne.n	8008e32 <clear_lock+0x2a>
 8008e26:	4a09      	ldr	r2, [pc, #36]	@ (8008e4c <clear_lock+0x44>)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	011b      	lsls	r3, r3, #4
 8008e2c:	4413      	add	r3, r2
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d9eb      	bls.n	8008e16 <clear_lock+0xe>
	}
}
 8008e3e:	bf00      	nop
 8008e40:	bf00      	nop
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	20002bc4 	.word	0x20002bc4

08008e50 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	78db      	ldrb	r3, [r3, #3]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d034      	beq.n	8008ece <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e68:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7858      	ldrb	r0, [r3, #1]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008e74:	2301      	movs	r3, #1
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	f7ff fd40 	bl	80088fc <disk_write>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d002      	beq.n	8008e88 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	73fb      	strb	r3, [r7, #15]
 8008e86:	e022      	b.n	8008ece <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	1ad2      	subs	r2, r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d217      	bcs.n	8008ece <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	789b      	ldrb	r3, [r3, #2]
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	e010      	b.n	8008ec8 <sync_window+0x78>
					wsect += fs->fsize;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	4413      	add	r3, r2
 8008eae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	7858      	ldrb	r0, [r3, #1]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008eba:	2301      	movs	r3, #1
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	f7ff fd1d 	bl	80088fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d8eb      	bhi.n	8008ea6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eea:	683a      	ldr	r2, [r7, #0]
 8008eec:	429a      	cmp	r2, r3
 8008eee:	d01b      	beq.n	8008f28 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff ffad 	bl	8008e50 <sync_window>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d113      	bne.n	8008f28 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7858      	ldrb	r0, [r3, #1]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	683a      	ldr	r2, [r7, #0]
 8008f0e:	f7ff fcd5 	bl	80088bc <disk_read>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d004      	beq.n	8008f22 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008f18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008f1c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f7ff ff87 	bl	8008e50 <sync_window>
 8008f42:	4603      	mov	r3, r0
 8008f44:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d159      	bne.n	8009000 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d149      	bne.n	8008fe8 <sync_fs+0xb4>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	791b      	ldrb	r3, [r3, #4]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d145      	bne.n	8008fe8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	899b      	ldrh	r3, [r3, #12]
 8008f66:	461a      	mov	r2, r3
 8008f68:	2100      	movs	r1, #0
 8008f6a:	f7ff fda8 	bl	8008abe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3338      	adds	r3, #56	@ 0x38
 8008f72:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f76:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fd37 	bl	80089ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	3338      	adds	r3, #56	@ 0x38
 8008f84:	4921      	ldr	r1, [pc, #132]	@ (800900c <sync_fs+0xd8>)
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7ff fd4c 	bl	8008a24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	3338      	adds	r3, #56	@ 0x38
 8008f90:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008f94:	491e      	ldr	r1, [pc, #120]	@ (8009010 <sync_fs+0xdc>)
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7ff fd44 	bl	8008a24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3338      	adds	r3, #56	@ 0x38
 8008fa0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4610      	mov	r0, r2
 8008fac:	f7ff fd3a 	bl	8008a24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3338      	adds	r3, #56	@ 0x38
 8008fb4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7ff fd30 	bl	8008a24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	7858      	ldrb	r0, [r3, #1]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008fdc:	2301      	movs	r3, #1
 8008fde:	f7ff fc8d 	bl	80088fc <disk_write>
			fs->fsi_flag = 0;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	785b      	ldrb	r3, [r3, #1]
 8008fec:	2200      	movs	r2, #0
 8008fee:	2100      	movs	r1, #0
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff fca3 	bl	800893c <disk_ioctl>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <sync_fs+0xcc>
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009000:	7bfb      	ldrb	r3, [r7, #15]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	41615252 	.word	0x41615252
 8009010:	61417272 	.word	0x61417272

08009014 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	3b02      	subs	r3, #2
 8009022:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	69db      	ldr	r3, [r3, #28]
 8009028:	3b02      	subs	r3, #2
 800902a:	683a      	ldr	r2, [r7, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d301      	bcc.n	8009034 <clust2sect+0x20>
 8009030:	2300      	movs	r3, #0
 8009032:	e008      	b.n	8009046 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	895b      	ldrh	r3, [r3, #10]
 8009038:	461a      	mov	r2, r3
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	fb03 f202 	mul.w	r2, r3, r2
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009044:	4413      	add	r3, r2
}
 8009046:	4618      	mov	r0, r3
 8009048:	370c      	adds	r7, #12
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b086      	sub	sp, #24
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d904      	bls.n	8009072 <get_fat+0x20>
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	69db      	ldr	r3, [r3, #28]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009072:	2301      	movs	r3, #1
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e0ba      	b.n	80091ee <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009078:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800907c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	2b03      	cmp	r3, #3
 8009084:	f000 8082 	beq.w	800918c <get_fat+0x13a>
 8009088:	2b03      	cmp	r3, #3
 800908a:	f300 80a6 	bgt.w	80091da <get_fat+0x188>
 800908e:	2b01      	cmp	r3, #1
 8009090:	d002      	beq.n	8009098 <get_fat+0x46>
 8009092:	2b02      	cmp	r3, #2
 8009094:	d055      	beq.n	8009142 <get_fat+0xf0>
 8009096:	e0a0      	b.n	80091da <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	085b      	lsrs	r3, r3, #1
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	4413      	add	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	899b      	ldrh	r3, [r3, #12]
 80090ae:	4619      	mov	r1, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090b6:	4413      	add	r3, r2
 80090b8:	4619      	mov	r1, r3
 80090ba:	6938      	ldr	r0, [r7, #16]
 80090bc:	f7ff ff0c 	bl	8008ed8 <move_window>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 808c 	bne.w	80091e0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	1c5a      	adds	r2, r3, #1
 80090cc:	60fa      	str	r2, [r7, #12]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	8992      	ldrh	r2, [r2, #12]
 80090d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80090d6:	fb01 f202 	mul.w	r2, r1, r2
 80090da:	1a9b      	subs	r3, r3, r2
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4413      	add	r3, r2
 80090e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80090e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	899b      	ldrh	r3, [r3, #12]
 80090ee:	4619      	mov	r1, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80090f6:	4413      	add	r3, r2
 80090f8:	4619      	mov	r1, r3
 80090fa:	6938      	ldr	r0, [r7, #16]
 80090fc:	f7ff feec 	bl	8008ed8 <move_window>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d16e      	bne.n	80091e4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	899b      	ldrh	r3, [r3, #12]
 800910a:	461a      	mov	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009112:	fb01 f202 	mul.w	r2, r1, r2
 8009116:	1a9b      	subs	r3, r3, r2
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009120:	021b      	lsls	r3, r3, #8
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	4313      	orrs	r3, r2
 8009126:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <get_fat+0xe6>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	091b      	lsrs	r3, r3, #4
 8009136:	e002      	b.n	800913e <get_fat+0xec>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800913e:	617b      	str	r3, [r7, #20]
			break;
 8009140:	e055      	b.n	80091ee <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	899b      	ldrh	r3, [r3, #12]
 800914a:	085b      	lsrs	r3, r3, #1
 800914c:	b29b      	uxth	r3, r3
 800914e:	4619      	mov	r1, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	fbb3 f3f1 	udiv	r3, r3, r1
 8009156:	4413      	add	r3, r2
 8009158:	4619      	mov	r1, r3
 800915a:	6938      	ldr	r0, [r7, #16]
 800915c:	f7ff febc 	bl	8008ed8 <move_window>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d140      	bne.n	80091e8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	8992      	ldrh	r2, [r2, #12]
 8009174:	fbb3 f0f2 	udiv	r0, r3, r2
 8009178:	fb00 f202 	mul.w	r2, r0, r2
 800917c:	1a9b      	subs	r3, r3, r2
 800917e:	440b      	add	r3, r1
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff fbf9 	bl	8008978 <ld_word>
 8009186:	4603      	mov	r3, r0
 8009188:	617b      	str	r3, [r7, #20]
			break;
 800918a:	e030      	b.n	80091ee <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	899b      	ldrh	r3, [r3, #12]
 8009194:	089b      	lsrs	r3, r3, #2
 8009196:	b29b      	uxth	r3, r3
 8009198:	4619      	mov	r1, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	fbb3 f3f1 	udiv	r3, r3, r1
 80091a0:	4413      	add	r3, r2
 80091a2:	4619      	mov	r1, r3
 80091a4:	6938      	ldr	r0, [r7, #16]
 80091a6:	f7ff fe97 	bl	8008ed8 <move_window>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11d      	bne.n	80091ec <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	8992      	ldrh	r2, [r2, #12]
 80091be:	fbb3 f0f2 	udiv	r0, r3, r2
 80091c2:	fb00 f202 	mul.w	r2, r0, r2
 80091c6:	1a9b      	subs	r3, r3, r2
 80091c8:	440b      	add	r3, r1
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fbec 	bl	80089a8 <ld_dword>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80091d6:	617b      	str	r3, [r7, #20]
			break;
 80091d8:	e009      	b.n	80091ee <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80091da:	2301      	movs	r3, #1
 80091dc:	617b      	str	r3, [r7, #20]
 80091de:	e006      	b.n	80091ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091e0:	bf00      	nop
 80091e2:	e004      	b.n	80091ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091e4:	bf00      	nop
 80091e6:	e002      	b.n	80091ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80091ec:	bf00      	nop
		}
	}

	return val;
 80091ee:	697b      	ldr	r3, [r7, #20]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3718      	adds	r7, #24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80091f8:	b590      	push	{r4, r7, lr}
 80091fa:	b089      	sub	sp, #36	@ 0x24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009204:	2302      	movs	r3, #2
 8009206:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	2b01      	cmp	r3, #1
 800920c:	f240 8109 	bls.w	8009422 <put_fat+0x22a>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	429a      	cmp	r2, r3
 8009218:	f080 8103 	bcs.w	8009422 <put_fat+0x22a>
		switch (fs->fs_type) {
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	2b03      	cmp	r3, #3
 8009222:	f000 80b6 	beq.w	8009392 <put_fat+0x19a>
 8009226:	2b03      	cmp	r3, #3
 8009228:	f300 80fb 	bgt.w	8009422 <put_fat+0x22a>
 800922c:	2b01      	cmp	r3, #1
 800922e:	d003      	beq.n	8009238 <put_fat+0x40>
 8009230:	2b02      	cmp	r3, #2
 8009232:	f000 8083 	beq.w	800933c <put_fat+0x144>
 8009236:	e0f4      	b.n	8009422 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	4413      	add	r3, r2
 8009244:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	899b      	ldrh	r3, [r3, #12]
 800924e:	4619      	mov	r1, r3
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	fbb3 f3f1 	udiv	r3, r3, r1
 8009256:	4413      	add	r3, r2
 8009258:	4619      	mov	r1, r3
 800925a:	68f8      	ldr	r0, [r7, #12]
 800925c:	f7ff fe3c 	bl	8008ed8 <move_window>
 8009260:	4603      	mov	r3, r0
 8009262:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009264:	7ffb      	ldrb	r3, [r7, #31]
 8009266:	2b00      	cmp	r3, #0
 8009268:	f040 80d4 	bne.w	8009414 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	1c5a      	adds	r2, r3, #1
 8009276:	61ba      	str	r2, [r7, #24]
 8009278:	68fa      	ldr	r2, [r7, #12]
 800927a:	8992      	ldrh	r2, [r2, #12]
 800927c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009280:	fb00 f202 	mul.w	r2, r0, r2
 8009284:	1a9b      	subs	r3, r3, r2
 8009286:	440b      	add	r3, r1
 8009288:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	f003 0301 	and.w	r3, r3, #1
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00d      	beq.n	80092b0 <put_fat+0xb8>
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	b25b      	sxtb	r3, r3
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	b25a      	sxtb	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	011b      	lsls	r3, r3, #4
 80092a6:	b25b      	sxtb	r3, r3
 80092a8:	4313      	orrs	r3, r2
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	e001      	b.n	80092b4 <put_fat+0xbc>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2201      	movs	r2, #1
 80092bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	899b      	ldrh	r3, [r3, #12]
 80092c6:	4619      	mov	r1, r3
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ce:	4413      	add	r3, r2
 80092d0:	4619      	mov	r1, r3
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff fe00 	bl	8008ed8 <move_window>
 80092d8:	4603      	mov	r3, r0
 80092da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80092dc:	7ffb      	ldrb	r3, [r7, #31]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f040 809a 	bne.w	8009418 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	899b      	ldrh	r3, [r3, #12]
 80092ee:	461a      	mov	r2, r3
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80092f6:	fb00 f202 	mul.w	r2, r0, r2
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	440b      	add	r3, r1
 80092fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <put_fat+0x11a>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	b2db      	uxtb	r3, r3
 8009310:	e00e      	b.n	8009330 <put_fat+0x138>
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	b25b      	sxtb	r3, r3
 8009318:	f023 030f 	bic.w	r3, r3, #15
 800931c:	b25a      	sxtb	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	0a1b      	lsrs	r3, r3, #8
 8009322:	b25b      	sxtb	r3, r3
 8009324:	f003 030f 	and.w	r3, r3, #15
 8009328:	b25b      	sxtb	r3, r3
 800932a:	4313      	orrs	r3, r2
 800932c:	b25b      	sxtb	r3, r3
 800932e:	b2db      	uxtb	r3, r3
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	70da      	strb	r2, [r3, #3]
			break;
 800933a:	e072      	b.n	8009422 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	899b      	ldrh	r3, [r3, #12]
 8009344:	085b      	lsrs	r3, r3, #1
 8009346:	b29b      	uxth	r3, r3
 8009348:	4619      	mov	r1, r3
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009350:	4413      	add	r3, r2
 8009352:	4619      	mov	r1, r3
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f7ff fdbf 	bl	8008ed8 <move_window>
 800935a:	4603      	mov	r3, r0
 800935c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800935e:	7ffb      	ldrb	r3, [r7, #31]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d15b      	bne.n	800941c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	8992      	ldrh	r2, [r2, #12]
 8009372:	fbb3 f0f2 	udiv	r0, r3, r2
 8009376:	fb00 f202 	mul.w	r2, r0, r2
 800937a:	1a9b      	subs	r3, r3, r2
 800937c:	440b      	add	r3, r1
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	b292      	uxth	r2, r2
 8009382:	4611      	mov	r1, r2
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff fb32 	bl	80089ee <st_word>
			fs->wflag = 1;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2201      	movs	r2, #1
 800938e:	70da      	strb	r2, [r3, #3]
			break;
 8009390:	e047      	b.n	8009422 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	899b      	ldrh	r3, [r3, #12]
 800939a:	089b      	lsrs	r3, r3, #2
 800939c:	b29b      	uxth	r3, r3
 800939e:	4619      	mov	r1, r3
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80093a6:	4413      	add	r3, r2
 80093a8:	4619      	mov	r1, r3
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fd94 	bl	8008ed8 <move_window>
 80093b0:	4603      	mov	r3, r0
 80093b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093b4:	7ffb      	ldrb	r3, [r7, #31]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d132      	bne.n	8009420 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	8992      	ldrh	r2, [r2, #12]
 80093ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80093d2:	fb00 f202 	mul.w	r2, r0, r2
 80093d6:	1a9b      	subs	r3, r3, r2
 80093d8:	440b      	add	r3, r1
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fae4 	bl	80089a8 <ld_dword>
 80093e0:	4603      	mov	r3, r0
 80093e2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80093e6:	4323      	orrs	r3, r4
 80093e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	8992      	ldrh	r2, [r2, #12]
 80093f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80093fc:	fb00 f202 	mul.w	r2, r0, r2
 8009400:	1a9b      	subs	r3, r3, r2
 8009402:	440b      	add	r3, r1
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff fb0c 	bl	8008a24 <st_dword>
			fs->wflag = 1;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2201      	movs	r2, #1
 8009410:	70da      	strb	r2, [r3, #3]
			break;
 8009412:	e006      	b.n	8009422 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009414:	bf00      	nop
 8009416:	e004      	b.n	8009422 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009418:	bf00      	nop
 800941a:	e002      	b.n	8009422 <put_fat+0x22a>
			if (res != FR_OK) break;
 800941c:	bf00      	nop
 800941e:	e000      	b.n	8009422 <put_fat+0x22a>
			if (res != FR_OK) break;
 8009420:	bf00      	nop
		}
	}
	return res;
 8009422:	7ffb      	ldrb	r3, [r7, #31]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3724      	adds	r7, #36	@ 0x24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd90      	pop	{r4, r7, pc}

0800942c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009438:	2300      	movs	r3, #0
 800943a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d904      	bls.n	8009452 <remove_chain+0x26>
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	69db      	ldr	r3, [r3, #28]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	429a      	cmp	r2, r3
 8009450:	d301      	bcc.n	8009456 <remove_chain+0x2a>
 8009452:	2302      	movs	r3, #2
 8009454:	e04b      	b.n	80094ee <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00c      	beq.n	8009476 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800945c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	69b8      	ldr	r0, [r7, #24]
 8009464:	f7ff fec8 	bl	80091f8 <put_fat>
 8009468:	4603      	mov	r3, r0
 800946a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800946c:	7ffb      	ldrb	r3, [r7, #31]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d001      	beq.n	8009476 <remove_chain+0x4a>
 8009472:	7ffb      	ldrb	r3, [r7, #31]
 8009474:	e03b      	b.n	80094ee <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009476:	68b9      	ldr	r1, [r7, #8]
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f7ff fdea 	bl	8009052 <get_fat>
 800947e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d031      	beq.n	80094ea <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d101      	bne.n	8009490 <remove_chain+0x64>
 800948c:	2302      	movs	r3, #2
 800948e:	e02e      	b.n	80094ee <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009496:	d101      	bne.n	800949c <remove_chain+0x70>
 8009498:	2301      	movs	r3, #1
 800949a:	e028      	b.n	80094ee <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800949c:	2200      	movs	r2, #0
 800949e:	68b9      	ldr	r1, [r7, #8]
 80094a0:	69b8      	ldr	r0, [r7, #24]
 80094a2:	f7ff fea9 	bl	80091f8 <put_fat>
 80094a6:	4603      	mov	r3, r0
 80094a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80094aa:	7ffb      	ldrb	r3, [r7, #31]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <remove_chain+0x88>
 80094b0:	7ffb      	ldrb	r3, [r7, #31]
 80094b2:	e01c      	b.n	80094ee <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	69db      	ldr	r3, [r3, #28]
 80094bc:	3b02      	subs	r3, #2
 80094be:	429a      	cmp	r2, r3
 80094c0:	d20b      	bcs.n	80094da <remove_chain+0xae>
			fs->free_clst++;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	791b      	ldrb	r3, [r3, #4]
 80094d0:	f043 0301 	orr.w	r3, r3, #1
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	69db      	ldr	r3, [r3, #28]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d3c6      	bcc.n	8009476 <remove_chain+0x4a>
 80094e8:	e000      	b.n	80094ec <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80094ea:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3720      	adds	r7, #32
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b088      	sub	sp, #32
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10d      	bne.n	8009528 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	695b      	ldr	r3, [r3, #20]
 8009510:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <create_chain+0x2c>
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	69ba      	ldr	r2, [r7, #24]
 800951e:	429a      	cmp	r2, r3
 8009520:	d31b      	bcc.n	800955a <create_chain+0x64>
 8009522:	2301      	movs	r3, #1
 8009524:	61bb      	str	r3, [r7, #24]
 8009526:	e018      	b.n	800955a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f7ff fd91 	bl	8009052 <get_fat>
 8009530:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d801      	bhi.n	800953c <create_chain+0x46>
 8009538:	2301      	movs	r3, #1
 800953a:	e070      	b.n	800961e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009542:	d101      	bne.n	8009548 <create_chain+0x52>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	e06a      	b.n	800961e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	429a      	cmp	r2, r3
 8009550:	d201      	bcs.n	8009556 <create_chain+0x60>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	e063      	b.n	800961e <create_chain+0x128>
		scl = clst;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	3301      	adds	r3, #1
 8009562:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	69db      	ldr	r3, [r3, #28]
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	429a      	cmp	r2, r3
 800956c:	d307      	bcc.n	800957e <create_chain+0x88>
				ncl = 2;
 800956e:	2302      	movs	r3, #2
 8009570:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	429a      	cmp	r2, r3
 8009578:	d901      	bls.n	800957e <create_chain+0x88>
 800957a:	2300      	movs	r3, #0
 800957c:	e04f      	b.n	800961e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800957e:	69f9      	ldr	r1, [r7, #28]
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff fd66 	bl	8009052 <get_fat>
 8009586:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d00e      	beq.n	80095ac <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b01      	cmp	r3, #1
 8009592:	d003      	beq.n	800959c <create_chain+0xa6>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800959a:	d101      	bne.n	80095a0 <create_chain+0xaa>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	e03e      	b.n	800961e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80095a0:	69fa      	ldr	r2, [r7, #28]
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d1da      	bne.n	800955e <create_chain+0x68>
 80095a8:	2300      	movs	r3, #0
 80095aa:	e038      	b.n	800961e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80095ac:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095b2:	69f9      	ldr	r1, [r7, #28]
 80095b4:	6938      	ldr	r0, [r7, #16]
 80095b6:	f7ff fe1f 	bl	80091f8 <put_fat>
 80095ba:	4603      	mov	r3, r0
 80095bc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80095be:	7dfb      	ldrb	r3, [r7, #23]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d109      	bne.n	80095d8 <create_chain+0xe2>
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d006      	beq.n	80095d8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80095ca:	69fa      	ldr	r2, [r7, #28]
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6938      	ldr	r0, [r7, #16]
 80095d0:	f7ff fe12 	bl	80091f8 <put_fat>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d116      	bne.n	800960c <create_chain+0x116>
		fs->last_clst = ncl;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	69fa      	ldr	r2, [r7, #28]
 80095e2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	699a      	ldr	r2, [r3, #24]
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	69db      	ldr	r3, [r3, #28]
 80095ec:	3b02      	subs	r3, #2
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d804      	bhi.n	80095fc <create_chain+0x106>
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	1e5a      	subs	r2, r3, #1
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	791b      	ldrb	r3, [r3, #4]
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	b2da      	uxtb	r2, r3
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	711a      	strb	r2, [r3, #4]
 800960a:	e007      	b.n	800961c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d102      	bne.n	8009618 <create_chain+0x122>
 8009612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009616:	e000      	b.n	800961a <create_chain+0x124>
 8009618:	2301      	movs	r3, #1
 800961a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800961c:	69fb      	ldr	r3, [r7, #28]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3720      	adds	r7, #32
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009626:	b480      	push	{r7}
 8009628:	b087      	sub	sp, #28
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800963a:	3304      	adds	r3, #4
 800963c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	899b      	ldrh	r3, [r3, #12]
 8009642:	461a      	mov	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	fbb3 f3f2 	udiv	r3, r3, r2
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	8952      	ldrh	r2, [r2, #10]
 800964e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009652:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	1d1a      	adds	r2, r3, #4
 8009658:	613a      	str	r2, [r7, #16]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <clmt_clust+0x42>
 8009664:	2300      	movs	r3, #0
 8009666:	e010      	b.n	800968a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	429a      	cmp	r2, r3
 800966e:	d307      	bcc.n	8009680 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	617b      	str	r3, [r7, #20]
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	3304      	adds	r3, #4
 800967c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800967e:	e7e9      	b.n	8009654 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009680:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	4413      	add	r3, r2
}
 800968a:	4618      	mov	r0, r3
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b086      	sub	sp, #24
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096ac:	d204      	bcs.n	80096b8 <dir_sdi+0x22>
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <dir_sdi+0x26>
		return FR_INT_ERR;
 80096b8:	2302      	movs	r3, #2
 80096ba:	e071      	b.n	80097a0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <dir_sdi+0x46>
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d902      	bls.n	80096dc <dir_sdi+0x46>
		clst = fs->dirbase;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096da:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10c      	bne.n	80096fc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	095b      	lsrs	r3, r3, #5
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	8912      	ldrh	r2, [r2, #8]
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d301      	bcc.n	80096f2 <dir_sdi+0x5c>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e056      	b.n	80097a0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	61da      	str	r2, [r3, #28]
 80096fa:	e02d      	b.n	8009758 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	895b      	ldrh	r3, [r3, #10]
 8009700:	461a      	mov	r2, r3
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	899b      	ldrh	r3, [r3, #12]
 8009706:	fb02 f303 	mul.w	r3, r2, r3
 800970a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800970c:	e019      	b.n	8009742 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6979      	ldr	r1, [r7, #20]
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fc9d 	bl	8009052 <get_fat>
 8009718:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009720:	d101      	bne.n	8009726 <dir_sdi+0x90>
 8009722:	2301      	movs	r3, #1
 8009724:	e03c      	b.n	80097a0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b01      	cmp	r3, #1
 800972a:	d904      	bls.n	8009736 <dir_sdi+0xa0>
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	69db      	ldr	r3, [r3, #28]
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	429a      	cmp	r2, r3
 8009734:	d301      	bcc.n	800973a <dir_sdi+0xa4>
 8009736:	2302      	movs	r3, #2
 8009738:	e032      	b.n	80097a0 <dir_sdi+0x10a>
			ofs -= csz;
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	1ad3      	subs	r3, r2, r3
 8009740:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	429a      	cmp	r2, r3
 8009748:	d2e1      	bcs.n	800970e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800974a:	6979      	ldr	r1, [r7, #20]
 800974c:	6938      	ldr	r0, [r7, #16]
 800974e:	f7ff fc61 	bl	8009014 <clust2sect>
 8009752:	4602      	mov	r2, r0
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	69db      	ldr	r3, [r3, #28]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d101      	bne.n	800976a <dir_sdi+0xd4>
 8009766:	2302      	movs	r3, #2
 8009768:	e01a      	b.n	80097a0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	69da      	ldr	r2, [r3, #28]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	899b      	ldrh	r3, [r3, #12]
 8009772:	4619      	mov	r1, r3
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	fbb3 f3f1 	udiv	r3, r3, r1
 800977a:	441a      	add	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	899b      	ldrh	r3, [r3, #12]
 800978a:	461a      	mov	r2, r3
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009792:	fb00 f202 	mul.w	r2, r0, r2
 8009796:	1a9b      	subs	r3, r3, r2
 8009798:	18ca      	adds	r2, r1, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b086      	sub	sp, #24
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	3320      	adds	r3, #32
 80097be:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d003      	beq.n	80097d0 <dir_next+0x28>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097ce:	d301      	bcc.n	80097d4 <dir_next+0x2c>
 80097d0:	2304      	movs	r3, #4
 80097d2:	e0bb      	b.n	800994c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	899b      	ldrh	r3, [r3, #12]
 80097d8:	461a      	mov	r2, r3
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80097e0:	fb01 f202 	mul.w	r2, r1, r2
 80097e4:	1a9b      	subs	r3, r3, r2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	f040 809d 	bne.w	8009926 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69db      	ldr	r3, [r3, #28]
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	699b      	ldr	r3, [r3, #24]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10b      	bne.n	8009816 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	095b      	lsrs	r3, r3, #5
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	8912      	ldrh	r2, [r2, #8]
 8009806:	4293      	cmp	r3, r2
 8009808:	f0c0 808d 	bcc.w	8009926 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	61da      	str	r2, [r3, #28]
 8009812:	2304      	movs	r3, #4
 8009814:	e09a      	b.n	800994c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	899b      	ldrh	r3, [r3, #12]
 800981a:	461a      	mov	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	8952      	ldrh	r2, [r2, #10]
 8009826:	3a01      	subs	r2, #1
 8009828:	4013      	ands	r3, r2
 800982a:	2b00      	cmp	r3, #0
 800982c:	d17b      	bne.n	8009926 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	4619      	mov	r1, r3
 8009836:	4610      	mov	r0, r2
 8009838:	f7ff fc0b 	bl	8009052 <get_fat>
 800983c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d801      	bhi.n	8009848 <dir_next+0xa0>
 8009844:	2302      	movs	r3, #2
 8009846:	e081      	b.n	800994c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800984e:	d101      	bne.n	8009854 <dir_next+0xac>
 8009850:	2301      	movs	r3, #1
 8009852:	e07b      	b.n	800994c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	429a      	cmp	r2, r3
 800985c:	d359      	bcc.n	8009912 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d104      	bne.n	800986e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	61da      	str	r2, [r3, #28]
 800986a:	2304      	movs	r3, #4
 800986c:	e06e      	b.n	800994c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	4619      	mov	r1, r3
 8009876:	4610      	mov	r0, r2
 8009878:	f7ff fe3d 	bl	80094f6 <create_chain>
 800987c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <dir_next+0xe0>
 8009884:	2307      	movs	r3, #7
 8009886:	e061      	b.n	800994c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <dir_next+0xea>
 800988e:	2302      	movs	r3, #2
 8009890:	e05c      	b.n	800994c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009898:	d101      	bne.n	800989e <dir_next+0xf6>
 800989a:	2301      	movs	r3, #1
 800989c:	e056      	b.n	800994c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f7ff fad6 	bl	8008e50 <sync_window>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <dir_next+0x106>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e04e      	b.n	800994c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	899b      	ldrh	r3, [r3, #12]
 80098b8:	461a      	mov	r2, r3
 80098ba:	2100      	movs	r1, #0
 80098bc:	f7ff f8ff 	bl	8008abe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80098c0:	2300      	movs	r3, #0
 80098c2:	613b      	str	r3, [r7, #16]
 80098c4:	6979      	ldr	r1, [r7, #20]
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f7ff fba4 	bl	8009014 <clust2sect>
 80098cc:	4602      	mov	r2, r0
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80098d2:	e012      	b.n	80098fa <dir_next+0x152>
						fs->wflag = 1;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2201      	movs	r2, #1
 80098d8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fab8 	bl	8008e50 <sync_window>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <dir_next+0x142>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e030      	b.n	800994c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	3301      	adds	r3, #1
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f4:	1c5a      	adds	r2, r3, #1
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	895b      	ldrh	r3, [r3, #10]
 80098fe:	461a      	mov	r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4293      	cmp	r3, r2
 8009904:	d3e6      	bcc.n	80098d4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009918:	6979      	ldr	r1, [r7, #20]
 800991a:	68f8      	ldr	r0, [r7, #12]
 800991c:	f7ff fb7a 	bl	8009014 <clust2sect>
 8009920:	4602      	mov	r2, r0
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	899b      	ldrh	r3, [r3, #12]
 8009936:	461a      	mov	r2, r3
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	fbb3 f0f2 	udiv	r0, r3, r2
 800993e:	fb00 f202 	mul.w	r2, r0, r2
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	18ca      	adds	r2, r1, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800994a:	2300      	movs	r3, #0
}
 800994c:	4618      	mov	r0, r3
 800994e:	3718      	adds	r7, #24
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009964:	2100      	movs	r1, #0
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff fe95 	bl	8009696 <dir_sdi>
 800996c:	4603      	mov	r3, r0
 800996e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009970:	7dfb      	ldrb	r3, [r7, #23]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d12b      	bne.n	80099ce <dir_alloc+0x7a>
		n = 0;
 8009976:	2300      	movs	r3, #0
 8009978:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	4619      	mov	r1, r3
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f7ff faa9 	bl	8008ed8 <move_window>
 8009986:	4603      	mov	r3, r0
 8009988:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d11d      	bne.n	80099cc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2be5      	cmp	r3, #229	@ 0xe5
 8009998:	d004      	beq.n	80099a4 <dir_alloc+0x50>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d107      	bne.n	80099b4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	3301      	adds	r3, #1
 80099a8:	613b      	str	r3, [r7, #16]
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d102      	bne.n	80099b8 <dir_alloc+0x64>
 80099b2:	e00c      	b.n	80099ce <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80099b4:	2300      	movs	r3, #0
 80099b6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80099b8:	2101      	movs	r1, #1
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f7ff fef4 	bl	80097a8 <dir_next>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80099c4:	7dfb      	ldrb	r3, [r7, #23]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0d7      	beq.n	800997a <dir_alloc+0x26>
 80099ca:	e000      	b.n	80099ce <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80099cc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	2b04      	cmp	r3, #4
 80099d2:	d101      	bne.n	80099d8 <dir_alloc+0x84>
 80099d4:	2307      	movs	r3, #7
 80099d6:	75fb      	strb	r3, [r7, #23]
	return res;
 80099d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3718      	adds	r7, #24
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	331a      	adds	r3, #26
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe ffc1 	bl	8008978 <ld_word>
 80099f6:	4603      	mov	r3, r0
 80099f8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	d109      	bne.n	8009a16 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	3314      	adds	r3, #20
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe ffb6 	bl	8008978 <ld_word>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	041b      	lsls	r3, r3, #16
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009a16:	68fb      	ldr	r3, [r7, #12]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3710      	adds	r7, #16
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	331a      	adds	r3, #26
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	b292      	uxth	r2, r2
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe ffd9 	bl	80089ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	d109      	bne.n	8009a58 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f103 0214 	add.w	r2, r3, #20
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	0c1b      	lsrs	r3, r3, #16
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	4619      	mov	r1, r3
 8009a52:	4610      	mov	r0, r2
 8009a54:	f7fe ffcb 	bl	80089ee <st_word>
	}
}
 8009a58:	bf00      	nop
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8009a60:	b590      	push	{r4, r7, lr}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	331a      	adds	r3, #26
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f7fe ff82 	bl	8008978 <ld_word>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <cmp_lfn+0x1e>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e059      	b.n	8009b32 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a86:	1e5a      	subs	r2, r3, #1
 8009a88:	4613      	mov	r3, r2
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009a94:	2301      	movs	r3, #1
 8009a96:	81fb      	strh	r3, [r7, #14]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	613b      	str	r3, [r7, #16]
 8009a9c:	e033      	b.n	8009b06 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8009a9e:	4a27      	ldr	r2, [pc, #156]	@ (8009b3c <cmp_lfn+0xdc>)
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	4413      	add	r3, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe ff63 	bl	8008978 <ld_word>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8009ab6:	89fb      	ldrh	r3, [r7, #14]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d01a      	beq.n	8009af2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2bfe      	cmp	r3, #254	@ 0xfe
 8009ac0:	d812      	bhi.n	8009ae8 <cmp_lfn+0x88>
 8009ac2:	89bb      	ldrh	r3, [r7, #12]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f001 ff95 	bl	800b9f4 <ff_wtoupper>
 8009aca:	4603      	mov	r3, r0
 8009acc:	461c      	mov	r4, r3
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	617a      	str	r2, [r7, #20]
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	4413      	add	r3, r2
 8009ada:	881b      	ldrh	r3, [r3, #0]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 ff89 	bl	800b9f4 <ff_wtoupper>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	429c      	cmp	r4, r3
 8009ae6:	d001      	beq.n	8009aec <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e022      	b.n	8009b32 <cmp_lfn+0xd2>
			}
			wc = uc;
 8009aec:	89bb      	ldrh	r3, [r7, #12]
 8009aee:	81fb      	strh	r3, [r7, #14]
 8009af0:	e006      	b.n	8009b00 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8009af2:	89bb      	ldrh	r3, [r7, #12]
 8009af4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d001      	beq.n	8009b00 <cmp_lfn+0xa0>
 8009afc:	2300      	movs	r3, #0
 8009afe:	e018      	b.n	8009b32 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	3301      	adds	r3, #1
 8009b04:	613b      	str	r3, [r7, #16]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b0c      	cmp	r3, #12
 8009b0a:	d9c8      	bls.n	8009a9e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <cmp_lfn+0xd0>
 8009b18:	89fb      	ldrh	r3, [r7, #14]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d008      	beq.n	8009b30 <cmp_lfn+0xd0>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d001      	beq.n	8009b30 <cmp_lfn+0xd0>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	e000      	b.n	8009b32 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8009b30:	2301      	movs	r3, #1
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd90      	pop	{r4, r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	0800dba8 	.word	0x0800dba8

08009b40 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	460b      	mov	r3, r1
 8009b50:	71fb      	strb	r3, [r7, #7]
 8009b52:	4613      	mov	r3, r2
 8009b54:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	330d      	adds	r3, #13
 8009b5a:	79ba      	ldrb	r2, [r7, #6]
 8009b5c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	330b      	adds	r3, #11
 8009b62:	220f      	movs	r2, #15
 8009b64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	330c      	adds	r3, #12
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	331a      	adds	r3, #26
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7fe ff3a 	bl	80089ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8009b7a:	79fb      	ldrb	r3, [r7, #7]
 8009b7c:	1e5a      	subs	r2, r3, #1
 8009b7e:	4613      	mov	r3, r2
 8009b80:	005b      	lsls	r3, r3, #1
 8009b82:	4413      	add	r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	4413      	add	r3, r2
 8009b88:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	82fb      	strh	r3, [r7, #22]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8009b92:	8afb      	ldrh	r3, [r7, #22]
 8009b94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d007      	beq.n	8009bac <put_lfn+0x6c>
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	61fa      	str	r2, [r7, #28]
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	68fa      	ldr	r2, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8009bac:	4a17      	ldr	r2, [pc, #92]	@ (8009c0c <put_lfn+0xcc>)
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	4413      	add	r3, r2
 8009bba:	8afa      	ldrh	r2, [r7, #22]
 8009bbc:	4611      	mov	r1, r2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe ff15 	bl	80089ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8009bc4:	8afb      	ldrh	r3, [r7, #22]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d102      	bne.n	8009bd0 <put_lfn+0x90>
 8009bca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bce:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	61bb      	str	r3, [r7, #24]
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b0c      	cmp	r3, #12
 8009bda:	d9da      	bls.n	8009b92 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8009bdc:	8afb      	ldrh	r3, [r7, #22]
 8009bde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d006      	beq.n	8009bf4 <put_lfn+0xb4>
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	005b      	lsls	r3, r3, #1
 8009bea:	68fa      	ldr	r2, [r7, #12]
 8009bec:	4413      	add	r3, r2
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <put_lfn+0xbc>
 8009bf4:	79fb      	ldrb	r3, [r7, #7]
 8009bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bfa:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	79fa      	ldrb	r2, [r7, #7]
 8009c00:	701a      	strb	r2, [r3, #0]
}
 8009c02:	bf00      	nop
 8009c04:	3720      	adds	r7, #32
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0800dba8 	.word	0x0800dba8

08009c10 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08c      	sub	sp, #48	@ 0x30
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
 8009c1c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8009c1e:	220b      	movs	r2, #11
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7fe ff2a 	bl	8008a7c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	d92b      	bls.n	8009c86 <gen_numname+0x76>
		sr = seq;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8009c32:	e022      	b.n	8009c7a <gen_numname+0x6a>
			wc = *lfn++;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	1c9a      	adds	r2, r3, #2
 8009c38:	607a      	str	r2, [r7, #4]
 8009c3a:	881b      	ldrh	r3, [r3, #0]
 8009c3c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8009c3e:	2300      	movs	r3, #0
 8009c40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c42:	e017      	b.n	8009c74 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	005a      	lsls	r2, r3, #1
 8009c48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	4413      	add	r3, r2
 8009c50:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8009c52:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009c54:	085b      	lsrs	r3, r3, #1
 8009c56:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d005      	beq.n	8009c6e <gen_numname+0x5e>
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8009c68:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8009c6c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8009c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c70:	3301      	adds	r3, #1
 8009c72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	2b0f      	cmp	r3, #15
 8009c78:	d9e4      	bls.n	8009c44 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1d8      	bne.n	8009c34 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8009c86:	2307      	movs	r3, #7
 8009c88:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 030f 	and.w	r3, r3, #15
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	3330      	adds	r3, #48	@ 0x30
 8009c96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8009c9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009c9e:	2b39      	cmp	r3, #57	@ 0x39
 8009ca0:	d904      	bls.n	8009cac <gen_numname+0x9c>
 8009ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009ca6:	3307      	adds	r3, #7
 8009ca8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8009cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cae:	1e5a      	subs	r2, r3, #1
 8009cb0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009cb2:	3330      	adds	r3, #48	@ 0x30
 8009cb4:	443b      	add	r3, r7
 8009cb6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8009cba:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	091b      	lsrs	r3, r3, #4
 8009cc2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1df      	bne.n	8009c8a <gen_numname+0x7a>
	ns[i] = '~';
 8009cca:	f107 0214 	add.w	r2, r7, #20
 8009cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd0:	4413      	add	r3, r2
 8009cd2:	227e      	movs	r2, #126	@ 0x7e
 8009cd4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cda:	e002      	b.n	8009ce2 <gen_numname+0xd2>
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	3301      	adds	r3, #1
 8009ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d205      	bcs.n	8009cf6 <gen_numname+0xe6>
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cee:	4413      	add	r3, r2
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b20      	cmp	r3, #32
 8009cf4:	d1f2      	bne.n	8009cdc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8009cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cf8:	2b07      	cmp	r3, #7
 8009cfa:	d807      	bhi.n	8009d0c <gen_numname+0xfc>
 8009cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009d02:	3330      	adds	r3, #48	@ 0x30
 8009d04:	443b      	add	r3, r7
 8009d06:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8009d0a:	e000      	b.n	8009d0e <gen_numname+0xfe>
 8009d0c:	2120      	movs	r1, #32
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d10:	1c5a      	adds	r2, r3, #1
 8009d12:	627a      	str	r2, [r7, #36]	@ 0x24
 8009d14:	68fa      	ldr	r2, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	460a      	mov	r2, r1
 8009d1a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1e:	2b07      	cmp	r3, #7
 8009d20:	d9e9      	bls.n	8009cf6 <gen_numname+0xe6>
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	3730      	adds	r7, #48	@ 0x30
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8009d38:	230b      	movs	r3, #11
 8009d3a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	0852      	lsrs	r2, r2, #1
 8009d42:	01db      	lsls	r3, r3, #7
 8009d44:	4313      	orrs	r3, r2
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	1c59      	adds	r1, r3, #1
 8009d4c:	6079      	str	r1, [r7, #4]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	4413      	add	r3, r2
 8009d52:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1ed      	bne.n	8009d3c <sum_sfn+0x10>
	return sum;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b086      	sub	sp, #24
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff fc89 	bl	8009696 <dir_sdi>
 8009d84:	4603      	mov	r3, r0
 8009d86:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <dir_find+0x24>
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	e0a9      	b.n	8009ee6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009d92:	23ff      	movs	r3, #255	@ 0xff
 8009d94:	753b      	strb	r3, [r7, #20]
 8009d96:	7d3b      	ldrb	r3, [r7, #20]
 8009d98:	757b      	strb	r3, [r7, #21]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009da0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	69db      	ldr	r3, [r3, #28]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6938      	ldr	r0, [r7, #16]
 8009daa:	f7ff f895 	bl	8008ed8 <move_window>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f040 8090 	bne.w	8009eda <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009dc2:	7dbb      	ldrb	r3, [r7, #22]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d102      	bne.n	8009dce <dir_find+0x60>
 8009dc8:	2304      	movs	r3, #4
 8009dca:	75fb      	strb	r3, [r7, #23]
 8009dcc:	e08a      	b.n	8009ee4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	330b      	adds	r3, #11
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009dda:	73fb      	strb	r3, [r7, #15]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7bfa      	ldrb	r2, [r7, #15]
 8009de0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8009de2:	7dbb      	ldrb	r3, [r7, #22]
 8009de4:	2be5      	cmp	r3, #229	@ 0xe5
 8009de6:	d007      	beq.n	8009df8 <dir_find+0x8a>
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	f003 0308 	and.w	r3, r3, #8
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <dir_find+0x98>
 8009df2:	7bfb      	ldrb	r3, [r7, #15]
 8009df4:	2b0f      	cmp	r3, #15
 8009df6:	d006      	beq.n	8009e06 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009df8:	23ff      	movs	r3, #255	@ 0xff
 8009dfa:	757b      	strb	r3, [r7, #21]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8009e04:	e05e      	b.n	8009ec4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
 8009e08:	2b0f      	cmp	r3, #15
 8009e0a:	d136      	bne.n	8009e7a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d154      	bne.n	8009ec4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8009e1a:	7dbb      	ldrb	r3, [r7, #22]
 8009e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00d      	beq.n	8009e40 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	7b5b      	ldrb	r3, [r3, #13]
 8009e2a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8009e2c:	7dbb      	ldrb	r3, [r7, #22]
 8009e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e32:	75bb      	strb	r3, [r7, #22]
 8009e34:	7dbb      	ldrb	r3, [r7, #22]
 8009e36:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	695a      	ldr	r2, [r3, #20]
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8009e40:	7dba      	ldrb	r2, [r7, #22]
 8009e42:	7d7b      	ldrb	r3, [r7, #21]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d115      	bne.n	8009e74 <dir_find+0x106>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a1b      	ldr	r3, [r3, #32]
 8009e4c:	330d      	adds	r3, #13
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	7d3a      	ldrb	r2, [r7, #20]
 8009e52:	429a      	cmp	r2, r3
 8009e54:	d10e      	bne.n	8009e74 <dir_find+0x106>
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	691a      	ldr	r2, [r3, #16]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6a1b      	ldr	r3, [r3, #32]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4610      	mov	r0, r2
 8009e62:	f7ff fdfd 	bl	8009a60 <cmp_lfn>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d003      	beq.n	8009e74 <dir_find+0x106>
 8009e6c:	7d7b      	ldrb	r3, [r7, #21]
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	e000      	b.n	8009e76 <dir_find+0x108>
 8009e74:	23ff      	movs	r3, #255	@ 0xff
 8009e76:	757b      	strb	r3, [r7, #21]
 8009e78:	e024      	b.n	8009ec4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009e7a:	7d7b      	ldrb	r3, [r7, #21]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d109      	bne.n	8009e94 <dir_find+0x126>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a1b      	ldr	r3, [r3, #32]
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff ff51 	bl	8009d2c <sum_sfn>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	7d3b      	ldrb	r3, [r7, #20]
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d024      	beq.n	8009ede <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10a      	bne.n	8009eb8 <dir_find+0x14a>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a18      	ldr	r0, [r3, #32]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	3324      	adds	r3, #36	@ 0x24
 8009eaa:	220b      	movs	r2, #11
 8009eac:	4619      	mov	r1, r3
 8009eae:	f7fe fe21 	bl	8008af4 <mem_cmp>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d014      	beq.n	8009ee2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8009eb8:	23ff      	movs	r3, #255	@ 0xff
 8009eba:	757b      	strb	r3, [r7, #21]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009ec2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fc6e 	bl	80097a8 <dir_next>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f43f af65 	beq.w	8009da2 <dir_find+0x34>
 8009ed8:	e004      	b.n	8009ee4 <dir_find+0x176>
		if (res != FR_OK) break;
 8009eda:	bf00      	nop
 8009edc:	e002      	b.n	8009ee4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8009ede:	bf00      	nop
 8009ee0:	e000      	b.n	8009ee4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8009ee2:	bf00      	nop

	return res;
 8009ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08c      	sub	sp, #48	@ 0x30
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009f04:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <dir_register+0x20>
 8009f0c:	2306      	movs	r3, #6
 8009f0e:	e0e0      	b.n	800a0d2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8009f10:	2300      	movs	r3, #0
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f14:	e002      	b.n	8009f1c <dir_register+0x2c>
 8009f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f18:	3301      	adds	r3, #1
 8009f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	005b      	lsls	r3, r3, #1
 8009f24:	4413      	add	r3, r2
 8009f26:	881b      	ldrh	r3, [r3, #0]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d1f4      	bne.n	8009f16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8009f32:	f107 030c 	add.w	r3, r7, #12
 8009f36:	220c      	movs	r2, #12
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe fd9f 	bl	8008a7c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8009f3e:	7dfb      	ldrb	r3, [r7, #23]
 8009f40:	f003 0301 	and.w	r3, r3, #1
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d032      	beq.n	8009fae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2240      	movs	r2, #64	@ 0x40
 8009f4c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8009f50:	2301      	movs	r3, #1
 8009f52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f54:	e016      	b.n	8009f84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	f107 010c 	add.w	r1, r7, #12
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	f7ff fe53 	bl	8009c10 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7ff feff 	bl	8009d6e <dir_find>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8009f76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d106      	bne.n	8009f8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8009f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f80:	3301      	adds	r3, #1
 8009f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f86:	2b63      	cmp	r3, #99	@ 0x63
 8009f88:	d9e5      	bls.n	8009f56 <dir_register+0x66>
 8009f8a:	e000      	b.n	8009f8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8009f8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8009f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f90:	2b64      	cmp	r3, #100	@ 0x64
 8009f92:	d101      	bne.n	8009f98 <dir_register+0xa8>
 8009f94:	2307      	movs	r3, #7
 8009f96:	e09c      	b.n	800a0d2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8009f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	d002      	beq.n	8009fa6 <dir_register+0xb6>
 8009fa0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009fa4:	e095      	b.n	800a0d2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8009fa6:	7dfa      	ldrb	r2, [r7, #23]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d007      	beq.n	8009fc8 <dir_register+0xd8>
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	330c      	adds	r3, #12
 8009fbc:	4a47      	ldr	r2, [pc, #284]	@ (800a0dc <dir_register+0x1ec>)
 8009fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc2:	089b      	lsrs	r3, r3, #2
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	e000      	b.n	8009fca <dir_register+0xda>
 8009fc8:	2301      	movs	r3, #1
 8009fca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8009fcc:	6a39      	ldr	r1, [r7, #32]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7ff fcc0 	bl	8009954 <dir_alloc>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8009fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d148      	bne.n	800a074 <dir_register+0x184>
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	3b01      	subs	r3, #1
 8009fe6:	623b      	str	r3, [r7, #32]
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d042      	beq.n	800a074 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	695a      	ldr	r2, [r3, #20]
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	015b      	lsls	r3, r3, #5
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff fb4b 	bl	8009696 <dir_sdi>
 800a000:	4603      	mov	r3, r0
 800a002:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a006:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d132      	bne.n	800a074 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3324      	adds	r3, #36	@ 0x24
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff fe8a 	bl	8009d2c <sum_sfn>
 800a018:	4603      	mov	r3, r0
 800a01a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	69db      	ldr	r3, [r3, #28]
 800a020:	4619      	mov	r1, r3
 800a022:	69f8      	ldr	r0, [r7, #28]
 800a024:	f7fe ff58 	bl	8008ed8 <move_window>
 800a028:	4603      	mov	r3, r0
 800a02a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800a02e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a032:	2b00      	cmp	r3, #0
 800a034:	d11d      	bne.n	800a072 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	6918      	ldr	r0, [r3, #16]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a19      	ldr	r1, [r3, #32]
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	7efb      	ldrb	r3, [r7, #27]
 800a044:	f7ff fd7c 	bl	8009b40 <put_lfn>
				fs->wflag = 1;
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	2201      	movs	r2, #1
 800a04c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800a04e:	2100      	movs	r1, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff fba9 	bl	80097a8 <dir_next>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800a05c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a060:	2b00      	cmp	r3, #0
 800a062:	d107      	bne.n	800a074 <dir_register+0x184>
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	3b01      	subs	r3, #1
 800a068:	623b      	str	r3, [r7, #32]
 800a06a:	6a3b      	ldr	r3, [r7, #32]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1d5      	bne.n	800a01c <dir_register+0x12c>
 800a070:	e000      	b.n	800a074 <dir_register+0x184>
				if (res != FR_OK) break;
 800a072:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a074:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d128      	bne.n	800a0ce <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	4619      	mov	r1, r3
 800a082:	69f8      	ldr	r0, [r7, #28]
 800a084:	f7fe ff28 	bl	8008ed8 <move_window>
 800a088:	4603      	mov	r3, r0
 800a08a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800a08e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a092:	2b00      	cmp	r3, #0
 800a094:	d11b      	bne.n	800a0ce <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6a1b      	ldr	r3, [r3, #32]
 800a09a:	2220      	movs	r2, #32
 800a09c:	2100      	movs	r1, #0
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe fd0d 	bl	8008abe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a18      	ldr	r0, [r3, #32]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3324      	adds	r3, #36	@ 0x24
 800a0ac:	220b      	movs	r2, #11
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	f7fe fce4 	bl	8008a7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	330c      	adds	r3, #12
 800a0c0:	f002 0218 	and.w	r2, r2, #24
 800a0c4:	b2d2      	uxtb	r2, r2
 800a0c6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a0ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3730      	adds	r7, #48	@ 0x30
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	4ec4ec4f 	.word	0x4ec4ec4f

0800a0e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b08a      	sub	sp, #40	@ 0x28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	613b      	str	r3, [r7, #16]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	60fb      	str	r3, [r7, #12]
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	61ba      	str	r2, [r7, #24]
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	4413      	add	r3, r2
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800a10e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a110:	2b1f      	cmp	r3, #31
 800a112:	d940      	bls.n	800a196 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800a114:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a116:	2b2f      	cmp	r3, #47	@ 0x2f
 800a118:	d006      	beq.n	800a128 <create_name+0x48>
 800a11a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a11c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a11e:	d110      	bne.n	800a142 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a120:	e002      	b.n	800a128 <create_name+0x48>
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	3301      	adds	r3, #1
 800a126:	61bb      	str	r3, [r7, #24]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	4413      	add	r3, r2
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b2f      	cmp	r3, #47	@ 0x2f
 800a132:	d0f6      	beq.n	800a122 <create_name+0x42>
 800a134:	693a      	ldr	r2, [r7, #16]
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	4413      	add	r3, r2
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	2b5c      	cmp	r3, #92	@ 0x5c
 800a13e:	d0f0      	beq.n	800a122 <create_name+0x42>
			break;
 800a140:	e02a      	b.n	800a198 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	2bfe      	cmp	r3, #254	@ 0xfe
 800a146:	d901      	bls.n	800a14c <create_name+0x6c>
 800a148:	2306      	movs	r3, #6
 800a14a:	e17d      	b.n	800a448 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800a14c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800a152:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a154:	2101      	movs	r1, #1
 800a156:	4618      	mov	r0, r3
 800a158:	f001 fc10 	bl	800b97c <ff_convert>
 800a15c:	4603      	mov	r3, r0
 800a15e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800a160:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <create_name+0x8a>
 800a166:	2306      	movs	r3, #6
 800a168:	e16e      	b.n	800a448 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800a16a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a16c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a16e:	d809      	bhi.n	800a184 <create_name+0xa4>
 800a170:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a172:	4619      	mov	r1, r3
 800a174:	488d      	ldr	r0, [pc, #564]	@ (800a3ac <create_name+0x2cc>)
 800a176:	f7fe fce4 	bl	8008b42 <chk_chr>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <create_name+0xa4>
 800a180:	2306      	movs	r3, #6
 800a182:	e161      	b.n	800a448 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	1c5a      	adds	r2, r3, #1
 800a188:	617a      	str	r2, [r7, #20]
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a192:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800a194:	e7b4      	b.n	800a100 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800a196:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800a198:	693a      	ldr	r2, [r7, #16]
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	441a      	add	r2, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a1a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1a4:	2b1f      	cmp	r3, #31
 800a1a6:	d801      	bhi.n	800a1ac <create_name+0xcc>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	e000      	b.n	800a1ae <create_name+0xce>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a1b2:	e011      	b.n	800a1d8 <create_name+0xf8>
		w = lfn[di - 1];
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800a1c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d002      	beq.n	800a1d2 <create_name+0xf2>
 800a1cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a1ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1d0:	d106      	bne.n	800a1e0 <create_name+0x100>
		di--;
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1ea      	bne.n	800a1b4 <create_name+0xd4>
 800a1de:	e000      	b.n	800a1e2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800a1e0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d101      	bne.n	800a1f8 <create_name+0x118>
 800a1f4:	2306      	movs	r3, #6
 800a1f6:	e127      	b.n	800a448 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3324      	adds	r3, #36	@ 0x24
 800a1fc:	220b      	movs	r2, #11
 800a1fe:	2120      	movs	r1, #32
 800a200:	4618      	mov	r0, r3
 800a202:	f7fe fc5c 	bl	8008abe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800a206:	2300      	movs	r3, #0
 800a208:	61bb      	str	r3, [r7, #24]
 800a20a:	e002      	b.n	800a212 <create_name+0x132>
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	3301      	adds	r3, #1
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	2b20      	cmp	r3, #32
 800a21e:	d0f5      	beq.n	800a20c <create_name+0x12c>
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	005b      	lsls	r3, r3, #1
 800a224:	68fa      	ldr	r2, [r7, #12]
 800a226:	4413      	add	r3, r2
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a22c:	d0ee      	beq.n	800a20c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <create_name+0x168>
 800a234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a238:	f043 0303 	orr.w	r3, r3, #3
 800a23c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800a240:	e002      	b.n	800a248 <create_name+0x168>
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	3b01      	subs	r3, #1
 800a246:	617b      	str	r3, [r7, #20]
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d009      	beq.n	800a262 <create_name+0x182>
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a254:	3b01      	subs	r3, #1
 800a256:	005b      	lsls	r3, r3, #1
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	881b      	ldrh	r3, [r3, #0]
 800a25e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a260:	d1ef      	bne.n	800a242 <create_name+0x162>

	i = b = 0; ni = 8;
 800a262:	2300      	movs	r3, #0
 800a264:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a268:	2300      	movs	r3, #0
 800a26a:	623b      	str	r3, [r7, #32]
 800a26c:	2308      	movs	r3, #8
 800a26e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800a270:	69bb      	ldr	r3, [r7, #24]
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	61ba      	str	r2, [r7, #24]
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800a280:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 8090 	beq.w	800a3a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800a288:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a28a:	2b20      	cmp	r3, #32
 800a28c:	d006      	beq.n	800a29c <create_name+0x1bc>
 800a28e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a290:	2b2e      	cmp	r3, #46	@ 0x2e
 800a292:	d10a      	bne.n	800a2aa <create_name+0x1ca>
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	429a      	cmp	r2, r3
 800a29a:	d006      	beq.n	800a2aa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800a29c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2a0:	f043 0303 	orr.w	r3, r3, #3
 800a2a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a2a8:	e07d      	b.n	800a3a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800a2aa:	6a3a      	ldr	r2, [r7, #32]
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d203      	bcs.n	800a2ba <create_name+0x1da>
 800a2b2:	69ba      	ldr	r2, [r7, #24]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d123      	bne.n	800a302 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	2b0b      	cmp	r3, #11
 800a2be:	d106      	bne.n	800a2ce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800a2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2c4:	f043 0303 	orr.w	r3, r3, #3
 800a2c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a2cc:	e075      	b.n	800a3ba <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800a2ce:	69ba      	ldr	r2, [r7, #24]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d005      	beq.n	800a2e2 <create_name+0x202>
 800a2d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2da:	f043 0303 	orr.w	r3, r3, #3
 800a2de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d866      	bhi.n	800a3b8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	61bb      	str	r3, [r7, #24]
 800a2ee:	2308      	movs	r3, #8
 800a2f0:	623b      	str	r3, [r7, #32]
 800a2f2:	230b      	movs	r3, #11
 800a2f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800a2f6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a300:	e051      	b.n	800a3a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800a302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a304:	2b7f      	cmp	r3, #127	@ 0x7f
 800a306:	d914      	bls.n	800a332 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800a308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a30a:	2100      	movs	r1, #0
 800a30c:	4618      	mov	r0, r3
 800a30e:	f001 fb35 	bl	800b97c <ff_convert>
 800a312:	4603      	mov	r3, r0
 800a314:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800a316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d004      	beq.n	800a326 <create_name+0x246>
 800a31c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a31e:	3b80      	subs	r3, #128	@ 0x80
 800a320:	4a23      	ldr	r2, [pc, #140]	@ (800a3b0 <create_name+0x2d0>)
 800a322:	5cd3      	ldrb	r3, [r2, r3]
 800a324:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800a326:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a32a:	f043 0302 	orr.w	r3, r3, #2
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800a332:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	d007      	beq.n	800a348 <create_name+0x268>
 800a338:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a33a:	4619      	mov	r1, r3
 800a33c:	481d      	ldr	r0, [pc, #116]	@ (800a3b4 <create_name+0x2d4>)
 800a33e:	f7fe fc00 	bl	8008b42 <chk_chr>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d008      	beq.n	800a35a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800a348:	235f      	movs	r3, #95	@ 0x5f
 800a34a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a34c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a350:	f043 0303 	orr.w	r3, r3, #3
 800a354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a358:	e01b      	b.n	800a392 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800a35a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a35c:	2b40      	cmp	r3, #64	@ 0x40
 800a35e:	d909      	bls.n	800a374 <create_name+0x294>
 800a360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a362:	2b5a      	cmp	r3, #90	@ 0x5a
 800a364:	d806      	bhi.n	800a374 <create_name+0x294>
					b |= 2;
 800a366:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a36a:	f043 0302 	orr.w	r3, r3, #2
 800a36e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a372:	e00e      	b.n	800a392 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800a374:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a376:	2b60      	cmp	r3, #96	@ 0x60
 800a378:	d90b      	bls.n	800a392 <create_name+0x2b2>
 800a37a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a37c:	2b7a      	cmp	r3, #122	@ 0x7a
 800a37e:	d808      	bhi.n	800a392 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800a380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a384:	f043 0301 	orr.w	r3, r3, #1
 800a388:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a38c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a38e:	3b20      	subs	r3, #32
 800a390:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	623a      	str	r2, [r7, #32]
 800a398:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a39a:	b2d1      	uxtb	r1, r2
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	4413      	add	r3, r2
 800a3a0:	460a      	mov	r2, r1
 800a3a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800a3a6:	e763      	b.n	800a270 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800a3a8:	bf00      	nop
 800a3aa:	e006      	b.n	800a3ba <create_name+0x2da>
 800a3ac:	0800da78 	.word	0x0800da78
 800a3b0:	0800db28 	.word	0x0800db28
 800a3b4:	0800da84 	.word	0x0800da84
			if (si > di) break;			/* No extension */
 800a3b8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3c0:	2be5      	cmp	r3, #229	@ 0xe5
 800a3c2:	d103      	bne.n	800a3cc <create_name+0x2ec>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2205      	movs	r2, #5
 800a3c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	2b08      	cmp	r3, #8
 800a3d0:	d104      	bne.n	800a3dc <create_name+0x2fc>
 800a3d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800a3dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a3e0:	f003 030c 	and.w	r3, r3, #12
 800a3e4:	2b0c      	cmp	r3, #12
 800a3e6:	d005      	beq.n	800a3f4 <create_name+0x314>
 800a3e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a3ec:	f003 0303 	and.w	r3, r3, #3
 800a3f0:	2b03      	cmp	r3, #3
 800a3f2:	d105      	bne.n	800a400 <create_name+0x320>
 800a3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3f8:	f043 0302 	orr.w	r3, r3, #2
 800a3fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800a400:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a404:	f003 0302 	and.w	r3, r3, #2
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d117      	bne.n	800a43c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800a40c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a410:	f003 0303 	and.w	r3, r3, #3
 800a414:	2b01      	cmp	r3, #1
 800a416:	d105      	bne.n	800a424 <create_name+0x344>
 800a418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a41c:	f043 0310 	orr.w	r3, r3, #16
 800a420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800a424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a428:	f003 030c 	and.w	r3, r3, #12
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d105      	bne.n	800a43c <create_name+0x35c>
 800a430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a434:	f043 0308 	orr.w	r3, r3, #8
 800a438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a442:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800a446:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3728      	adds	r7, #40	@ 0x28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a464:	e002      	b.n	800a46c <follow_path+0x1c>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b2f      	cmp	r3, #47	@ 0x2f
 800a472:	d0f8      	beq.n	800a466 <follow_path+0x16>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b5c      	cmp	r3, #92	@ 0x5c
 800a47a:	d0f4      	beq.n	800a466 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	2200      	movs	r2, #0
 800a480:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b1f      	cmp	r3, #31
 800a488:	d80a      	bhi.n	800a4a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2280      	movs	r2, #128	@ 0x80
 800a48e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800a492:	2100      	movs	r1, #0
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff f8fe 	bl	8009696 <dir_sdi>
 800a49a:	4603      	mov	r3, r0
 800a49c:	75fb      	strb	r3, [r7, #23]
 800a49e:	e048      	b.n	800a532 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4a0:	463b      	mov	r3, r7
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff fe1b 	bl	800a0e0 <create_name>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d139      	bne.n	800a528 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff fc5a 	bl	8009d6e <dir_find>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800a4c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00a      	beq.n	800a4e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a4cc:	7dfb      	ldrb	r3, [r7, #23]
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d12c      	bne.n	800a52c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d127      	bne.n	800a52c <follow_path+0xdc>
 800a4dc:	2305      	movs	r3, #5
 800a4de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a4e0:	e024      	b.n	800a52c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4e2:	7afb      	ldrb	r3, [r7, #11]
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d121      	bne.n	800a530 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	799b      	ldrb	r3, [r3, #6]
 800a4f0:	f003 0310 	and.w	r3, r3, #16
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d102      	bne.n	800a4fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a4f8:	2305      	movs	r3, #5
 800a4fa:	75fb      	strb	r3, [r7, #23]
 800a4fc:	e019      	b.n	800a532 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	8992      	ldrh	r2, [r2, #12]
 800a50c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a510:	fb00 f202 	mul.w	r2, r0, r2
 800a514:	1a9b      	subs	r3, r3, r2
 800a516:	440b      	add	r3, r1
 800a518:	4619      	mov	r1, r3
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f7ff fa61 	bl	80099e2 <ld_clust>
 800a520:	4602      	mov	r2, r0
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a526:	e7bb      	b.n	800a4a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800a528:	bf00      	nop
 800a52a:	e002      	b.n	800a532 <follow_path+0xe2>
				break;
 800a52c:	bf00      	nop
 800a52e:	e000      	b.n	800a532 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a530:	bf00      	nop
			}
		}
	}

	return res;
 800a532:	7dfb      	ldrb	r3, [r7, #23]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3718      	adds	r7, #24
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b087      	sub	sp, #28
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a548:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d031      	beq.n	800a5b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	e002      	b.n	800a560 <get_ldnumber+0x24>
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	3301      	adds	r3, #1
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	2b1f      	cmp	r3, #31
 800a566:	d903      	bls.n	800a570 <get_ldnumber+0x34>
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a56e:	d1f4      	bne.n	800a55a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	2b3a      	cmp	r3, #58	@ 0x3a
 800a576:	d11c      	bne.n	800a5b2 <get_ldnumber+0x76>
			tp = *path;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	60fa      	str	r2, [r7, #12]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	3b30      	subs	r3, #48	@ 0x30
 800a588:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b09      	cmp	r3, #9
 800a58e:	d80e      	bhi.n	800a5ae <get_ldnumber+0x72>
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	429a      	cmp	r2, r3
 800a596:	d10a      	bne.n	800a5ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d107      	bne.n	800a5ae <get_ldnumber+0x72>
					vol = (int)i;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	e002      	b.n	800a5b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a5b6:	693b      	ldr	r3, [r7, #16]
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	371c      	adds	r7, #28
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	70da      	strb	r2, [r3, #3]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5da:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a5dc:	6839      	ldr	r1, [r7, #0]
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7fe fc7a 	bl	8008ed8 <move_window>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <check_fs+0x2a>
 800a5ea:	2304      	movs	r3, #4
 800a5ec:	e038      	b.n	800a660 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3338      	adds	r3, #56	@ 0x38
 800a5f2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7fe f9be 	bl	8008978 <ld_word>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	461a      	mov	r2, r3
 800a600:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a604:	429a      	cmp	r2, r3
 800a606:	d001      	beq.n	800a60c <check_fs+0x48>
 800a608:	2303      	movs	r3, #3
 800a60a:	e029      	b.n	800a660 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a612:	2be9      	cmp	r3, #233	@ 0xe9
 800a614:	d009      	beq.n	800a62a <check_fs+0x66>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a61c:	2beb      	cmp	r3, #235	@ 0xeb
 800a61e:	d11e      	bne.n	800a65e <check_fs+0x9a>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800a626:	2b90      	cmp	r3, #144	@ 0x90
 800a628:	d119      	bne.n	800a65e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	3338      	adds	r3, #56	@ 0x38
 800a62e:	3336      	adds	r3, #54	@ 0x36
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe f9b9 	bl	80089a8 <ld_dword>
 800a636:	4603      	mov	r3, r0
 800a638:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a63c:	4a0a      	ldr	r2, [pc, #40]	@ (800a668 <check_fs+0xa4>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d101      	bne.n	800a646 <check_fs+0x82>
 800a642:	2300      	movs	r3, #0
 800a644:	e00c      	b.n	800a660 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3338      	adds	r3, #56	@ 0x38
 800a64a:	3352      	adds	r3, #82	@ 0x52
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fe f9ab 	bl	80089a8 <ld_dword>
 800a652:	4603      	mov	r3, r0
 800a654:	4a05      	ldr	r2, [pc, #20]	@ (800a66c <check_fs+0xa8>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d101      	bne.n	800a65e <check_fs+0x9a>
 800a65a:	2300      	movs	r3, #0
 800a65c:	e000      	b.n	800a660 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a65e:	2302      	movs	r3, #2
}
 800a660:	4618      	mov	r0, r3
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	00544146 	.word	0x00544146
 800a66c:	33544146 	.word	0x33544146

0800a670 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b096      	sub	sp, #88	@ 0x58
 800a674:	af00      	add	r7, sp, #0
 800a676:	60f8      	str	r0, [r7, #12]
 800a678:	60b9      	str	r1, [r7, #8]
 800a67a:	4613      	mov	r3, r2
 800a67c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2200      	movs	r2, #0
 800a682:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff ff59 	bl	800a53c <get_ldnumber>
 800a68a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a68c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a68e:	2b00      	cmp	r3, #0
 800a690:	da01      	bge.n	800a696 <find_volume+0x26>
 800a692:	230b      	movs	r3, #11
 800a694:	e265      	b.n	800ab62 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a696:	4a9f      	ldr	r2, [pc, #636]	@ (800a914 <find_volume+0x2a4>)
 800a698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a69e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <find_volume+0x3a>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	e25b      	b.n	800ab62 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a6ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	f023 0301 	bic.w	r3, r3, #1
 800a6b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d01a      	beq.n	800a6f6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6c2:	785b      	ldrb	r3, [r3, #1]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe f8b9 	bl	800883c <disk_status>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a6d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a6d4:	f003 0301 	and.w	r3, r3, #1
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10c      	bne.n	800a6f6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a6dc:	79fb      	ldrb	r3, [r7, #7]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d007      	beq.n	800a6f2 <find_volume+0x82>
 800a6e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a6ee:	230a      	movs	r3, #10
 800a6f0:	e237      	b.n	800ab62 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	e235      	b.n	800ab62 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a702:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe f8b1 	bl	8008870 <disk_initialize>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a714:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a718:	f003 0301 	and.w	r3, r3, #1
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a720:	2303      	movs	r3, #3
 800a722:	e21e      	b.n	800ab62 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d007      	beq.n	800a73a <find_volume+0xca>
 800a72a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a72e:	f003 0304 	and.w	r3, r3, #4
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a736:	230a      	movs	r3, #10
 800a738:	e213      	b.n	800ab62 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a73a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a73c:	7858      	ldrb	r0, [r3, #1]
 800a73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a740:	330c      	adds	r3, #12
 800a742:	461a      	mov	r2, r3
 800a744:	2102      	movs	r1, #2
 800a746:	f7fe f8f9 	bl	800893c <disk_ioctl>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <find_volume+0xe4>
 800a750:	2301      	movs	r3, #1
 800a752:	e206      	b.n	800ab62 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a756:	899b      	ldrh	r3, [r3, #12]
 800a758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a75c:	d80d      	bhi.n	800a77a <find_volume+0x10a>
 800a75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a760:	899b      	ldrh	r3, [r3, #12]
 800a762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a766:	d308      	bcc.n	800a77a <find_volume+0x10a>
 800a768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76a:	899b      	ldrh	r3, [r3, #12]
 800a76c:	461a      	mov	r2, r3
 800a76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a770:	899b      	ldrh	r3, [r3, #12]
 800a772:	3b01      	subs	r3, #1
 800a774:	4013      	ands	r3, r2
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <find_volume+0x10e>
 800a77a:	2301      	movs	r3, #1
 800a77c:	e1f1      	b.n	800ab62 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a782:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a784:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a786:	f7ff ff1d 	bl	800a5c4 <check_fs>
 800a78a:	4603      	mov	r3, r0
 800a78c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a790:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a794:	2b02      	cmp	r3, #2
 800a796:	d149      	bne.n	800a82c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a798:	2300      	movs	r3, #0
 800a79a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a79c:	e01e      	b.n	800a7dc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a7a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7a6:	011b      	lsls	r3, r3, #4
 800a7a8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a7ac:	4413      	add	r3, r2
 800a7ae:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	3304      	adds	r3, #4
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d006      	beq.n	800a7c8 <find_volume+0x158>
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7bc:	3308      	adds	r3, #8
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe f8f2 	bl	80089a8 <ld_dword>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	e000      	b.n	800a7ca <find_volume+0x15a>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	3358      	adds	r3, #88	@ 0x58
 800a7d0:	443b      	add	r3, r7
 800a7d2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a7d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7d8:	3301      	adds	r3, #1
 800a7da:	643b      	str	r3, [r7, #64]	@ 0x40
 800a7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d9dd      	bls.n	800a79e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <find_volume+0x182>
 800a7ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a7f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	3358      	adds	r3, #88	@ 0x58
 800a7f8:	443b      	add	r3, r7
 800a7fa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a7fe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <find_volume+0x1a2>
 800a806:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a808:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a80a:	f7ff fedb 	bl	800a5c4 <check_fs>
 800a80e:	4603      	mov	r3, r0
 800a810:	e000      	b.n	800a814 <find_volume+0x1a4>
 800a812:	2303      	movs	r3, #3
 800a814:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a818:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d905      	bls.n	800a82c <find_volume+0x1bc>
 800a820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a822:	3301      	adds	r3, #1
 800a824:	643b      	str	r3, [r7, #64]	@ 0x40
 800a826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d9e2      	bls.n	800a7f2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a82c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a830:	2b04      	cmp	r3, #4
 800a832:	d101      	bne.n	800a838 <find_volume+0x1c8>
 800a834:	2301      	movs	r3, #1
 800a836:	e194      	b.n	800ab62 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a838:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d901      	bls.n	800a844 <find_volume+0x1d4>
 800a840:	230d      	movs	r3, #13
 800a842:	e18e      	b.n	800ab62 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a846:	3338      	adds	r3, #56	@ 0x38
 800a848:	330b      	adds	r3, #11
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe f894 	bl	8008978 <ld_word>
 800a850:	4603      	mov	r3, r0
 800a852:	461a      	mov	r2, r3
 800a854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a856:	899b      	ldrh	r3, [r3, #12]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d001      	beq.n	800a860 <find_volume+0x1f0>
 800a85c:	230d      	movs	r3, #13
 800a85e:	e180      	b.n	800ab62 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a862:	3338      	adds	r3, #56	@ 0x38
 800a864:	3316      	adds	r3, #22
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe f886 	bl	8008978 <ld_word>
 800a86c:	4603      	mov	r3, r0
 800a86e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <find_volume+0x214>
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	3338      	adds	r3, #56	@ 0x38
 800a87a:	3324      	adds	r3, #36	@ 0x24
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fe f893 	bl	80089a8 <ld_dword>
 800a882:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a886:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a888:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a892:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a896:	789b      	ldrb	r3, [r3, #2]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d005      	beq.n	800a8a8 <find_volume+0x238>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89e:	789b      	ldrb	r3, [r3, #2]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d001      	beq.n	800a8a8 <find_volume+0x238>
 800a8a4:	230d      	movs	r3, #13
 800a8a6:	e15c      	b.n	800ab62 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8aa:	789b      	ldrb	r3, [r3, #2]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8b0:	fb02 f303 	mul.w	r3, r2, r3
 800a8b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8bc:	461a      	mov	r2, r3
 800a8be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	895b      	ldrh	r3, [r3, #10]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d008      	beq.n	800a8dc <find_volume+0x26c>
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8cc:	895b      	ldrh	r3, [r3, #10]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	895b      	ldrh	r3, [r3, #10]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <find_volume+0x270>
 800a8dc:	230d      	movs	r3, #13
 800a8de:	e140      	b.n	800ab62 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e2:	3338      	adds	r3, #56	@ 0x38
 800a8e4:	3311      	adds	r3, #17
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe f846 	bl	8008978 <ld_word>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f6:	891b      	ldrh	r3, [r3, #8]
 800a8f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a8fa:	8992      	ldrh	r2, [r2, #12]
 800a8fc:	0952      	lsrs	r2, r2, #5
 800a8fe:	b292      	uxth	r2, r2
 800a900:	fbb3 f1f2 	udiv	r1, r3, r2
 800a904:	fb01 f202 	mul.w	r2, r1, r2
 800a908:	1a9b      	subs	r3, r3, r2
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <find_volume+0x2a8>
 800a910:	230d      	movs	r3, #13
 800a912:	e126      	b.n	800ab62 <find_volume+0x4f2>
 800a914:	20002bbc 	.word	0x20002bbc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91a:	3338      	adds	r3, #56	@ 0x38
 800a91c:	3313      	adds	r3, #19
 800a91e:	4618      	mov	r0, r3
 800a920:	f7fe f82a 	bl	8008978 <ld_word>
 800a924:	4603      	mov	r3, r0
 800a926:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a928:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d106      	bne.n	800a93c <find_volume+0x2cc>
 800a92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a930:	3338      	adds	r3, #56	@ 0x38
 800a932:	3320      	adds	r3, #32
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe f837 	bl	80089a8 <ld_dword>
 800a93a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a93e:	3338      	adds	r3, #56	@ 0x38
 800a940:	330e      	adds	r3, #14
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe f818 	bl	8008978 <ld_word>
 800a948:	4603      	mov	r3, r0
 800a94a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a94c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <find_volume+0x2e6>
 800a952:	230d      	movs	r3, #13
 800a954:	e105      	b.n	800ab62 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a956:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a95a:	4413      	add	r3, r2
 800a95c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a95e:	8911      	ldrh	r1, [r2, #8]
 800a960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a962:	8992      	ldrh	r2, [r2, #12]
 800a964:	0952      	lsrs	r2, r2, #5
 800a966:	b292      	uxth	r2, r2
 800a968:	fbb1 f2f2 	udiv	r2, r1, r2
 800a96c:	b292      	uxth	r2, r2
 800a96e:	4413      	add	r3, r2
 800a970:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	429a      	cmp	r2, r3
 800a978:	d201      	bcs.n	800a97e <find_volume+0x30e>
 800a97a:	230d      	movs	r3, #13
 800a97c:	e0f1      	b.n	800ab62 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a97e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a986:	8952      	ldrh	r2, [r2, #10]
 800a988:	fbb3 f3f2 	udiv	r3, r3, r2
 800a98c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <find_volume+0x328>
 800a994:	230d      	movs	r3, #13
 800a996:	e0e4      	b.n	800ab62 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a998:	2303      	movs	r3, #3
 800a99a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d802      	bhi.n	800a9ae <find_volume+0x33e>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d802      	bhi.n	800a9be <find_volume+0x34e>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	1c9a      	adds	r2, r3, #2
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9ca:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a9cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d0:	441a      	add	r2, r3
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800a9d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	441a      	add	r2, r3
 800a9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9de:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800a9e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a9e4:	2b03      	cmp	r3, #3
 800a9e6:	d11e      	bne.n	800aa26 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ea:	3338      	adds	r3, #56	@ 0x38
 800a9ec:	332a      	adds	r3, #42	@ 0x2a
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f7fd ffc2 	bl	8008978 <ld_word>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d001      	beq.n	800a9fe <find_volume+0x38e>
 800a9fa:	230d      	movs	r3, #13
 800a9fc:	e0b1      	b.n	800ab62 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa00:	891b      	ldrh	r3, [r3, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <find_volume+0x39a>
 800aa06:	230d      	movs	r3, #13
 800aa08:	e0ab      	b.n	800ab62 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800aa0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa0c:	3338      	adds	r3, #56	@ 0x38
 800aa0e:	332c      	adds	r3, #44	@ 0x2c
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fd ffc9 	bl	80089a8 <ld_dword>
 800aa16:	4602      	mov	r2, r0
 800aa18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa1e:	69db      	ldr	r3, [r3, #28]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa24:	e01f      	b.n	800aa66 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800aa26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa28:	891b      	ldrh	r3, [r3, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <find_volume+0x3c2>
 800aa2e:	230d      	movs	r3, #13
 800aa30:	e097      	b.n	800ab62 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800aa32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa38:	441a      	add	r2, r3
 800aa3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa3c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800aa3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d103      	bne.n	800aa4e <find_volume+0x3de>
 800aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	e00a      	b.n	800aa64 <find_volume+0x3f4>
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa50:	69da      	ldr	r2, [r3, #28]
 800aa52:	4613      	mov	r3, r2
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4413      	add	r3, r2
 800aa58:	085a      	lsrs	r2, r3, #1
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	69db      	ldr	r3, [r3, #28]
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800aa64:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800aa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa68:	6a1a      	ldr	r2, [r3, #32]
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6c:	899b      	ldrh	r3, [r3, #12]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa72:	440b      	add	r3, r1
 800aa74:	3b01      	subs	r3, #1
 800aa76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aa78:	8989      	ldrh	r1, [r1, #12]
 800aa7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d201      	bcs.n	800aa86 <find_volume+0x416>
 800aa82:	230d      	movs	r3, #13
 800aa84:	e06d      	b.n	800ab62 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800aa86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa8c:	619a      	str	r2, [r3, #24]
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa94:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	2280      	movs	r2, #128	@ 0x80
 800aa9a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800aa9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800aaa0:	2b03      	cmp	r3, #3
 800aaa2:	d149      	bne.n	800ab38 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa6:	3338      	adds	r3, #56	@ 0x38
 800aaa8:	3330      	adds	r3, #48	@ 0x30
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7fd ff64 	bl	8008978 <ld_word>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d140      	bne.n	800ab38 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aab8:	3301      	adds	r3, #1
 800aaba:	4619      	mov	r1, r3
 800aabc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aabe:	f7fe fa0b 	bl	8008ed8 <move_window>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d137      	bne.n	800ab38 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800aac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaca:	2200      	movs	r2, #0
 800aacc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aad0:	3338      	adds	r3, #56	@ 0x38
 800aad2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fd ff4e 	bl	8008978 <ld_word>
 800aadc:	4603      	mov	r3, r0
 800aade:	461a      	mov	r2, r3
 800aae0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d127      	bne.n	800ab38 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaea:	3338      	adds	r3, #56	@ 0x38
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7fd ff5b 	bl	80089a8 <ld_dword>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	4a1d      	ldr	r2, [pc, #116]	@ (800ab6c <find_volume+0x4fc>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d11e      	bne.n	800ab38 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafc:	3338      	adds	r3, #56	@ 0x38
 800aafe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7fd ff50 	bl	80089a8 <ld_dword>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	4a19      	ldr	r2, [pc, #100]	@ (800ab70 <find_volume+0x500>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d113      	bne.n	800ab38 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ab10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab12:	3338      	adds	r3, #56	@ 0x38
 800ab14:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7fd ff45 	bl	80089a8 <ld_dword>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ab24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab26:	3338      	adds	r3, #56	@ 0x38
 800ab28:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7fd ff3b 	bl	80089a8 <ld_dword>
 800ab32:	4602      	mov	r2, r0
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ab3e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ab40:	4b0c      	ldr	r3, [pc, #48]	@ (800ab74 <find_volume+0x504>)
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	3301      	adds	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	4b0a      	ldr	r3, [pc, #40]	@ (800ab74 <find_volume+0x504>)
 800ab4a:	801a      	strh	r2, [r3, #0]
 800ab4c:	4b09      	ldr	r3, [pc, #36]	@ (800ab74 <find_volume+0x504>)
 800ab4e:	881a      	ldrh	r2, [r3, #0]
 800ab50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab52:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800ab54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab56:	4a08      	ldr	r2, [pc, #32]	@ (800ab78 <find_volume+0x508>)
 800ab58:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ab5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab5c:	f7fe f954 	bl	8008e08 <clear_lock>
#endif
	return FR_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3758      	adds	r7, #88	@ 0x58
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	41615252 	.word	0x41615252
 800ab70:	61417272 	.word	0x61417272
 800ab74:	20002bc0 	.word	0x20002bc0
 800ab78:	20002be4 	.word	0x20002be4

0800ab7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ab86:	2309      	movs	r3, #9
 800ab88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d01c      	beq.n	800abca <validate+0x4e>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d018      	beq.n	800abca <validate+0x4e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d013      	beq.n	800abca <validate+0x4e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	889a      	ldrh	r2, [r3, #4]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	88db      	ldrh	r3, [r3, #6]
 800abac:	429a      	cmp	r2, r3
 800abae:	d10c      	bne.n	800abca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	785b      	ldrb	r3, [r3, #1]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7fd fe40 	bl	800883c <disk_status>
 800abbc:	4603      	mov	r3, r0
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <validate+0x4e>
			res = FR_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d102      	bne.n	800abd6 <validate+0x5a>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	e000      	b.n	800abd8 <validate+0x5c>
 800abd6:	2300      	movs	r3, #0
 800abd8:	683a      	ldr	r2, [r7, #0]
 800abda:	6013      	str	r3, [r2, #0]
	return res;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b088      	sub	sp, #32
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	4613      	mov	r3, r2
 800abf4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800abfa:	f107 0310 	add.w	r3, r7, #16
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7ff fc9c 	bl	800a53c <get_ldnumber>
 800ac04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da01      	bge.n	800ac10 <f_mount+0x28>
 800ac0c:	230b      	movs	r3, #11
 800ac0e:	e02b      	b.n	800ac68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ac10:	4a17      	ldr	r2, [pc, #92]	@ (800ac70 <f_mount+0x88>)
 800ac12:	69fb      	ldr	r3, [r7, #28]
 800ac14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ac20:	69b8      	ldr	r0, [r7, #24]
 800ac22:	f7fe f8f1 	bl	8008e08 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2200      	movs	r2, #0
 800ac36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	490d      	ldr	r1, [pc, #52]	@ (800ac70 <f_mount+0x88>)
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d002      	beq.n	800ac4e <f_mount+0x66>
 800ac48:	79fb      	ldrb	r3, [r7, #7]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d001      	beq.n	800ac52 <f_mount+0x6a>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	e00a      	b.n	800ac68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ac52:	f107 010c 	add.w	r1, r7, #12
 800ac56:	f107 0308 	add.w	r3, r7, #8
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff fd07 	bl	800a670 <find_volume>
 800ac62:	4603      	mov	r3, r0
 800ac64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3720      	adds	r7, #32
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20002bbc 	.word	0x20002bbc

0800ac74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b09a      	sub	sp, #104	@ 0x68
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <f_open+0x18>
 800ac88:	2309      	movs	r3, #9
 800ac8a:	e1b7      	b.n	800affc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ac94:	79fa      	ldrb	r2, [r7, #7]
 800ac96:	f107 0114 	add.w	r1, r7, #20
 800ac9a:	f107 0308 	add.w	r3, r7, #8
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff fce6 	bl	800a670 <find_volume>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800acaa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f040 819b 	bne.w	800afea <f_open+0x376>
		dj.obj.fs = fs;
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	f107 0318 	add.w	r3, r7, #24
 800acbe:	4611      	mov	r1, r2
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7ff fbc5 	bl	800a450 <follow_path>
 800acc6:	4603      	mov	r3, r0
 800acc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800accc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d118      	bne.n	800ad06 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800acd4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800acd8:	b25b      	sxtb	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	da03      	bge.n	800ace6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800acde:	2306      	movs	r3, #6
 800ace0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ace4:	e00f      	b.n	800ad06 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	bf8c      	ite	hi
 800acec:	2301      	movhi	r3, #1
 800acee:	2300      	movls	r3, #0
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	461a      	mov	r2, r3
 800acf4:	f107 0318 	add.w	r3, r7, #24
 800acf8:	4611      	mov	r1, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7fd ff3c 	bl	8008b78 <chk_lock>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	f003 031c 	and.w	r3, r3, #28
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d07f      	beq.n	800ae10 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ad10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d017      	beq.n	800ad48 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ad18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	d10e      	bne.n	800ad3e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ad20:	f7fd ff86 	bl	8008c30 <enq_lock>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d006      	beq.n	800ad38 <f_open+0xc4>
 800ad2a:	f107 0318 	add.w	r3, r7, #24
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f7ff f8de 	bl	8009ef0 <dir_register>
 800ad34:	4603      	mov	r3, r0
 800ad36:	e000      	b.n	800ad3a <f_open+0xc6>
 800ad38:	2312      	movs	r3, #18
 800ad3a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ad3e:	79fb      	ldrb	r3, [r7, #7]
 800ad40:	f043 0308 	orr.w	r3, r3, #8
 800ad44:	71fb      	strb	r3, [r7, #7]
 800ad46:	e010      	b.n	800ad6a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad48:	7fbb      	ldrb	r3, [r7, #30]
 800ad4a:	f003 0311 	and.w	r3, r3, #17
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d003      	beq.n	800ad5a <f_open+0xe6>
					res = FR_DENIED;
 800ad52:	2307      	movs	r3, #7
 800ad54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ad58:	e007      	b.n	800ad6a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	f003 0304 	and.w	r3, r3, #4
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d002      	beq.n	800ad6a <f_open+0xf6>
 800ad64:	2308      	movs	r3, #8
 800ad66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ad6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d168      	bne.n	800ae44 <f_open+0x1d0>
 800ad72:	79fb      	ldrb	r3, [r7, #7]
 800ad74:	f003 0308 	and.w	r3, r3, #8
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d063      	beq.n	800ae44 <f_open+0x1d0>
				dw = GET_FATTIME();
 800ad7c:	f7fd fb1c 	bl	80083b8 <get_fattime>
 800ad80:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad84:	330e      	adds	r3, #14
 800ad86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f7fd fe4b 	bl	8008a24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad90:	3316      	adds	r3, #22
 800ad92:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7fd fe45 	bl	8008a24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9c:	330b      	adds	r3, #11
 800ad9e:	2220      	movs	r2, #32
 800ada0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ada6:	4611      	mov	r1, r2
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fe fe1a 	bl	80099e2 <ld_clust>
 800adae:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800adb4:	2200      	movs	r2, #0
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fe32 	bl	8009a20 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800adbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adbe:	331c      	adds	r3, #28
 800adc0:	2100      	movs	r1, #0
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fd fe2e 	bl	8008a24 <st_dword>
					fs->wflag = 1;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2201      	movs	r2, #1
 800adcc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800adce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800add0:	2b00      	cmp	r3, #0
 800add2:	d037      	beq.n	800ae44 <f_open+0x1d0>
						dw = fs->winsect;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800add8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800adda:	f107 0318 	add.w	r3, r7, #24
 800adde:	2200      	movs	r2, #0
 800ade0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe fb22 	bl	800942c <remove_chain>
 800ade8:	4603      	mov	r3, r0
 800adea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800adee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d126      	bne.n	800ae44 <f_open+0x1d0>
							res = move_window(fs, dw);
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7fe f86c 	bl	8008ed8 <move_window>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae0a:	3a01      	subs	r2, #1
 800ae0c:	615a      	str	r2, [r3, #20]
 800ae0e:	e019      	b.n	800ae44 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ae10:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d115      	bne.n	800ae44 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ae18:	7fbb      	ldrb	r3, [r7, #30]
 800ae1a:	f003 0310 	and.w	r3, r3, #16
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <f_open+0x1b6>
					res = FR_NO_FILE;
 800ae22:	2304      	movs	r3, #4
 800ae24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ae28:	e00c      	b.n	800ae44 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	f003 0302 	and.w	r3, r3, #2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d007      	beq.n	800ae44 <f_open+0x1d0>
 800ae34:	7fbb      	ldrb	r3, [r7, #30]
 800ae36:	f003 0301 	and.w	r3, r3, #1
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <f_open+0x1d0>
						res = FR_DENIED;
 800ae3e:	2307      	movs	r3, #7
 800ae40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800ae44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d126      	bne.n	800ae9a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ae4c:	79fb      	ldrb	r3, [r7, #7]
 800ae4e:	f003 0308 	and.w	r3, r3, #8
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d003      	beq.n	800ae5e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae5c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ae66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	bf8c      	ite	hi
 800ae72:	2301      	movhi	r3, #1
 800ae74:	2300      	movls	r3, #0
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	461a      	mov	r2, r3
 800ae7a:	f107 0318 	add.w	r3, r7, #24
 800ae7e:	4611      	mov	r1, r2
 800ae80:	4618      	mov	r0, r3
 800ae82:	f7fd fef7 	bl	8008c74 <inc_lock>
 800ae86:	4602      	mov	r2, r0
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d102      	bne.n	800ae9a <f_open+0x226>
 800ae94:	2302      	movs	r3, #2
 800ae96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae9a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	f040 80a3 	bne.w	800afea <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7fe fd99 	bl	80099e2 <ld_clust>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	331c      	adds	r3, #28
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fd fd74 	bl	80089a8 <ld_dword>
 800aec0:	4602      	mov	r2, r0
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	88da      	ldrh	r2, [r3, #6]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	79fa      	ldrb	r2, [r7, #7]
 800aede:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	3330      	adds	r3, #48	@ 0x30
 800aef6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aefa:	2100      	movs	r1, #0
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7fd fdde 	bl	8008abe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800af02:	79fb      	ldrb	r3, [r7, #7]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d06e      	beq.n	800afea <f_open+0x376>
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d06a      	beq.n	800afea <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	895b      	ldrh	r3, [r3, #10]
 800af20:	461a      	mov	r2, r3
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	899b      	ldrh	r3, [r3, #12]
 800af26:	fb02 f303 	mul.w	r3, r2, r3
 800af2a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af38:	e016      	b.n	800af68 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fe f887 	bl	8009052 <get_fat>
 800af44:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800af46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d802      	bhi.n	800af52 <f_open+0x2de>
 800af4c:	2302      	movs	r3, #2
 800af4e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800af52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af58:	d102      	bne.n	800af60 <f_open+0x2ec>
 800af5a:	2301      	movs	r3, #1
 800af5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800af62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d103      	bne.n	800af78 <f_open+0x304>
 800af70:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800af72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af74:	429a      	cmp	r2, r3
 800af76:	d8e0      	bhi.n	800af3a <f_open+0x2c6>
				}
				fp->clust = clst;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800af7c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800af7e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800af82:	2b00      	cmp	r3, #0
 800af84:	d131      	bne.n	800afea <f_open+0x376>
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	899b      	ldrh	r3, [r3, #12]
 800af8a:	461a      	mov	r2, r3
 800af8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800af92:	fb01 f202 	mul.w	r2, r1, r2
 800af96:	1a9b      	subs	r3, r3, r2
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d026      	beq.n	800afea <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe f837 	bl	8009014 <clust2sect>
 800afa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800afa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <f_open+0x342>
						res = FR_INT_ERR;
 800afae:	2302      	movs	r3, #2
 800afb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800afb4:	e019      	b.n	800afea <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	899b      	ldrh	r3, [r3, #12]
 800afba:	461a      	mov	r2, r3
 800afbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800afbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800afc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc4:	441a      	add	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	7858      	ldrb	r0, [r3, #1]
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6a1a      	ldr	r2, [r3, #32]
 800afd8:	2301      	movs	r3, #1
 800afda:	f7fd fc6f 	bl	80088bc <disk_read>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <f_open+0x376>
 800afe4:	2301      	movs	r3, #1
 800afe6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800afea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d002      	beq.n	800aff8 <f_open+0x384>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aff8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800affc:	4618      	mov	r0, r3
 800affe:	3768      	adds	r7, #104	@ 0x68
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08c      	sub	sp, #48	@ 0x30
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
 800b010:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2200      	movs	r2, #0
 800b01a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f107 0210 	add.w	r2, r7, #16
 800b022:	4611      	mov	r1, r2
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fda9 	bl	800ab7c <validate>
 800b02a:	4603      	mov	r3, r0
 800b02c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b034:	2b00      	cmp	r3, #0
 800b036:	d107      	bne.n	800b048 <f_write+0x44>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	7d5b      	ldrb	r3, [r3, #21]
 800b03c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800b040:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <f_write+0x4a>
 800b048:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b04c:	e16a      	b.n	800b324 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	7d1b      	ldrb	r3, [r3, #20]
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b00      	cmp	r3, #0
 800b058:	d101      	bne.n	800b05e <f_write+0x5a>
 800b05a:	2307      	movs	r3, #7
 800b05c:	e162      	b.n	800b324 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	699a      	ldr	r2, [r3, #24]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	441a      	add	r2, r3
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	f080 814c 	bcs.w	800b308 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	699b      	ldr	r3, [r3, #24]
 800b074:	43db      	mvns	r3, r3
 800b076:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b078:	e146      	b.n	800b308 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	699b      	ldr	r3, [r3, #24]
 800b07e:	693a      	ldr	r2, [r7, #16]
 800b080:	8992      	ldrh	r2, [r2, #12]
 800b082:	fbb3 f1f2 	udiv	r1, r3, r2
 800b086:	fb01 f202 	mul.w	r2, r1, r2
 800b08a:	1a9b      	subs	r3, r3, r2
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f040 80f1 	bne.w	800b274 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	8992      	ldrh	r2, [r2, #12]
 800b09a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	8952      	ldrh	r2, [r2, #10]
 800b0a2:	3a01      	subs	r2, #1
 800b0a4:	4013      	ands	r3, r2
 800b0a6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d143      	bne.n	800b136 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d10c      	bne.n	800b0d0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d11a      	bne.n	800b0f8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fa15 	bl	80094f6 <create_chain>
 800b0cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b0ce:	e013      	b.n	800b0f8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d007      	beq.n	800b0e8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	4619      	mov	r1, r3
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f7fe faa1 	bl	8009626 <clmt_clust>
 800b0e4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800b0e6:	e007      	b.n	800b0f8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	69db      	ldr	r3, [r3, #28]
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fe fa00 	bl	80094f6 <create_chain>
 800b0f6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	f000 8109 	beq.w	800b312 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b102:	2b01      	cmp	r3, #1
 800b104:	d104      	bne.n	800b110 <f_write+0x10c>
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2202      	movs	r2, #2
 800b10a:	755a      	strb	r2, [r3, #21]
 800b10c:	2302      	movs	r3, #2
 800b10e:	e109      	b.n	800b324 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b116:	d104      	bne.n	800b122 <f_write+0x11e>
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2201      	movs	r2, #1
 800b11c:	755a      	strb	r2, [r3, #21]
 800b11e:	2301      	movs	r3, #1
 800b120:	e100      	b.n	800b324 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b126:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <f_write+0x132>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b134:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	7d1b      	ldrb	r3, [r3, #20]
 800b13a:	b25b      	sxtb	r3, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	da18      	bge.n	800b172 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	7858      	ldrb	r0, [r3, #1]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a1a      	ldr	r2, [r3, #32]
 800b14e:	2301      	movs	r3, #1
 800b150:	f7fd fbd4 	bl	80088fc <disk_write>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d004      	beq.n	800b164 <f_write+0x160>
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2201      	movs	r2, #1
 800b15e:	755a      	strb	r2, [r3, #21]
 800b160:	2301      	movs	r3, #1
 800b162:	e0df      	b.n	800b324 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	7d1b      	ldrb	r3, [r3, #20]
 800b168:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b172:	693a      	ldr	r2, [r7, #16]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	4619      	mov	r1, r3
 800b17a:	4610      	mov	r0, r2
 800b17c:	f7fd ff4a 	bl	8009014 <clust2sect>
 800b180:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <f_write+0x18e>
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2202      	movs	r2, #2
 800b18c:	755a      	strb	r2, [r3, #21]
 800b18e:	2302      	movs	r3, #2
 800b190:	e0c8      	b.n	800b324 <f_write+0x320>
			sect += csect;
 800b192:	697a      	ldr	r2, [r7, #20]
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	4413      	add	r3, r2
 800b198:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	899b      	ldrh	r3, [r3, #12]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d043      	beq.n	800b236 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	6a3b      	ldr	r3, [r7, #32]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	8952      	ldrh	r2, [r2, #10]
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d905      	bls.n	800b1c8 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	895b      	ldrh	r3, [r3, #10]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	7858      	ldrb	r0, [r3, #1]
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	69f9      	ldr	r1, [r7, #28]
 800b1d2:	f7fd fb93 	bl	80088fc <disk_write>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d004      	beq.n	800b1e6 <f_write+0x1e2>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	755a      	strb	r2, [r3, #21]
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e09e      	b.n	800b324 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a1a      	ldr	r2, [r3, #32]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	1ad3      	subs	r3, r2, r3
 800b1ee:	6a3a      	ldr	r2, [r7, #32]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d918      	bls.n	800b226 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6a1a      	ldr	r2, [r3, #32]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	8992      	ldrh	r2, [r2, #12]
 800b206:	fb02 f303 	mul.w	r3, r2, r3
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	18d1      	adds	r1, r2, r3
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	899b      	ldrh	r3, [r3, #12]
 800b212:	461a      	mov	r2, r3
 800b214:	f7fd fc32 	bl	8008a7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	7d1b      	ldrb	r3, [r3, #20]
 800b21c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b220:	b2da      	uxtb	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	899b      	ldrh	r3, [r3, #12]
 800b22a:	461a      	mov	r2, r3
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	fb02 f303 	mul.w	r3, r2, r3
 800b232:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800b234:	e04b      	b.n	800b2ce <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d016      	beq.n	800b26e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	699a      	ldr	r2, [r3, #24]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b248:	429a      	cmp	r2, r3
 800b24a:	d210      	bcs.n	800b26e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	7858      	ldrb	r0, [r3, #1]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b256:	2301      	movs	r3, #1
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	f7fd fb2f 	bl	80088bc <disk_read>
 800b25e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b260:	2b00      	cmp	r3, #0
 800b262:	d004      	beq.n	800b26e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2201      	movs	r2, #1
 800b268:	755a      	strb	r2, [r3, #21]
 800b26a:	2301      	movs	r3, #1
 800b26c:	e05a      	b.n	800b324 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	697a      	ldr	r2, [r7, #20]
 800b272:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	899b      	ldrh	r3, [r3, #12]
 800b278:	4618      	mov	r0, r3
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	8992      	ldrh	r2, [r2, #12]
 800b282:	fbb3 f1f2 	udiv	r1, r3, r2
 800b286:	fb01 f202 	mul.w	r2, r1, r2
 800b28a:	1a9b      	subs	r3, r3, r2
 800b28c:	1ac3      	subs	r3, r0, r3
 800b28e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	429a      	cmp	r2, r3
 800b296:	d901      	bls.n	800b29c <f_write+0x298>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	699b      	ldr	r3, [r3, #24]
 800b2a6:	693a      	ldr	r2, [r7, #16]
 800b2a8:	8992      	ldrh	r2, [r2, #12]
 800b2aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2ae:	fb00 f202 	mul.w	r2, r0, r2
 800b2b2:	1a9b      	subs	r3, r3, r2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2b8:	69f9      	ldr	r1, [r7, #28]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fd fbde 	bl	8008a7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	7d1b      	ldrb	r3, [r3, #20]
 800b2c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b2c8:	b2da      	uxtb	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b2ce:	69fa      	ldr	r2, [r7, #28]
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2d2:	4413      	add	r3, r2
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	699a      	ldr	r2, [r3, #24]
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	441a      	add	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	619a      	str	r2, [r3, #24]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	bf38      	it	cc
 800b2ee:	461a      	movcc	r2, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	60da      	str	r2, [r3, #12]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	441a      	add	r2, r3
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b304:	1ad3      	subs	r3, r2, r3
 800b306:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f47f aeb5 	bne.w	800b07a <f_write+0x76>
 800b310:	e000      	b.n	800b314 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b312:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	7d1b      	ldrb	r3, [r3, #20]
 800b318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3730      	adds	r7, #48	@ 0x30
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b086      	sub	sp, #24
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f107 0208 	add.w	r2, r7, #8
 800b33a:	4611      	mov	r1, r2
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff fc1d 	bl	800ab7c <validate>
 800b342:	4603      	mov	r3, r0
 800b344:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b346:	7dfb      	ldrb	r3, [r7, #23]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d168      	bne.n	800b41e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	7d1b      	ldrb	r3, [r3, #20]
 800b350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b354:	2b00      	cmp	r3, #0
 800b356:	d062      	beq.n	800b41e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	7d1b      	ldrb	r3, [r3, #20]
 800b35c:	b25b      	sxtb	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	da15      	bge.n	800b38e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	7858      	ldrb	r0, [r3, #1]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6a1a      	ldr	r2, [r3, #32]
 800b370:	2301      	movs	r3, #1
 800b372:	f7fd fac3 	bl	80088fc <disk_write>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <f_sync+0x54>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e04f      	b.n	800b420 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	7d1b      	ldrb	r3, [r3, #20]
 800b384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b38e:	f7fd f813 	bl	80083b8 <get_fattime>
 800b392:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f7fd fd9b 	bl	8008ed8 <move_window>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b3a6:	7dfb      	ldrb	r3, [r7, #23]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d138      	bne.n	800b41e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	330b      	adds	r3, #11
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	330b      	adds	r3, #11
 800b3bc:	f042 0220 	orr.w	r2, r2, #32
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68f9      	ldr	r1, [r7, #12]
 800b3d0:	f7fe fb26 	bl	8009a20 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f103 021c 	add.w	r2, r3, #28
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	4619      	mov	r1, r3
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	f7fd fb1f 	bl	8008a24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3316      	adds	r3, #22
 800b3ea:	6939      	ldr	r1, [r7, #16]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fd fb19 	bl	8008a24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3312      	adds	r3, #18
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fd faf8 	bl	80089ee <st_word>
					fs->wflag = 1;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	2201      	movs	r2, #1
 800b402:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	4618      	mov	r0, r3
 800b408:	f7fd fd94 	bl	8008f34 <sync_fs>
 800b40c:	4603      	mov	r3, r0
 800b40e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7d1b      	ldrb	r3, [r3, #20]
 800b414:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f7ff ff7b 	bl	800b32c <f_sync>
 800b436:	4603      	mov	r3, r0
 800b438:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b43a:	7bfb      	ldrb	r3, [r7, #15]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d118      	bne.n	800b472 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f107 0208 	add.w	r2, r7, #8
 800b446:	4611      	mov	r1, r2
 800b448:	4618      	mov	r0, r3
 800b44a:	f7ff fb97 	bl	800ab7c <validate>
 800b44e:	4603      	mov	r3, r0
 800b450:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b452:	7bfb      	ldrb	r3, [r7, #15]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d10c      	bne.n	800b472 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	691b      	ldr	r3, [r3, #16]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fd fc97 	bl	8008d90 <dec_lock>
 800b462:	4603      	mov	r3, r0
 800b464:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b466:	7bfb      	ldrb	r3, [r7, #15]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d102      	bne.n	800b472 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b472:	7bfb      	ldrb	r3, [r7, #15]
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b090      	sub	sp, #64	@ 0x40
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f107 0208 	add.w	r2, r7, #8
 800b48c:	4611      	mov	r1, r2
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fb74 	bl	800ab7c <validate>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800b49a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d103      	bne.n	800b4aa <f_lseek+0x2e>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	7d5b      	ldrb	r3, [r3, #21]
 800b4a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800b4aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <f_lseek+0x3c>
 800b4b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b4b6:	e201      	b.n	800b8bc <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f000 80d9 	beq.w	800b674 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4c8:	d15a      	bne.n	800b580 <f_lseek+0x104>
			tbl = fp->cltbl;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ce:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d2:	1d1a      	adds	r2, r3, #4
 800b4d4:	627a      	str	r2, [r7, #36]	@ 0x24
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	2302      	movs	r3, #2
 800b4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800b4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d03a      	beq.n	800b560 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800b4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ec:	613b      	str	r3, [r7, #16]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f4:	3302      	adds	r3, #2
 800b4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	60fb      	str	r3, [r7, #12]
 800b4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fe:	3301      	adds	r3, #1
 800b500:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b506:	4618      	mov	r0, r3
 800b508:	f7fd fda3 	bl	8009052 <get_fat>
 800b50c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	2b01      	cmp	r3, #1
 800b512:	d804      	bhi.n	800b51e <f_lseek+0xa2>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2202      	movs	r2, #2
 800b518:	755a      	strb	r2, [r3, #21]
 800b51a:	2302      	movs	r3, #2
 800b51c:	e1ce      	b.n	800b8bc <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b520:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b524:	d104      	bne.n	800b530 <f_lseek+0xb4>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	755a      	strb	r2, [r3, #21]
 800b52c:	2301      	movs	r3, #1
 800b52e:	e1c5      	b.n	800b8bc <f_lseek+0x440>
					} while (cl == pcl + 1);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	3301      	adds	r3, #1
 800b534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b536:	429a      	cmp	r2, r3
 800b538:	d0de      	beq.n	800b4f8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800b53a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	429a      	cmp	r2, r3
 800b540:	d809      	bhi.n	800b556 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	1d1a      	adds	r2, r3, #4
 800b546:	627a      	str	r2, [r7, #36]	@ 0x24
 800b548:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b54a:	601a      	str	r2, [r3, #0]
 800b54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54e:	1d1a      	adds	r2, r3, #4
 800b550:	627a      	str	r2, [r7, #36]	@ 0x24
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d3c4      	bcc.n	800b4ea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b564:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b566:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800b568:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d803      	bhi.n	800b578 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	e19f      	b.n	800b8b8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800b578:	2311      	movs	r3, #17
 800b57a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800b57e:	e19b      	b.n	800b8b8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d902      	bls.n	800b590 <f_lseek+0x114>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 818d 	beq.w	800b8b8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7fe f83e 	bl	8009626 <clmt_clust>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800b5b0:	68ba      	ldr	r2, [r7, #8]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	f7fd fd2b 	bl	8009014 <clust2sect>
 800b5be:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800b5c0:	69bb      	ldr	r3, [r7, #24]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d104      	bne.n	800b5d0 <f_lseek+0x154>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	755a      	strb	r2, [r3, #21]
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	e175      	b.n	800b8bc <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	8992      	ldrh	r2, [r2, #12]
 800b5d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5dc:	68ba      	ldr	r2, [r7, #8]
 800b5de:	8952      	ldrh	r2, [r2, #10]
 800b5e0:	3a01      	subs	r2, #1
 800b5e2:	4013      	ands	r3, r2
 800b5e4:	69ba      	ldr	r2, [r7, #24]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	8992      	ldrh	r2, [r2, #12]
 800b5f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b5f6:	fb01 f202 	mul.w	r2, r1, r2
 800b5fa:	1a9b      	subs	r3, r3, r2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 815b 	beq.w	800b8b8 <f_lseek+0x43c>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	429a      	cmp	r2, r3
 800b60a:	f000 8155 	beq.w	800b8b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	7d1b      	ldrb	r3, [r3, #20]
 800b612:	b25b      	sxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	da18      	bge.n	800b64a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	7858      	ldrb	r0, [r3, #1]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a1a      	ldr	r2, [r3, #32]
 800b626:	2301      	movs	r3, #1
 800b628:	f7fd f968 	bl	80088fc <disk_write>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d004      	beq.n	800b63c <f_lseek+0x1c0>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	755a      	strb	r2, [r3, #21]
 800b638:	2301      	movs	r3, #1
 800b63a:	e13f      	b.n	800b8bc <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	7d1b      	ldrb	r3, [r3, #20]
 800b640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	7858      	ldrb	r0, [r3, #1]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b654:	2301      	movs	r3, #1
 800b656:	69ba      	ldr	r2, [r7, #24]
 800b658:	f7fd f930 	bl	80088bc <disk_read>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d004      	beq.n	800b66c <f_lseek+0x1f0>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	755a      	strb	r2, [r3, #21]
 800b668:	2301      	movs	r3, #1
 800b66a:	e127      	b.n	800b8bc <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	621a      	str	r2, [r3, #32]
 800b672:	e121      	b.n	800b8b8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d908      	bls.n	800b690 <f_lseek+0x214>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	7d1b      	ldrb	r3, [r3, #20]
 800b682:	f003 0302 	and.w	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	68db      	ldr	r3, [r3, #12]
 800b68e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b696:	2300      	movs	r3, #0
 800b698:	637b      	str	r3, [r7, #52]	@ 0x34
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b69e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	f000 80b5 	beq.w	800b812 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	895b      	ldrh	r3, [r3, #10]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	899b      	ldrh	r3, [r3, #12]
 800b6b2:	fb02 f303 	mul.w	r3, r2, r3
 800b6b6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b6b8:	6a3b      	ldr	r3, [r7, #32]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d01b      	beq.n	800b6f6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	1e5a      	subs	r2, r3, #1
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b6c8:	6a3b      	ldr	r3, [r7, #32]
 800b6ca:	1e59      	subs	r1, r3, #1
 800b6cc:	69fb      	ldr	r3, [r7, #28]
 800b6ce:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d30f      	bcc.n	800b6f6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	1e5a      	subs	r2, r3, #1
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	425b      	negs	r3, r3
 800b6de:	401a      	ands	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	69db      	ldr	r3, [r3, #28]
 800b6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b6f4:	e022      	b.n	800b73c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d119      	bne.n	800b736 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2100      	movs	r1, #0
 800b706:	4618      	mov	r0, r3
 800b708:	f7fd fef5 	bl	80094f6 <create_chain>
 800b70c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b710:	2b01      	cmp	r3, #1
 800b712:	d104      	bne.n	800b71e <f_lseek+0x2a2>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2202      	movs	r2, #2
 800b718:	755a      	strb	r2, [r3, #21]
 800b71a:	2302      	movs	r3, #2
 800b71c:	e0ce      	b.n	800b8bc <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b724:	d104      	bne.n	800b730 <f_lseek+0x2b4>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	755a      	strb	r2, [r3, #21]
 800b72c:	2301      	movs	r3, #1
 800b72e:	e0c5      	b.n	800b8bc <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b734:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b73a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d067      	beq.n	800b812 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b742:	e03a      	b.n	800b7ba <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	1ad3      	subs	r3, r2, r3
 800b74a:	603b      	str	r3, [r7, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	699a      	ldr	r2, [r3, #24]
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	441a      	add	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	7d1b      	ldrb	r3, [r3, #20]
 800b75c:	f003 0302 	and.w	r3, r3, #2
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00b      	beq.n	800b77c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b768:	4618      	mov	r0, r3
 800b76a:	f7fd fec4 	bl	80094f6 <create_chain>
 800b76e:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b772:	2b00      	cmp	r3, #0
 800b774:	d108      	bne.n	800b788 <f_lseek+0x30c>
							ofs = 0; break;
 800b776:	2300      	movs	r3, #0
 800b778:	603b      	str	r3, [r7, #0]
 800b77a:	e022      	b.n	800b7c2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b780:	4618      	mov	r0, r3
 800b782:	f7fd fc66 	bl	8009052 <get_fat>
 800b786:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b78e:	d104      	bne.n	800b79a <f_lseek+0x31e>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	755a      	strb	r2, [r3, #21]
 800b796:	2301      	movs	r3, #1
 800b798:	e090      	b.n	800b8bc <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d904      	bls.n	800b7aa <f_lseek+0x32e>
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	69db      	ldr	r3, [r3, #28]
 800b7a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d304      	bcc.n	800b7b4 <f_lseek+0x338>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	755a      	strb	r2, [r3, #21]
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	e083      	b.n	800b8bc <f_lseek+0x440>
					fp->clust = clst;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7b8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d8c0      	bhi.n	800b744 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	699a      	ldr	r2, [r3, #24]
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	441a      	add	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	899b      	ldrh	r3, [r3, #12]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7da:	fb01 f202 	mul.w	r2, r1, r2
 800b7de:	1a9b      	subs	r3, r3, r2
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d016      	beq.n	800b812 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fd fc13 	bl	8009014 <clust2sect>
 800b7ee:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b7f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d104      	bne.n	800b800 <f_lseek+0x384>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	755a      	strb	r2, [r3, #21]
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	e05d      	b.n	800b8bc <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	899b      	ldrh	r3, [r3, #12]
 800b804:	461a      	mov	r2, r3
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	fbb3 f3f2 	udiv	r3, r3, r2
 800b80c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b80e:	4413      	add	r3, r2
 800b810:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	699a      	ldr	r2, [r3, #24]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d90a      	bls.n	800b834 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699a      	ldr	r2, [r3, #24]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	7d1b      	ldrb	r3, [r3, #20]
 800b82a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	699b      	ldr	r3, [r3, #24]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	8992      	ldrh	r2, [r2, #12]
 800b83c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b840:	fb01 f202 	mul.w	r2, r1, r2
 800b844:	1a9b      	subs	r3, r3, r2
 800b846:	2b00      	cmp	r3, #0
 800b848:	d036      	beq.n	800b8b8 <f_lseek+0x43c>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b850:	429a      	cmp	r2, r3
 800b852:	d031      	beq.n	800b8b8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	7d1b      	ldrb	r3, [r3, #20]
 800b858:	b25b      	sxtb	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	da18      	bge.n	800b890 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	7858      	ldrb	r0, [r3, #1]
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6a1a      	ldr	r2, [r3, #32]
 800b86c:	2301      	movs	r3, #1
 800b86e:	f7fd f845 	bl	80088fc <disk_write>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d004      	beq.n	800b882 <f_lseek+0x406>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	755a      	strb	r2, [r3, #21]
 800b87e:	2301      	movs	r3, #1
 800b880:	e01c      	b.n	800b8bc <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	7d1b      	ldrb	r3, [r3, #20]
 800b886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b88a:	b2da      	uxtb	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	7858      	ldrb	r0, [r3, #1]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b89a:	2301      	movs	r3, #1
 800b89c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b89e:	f7fd f80d 	bl	80088bc <disk_read>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d004      	beq.n	800b8b2 <f_lseek+0x436>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	755a      	strb	r2, [r3, #21]
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e004      	b.n	800b8bc <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8b6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b8b8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3740      	adds	r7, #64	@ 0x40
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b8da:	4b1f      	ldr	r3, [pc, #124]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b8dc:	7a5b      	ldrb	r3, [r3, #9]
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d131      	bne.n	800b948 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b8e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b8e6:	7a5b      	ldrb	r3, [r3, #9]
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b1a      	ldr	r3, [pc, #104]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b8f2:	4b19      	ldr	r3, [pc, #100]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b8f4:	7a5b      	ldrb	r3, [r3, #9]
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	4a17      	ldr	r2, [pc, #92]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b902:	4b15      	ldr	r3, [pc, #84]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b904:	7a5b      	ldrb	r3, [r3, #9]
 800b906:	b2db      	uxtb	r3, r3
 800b908:	461a      	mov	r2, r3
 800b90a:	4b13      	ldr	r3, [pc, #76]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b90c:	4413      	add	r3, r2
 800b90e:	79fa      	ldrb	r2, [r7, #7]
 800b910:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b912:	4b11      	ldr	r3, [pc, #68]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b914:	7a5b      	ldrb	r3, [r3, #9]
 800b916:	b2db      	uxtb	r3, r3
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	b2d1      	uxtb	r1, r2
 800b91c:	4a0e      	ldr	r2, [pc, #56]	@ (800b958 <FATFS_LinkDriverEx+0x94>)
 800b91e:	7251      	strb	r1, [r2, #9]
 800b920:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b922:	7dbb      	ldrb	r3, [r7, #22]
 800b924:	3330      	adds	r3, #48	@ 0x30
 800b926:	b2da      	uxtb	r2, r3
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	3301      	adds	r3, #1
 800b930:	223a      	movs	r2, #58	@ 0x3a
 800b932:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	3302      	adds	r3, #2
 800b938:	222f      	movs	r2, #47	@ 0x2f
 800b93a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	3303      	adds	r3, #3
 800b940:	2200      	movs	r2, #0
 800b942:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b948:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
 800b956:	bf00      	nop
 800b958:	20002de4 	.word	0x20002de4

0800b95c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b966:	2200      	movs	r2, #0
 800b968:	6839      	ldr	r1, [r7, #0]
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff ffaa 	bl	800b8c4 <FATFS_LinkDriverEx>
 800b970:	4603      	mov	r3, r0
}
 800b972:	4618      	mov	r0, r3
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	4603      	mov	r3, r0
 800b984:	6039      	str	r1, [r7, #0]
 800b986:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800b988:	88fb      	ldrh	r3, [r7, #6]
 800b98a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b98c:	d802      	bhi.n	800b994 <ff_convert+0x18>
		c = chr;
 800b98e:	88fb      	ldrh	r3, [r7, #6]
 800b990:	81fb      	strh	r3, [r7, #14]
 800b992:	e025      	b.n	800b9e0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00b      	beq.n	800b9b2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	2bff      	cmp	r3, #255	@ 0xff
 800b99e:	d805      	bhi.n	800b9ac <ff_convert+0x30>
 800b9a0:	88fb      	ldrh	r3, [r7, #6]
 800b9a2:	3b80      	subs	r3, #128	@ 0x80
 800b9a4:	4a12      	ldr	r2, [pc, #72]	@ (800b9f0 <ff_convert+0x74>)
 800b9a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9aa:	e000      	b.n	800b9ae <ff_convert+0x32>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	81fb      	strh	r3, [r7, #14]
 800b9b0:	e016      	b.n	800b9e0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	81fb      	strh	r3, [r7, #14]
 800b9b6:	e009      	b.n	800b9cc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800b9b8:	89fb      	ldrh	r3, [r7, #14]
 800b9ba:	4a0d      	ldr	r2, [pc, #52]	@ (800b9f0 <ff_convert+0x74>)
 800b9bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9c0:	88fa      	ldrh	r2, [r7, #6]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d006      	beq.n	800b9d4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800b9c6:	89fb      	ldrh	r3, [r7, #14]
 800b9c8:	3301      	adds	r3, #1
 800b9ca:	81fb      	strh	r3, [r7, #14]
 800b9cc:	89fb      	ldrh	r3, [r7, #14]
 800b9ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800b9d0:	d9f2      	bls.n	800b9b8 <ff_convert+0x3c>
 800b9d2:	e000      	b.n	800b9d6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800b9d4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800b9d6:	89fb      	ldrh	r3, [r7, #14]
 800b9d8:	3380      	adds	r3, #128	@ 0x80
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800b9e0:	89fb      	ldrh	r3, [r7, #14]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	0800dbb8 	.word	0x0800dbb8

0800b9f4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba04:	d201      	bcs.n	800ba0a <ff_wtoupper+0x16>
 800ba06:	4b3e      	ldr	r3, [pc, #248]	@ (800bb00 <ff_wtoupper+0x10c>)
 800ba08:	e000      	b.n	800ba0c <ff_wtoupper+0x18>
 800ba0a:	4b3e      	ldr	r3, [pc, #248]	@ (800bb04 <ff_wtoupper+0x110>)
 800ba0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	1c9a      	adds	r2, r3, #2
 800ba12:	617a      	str	r2, [r7, #20]
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ba18:	8a7b      	ldrh	r3, [r7, #18]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d068      	beq.n	800baf0 <ff_wtoupper+0xfc>
 800ba1e:	88fa      	ldrh	r2, [r7, #6]
 800ba20:	8a7b      	ldrh	r3, [r7, #18]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d364      	bcc.n	800baf0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	1c9a      	adds	r2, r3, #2
 800ba2a:	617a      	str	r2, [r7, #20]
 800ba2c:	881b      	ldrh	r3, [r3, #0]
 800ba2e:	823b      	strh	r3, [r7, #16]
 800ba30:	8a3b      	ldrh	r3, [r7, #16]
 800ba32:	0a1b      	lsrs	r3, r3, #8
 800ba34:	81fb      	strh	r3, [r7, #14]
 800ba36:	8a3b      	ldrh	r3, [r7, #16]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ba3c:	88fa      	ldrh	r2, [r7, #6]
 800ba3e:	8a79      	ldrh	r1, [r7, #18]
 800ba40:	8a3b      	ldrh	r3, [r7, #16]
 800ba42:	440b      	add	r3, r1
 800ba44:	429a      	cmp	r2, r3
 800ba46:	da49      	bge.n	800badc <ff_wtoupper+0xe8>
			switch (cmd) {
 800ba48:	89fb      	ldrh	r3, [r7, #14]
 800ba4a:	2b08      	cmp	r3, #8
 800ba4c:	d84f      	bhi.n	800baee <ff_wtoupper+0xfa>
 800ba4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba54 <ff_wtoupper+0x60>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800ba79 	.word	0x0800ba79
 800ba58:	0800ba8b 	.word	0x0800ba8b
 800ba5c:	0800baa1 	.word	0x0800baa1
 800ba60:	0800baa9 	.word	0x0800baa9
 800ba64:	0800bab1 	.word	0x0800bab1
 800ba68:	0800bab9 	.word	0x0800bab9
 800ba6c:	0800bac1 	.word	0x0800bac1
 800ba70:	0800bac9 	.word	0x0800bac9
 800ba74:	0800bad1 	.word	0x0800bad1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ba78:	88fa      	ldrh	r2, [r7, #6]
 800ba7a:	8a7b      	ldrh	r3, [r7, #18]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	005b      	lsls	r3, r3, #1
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	4413      	add	r3, r2
 800ba84:	881b      	ldrh	r3, [r3, #0]
 800ba86:	80fb      	strh	r3, [r7, #6]
 800ba88:	e027      	b.n	800bada <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ba8a:	88fa      	ldrh	r2, [r7, #6]
 800ba8c:	8a7b      	ldrh	r3, [r7, #18]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	88fa      	ldrh	r2, [r7, #6]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	80fb      	strh	r3, [r7, #6]
 800ba9e:	e01c      	b.n	800bada <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800baa0:	88fb      	ldrh	r3, [r7, #6]
 800baa2:	3b10      	subs	r3, #16
 800baa4:	80fb      	strh	r3, [r7, #6]
 800baa6:	e018      	b.n	800bada <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800baa8:	88fb      	ldrh	r3, [r7, #6]
 800baaa:	3b20      	subs	r3, #32
 800baac:	80fb      	strh	r3, [r7, #6]
 800baae:	e014      	b.n	800bada <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800bab0:	88fb      	ldrh	r3, [r7, #6]
 800bab2:	3b30      	subs	r3, #48	@ 0x30
 800bab4:	80fb      	strh	r3, [r7, #6]
 800bab6:	e010      	b.n	800bada <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800bab8:	88fb      	ldrh	r3, [r7, #6]
 800baba:	3b1a      	subs	r3, #26
 800babc:	80fb      	strh	r3, [r7, #6]
 800babe:	e00c      	b.n	800bada <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800bac0:	88fb      	ldrh	r3, [r7, #6]
 800bac2:	3308      	adds	r3, #8
 800bac4:	80fb      	strh	r3, [r7, #6]
 800bac6:	e008      	b.n	800bada <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800bac8:	88fb      	ldrh	r3, [r7, #6]
 800baca:	3b50      	subs	r3, #80	@ 0x50
 800bacc:	80fb      	strh	r3, [r7, #6]
 800bace:	e004      	b.n	800bada <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800bad0:	88fb      	ldrh	r3, [r7, #6]
 800bad2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800bad6:	80fb      	strh	r3, [r7, #6]
 800bad8:	bf00      	nop
			}
			break;
 800bada:	e008      	b.n	800baee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800badc:	89fb      	ldrh	r3, [r7, #14]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d195      	bne.n	800ba0e <ff_wtoupper+0x1a>
 800bae2:	8a3b      	ldrh	r3, [r7, #16]
 800bae4:	005b      	lsls	r3, r3, #1
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800baec:	e78f      	b.n	800ba0e <ff_wtoupper+0x1a>
			break;
 800baee:	bf00      	nop
	}

	return chr;
 800baf0:	88fb      	ldrh	r3, [r7, #6]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	371c      	adds	r7, #28
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	0800dcb8 	.word	0x0800dcb8
 800bb04:	0800deac 	.word	0x0800deac

0800bb08 <setbuf>:
 800bb08:	fab1 f281 	clz	r2, r1
 800bb0c:	0952      	lsrs	r2, r2, #5
 800bb0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb12:	0052      	lsls	r2, r2, #1
 800bb14:	f000 b800 	b.w	800bb18 <setvbuf>

0800bb18 <setvbuf>:
 800bb18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb1c:	461d      	mov	r5, r3
 800bb1e:	4b57      	ldr	r3, [pc, #348]	@ (800bc7c <setvbuf+0x164>)
 800bb20:	681f      	ldr	r7, [r3, #0]
 800bb22:	4604      	mov	r4, r0
 800bb24:	460e      	mov	r6, r1
 800bb26:	4690      	mov	r8, r2
 800bb28:	b127      	cbz	r7, 800bb34 <setvbuf+0x1c>
 800bb2a:	6a3b      	ldr	r3, [r7, #32]
 800bb2c:	b913      	cbnz	r3, 800bb34 <setvbuf+0x1c>
 800bb2e:	4638      	mov	r0, r7
 800bb30:	f000 f9d6 	bl	800bee0 <__sinit>
 800bb34:	f1b8 0f02 	cmp.w	r8, #2
 800bb38:	d006      	beq.n	800bb48 <setvbuf+0x30>
 800bb3a:	f1b8 0f01 	cmp.w	r8, #1
 800bb3e:	f200 809a 	bhi.w	800bc76 <setvbuf+0x15e>
 800bb42:	2d00      	cmp	r5, #0
 800bb44:	f2c0 8097 	blt.w	800bc76 <setvbuf+0x15e>
 800bb48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb4a:	07d9      	lsls	r1, r3, #31
 800bb4c:	d405      	bmi.n	800bb5a <setvbuf+0x42>
 800bb4e:	89a3      	ldrh	r3, [r4, #12]
 800bb50:	059a      	lsls	r2, r3, #22
 800bb52:	d402      	bmi.n	800bb5a <setvbuf+0x42>
 800bb54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb56:	f000 fb66 	bl	800c226 <__retarget_lock_acquire_recursive>
 800bb5a:	4621      	mov	r1, r4
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	f001 fc59 	bl	800d414 <_fflush_r>
 800bb62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb64:	b141      	cbz	r1, 800bb78 <setvbuf+0x60>
 800bb66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb6a:	4299      	cmp	r1, r3
 800bb6c:	d002      	beq.n	800bb74 <setvbuf+0x5c>
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f000 fb5c 	bl	800c22c <_free_r>
 800bb74:	2300      	movs	r3, #0
 800bb76:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb78:	2300      	movs	r3, #0
 800bb7a:	61a3      	str	r3, [r4, #24]
 800bb7c:	6063      	str	r3, [r4, #4]
 800bb7e:	89a3      	ldrh	r3, [r4, #12]
 800bb80:	061b      	lsls	r3, r3, #24
 800bb82:	d503      	bpl.n	800bb8c <setvbuf+0x74>
 800bb84:	6921      	ldr	r1, [r4, #16]
 800bb86:	4638      	mov	r0, r7
 800bb88:	f000 fb50 	bl	800c22c <_free_r>
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800bb92:	f023 0303 	bic.w	r3, r3, #3
 800bb96:	f1b8 0f02 	cmp.w	r8, #2
 800bb9a:	81a3      	strh	r3, [r4, #12]
 800bb9c:	d061      	beq.n	800bc62 <setvbuf+0x14a>
 800bb9e:	ab01      	add	r3, sp, #4
 800bba0:	466a      	mov	r2, sp
 800bba2:	4621      	mov	r1, r4
 800bba4:	4638      	mov	r0, r7
 800bba6:	f000 f9d1 	bl	800bf4c <__swhatbuf_r>
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	4318      	orrs	r0, r3
 800bbae:	81a0      	strh	r0, [r4, #12]
 800bbb0:	bb2d      	cbnz	r5, 800bbfe <setvbuf+0xe6>
 800bbb2:	9d00      	ldr	r5, [sp, #0]
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	f000 ffe9 	bl	800cb8c <malloc>
 800bbba:	4606      	mov	r6, r0
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d152      	bne.n	800bc66 <setvbuf+0x14e>
 800bbc0:	f8dd 9000 	ldr.w	r9, [sp]
 800bbc4:	45a9      	cmp	r9, r5
 800bbc6:	d140      	bne.n	800bc4a <setvbuf+0x132>
 800bbc8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bbcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbd0:	f043 0202 	orr.w	r2, r3, #2
 800bbd4:	81a2      	strh	r2, [r4, #12]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	60a2      	str	r2, [r4, #8]
 800bbda:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800bbde:	6022      	str	r2, [r4, #0]
 800bbe0:	6122      	str	r2, [r4, #16]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	6162      	str	r2, [r4, #20]
 800bbe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbe8:	07d6      	lsls	r6, r2, #31
 800bbea:	d404      	bmi.n	800bbf6 <setvbuf+0xde>
 800bbec:	0598      	lsls	r0, r3, #22
 800bbee:	d402      	bmi.n	800bbf6 <setvbuf+0xde>
 800bbf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbf2:	f000 fb19 	bl	800c228 <__retarget_lock_release_recursive>
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	b003      	add	sp, #12
 800bbfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbfe:	2e00      	cmp	r6, #0
 800bc00:	d0d8      	beq.n	800bbb4 <setvbuf+0x9c>
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	b913      	cbnz	r3, 800bc0c <setvbuf+0xf4>
 800bc06:	4638      	mov	r0, r7
 800bc08:	f000 f96a 	bl	800bee0 <__sinit>
 800bc0c:	f1b8 0f01 	cmp.w	r8, #1
 800bc10:	bf08      	it	eq
 800bc12:	89a3      	ldrheq	r3, [r4, #12]
 800bc14:	6026      	str	r6, [r4, #0]
 800bc16:	bf04      	itt	eq
 800bc18:	f043 0301 	orreq.w	r3, r3, #1
 800bc1c:	81a3      	strheq	r3, [r4, #12]
 800bc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc22:	f013 0208 	ands.w	r2, r3, #8
 800bc26:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800bc2a:	d01e      	beq.n	800bc6a <setvbuf+0x152>
 800bc2c:	07d9      	lsls	r1, r3, #31
 800bc2e:	bf41      	itttt	mi
 800bc30:	2200      	movmi	r2, #0
 800bc32:	426d      	negmi	r5, r5
 800bc34:	60a2      	strmi	r2, [r4, #8]
 800bc36:	61a5      	strmi	r5, [r4, #24]
 800bc38:	bf58      	it	pl
 800bc3a:	60a5      	strpl	r5, [r4, #8]
 800bc3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc3e:	07d2      	lsls	r2, r2, #31
 800bc40:	d401      	bmi.n	800bc46 <setvbuf+0x12e>
 800bc42:	059b      	lsls	r3, r3, #22
 800bc44:	d513      	bpl.n	800bc6e <setvbuf+0x156>
 800bc46:	2500      	movs	r5, #0
 800bc48:	e7d5      	b.n	800bbf6 <setvbuf+0xde>
 800bc4a:	4648      	mov	r0, r9
 800bc4c:	f000 ff9e 	bl	800cb8c <malloc>
 800bc50:	4606      	mov	r6, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d0b8      	beq.n	800bbc8 <setvbuf+0xb0>
 800bc56:	89a3      	ldrh	r3, [r4, #12]
 800bc58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc5c:	81a3      	strh	r3, [r4, #12]
 800bc5e:	464d      	mov	r5, r9
 800bc60:	e7cf      	b.n	800bc02 <setvbuf+0xea>
 800bc62:	2500      	movs	r5, #0
 800bc64:	e7b2      	b.n	800bbcc <setvbuf+0xb4>
 800bc66:	46a9      	mov	r9, r5
 800bc68:	e7f5      	b.n	800bc56 <setvbuf+0x13e>
 800bc6a:	60a2      	str	r2, [r4, #8]
 800bc6c:	e7e6      	b.n	800bc3c <setvbuf+0x124>
 800bc6e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc70:	f000 fada 	bl	800c228 <__retarget_lock_release_recursive>
 800bc74:	e7e7      	b.n	800bc46 <setvbuf+0x12e>
 800bc76:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bc7a:	e7bc      	b.n	800bbf6 <setvbuf+0xde>
 800bc7c:	20000044 	.word	0x20000044

0800bc80 <sniprintf>:
 800bc80:	b40c      	push	{r2, r3}
 800bc82:	b530      	push	{r4, r5, lr}
 800bc84:	4b17      	ldr	r3, [pc, #92]	@ (800bce4 <sniprintf+0x64>)
 800bc86:	1e0c      	subs	r4, r1, #0
 800bc88:	681d      	ldr	r5, [r3, #0]
 800bc8a:	b09d      	sub	sp, #116	@ 0x74
 800bc8c:	da08      	bge.n	800bca0 <sniprintf+0x20>
 800bc8e:	238b      	movs	r3, #139	@ 0x8b
 800bc90:	602b      	str	r3, [r5, #0]
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc96:	b01d      	add	sp, #116	@ 0x74
 800bc98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc9c:	b002      	add	sp, #8
 800bc9e:	4770      	bx	lr
 800bca0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bca4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bca8:	bf14      	ite	ne
 800bcaa:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800bcae:	4623      	moveq	r3, r4
 800bcb0:	9304      	str	r3, [sp, #16]
 800bcb2:	9307      	str	r3, [sp, #28]
 800bcb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bcb8:	9002      	str	r0, [sp, #8]
 800bcba:	9006      	str	r0, [sp, #24]
 800bcbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bcc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bcc2:	ab21      	add	r3, sp, #132	@ 0x84
 800bcc4:	a902      	add	r1, sp, #8
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	9301      	str	r3, [sp, #4]
 800bcca:	f000 fb55 	bl	800c378 <_svfiprintf_r>
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	bfbc      	itt	lt
 800bcd2:	238b      	movlt	r3, #139	@ 0x8b
 800bcd4:	602b      	strlt	r3, [r5, #0]
 800bcd6:	2c00      	cmp	r4, #0
 800bcd8:	d0dd      	beq.n	800bc96 <sniprintf+0x16>
 800bcda:	9b02      	ldr	r3, [sp, #8]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	701a      	strb	r2, [r3, #0]
 800bce0:	e7d9      	b.n	800bc96 <sniprintf+0x16>
 800bce2:	bf00      	nop
 800bce4:	20000044 	.word	0x20000044

0800bce8 <siscanf>:
 800bce8:	b40e      	push	{r1, r2, r3}
 800bcea:	b530      	push	{r4, r5, lr}
 800bcec:	b09c      	sub	sp, #112	@ 0x70
 800bcee:	ac1f      	add	r4, sp, #124	@ 0x7c
 800bcf0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800bcf4:	f854 5b04 	ldr.w	r5, [r4], #4
 800bcf8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800bcfc:	9002      	str	r0, [sp, #8]
 800bcfe:	9006      	str	r0, [sp, #24]
 800bd00:	f7f4 fa66 	bl	80001d0 <strlen>
 800bd04:	4b0b      	ldr	r3, [pc, #44]	@ (800bd34 <siscanf+0x4c>)
 800bd06:	9003      	str	r0, [sp, #12]
 800bd08:	9007      	str	r0, [sp, #28]
 800bd0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd0c:	480a      	ldr	r0, [pc, #40]	@ (800bd38 <siscanf+0x50>)
 800bd0e:	9401      	str	r4, [sp, #4]
 800bd10:	2300      	movs	r3, #0
 800bd12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd14:	9314      	str	r3, [sp, #80]	@ 0x50
 800bd16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bd1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4623      	mov	r3, r4
 800bd22:	a902      	add	r1, sp, #8
 800bd24:	6800      	ldr	r0, [r0, #0]
 800bd26:	f000 fc7b 	bl	800c620 <__ssvfiscanf_r>
 800bd2a:	b01c      	add	sp, #112	@ 0x70
 800bd2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd30:	b003      	add	sp, #12
 800bd32:	4770      	bx	lr
 800bd34:	0800bd5f 	.word	0x0800bd5f
 800bd38:	20000044 	.word	0x20000044

0800bd3c <__sread>:
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	460c      	mov	r4, r1
 800bd40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd44:	f000 fa20 	bl	800c188 <_read_r>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	bfab      	itete	ge
 800bd4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bd4e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd50:	181b      	addge	r3, r3, r0
 800bd52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bd56:	bfac      	ite	ge
 800bd58:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bd5a:	81a3      	strhlt	r3, [r4, #12]
 800bd5c:	bd10      	pop	{r4, pc}

0800bd5e <__seofread>:
 800bd5e:	2000      	movs	r0, #0
 800bd60:	4770      	bx	lr

0800bd62 <__swrite>:
 800bd62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd66:	461f      	mov	r7, r3
 800bd68:	898b      	ldrh	r3, [r1, #12]
 800bd6a:	05db      	lsls	r3, r3, #23
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	460c      	mov	r4, r1
 800bd70:	4616      	mov	r6, r2
 800bd72:	d505      	bpl.n	800bd80 <__swrite+0x1e>
 800bd74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd78:	2302      	movs	r3, #2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f000 f9f2 	bl	800c164 <_lseek_r>
 800bd80:	89a3      	ldrh	r3, [r4, #12]
 800bd82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd8a:	81a3      	strh	r3, [r4, #12]
 800bd8c:	4632      	mov	r2, r6
 800bd8e:	463b      	mov	r3, r7
 800bd90:	4628      	mov	r0, r5
 800bd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd96:	f000 ba09 	b.w	800c1ac <_write_r>

0800bd9a <__sseek>:
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bda2:	f000 f9df 	bl	800c164 <_lseek_r>
 800bda6:	1c43      	adds	r3, r0, #1
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	bf15      	itete	ne
 800bdac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bdae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bdb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bdb6:	81a3      	strheq	r3, [r4, #12]
 800bdb8:	bf18      	it	ne
 800bdba:	81a3      	strhne	r3, [r4, #12]
 800bdbc:	bd10      	pop	{r4, pc}

0800bdbe <__sclose>:
 800bdbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc2:	f000 b99d 	b.w	800c100 <_close_r>
	...

0800bdc8 <std>:
 800bdc8:	2300      	movs	r3, #0
 800bdca:	b510      	push	{r4, lr}
 800bdcc:	4604      	mov	r4, r0
 800bdce:	e9c0 3300 	strd	r3, r3, [r0]
 800bdd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bdd6:	6083      	str	r3, [r0, #8]
 800bdd8:	8181      	strh	r1, [r0, #12]
 800bdda:	6643      	str	r3, [r0, #100]	@ 0x64
 800bddc:	81c2      	strh	r2, [r0, #14]
 800bdde:	6183      	str	r3, [r0, #24]
 800bde0:	4619      	mov	r1, r3
 800bde2:	2208      	movs	r2, #8
 800bde4:	305c      	adds	r0, #92	@ 0x5c
 800bde6:	f000 f983 	bl	800c0f0 <memset>
 800bdea:	4b0d      	ldr	r3, [pc, #52]	@ (800be20 <std+0x58>)
 800bdec:	6263      	str	r3, [r4, #36]	@ 0x24
 800bdee:	4b0d      	ldr	r3, [pc, #52]	@ (800be24 <std+0x5c>)
 800bdf0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bdf2:	4b0d      	ldr	r3, [pc, #52]	@ (800be28 <std+0x60>)
 800bdf4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <std+0x64>)
 800bdf8:	6323      	str	r3, [r4, #48]	@ 0x30
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	@ (800be30 <std+0x68>)
 800bdfc:	6224      	str	r4, [r4, #32]
 800bdfe:	429c      	cmp	r4, r3
 800be00:	d006      	beq.n	800be10 <std+0x48>
 800be02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800be06:	4294      	cmp	r4, r2
 800be08:	d002      	beq.n	800be10 <std+0x48>
 800be0a:	33d0      	adds	r3, #208	@ 0xd0
 800be0c:	429c      	cmp	r4, r3
 800be0e:	d105      	bne.n	800be1c <std+0x54>
 800be10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800be14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be18:	f000 ba04 	b.w	800c224 <__retarget_lock_init_recursive>
 800be1c:	bd10      	pop	{r4, pc}
 800be1e:	bf00      	nop
 800be20:	0800bd3d 	.word	0x0800bd3d
 800be24:	0800bd63 	.word	0x0800bd63
 800be28:	0800bd9b 	.word	0x0800bd9b
 800be2c:	0800bdbf 	.word	0x0800bdbf
 800be30:	20002df0 	.word	0x20002df0

0800be34 <stdio_exit_handler>:
 800be34:	4a02      	ldr	r2, [pc, #8]	@ (800be40 <stdio_exit_handler+0xc>)
 800be36:	4903      	ldr	r1, [pc, #12]	@ (800be44 <stdio_exit_handler+0x10>)
 800be38:	4803      	ldr	r0, [pc, #12]	@ (800be48 <stdio_exit_handler+0x14>)
 800be3a:	f000 b869 	b.w	800bf10 <_fwalk_sglue>
 800be3e:	bf00      	nop
 800be40:	20000038 	.word	0x20000038
 800be44:	0800d415 	.word	0x0800d415
 800be48:	20000048 	.word	0x20000048

0800be4c <cleanup_stdio>:
 800be4c:	6841      	ldr	r1, [r0, #4]
 800be4e:	4b0c      	ldr	r3, [pc, #48]	@ (800be80 <cleanup_stdio+0x34>)
 800be50:	4299      	cmp	r1, r3
 800be52:	b510      	push	{r4, lr}
 800be54:	4604      	mov	r4, r0
 800be56:	d001      	beq.n	800be5c <cleanup_stdio+0x10>
 800be58:	f001 fadc 	bl	800d414 <_fflush_r>
 800be5c:	68a1      	ldr	r1, [r4, #8]
 800be5e:	4b09      	ldr	r3, [pc, #36]	@ (800be84 <cleanup_stdio+0x38>)
 800be60:	4299      	cmp	r1, r3
 800be62:	d002      	beq.n	800be6a <cleanup_stdio+0x1e>
 800be64:	4620      	mov	r0, r4
 800be66:	f001 fad5 	bl	800d414 <_fflush_r>
 800be6a:	68e1      	ldr	r1, [r4, #12]
 800be6c:	4b06      	ldr	r3, [pc, #24]	@ (800be88 <cleanup_stdio+0x3c>)
 800be6e:	4299      	cmp	r1, r3
 800be70:	d004      	beq.n	800be7c <cleanup_stdio+0x30>
 800be72:	4620      	mov	r0, r4
 800be74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be78:	f001 bacc 	b.w	800d414 <_fflush_r>
 800be7c:	bd10      	pop	{r4, pc}
 800be7e:	bf00      	nop
 800be80:	20002df0 	.word	0x20002df0
 800be84:	20002e58 	.word	0x20002e58
 800be88:	20002ec0 	.word	0x20002ec0

0800be8c <global_stdio_init.part.0>:
 800be8c:	b510      	push	{r4, lr}
 800be8e:	4b0b      	ldr	r3, [pc, #44]	@ (800bebc <global_stdio_init.part.0+0x30>)
 800be90:	4c0b      	ldr	r4, [pc, #44]	@ (800bec0 <global_stdio_init.part.0+0x34>)
 800be92:	4a0c      	ldr	r2, [pc, #48]	@ (800bec4 <global_stdio_init.part.0+0x38>)
 800be94:	601a      	str	r2, [r3, #0]
 800be96:	4620      	mov	r0, r4
 800be98:	2200      	movs	r2, #0
 800be9a:	2104      	movs	r1, #4
 800be9c:	f7ff ff94 	bl	800bdc8 <std>
 800bea0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bea4:	2201      	movs	r2, #1
 800bea6:	2109      	movs	r1, #9
 800bea8:	f7ff ff8e 	bl	800bdc8 <std>
 800beac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800beb0:	2202      	movs	r2, #2
 800beb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800beb6:	2112      	movs	r1, #18
 800beb8:	f7ff bf86 	b.w	800bdc8 <std>
 800bebc:	20002f28 	.word	0x20002f28
 800bec0:	20002df0 	.word	0x20002df0
 800bec4:	0800be35 	.word	0x0800be35

0800bec8 <__sfp_lock_acquire>:
 800bec8:	4801      	ldr	r0, [pc, #4]	@ (800bed0 <__sfp_lock_acquire+0x8>)
 800beca:	f000 b9ac 	b.w	800c226 <__retarget_lock_acquire_recursive>
 800bece:	bf00      	nop
 800bed0:	20002f31 	.word	0x20002f31

0800bed4 <__sfp_lock_release>:
 800bed4:	4801      	ldr	r0, [pc, #4]	@ (800bedc <__sfp_lock_release+0x8>)
 800bed6:	f000 b9a7 	b.w	800c228 <__retarget_lock_release_recursive>
 800beda:	bf00      	nop
 800bedc:	20002f31 	.word	0x20002f31

0800bee0 <__sinit>:
 800bee0:	b510      	push	{r4, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	f7ff fff0 	bl	800bec8 <__sfp_lock_acquire>
 800bee8:	6a23      	ldr	r3, [r4, #32]
 800beea:	b11b      	cbz	r3, 800bef4 <__sinit+0x14>
 800beec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bef0:	f7ff bff0 	b.w	800bed4 <__sfp_lock_release>
 800bef4:	4b04      	ldr	r3, [pc, #16]	@ (800bf08 <__sinit+0x28>)
 800bef6:	6223      	str	r3, [r4, #32]
 800bef8:	4b04      	ldr	r3, [pc, #16]	@ (800bf0c <__sinit+0x2c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1f5      	bne.n	800beec <__sinit+0xc>
 800bf00:	f7ff ffc4 	bl	800be8c <global_stdio_init.part.0>
 800bf04:	e7f2      	b.n	800beec <__sinit+0xc>
 800bf06:	bf00      	nop
 800bf08:	0800be4d 	.word	0x0800be4d
 800bf0c:	20002f28 	.word	0x20002f28

0800bf10 <_fwalk_sglue>:
 800bf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf14:	4607      	mov	r7, r0
 800bf16:	4688      	mov	r8, r1
 800bf18:	4614      	mov	r4, r2
 800bf1a:	2600      	movs	r6, #0
 800bf1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf20:	f1b9 0901 	subs.w	r9, r9, #1
 800bf24:	d505      	bpl.n	800bf32 <_fwalk_sglue+0x22>
 800bf26:	6824      	ldr	r4, [r4, #0]
 800bf28:	2c00      	cmp	r4, #0
 800bf2a:	d1f7      	bne.n	800bf1c <_fwalk_sglue+0xc>
 800bf2c:	4630      	mov	r0, r6
 800bf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf32:	89ab      	ldrh	r3, [r5, #12]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d907      	bls.n	800bf48 <_fwalk_sglue+0x38>
 800bf38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	d003      	beq.n	800bf48 <_fwalk_sglue+0x38>
 800bf40:	4629      	mov	r1, r5
 800bf42:	4638      	mov	r0, r7
 800bf44:	47c0      	blx	r8
 800bf46:	4306      	orrs	r6, r0
 800bf48:	3568      	adds	r5, #104	@ 0x68
 800bf4a:	e7e9      	b.n	800bf20 <_fwalk_sglue+0x10>

0800bf4c <__swhatbuf_r>:
 800bf4c:	b570      	push	{r4, r5, r6, lr}
 800bf4e:	460c      	mov	r4, r1
 800bf50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf54:	2900      	cmp	r1, #0
 800bf56:	b096      	sub	sp, #88	@ 0x58
 800bf58:	4615      	mov	r5, r2
 800bf5a:	461e      	mov	r6, r3
 800bf5c:	da0d      	bge.n	800bf7a <__swhatbuf_r+0x2e>
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bf64:	f04f 0100 	mov.w	r1, #0
 800bf68:	bf14      	ite	ne
 800bf6a:	2340      	movne	r3, #64	@ 0x40
 800bf6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bf70:	2000      	movs	r0, #0
 800bf72:	6031      	str	r1, [r6, #0]
 800bf74:	602b      	str	r3, [r5, #0]
 800bf76:	b016      	add	sp, #88	@ 0x58
 800bf78:	bd70      	pop	{r4, r5, r6, pc}
 800bf7a:	466a      	mov	r2, sp
 800bf7c:	f000 f8d0 	bl	800c120 <_fstat_r>
 800bf80:	2800      	cmp	r0, #0
 800bf82:	dbec      	blt.n	800bf5e <__swhatbuf_r+0x12>
 800bf84:	9901      	ldr	r1, [sp, #4]
 800bf86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bf8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bf8e:	4259      	negs	r1, r3
 800bf90:	4159      	adcs	r1, r3
 800bf92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf96:	e7eb      	b.n	800bf70 <__swhatbuf_r+0x24>

0800bf98 <__smakebuf_r>:
 800bf98:	898b      	ldrh	r3, [r1, #12]
 800bf9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf9c:	079d      	lsls	r5, r3, #30
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	d507      	bpl.n	800bfb4 <__smakebuf_r+0x1c>
 800bfa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	2301      	movs	r3, #1
 800bfae:	6163      	str	r3, [r4, #20]
 800bfb0:	b003      	add	sp, #12
 800bfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb4:	ab01      	add	r3, sp, #4
 800bfb6:	466a      	mov	r2, sp
 800bfb8:	f7ff ffc8 	bl	800bf4c <__swhatbuf_r>
 800bfbc:	9f00      	ldr	r7, [sp, #0]
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	4639      	mov	r1, r7
 800bfc2:	4630      	mov	r0, r6
 800bfc4:	f000 fe0c 	bl	800cbe0 <_malloc_r>
 800bfc8:	b948      	cbnz	r0, 800bfde <__smakebuf_r+0x46>
 800bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfce:	059a      	lsls	r2, r3, #22
 800bfd0:	d4ee      	bmi.n	800bfb0 <__smakebuf_r+0x18>
 800bfd2:	f023 0303 	bic.w	r3, r3, #3
 800bfd6:	f043 0302 	orr.w	r3, r3, #2
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	e7e2      	b.n	800bfa4 <__smakebuf_r+0xc>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	6020      	str	r0, [r4, #0]
 800bfe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe6:	81a3      	strh	r3, [r4, #12]
 800bfe8:	9b01      	ldr	r3, [sp, #4]
 800bfea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bfee:	b15b      	cbz	r3, 800c008 <__smakebuf_r+0x70>
 800bff0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bff4:	4630      	mov	r0, r6
 800bff6:	f000 f8a5 	bl	800c144 <_isatty_r>
 800bffa:	b128      	cbz	r0, 800c008 <__smakebuf_r+0x70>
 800bffc:	89a3      	ldrh	r3, [r4, #12]
 800bffe:	f023 0303 	bic.w	r3, r3, #3
 800c002:	f043 0301 	orr.w	r3, r3, #1
 800c006:	81a3      	strh	r3, [r4, #12]
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	431d      	orrs	r5, r3
 800c00c:	81a5      	strh	r5, [r4, #12]
 800c00e:	e7cf      	b.n	800bfb0 <__smakebuf_r+0x18>

0800c010 <iprintf>:
 800c010:	b40f      	push	{r0, r1, r2, r3}
 800c012:	b507      	push	{r0, r1, r2, lr}
 800c014:	4906      	ldr	r1, [pc, #24]	@ (800c030 <iprintf+0x20>)
 800c016:	ab04      	add	r3, sp, #16
 800c018:	6808      	ldr	r0, [r1, #0]
 800c01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01e:	6881      	ldr	r1, [r0, #8]
 800c020:	9301      	str	r3, [sp, #4]
 800c022:	f000 fc9b 	bl	800c95c <_vfiprintf_r>
 800c026:	b003      	add	sp, #12
 800c028:	f85d eb04 	ldr.w	lr, [sp], #4
 800c02c:	b004      	add	sp, #16
 800c02e:	4770      	bx	lr
 800c030:	20000044 	.word	0x20000044

0800c034 <_puts_r>:
 800c034:	6a03      	ldr	r3, [r0, #32]
 800c036:	b570      	push	{r4, r5, r6, lr}
 800c038:	6884      	ldr	r4, [r0, #8]
 800c03a:	4605      	mov	r5, r0
 800c03c:	460e      	mov	r6, r1
 800c03e:	b90b      	cbnz	r3, 800c044 <_puts_r+0x10>
 800c040:	f7ff ff4e 	bl	800bee0 <__sinit>
 800c044:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c046:	07db      	lsls	r3, r3, #31
 800c048:	d405      	bmi.n	800c056 <_puts_r+0x22>
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	0598      	lsls	r0, r3, #22
 800c04e:	d402      	bmi.n	800c056 <_puts_r+0x22>
 800c050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c052:	f000 f8e8 	bl	800c226 <__retarget_lock_acquire_recursive>
 800c056:	89a3      	ldrh	r3, [r4, #12]
 800c058:	0719      	lsls	r1, r3, #28
 800c05a:	d502      	bpl.n	800c062 <_puts_r+0x2e>
 800c05c:	6923      	ldr	r3, [r4, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d135      	bne.n	800c0ce <_puts_r+0x9a>
 800c062:	4621      	mov	r1, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f001 fb9b 	bl	800d7a0 <__swsetup_r>
 800c06a:	b380      	cbz	r0, 800c0ce <_puts_r+0x9a>
 800c06c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c072:	07da      	lsls	r2, r3, #31
 800c074:	d405      	bmi.n	800c082 <_puts_r+0x4e>
 800c076:	89a3      	ldrh	r3, [r4, #12]
 800c078:	059b      	lsls	r3, r3, #22
 800c07a:	d402      	bmi.n	800c082 <_puts_r+0x4e>
 800c07c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c07e:	f000 f8d3 	bl	800c228 <__retarget_lock_release_recursive>
 800c082:	4628      	mov	r0, r5
 800c084:	bd70      	pop	{r4, r5, r6, pc}
 800c086:	2b00      	cmp	r3, #0
 800c088:	da04      	bge.n	800c094 <_puts_r+0x60>
 800c08a:	69a2      	ldr	r2, [r4, #24]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	dc17      	bgt.n	800c0c0 <_puts_r+0x8c>
 800c090:	290a      	cmp	r1, #10
 800c092:	d015      	beq.n	800c0c0 <_puts_r+0x8c>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	1c5a      	adds	r2, r3, #1
 800c098:	6022      	str	r2, [r4, #0]
 800c09a:	7019      	strb	r1, [r3, #0]
 800c09c:	68a3      	ldr	r3, [r4, #8]
 800c09e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	60a3      	str	r3, [r4, #8]
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	d1ed      	bne.n	800c086 <_puts_r+0x52>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	da11      	bge.n	800c0d2 <_puts_r+0x9e>
 800c0ae:	4622      	mov	r2, r4
 800c0b0:	210a      	movs	r1, #10
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f001 fb36 	bl	800d724 <__swbuf_r>
 800c0b8:	3001      	adds	r0, #1
 800c0ba:	d0d7      	beq.n	800c06c <_puts_r+0x38>
 800c0bc:	250a      	movs	r5, #10
 800c0be:	e7d7      	b.n	800c070 <_puts_r+0x3c>
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f001 fb2e 	bl	800d724 <__swbuf_r>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d1e7      	bne.n	800c09c <_puts_r+0x68>
 800c0cc:	e7ce      	b.n	800c06c <_puts_r+0x38>
 800c0ce:	3e01      	subs	r6, #1
 800c0d0:	e7e4      	b.n	800c09c <_puts_r+0x68>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	1c5a      	adds	r2, r3, #1
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	220a      	movs	r2, #10
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e7ee      	b.n	800c0bc <_puts_r+0x88>
	...

0800c0e0 <puts>:
 800c0e0:	4b02      	ldr	r3, [pc, #8]	@ (800c0ec <puts+0xc>)
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	f7ff bfa5 	b.w	800c034 <_puts_r>
 800c0ea:	bf00      	nop
 800c0ec:	20000044 	.word	0x20000044

0800c0f0 <memset>:
 800c0f0:	4402      	add	r2, r0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d100      	bne.n	800c0fa <memset+0xa>
 800c0f8:	4770      	bx	lr
 800c0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c0fe:	e7f9      	b.n	800c0f4 <memset+0x4>

0800c100 <_close_r>:
 800c100:	b538      	push	{r3, r4, r5, lr}
 800c102:	4d06      	ldr	r5, [pc, #24]	@ (800c11c <_close_r+0x1c>)
 800c104:	2300      	movs	r3, #0
 800c106:	4604      	mov	r4, r0
 800c108:	4608      	mov	r0, r1
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	f7f5 f9b1 	bl	8001472 <_close>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d102      	bne.n	800c11a <_close_r+0x1a>
 800c114:	682b      	ldr	r3, [r5, #0]
 800c116:	b103      	cbz	r3, 800c11a <_close_r+0x1a>
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	bd38      	pop	{r3, r4, r5, pc}
 800c11c:	20002f2c 	.word	0x20002f2c

0800c120 <_fstat_r>:
 800c120:	b538      	push	{r3, r4, r5, lr}
 800c122:	4d07      	ldr	r5, [pc, #28]	@ (800c140 <_fstat_r+0x20>)
 800c124:	2300      	movs	r3, #0
 800c126:	4604      	mov	r4, r0
 800c128:	4608      	mov	r0, r1
 800c12a:	4611      	mov	r1, r2
 800c12c:	602b      	str	r3, [r5, #0]
 800c12e:	f7f5 f9ac 	bl	800148a <_fstat>
 800c132:	1c43      	adds	r3, r0, #1
 800c134:	d102      	bne.n	800c13c <_fstat_r+0x1c>
 800c136:	682b      	ldr	r3, [r5, #0]
 800c138:	b103      	cbz	r3, 800c13c <_fstat_r+0x1c>
 800c13a:	6023      	str	r3, [r4, #0]
 800c13c:	bd38      	pop	{r3, r4, r5, pc}
 800c13e:	bf00      	nop
 800c140:	20002f2c 	.word	0x20002f2c

0800c144 <_isatty_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4d06      	ldr	r5, [pc, #24]	@ (800c160 <_isatty_r+0x1c>)
 800c148:	2300      	movs	r3, #0
 800c14a:	4604      	mov	r4, r0
 800c14c:	4608      	mov	r0, r1
 800c14e:	602b      	str	r3, [r5, #0]
 800c150:	f7f5 f9ab 	bl	80014aa <_isatty>
 800c154:	1c43      	adds	r3, r0, #1
 800c156:	d102      	bne.n	800c15e <_isatty_r+0x1a>
 800c158:	682b      	ldr	r3, [r5, #0]
 800c15a:	b103      	cbz	r3, 800c15e <_isatty_r+0x1a>
 800c15c:	6023      	str	r3, [r4, #0]
 800c15e:	bd38      	pop	{r3, r4, r5, pc}
 800c160:	20002f2c 	.word	0x20002f2c

0800c164 <_lseek_r>:
 800c164:	b538      	push	{r3, r4, r5, lr}
 800c166:	4d07      	ldr	r5, [pc, #28]	@ (800c184 <_lseek_r+0x20>)
 800c168:	4604      	mov	r4, r0
 800c16a:	4608      	mov	r0, r1
 800c16c:	4611      	mov	r1, r2
 800c16e:	2200      	movs	r2, #0
 800c170:	602a      	str	r2, [r5, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	f7f5 f9a4 	bl	80014c0 <_lseek>
 800c178:	1c43      	adds	r3, r0, #1
 800c17a:	d102      	bne.n	800c182 <_lseek_r+0x1e>
 800c17c:	682b      	ldr	r3, [r5, #0]
 800c17e:	b103      	cbz	r3, 800c182 <_lseek_r+0x1e>
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	bd38      	pop	{r3, r4, r5, pc}
 800c184:	20002f2c 	.word	0x20002f2c

0800c188 <_read_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4d07      	ldr	r5, [pc, #28]	@ (800c1a8 <_read_r+0x20>)
 800c18c:	4604      	mov	r4, r0
 800c18e:	4608      	mov	r0, r1
 800c190:	4611      	mov	r1, r2
 800c192:	2200      	movs	r2, #0
 800c194:	602a      	str	r2, [r5, #0]
 800c196:	461a      	mov	r2, r3
 800c198:	f7f5 f94e 	bl	8001438 <_read>
 800c19c:	1c43      	adds	r3, r0, #1
 800c19e:	d102      	bne.n	800c1a6 <_read_r+0x1e>
 800c1a0:	682b      	ldr	r3, [r5, #0]
 800c1a2:	b103      	cbz	r3, 800c1a6 <_read_r+0x1e>
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	20002f2c 	.word	0x20002f2c

0800c1ac <_write_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	4d07      	ldr	r5, [pc, #28]	@ (800c1cc <_write_r+0x20>)
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4608      	mov	r0, r1
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	602a      	str	r2, [r5, #0]
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f7f4 fe98 	bl	8000ef0 <_write>
 800c1c0:	1c43      	adds	r3, r0, #1
 800c1c2:	d102      	bne.n	800c1ca <_write_r+0x1e>
 800c1c4:	682b      	ldr	r3, [r5, #0]
 800c1c6:	b103      	cbz	r3, 800c1ca <_write_r+0x1e>
 800c1c8:	6023      	str	r3, [r4, #0]
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	20002f2c 	.word	0x20002f2c

0800c1d0 <__errno>:
 800c1d0:	4b01      	ldr	r3, [pc, #4]	@ (800c1d8 <__errno+0x8>)
 800c1d2:	6818      	ldr	r0, [r3, #0]
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	20000044 	.word	0x20000044

0800c1dc <__libc_init_array>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	4d0d      	ldr	r5, [pc, #52]	@ (800c214 <__libc_init_array+0x38>)
 800c1e0:	4c0d      	ldr	r4, [pc, #52]	@ (800c218 <__libc_init_array+0x3c>)
 800c1e2:	1b64      	subs	r4, r4, r5
 800c1e4:	10a4      	asrs	r4, r4, #2
 800c1e6:	2600      	movs	r6, #0
 800c1e8:	42a6      	cmp	r6, r4
 800c1ea:	d109      	bne.n	800c200 <__libc_init_array+0x24>
 800c1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800c21c <__libc_init_array+0x40>)
 800c1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800c220 <__libc_init_array+0x44>)
 800c1f0:	f001 fb6c 	bl	800d8cc <_init>
 800c1f4:	1b64      	subs	r4, r4, r5
 800c1f6:	10a4      	asrs	r4, r4, #2
 800c1f8:	2600      	movs	r6, #0
 800c1fa:	42a6      	cmp	r6, r4
 800c1fc:	d105      	bne.n	800c20a <__libc_init_array+0x2e>
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}
 800c200:	f855 3b04 	ldr.w	r3, [r5], #4
 800c204:	4798      	blx	r3
 800c206:	3601      	adds	r6, #1
 800c208:	e7ee      	b.n	800c1e8 <__libc_init_array+0xc>
 800c20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c20e:	4798      	blx	r3
 800c210:	3601      	adds	r6, #1
 800c212:	e7f2      	b.n	800c1fa <__libc_init_array+0x1e>
 800c214:	0800e0c0 	.word	0x0800e0c0
 800c218:	0800e0c0 	.word	0x0800e0c0
 800c21c:	0800e0c0 	.word	0x0800e0c0
 800c220:	0800e0c4 	.word	0x0800e0c4

0800c224 <__retarget_lock_init_recursive>:
 800c224:	4770      	bx	lr

0800c226 <__retarget_lock_acquire_recursive>:
 800c226:	4770      	bx	lr

0800c228 <__retarget_lock_release_recursive>:
 800c228:	4770      	bx	lr
	...

0800c22c <_free_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4605      	mov	r5, r0
 800c230:	2900      	cmp	r1, #0
 800c232:	d041      	beq.n	800c2b8 <_free_r+0x8c>
 800c234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c238:	1f0c      	subs	r4, r1, #4
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bfb8      	it	lt
 800c23e:	18e4      	addlt	r4, r4, r3
 800c240:	f001 f910 	bl	800d464 <__malloc_lock>
 800c244:	4a1d      	ldr	r2, [pc, #116]	@ (800c2bc <_free_r+0x90>)
 800c246:	6813      	ldr	r3, [r2, #0]
 800c248:	b933      	cbnz	r3, 800c258 <_free_r+0x2c>
 800c24a:	6063      	str	r3, [r4, #4]
 800c24c:	6014      	str	r4, [r2, #0]
 800c24e:	4628      	mov	r0, r5
 800c250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c254:	f001 b90c 	b.w	800d470 <__malloc_unlock>
 800c258:	42a3      	cmp	r3, r4
 800c25a:	d908      	bls.n	800c26e <_free_r+0x42>
 800c25c:	6820      	ldr	r0, [r4, #0]
 800c25e:	1821      	adds	r1, r4, r0
 800c260:	428b      	cmp	r3, r1
 800c262:	bf01      	itttt	eq
 800c264:	6819      	ldreq	r1, [r3, #0]
 800c266:	685b      	ldreq	r3, [r3, #4]
 800c268:	1809      	addeq	r1, r1, r0
 800c26a:	6021      	streq	r1, [r4, #0]
 800c26c:	e7ed      	b.n	800c24a <_free_r+0x1e>
 800c26e:	461a      	mov	r2, r3
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	b10b      	cbz	r3, 800c278 <_free_r+0x4c>
 800c274:	42a3      	cmp	r3, r4
 800c276:	d9fa      	bls.n	800c26e <_free_r+0x42>
 800c278:	6811      	ldr	r1, [r2, #0]
 800c27a:	1850      	adds	r0, r2, r1
 800c27c:	42a0      	cmp	r0, r4
 800c27e:	d10b      	bne.n	800c298 <_free_r+0x6c>
 800c280:	6820      	ldr	r0, [r4, #0]
 800c282:	4401      	add	r1, r0
 800c284:	1850      	adds	r0, r2, r1
 800c286:	4283      	cmp	r3, r0
 800c288:	6011      	str	r1, [r2, #0]
 800c28a:	d1e0      	bne.n	800c24e <_free_r+0x22>
 800c28c:	6818      	ldr	r0, [r3, #0]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	6053      	str	r3, [r2, #4]
 800c292:	4408      	add	r0, r1
 800c294:	6010      	str	r0, [r2, #0]
 800c296:	e7da      	b.n	800c24e <_free_r+0x22>
 800c298:	d902      	bls.n	800c2a0 <_free_r+0x74>
 800c29a:	230c      	movs	r3, #12
 800c29c:	602b      	str	r3, [r5, #0]
 800c29e:	e7d6      	b.n	800c24e <_free_r+0x22>
 800c2a0:	6820      	ldr	r0, [r4, #0]
 800c2a2:	1821      	adds	r1, r4, r0
 800c2a4:	428b      	cmp	r3, r1
 800c2a6:	bf04      	itt	eq
 800c2a8:	6819      	ldreq	r1, [r3, #0]
 800c2aa:	685b      	ldreq	r3, [r3, #4]
 800c2ac:	6063      	str	r3, [r4, #4]
 800c2ae:	bf04      	itt	eq
 800c2b0:	1809      	addeq	r1, r1, r0
 800c2b2:	6021      	streq	r1, [r4, #0]
 800c2b4:	6054      	str	r4, [r2, #4]
 800c2b6:	e7ca      	b.n	800c24e <_free_r+0x22>
 800c2b8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20002f38 	.word	0x20002f38

0800c2c0 <__ssputs_r>:
 800c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	688e      	ldr	r6, [r1, #8]
 800c2c6:	461f      	mov	r7, r3
 800c2c8:	42be      	cmp	r6, r7
 800c2ca:	680b      	ldr	r3, [r1, #0]
 800c2cc:	4682      	mov	sl, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	4690      	mov	r8, r2
 800c2d2:	d82d      	bhi.n	800c330 <__ssputs_r+0x70>
 800c2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2dc:	d026      	beq.n	800c32c <__ssputs_r+0x6c>
 800c2de:	6965      	ldr	r5, [r4, #20]
 800c2e0:	6909      	ldr	r1, [r1, #16]
 800c2e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2e6:	eba3 0901 	sub.w	r9, r3, r1
 800c2ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2ee:	1c7b      	adds	r3, r7, #1
 800c2f0:	444b      	add	r3, r9
 800c2f2:	106d      	asrs	r5, r5, #1
 800c2f4:	429d      	cmp	r5, r3
 800c2f6:	bf38      	it	cc
 800c2f8:	461d      	movcc	r5, r3
 800c2fa:	0553      	lsls	r3, r2, #21
 800c2fc:	d527      	bpl.n	800c34e <__ssputs_r+0x8e>
 800c2fe:	4629      	mov	r1, r5
 800c300:	f000 fc6e 	bl	800cbe0 <_malloc_r>
 800c304:	4606      	mov	r6, r0
 800c306:	b360      	cbz	r0, 800c362 <__ssputs_r+0xa2>
 800c308:	6921      	ldr	r1, [r4, #16]
 800c30a:	464a      	mov	r2, r9
 800c30c:	f001 fac8 	bl	800d8a0 <memcpy>
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31a:	81a3      	strh	r3, [r4, #12]
 800c31c:	6126      	str	r6, [r4, #16]
 800c31e:	6165      	str	r5, [r4, #20]
 800c320:	444e      	add	r6, r9
 800c322:	eba5 0509 	sub.w	r5, r5, r9
 800c326:	6026      	str	r6, [r4, #0]
 800c328:	60a5      	str	r5, [r4, #8]
 800c32a:	463e      	mov	r6, r7
 800c32c:	42be      	cmp	r6, r7
 800c32e:	d900      	bls.n	800c332 <__ssputs_r+0x72>
 800c330:	463e      	mov	r6, r7
 800c332:	6820      	ldr	r0, [r4, #0]
 800c334:	4632      	mov	r2, r6
 800c336:	4641      	mov	r1, r8
 800c338:	f001 fa88 	bl	800d84c <memmove>
 800c33c:	68a3      	ldr	r3, [r4, #8]
 800c33e:	1b9b      	subs	r3, r3, r6
 800c340:	60a3      	str	r3, [r4, #8]
 800c342:	6823      	ldr	r3, [r4, #0]
 800c344:	4433      	add	r3, r6
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	2000      	movs	r0, #0
 800c34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c34e:	462a      	mov	r2, r5
 800c350:	f001 f8ce 	bl	800d4f0 <_realloc_r>
 800c354:	4606      	mov	r6, r0
 800c356:	2800      	cmp	r0, #0
 800c358:	d1e0      	bne.n	800c31c <__ssputs_r+0x5c>
 800c35a:	6921      	ldr	r1, [r4, #16]
 800c35c:	4650      	mov	r0, sl
 800c35e:	f7ff ff65 	bl	800c22c <_free_r>
 800c362:	230c      	movs	r3, #12
 800c364:	f8ca 3000 	str.w	r3, [sl]
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c36e:	81a3      	strh	r3, [r4, #12]
 800c370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c374:	e7e9      	b.n	800c34a <__ssputs_r+0x8a>
	...

0800c378 <_svfiprintf_r>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4698      	mov	r8, r3
 800c37e:	898b      	ldrh	r3, [r1, #12]
 800c380:	061b      	lsls	r3, r3, #24
 800c382:	b09d      	sub	sp, #116	@ 0x74
 800c384:	4607      	mov	r7, r0
 800c386:	460d      	mov	r5, r1
 800c388:	4614      	mov	r4, r2
 800c38a:	d510      	bpl.n	800c3ae <_svfiprintf_r+0x36>
 800c38c:	690b      	ldr	r3, [r1, #16]
 800c38e:	b973      	cbnz	r3, 800c3ae <_svfiprintf_r+0x36>
 800c390:	2140      	movs	r1, #64	@ 0x40
 800c392:	f000 fc25 	bl	800cbe0 <_malloc_r>
 800c396:	6028      	str	r0, [r5, #0]
 800c398:	6128      	str	r0, [r5, #16]
 800c39a:	b930      	cbnz	r0, 800c3aa <_svfiprintf_r+0x32>
 800c39c:	230c      	movs	r3, #12
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3a4:	b01d      	add	sp, #116	@ 0x74
 800c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3aa:	2340      	movs	r3, #64	@ 0x40
 800c3ac:	616b      	str	r3, [r5, #20]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3b2:	2320      	movs	r3, #32
 800c3b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3bc:	2330      	movs	r3, #48	@ 0x30
 800c3be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c55c <_svfiprintf_r+0x1e4>
 800c3c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3c6:	f04f 0901 	mov.w	r9, #1
 800c3ca:	4623      	mov	r3, r4
 800c3cc:	469a      	mov	sl, r3
 800c3ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3d2:	b10a      	cbz	r2, 800c3d8 <_svfiprintf_r+0x60>
 800c3d4:	2a25      	cmp	r2, #37	@ 0x25
 800c3d6:	d1f9      	bne.n	800c3cc <_svfiprintf_r+0x54>
 800c3d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3dc:	d00b      	beq.n	800c3f6 <_svfiprintf_r+0x7e>
 800c3de:	465b      	mov	r3, fp
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	4629      	mov	r1, r5
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	f7ff ff6b 	bl	800c2c0 <__ssputs_r>
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	f000 80a7 	beq.w	800c53e <_svfiprintf_r+0x1c6>
 800c3f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f2:	445a      	add	r2, fp
 800c3f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 809f 	beq.w	800c53e <_svfiprintf_r+0x1c6>
 800c400:	2300      	movs	r3, #0
 800c402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c40a:	f10a 0a01 	add.w	sl, sl, #1
 800c40e:	9304      	str	r3, [sp, #16]
 800c410:	9307      	str	r3, [sp, #28]
 800c412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c416:	931a      	str	r3, [sp, #104]	@ 0x68
 800c418:	4654      	mov	r4, sl
 800c41a:	2205      	movs	r2, #5
 800c41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c420:	484e      	ldr	r0, [pc, #312]	@ (800c55c <_svfiprintf_r+0x1e4>)
 800c422:	f7f3 feed 	bl	8000200 <memchr>
 800c426:	9a04      	ldr	r2, [sp, #16]
 800c428:	b9d8      	cbnz	r0, 800c462 <_svfiprintf_r+0xea>
 800c42a:	06d0      	lsls	r0, r2, #27
 800c42c:	bf44      	itt	mi
 800c42e:	2320      	movmi	r3, #32
 800c430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c434:	0711      	lsls	r1, r2, #28
 800c436:	bf44      	itt	mi
 800c438:	232b      	movmi	r3, #43	@ 0x2b
 800c43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c43e:	f89a 3000 	ldrb.w	r3, [sl]
 800c442:	2b2a      	cmp	r3, #42	@ 0x2a
 800c444:	d015      	beq.n	800c472 <_svfiprintf_r+0xfa>
 800c446:	9a07      	ldr	r2, [sp, #28]
 800c448:	4654      	mov	r4, sl
 800c44a:	2000      	movs	r0, #0
 800c44c:	f04f 0c0a 	mov.w	ip, #10
 800c450:	4621      	mov	r1, r4
 800c452:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c456:	3b30      	subs	r3, #48	@ 0x30
 800c458:	2b09      	cmp	r3, #9
 800c45a:	d94b      	bls.n	800c4f4 <_svfiprintf_r+0x17c>
 800c45c:	b1b0      	cbz	r0, 800c48c <_svfiprintf_r+0x114>
 800c45e:	9207      	str	r2, [sp, #28]
 800c460:	e014      	b.n	800c48c <_svfiprintf_r+0x114>
 800c462:	eba0 0308 	sub.w	r3, r0, r8
 800c466:	fa09 f303 	lsl.w	r3, r9, r3
 800c46a:	4313      	orrs	r3, r2
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	46a2      	mov	sl, r4
 800c470:	e7d2      	b.n	800c418 <_svfiprintf_r+0xa0>
 800c472:	9b03      	ldr	r3, [sp, #12]
 800c474:	1d19      	adds	r1, r3, #4
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	9103      	str	r1, [sp, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	bfbb      	ittet	lt
 800c47e:	425b      	neglt	r3, r3
 800c480:	f042 0202 	orrlt.w	r2, r2, #2
 800c484:	9307      	strge	r3, [sp, #28]
 800c486:	9307      	strlt	r3, [sp, #28]
 800c488:	bfb8      	it	lt
 800c48a:	9204      	strlt	r2, [sp, #16]
 800c48c:	7823      	ldrb	r3, [r4, #0]
 800c48e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c490:	d10a      	bne.n	800c4a8 <_svfiprintf_r+0x130>
 800c492:	7863      	ldrb	r3, [r4, #1]
 800c494:	2b2a      	cmp	r3, #42	@ 0x2a
 800c496:	d132      	bne.n	800c4fe <_svfiprintf_r+0x186>
 800c498:	9b03      	ldr	r3, [sp, #12]
 800c49a:	1d1a      	adds	r2, r3, #4
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	9203      	str	r2, [sp, #12]
 800c4a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4a4:	3402      	adds	r4, #2
 800c4a6:	9305      	str	r3, [sp, #20]
 800c4a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c56c <_svfiprintf_r+0x1f4>
 800c4ac:	7821      	ldrb	r1, [r4, #0]
 800c4ae:	2203      	movs	r2, #3
 800c4b0:	4650      	mov	r0, sl
 800c4b2:	f7f3 fea5 	bl	8000200 <memchr>
 800c4b6:	b138      	cbz	r0, 800c4c8 <_svfiprintf_r+0x150>
 800c4b8:	9b04      	ldr	r3, [sp, #16]
 800c4ba:	eba0 000a 	sub.w	r0, r0, sl
 800c4be:	2240      	movs	r2, #64	@ 0x40
 800c4c0:	4082      	lsls	r2, r0
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	3401      	adds	r4, #1
 800c4c6:	9304      	str	r3, [sp, #16]
 800c4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4cc:	4824      	ldr	r0, [pc, #144]	@ (800c560 <_svfiprintf_r+0x1e8>)
 800c4ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4d2:	2206      	movs	r2, #6
 800c4d4:	f7f3 fe94 	bl	8000200 <memchr>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d036      	beq.n	800c54a <_svfiprintf_r+0x1d2>
 800c4dc:	4b21      	ldr	r3, [pc, #132]	@ (800c564 <_svfiprintf_r+0x1ec>)
 800c4de:	bb1b      	cbnz	r3, 800c528 <_svfiprintf_r+0x1b0>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	3307      	adds	r3, #7
 800c4e4:	f023 0307 	bic.w	r3, r3, #7
 800c4e8:	3308      	adds	r3, #8
 800c4ea:	9303      	str	r3, [sp, #12]
 800c4ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4ee:	4433      	add	r3, r6
 800c4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4f2:	e76a      	b.n	800c3ca <_svfiprintf_r+0x52>
 800c4f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4f8:	460c      	mov	r4, r1
 800c4fa:	2001      	movs	r0, #1
 800c4fc:	e7a8      	b.n	800c450 <_svfiprintf_r+0xd8>
 800c4fe:	2300      	movs	r3, #0
 800c500:	3401      	adds	r4, #1
 800c502:	9305      	str	r3, [sp, #20]
 800c504:	4619      	mov	r1, r3
 800c506:	f04f 0c0a 	mov.w	ip, #10
 800c50a:	4620      	mov	r0, r4
 800c50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c510:	3a30      	subs	r2, #48	@ 0x30
 800c512:	2a09      	cmp	r2, #9
 800c514:	d903      	bls.n	800c51e <_svfiprintf_r+0x1a6>
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0c6      	beq.n	800c4a8 <_svfiprintf_r+0x130>
 800c51a:	9105      	str	r1, [sp, #20]
 800c51c:	e7c4      	b.n	800c4a8 <_svfiprintf_r+0x130>
 800c51e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c522:	4604      	mov	r4, r0
 800c524:	2301      	movs	r3, #1
 800c526:	e7f0      	b.n	800c50a <_svfiprintf_r+0x192>
 800c528:	ab03      	add	r3, sp, #12
 800c52a:	9300      	str	r3, [sp, #0]
 800c52c:	462a      	mov	r2, r5
 800c52e:	4b0e      	ldr	r3, [pc, #56]	@ (800c568 <_svfiprintf_r+0x1f0>)
 800c530:	a904      	add	r1, sp, #16
 800c532:	4638      	mov	r0, r7
 800c534:	f3af 8000 	nop.w
 800c538:	1c42      	adds	r2, r0, #1
 800c53a:	4606      	mov	r6, r0
 800c53c:	d1d6      	bne.n	800c4ec <_svfiprintf_r+0x174>
 800c53e:	89ab      	ldrh	r3, [r5, #12]
 800c540:	065b      	lsls	r3, r3, #25
 800c542:	f53f af2d 	bmi.w	800c3a0 <_svfiprintf_r+0x28>
 800c546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c548:	e72c      	b.n	800c3a4 <_svfiprintf_r+0x2c>
 800c54a:	ab03      	add	r3, sp, #12
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	462a      	mov	r2, r5
 800c550:	4b05      	ldr	r3, [pc, #20]	@ (800c568 <_svfiprintf_r+0x1f0>)
 800c552:	a904      	add	r1, sp, #16
 800c554:	4638      	mov	r0, r7
 800c556:	f000 fc31 	bl	800cdbc <_printf_i>
 800c55a:	e7ed      	b.n	800c538 <_svfiprintf_r+0x1c0>
 800c55c:	0800df68 	.word	0x0800df68
 800c560:	0800df72 	.word	0x0800df72
 800c564:	00000000 	.word	0x00000000
 800c568:	0800c2c1 	.word	0x0800c2c1
 800c56c:	0800df6e 	.word	0x0800df6e

0800c570 <_sungetc_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	1c4b      	adds	r3, r1, #1
 800c574:	4614      	mov	r4, r2
 800c576:	d103      	bne.n	800c580 <_sungetc_r+0x10>
 800c578:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c57c:	4628      	mov	r0, r5
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	8993      	ldrh	r3, [r2, #12]
 800c582:	f023 0320 	bic.w	r3, r3, #32
 800c586:	8193      	strh	r3, [r2, #12]
 800c588:	6853      	ldr	r3, [r2, #4]
 800c58a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c58c:	b2cd      	uxtb	r5, r1
 800c58e:	b18a      	cbz	r2, 800c5b4 <_sungetc_r+0x44>
 800c590:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800c592:	429a      	cmp	r2, r3
 800c594:	dd08      	ble.n	800c5a8 <_sungetc_r+0x38>
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	1e5a      	subs	r2, r3, #1
 800c59a:	6022      	str	r2, [r4, #0]
 800c59c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c5a0:	6863      	ldr	r3, [r4, #4]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	6063      	str	r3, [r4, #4]
 800c5a6:	e7e9      	b.n	800c57c <_sungetc_r+0xc>
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	f000 ff67 	bl	800d47c <__submore>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d0f1      	beq.n	800c596 <_sungetc_r+0x26>
 800c5b2:	e7e1      	b.n	800c578 <_sungetc_r+0x8>
 800c5b4:	6921      	ldr	r1, [r4, #16]
 800c5b6:	6822      	ldr	r2, [r4, #0]
 800c5b8:	b141      	cbz	r1, 800c5cc <_sungetc_r+0x5c>
 800c5ba:	4291      	cmp	r1, r2
 800c5bc:	d206      	bcs.n	800c5cc <_sungetc_r+0x5c>
 800c5be:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800c5c2:	42a9      	cmp	r1, r5
 800c5c4:	d102      	bne.n	800c5cc <_sungetc_r+0x5c>
 800c5c6:	3a01      	subs	r2, #1
 800c5c8:	6022      	str	r2, [r4, #0]
 800c5ca:	e7ea      	b.n	800c5a2 <_sungetc_r+0x32>
 800c5cc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800c5d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5d6:	2303      	movs	r3, #3
 800c5d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c5da:	4623      	mov	r3, r4
 800c5dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e7de      	b.n	800c5a4 <_sungetc_r+0x34>

0800c5e6 <__ssrefill_r>:
 800c5e6:	b510      	push	{r4, lr}
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c5ec:	b169      	cbz	r1, 800c60a <__ssrefill_r+0x24>
 800c5ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	d001      	beq.n	800c5fa <__ssrefill_r+0x14>
 800c5f6:	f7ff fe19 	bl	800c22c <_free_r>
 800c5fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c5fc:	6063      	str	r3, [r4, #4]
 800c5fe:	2000      	movs	r0, #0
 800c600:	6360      	str	r0, [r4, #52]	@ 0x34
 800c602:	b113      	cbz	r3, 800c60a <__ssrefill_r+0x24>
 800c604:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c606:	6023      	str	r3, [r4, #0]
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	2300      	movs	r3, #0
 800c610:	6063      	str	r3, [r4, #4]
 800c612:	89a3      	ldrh	r3, [r4, #12]
 800c614:	f043 0320 	orr.w	r3, r3, #32
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c61e:	e7f3      	b.n	800c608 <__ssrefill_r+0x22>

0800c620 <__ssvfiscanf_r>:
 800c620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c624:	460c      	mov	r4, r1
 800c626:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c62a:	2100      	movs	r1, #0
 800c62c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c630:	49a5      	ldr	r1, [pc, #660]	@ (800c8c8 <__ssvfiscanf_r+0x2a8>)
 800c632:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c634:	f10d 0804 	add.w	r8, sp, #4
 800c638:	49a4      	ldr	r1, [pc, #656]	@ (800c8cc <__ssvfiscanf_r+0x2ac>)
 800c63a:	4fa5      	ldr	r7, [pc, #660]	@ (800c8d0 <__ssvfiscanf_r+0x2b0>)
 800c63c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c640:	4606      	mov	r6, r0
 800c642:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	7813      	ldrb	r3, [r2, #0]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 8158 	beq.w	800c8fe <__ssvfiscanf_r+0x2de>
 800c64e:	5cf9      	ldrb	r1, [r7, r3]
 800c650:	f011 0108 	ands.w	r1, r1, #8
 800c654:	f102 0501 	add.w	r5, r2, #1
 800c658:	d019      	beq.n	800c68e <__ssvfiscanf_r+0x6e>
 800c65a:	6863      	ldr	r3, [r4, #4]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	dd0f      	ble.n	800c680 <__ssvfiscanf_r+0x60>
 800c660:	6823      	ldr	r3, [r4, #0]
 800c662:	781a      	ldrb	r2, [r3, #0]
 800c664:	5cba      	ldrb	r2, [r7, r2]
 800c666:	0712      	lsls	r2, r2, #28
 800c668:	d401      	bmi.n	800c66e <__ssvfiscanf_r+0x4e>
 800c66a:	462a      	mov	r2, r5
 800c66c:	e7eb      	b.n	800c646 <__ssvfiscanf_r+0x26>
 800c66e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c670:	3201      	adds	r2, #1
 800c672:	9245      	str	r2, [sp, #276]	@ 0x114
 800c674:	6862      	ldr	r2, [r4, #4]
 800c676:	3301      	adds	r3, #1
 800c678:	3a01      	subs	r2, #1
 800c67a:	6062      	str	r2, [r4, #4]
 800c67c:	6023      	str	r3, [r4, #0]
 800c67e:	e7ec      	b.n	800c65a <__ssvfiscanf_r+0x3a>
 800c680:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c682:	4621      	mov	r1, r4
 800c684:	4630      	mov	r0, r6
 800c686:	4798      	blx	r3
 800c688:	2800      	cmp	r0, #0
 800c68a:	d0e9      	beq.n	800c660 <__ssvfiscanf_r+0x40>
 800c68c:	e7ed      	b.n	800c66a <__ssvfiscanf_r+0x4a>
 800c68e:	2b25      	cmp	r3, #37	@ 0x25
 800c690:	d012      	beq.n	800c6b8 <__ssvfiscanf_r+0x98>
 800c692:	4699      	mov	r9, r3
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	f340 8093 	ble.w	800c7c2 <__ssvfiscanf_r+0x1a2>
 800c69c:	6822      	ldr	r2, [r4, #0]
 800c69e:	7813      	ldrb	r3, [r2, #0]
 800c6a0:	454b      	cmp	r3, r9
 800c6a2:	f040 812c 	bne.w	800c8fe <__ssvfiscanf_r+0x2de>
 800c6a6:	6863      	ldr	r3, [r4, #4]
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	6063      	str	r3, [r4, #4]
 800c6ac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c6ae:	3201      	adds	r2, #1
 800c6b0:	3301      	adds	r3, #1
 800c6b2:	6022      	str	r2, [r4, #0]
 800c6b4:	9345      	str	r3, [sp, #276]	@ 0x114
 800c6b6:	e7d8      	b.n	800c66a <__ssvfiscanf_r+0x4a>
 800c6b8:	9141      	str	r1, [sp, #260]	@ 0x104
 800c6ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c6bc:	7853      	ldrb	r3, [r2, #1]
 800c6be:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6c0:	bf02      	ittt	eq
 800c6c2:	2310      	moveq	r3, #16
 800c6c4:	1c95      	addeq	r5, r2, #2
 800c6c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c6c8:	220a      	movs	r2, #10
 800c6ca:	46a9      	mov	r9, r5
 800c6cc:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c6d0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c6d4:	2b09      	cmp	r3, #9
 800c6d6:	d91e      	bls.n	800c716 <__ssvfiscanf_r+0xf6>
 800c6d8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c8d4 <__ssvfiscanf_r+0x2b4>
 800c6dc:	2203      	movs	r2, #3
 800c6de:	4650      	mov	r0, sl
 800c6e0:	f7f3 fd8e 	bl	8000200 <memchr>
 800c6e4:	b138      	cbz	r0, 800c6f6 <__ssvfiscanf_r+0xd6>
 800c6e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c6e8:	eba0 000a 	sub.w	r0, r0, sl
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	4083      	lsls	r3, r0
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	9341      	str	r3, [sp, #260]	@ 0x104
 800c6f4:	464d      	mov	r5, r9
 800c6f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c6fa:	2b78      	cmp	r3, #120	@ 0x78
 800c6fc:	d806      	bhi.n	800c70c <__ssvfiscanf_r+0xec>
 800c6fe:	2b57      	cmp	r3, #87	@ 0x57
 800c700:	d810      	bhi.n	800c724 <__ssvfiscanf_r+0x104>
 800c702:	2b25      	cmp	r3, #37	@ 0x25
 800c704:	d0c5      	beq.n	800c692 <__ssvfiscanf_r+0x72>
 800c706:	d857      	bhi.n	800c7b8 <__ssvfiscanf_r+0x198>
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d065      	beq.n	800c7d8 <__ssvfiscanf_r+0x1b8>
 800c70c:	2303      	movs	r3, #3
 800c70e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c710:	230a      	movs	r3, #10
 800c712:	9342      	str	r3, [sp, #264]	@ 0x108
 800c714:	e078      	b.n	800c808 <__ssvfiscanf_r+0x1e8>
 800c716:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c718:	fb02 1103 	mla	r1, r2, r3, r1
 800c71c:	3930      	subs	r1, #48	@ 0x30
 800c71e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c720:	464d      	mov	r5, r9
 800c722:	e7d2      	b.n	800c6ca <__ssvfiscanf_r+0xaa>
 800c724:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c728:	2a20      	cmp	r2, #32
 800c72a:	d8ef      	bhi.n	800c70c <__ssvfiscanf_r+0xec>
 800c72c:	a101      	add	r1, pc, #4	@ (adr r1, 800c734 <__ssvfiscanf_r+0x114>)
 800c72e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c732:	bf00      	nop
 800c734:	0800c7e7 	.word	0x0800c7e7
 800c738:	0800c70d 	.word	0x0800c70d
 800c73c:	0800c70d 	.word	0x0800c70d
 800c740:	0800c841 	.word	0x0800c841
 800c744:	0800c70d 	.word	0x0800c70d
 800c748:	0800c70d 	.word	0x0800c70d
 800c74c:	0800c70d 	.word	0x0800c70d
 800c750:	0800c70d 	.word	0x0800c70d
 800c754:	0800c70d 	.word	0x0800c70d
 800c758:	0800c70d 	.word	0x0800c70d
 800c75c:	0800c70d 	.word	0x0800c70d
 800c760:	0800c857 	.word	0x0800c857
 800c764:	0800c83d 	.word	0x0800c83d
 800c768:	0800c7bf 	.word	0x0800c7bf
 800c76c:	0800c7bf 	.word	0x0800c7bf
 800c770:	0800c7bf 	.word	0x0800c7bf
 800c774:	0800c70d 	.word	0x0800c70d
 800c778:	0800c7f9 	.word	0x0800c7f9
 800c77c:	0800c70d 	.word	0x0800c70d
 800c780:	0800c70d 	.word	0x0800c70d
 800c784:	0800c70d 	.word	0x0800c70d
 800c788:	0800c70d 	.word	0x0800c70d
 800c78c:	0800c867 	.word	0x0800c867
 800c790:	0800c801 	.word	0x0800c801
 800c794:	0800c7df 	.word	0x0800c7df
 800c798:	0800c70d 	.word	0x0800c70d
 800c79c:	0800c70d 	.word	0x0800c70d
 800c7a0:	0800c863 	.word	0x0800c863
 800c7a4:	0800c70d 	.word	0x0800c70d
 800c7a8:	0800c83d 	.word	0x0800c83d
 800c7ac:	0800c70d 	.word	0x0800c70d
 800c7b0:	0800c70d 	.word	0x0800c70d
 800c7b4:	0800c7e7 	.word	0x0800c7e7
 800c7b8:	3b45      	subs	r3, #69	@ 0x45
 800c7ba:	2b02      	cmp	r3, #2
 800c7bc:	d8a6      	bhi.n	800c70c <__ssvfiscanf_r+0xec>
 800c7be:	2305      	movs	r3, #5
 800c7c0:	e021      	b.n	800c806 <__ssvfiscanf_r+0x1e6>
 800c7c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	4798      	blx	r3
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f43f af66 	beq.w	800c69c <__ssvfiscanf_r+0x7c>
 800c7d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f040 808b 	bne.w	800c8ee <__ssvfiscanf_r+0x2ce>
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7dc:	e08b      	b.n	800c8f6 <__ssvfiscanf_r+0x2d6>
 800c7de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c7e0:	f042 0220 	orr.w	r2, r2, #32
 800c7e4:	9241      	str	r2, [sp, #260]	@ 0x104
 800c7e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c7e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c7ec:	9241      	str	r2, [sp, #260]	@ 0x104
 800c7ee:	2210      	movs	r2, #16
 800c7f0:	2b6e      	cmp	r3, #110	@ 0x6e
 800c7f2:	9242      	str	r2, [sp, #264]	@ 0x108
 800c7f4:	d902      	bls.n	800c7fc <__ssvfiscanf_r+0x1dc>
 800c7f6:	e005      	b.n	800c804 <__ssvfiscanf_r+0x1e4>
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	9342      	str	r3, [sp, #264]	@ 0x108
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e002      	b.n	800c806 <__ssvfiscanf_r+0x1e6>
 800c800:	2308      	movs	r3, #8
 800c802:	9342      	str	r3, [sp, #264]	@ 0x108
 800c804:	2304      	movs	r3, #4
 800c806:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c808:	6863      	ldr	r3, [r4, #4]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	dd39      	ble.n	800c882 <__ssvfiscanf_r+0x262>
 800c80e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c810:	0659      	lsls	r1, r3, #25
 800c812:	d404      	bmi.n	800c81e <__ssvfiscanf_r+0x1fe>
 800c814:	6823      	ldr	r3, [r4, #0]
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	5cba      	ldrb	r2, [r7, r2]
 800c81a:	0712      	lsls	r2, r2, #28
 800c81c:	d438      	bmi.n	800c890 <__ssvfiscanf_r+0x270>
 800c81e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c820:	2b02      	cmp	r3, #2
 800c822:	dc47      	bgt.n	800c8b4 <__ssvfiscanf_r+0x294>
 800c824:	466b      	mov	r3, sp
 800c826:	4622      	mov	r2, r4
 800c828:	a941      	add	r1, sp, #260	@ 0x104
 800c82a:	4630      	mov	r0, r6
 800c82c:	f000 fbe6 	bl	800cffc <_scanf_chars>
 800c830:	2801      	cmp	r0, #1
 800c832:	d064      	beq.n	800c8fe <__ssvfiscanf_r+0x2de>
 800c834:	2802      	cmp	r0, #2
 800c836:	f47f af18 	bne.w	800c66a <__ssvfiscanf_r+0x4a>
 800c83a:	e7c9      	b.n	800c7d0 <__ssvfiscanf_r+0x1b0>
 800c83c:	220a      	movs	r2, #10
 800c83e:	e7d7      	b.n	800c7f0 <__ssvfiscanf_r+0x1d0>
 800c840:	4629      	mov	r1, r5
 800c842:	4640      	mov	r0, r8
 800c844:	f000 fd28 	bl	800d298 <__sccl>
 800c848:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c84a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c84e:	9341      	str	r3, [sp, #260]	@ 0x104
 800c850:	4605      	mov	r5, r0
 800c852:	2301      	movs	r3, #1
 800c854:	e7d7      	b.n	800c806 <__ssvfiscanf_r+0x1e6>
 800c856:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c85c:	9341      	str	r3, [sp, #260]	@ 0x104
 800c85e:	2300      	movs	r3, #0
 800c860:	e7d1      	b.n	800c806 <__ssvfiscanf_r+0x1e6>
 800c862:	2302      	movs	r3, #2
 800c864:	e7cf      	b.n	800c806 <__ssvfiscanf_r+0x1e6>
 800c866:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c868:	06c3      	lsls	r3, r0, #27
 800c86a:	f53f aefe 	bmi.w	800c66a <__ssvfiscanf_r+0x4a>
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c872:	1d19      	adds	r1, r3, #4
 800c874:	9100      	str	r1, [sp, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	07c0      	lsls	r0, r0, #31
 800c87a:	bf4c      	ite	mi
 800c87c:	801a      	strhmi	r2, [r3, #0]
 800c87e:	601a      	strpl	r2, [r3, #0]
 800c880:	e6f3      	b.n	800c66a <__ssvfiscanf_r+0x4a>
 800c882:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c884:	4621      	mov	r1, r4
 800c886:	4630      	mov	r0, r6
 800c888:	4798      	blx	r3
 800c88a:	2800      	cmp	r0, #0
 800c88c:	d0bf      	beq.n	800c80e <__ssvfiscanf_r+0x1ee>
 800c88e:	e79f      	b.n	800c7d0 <__ssvfiscanf_r+0x1b0>
 800c890:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c892:	3201      	adds	r2, #1
 800c894:	9245      	str	r2, [sp, #276]	@ 0x114
 800c896:	6862      	ldr	r2, [r4, #4]
 800c898:	3a01      	subs	r2, #1
 800c89a:	2a00      	cmp	r2, #0
 800c89c:	6062      	str	r2, [r4, #4]
 800c89e:	dd02      	ble.n	800c8a6 <__ssvfiscanf_r+0x286>
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	e7b6      	b.n	800c814 <__ssvfiscanf_r+0x1f4>
 800c8a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c8a8:	4621      	mov	r1, r4
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	4798      	blx	r3
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0b0      	beq.n	800c814 <__ssvfiscanf_r+0x1f4>
 800c8b2:	e78d      	b.n	800c7d0 <__ssvfiscanf_r+0x1b0>
 800c8b4:	2b04      	cmp	r3, #4
 800c8b6:	dc0f      	bgt.n	800c8d8 <__ssvfiscanf_r+0x2b8>
 800c8b8:	466b      	mov	r3, sp
 800c8ba:	4622      	mov	r2, r4
 800c8bc:	a941      	add	r1, sp, #260	@ 0x104
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f000 fbf6 	bl	800d0b0 <_scanf_i>
 800c8c4:	e7b4      	b.n	800c830 <__ssvfiscanf_r+0x210>
 800c8c6:	bf00      	nop
 800c8c8:	0800c571 	.word	0x0800c571
 800c8cc:	0800c5e7 	.word	0x0800c5e7
 800c8d0:	0800dfb7 	.word	0x0800dfb7
 800c8d4:	0800df6e 	.word	0x0800df6e
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c904 <__ssvfiscanf_r+0x2e4>)
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f43f aec5 	beq.w	800c66a <__ssvfiscanf_r+0x4a>
 800c8e0:	466b      	mov	r3, sp
 800c8e2:	4622      	mov	r2, r4
 800c8e4:	a941      	add	r1, sp, #260	@ 0x104
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	f3af 8000 	nop.w
 800c8ec:	e7a0      	b.n	800c830 <__ssvfiscanf_r+0x210>
 800c8ee:	89a3      	ldrh	r3, [r4, #12]
 800c8f0:	065b      	lsls	r3, r3, #25
 800c8f2:	f53f af71 	bmi.w	800c7d8 <__ssvfiscanf_r+0x1b8>
 800c8f6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c8fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c900:	e7f9      	b.n	800c8f6 <__ssvfiscanf_r+0x2d6>
 800c902:	bf00      	nop
 800c904:	00000000 	.word	0x00000000

0800c908 <__sfputc_r>:
 800c908:	6893      	ldr	r3, [r2, #8]
 800c90a:	3b01      	subs	r3, #1
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	b410      	push	{r4}
 800c910:	6093      	str	r3, [r2, #8]
 800c912:	da08      	bge.n	800c926 <__sfputc_r+0x1e>
 800c914:	6994      	ldr	r4, [r2, #24]
 800c916:	42a3      	cmp	r3, r4
 800c918:	db01      	blt.n	800c91e <__sfputc_r+0x16>
 800c91a:	290a      	cmp	r1, #10
 800c91c:	d103      	bne.n	800c926 <__sfputc_r+0x1e>
 800c91e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c922:	f000 beff 	b.w	800d724 <__swbuf_r>
 800c926:	6813      	ldr	r3, [r2, #0]
 800c928:	1c58      	adds	r0, r3, #1
 800c92a:	6010      	str	r0, [r2, #0]
 800c92c:	7019      	strb	r1, [r3, #0]
 800c92e:	4608      	mov	r0, r1
 800c930:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c934:	4770      	bx	lr

0800c936 <__sfputs_r>:
 800c936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c938:	4606      	mov	r6, r0
 800c93a:	460f      	mov	r7, r1
 800c93c:	4614      	mov	r4, r2
 800c93e:	18d5      	adds	r5, r2, r3
 800c940:	42ac      	cmp	r4, r5
 800c942:	d101      	bne.n	800c948 <__sfputs_r+0x12>
 800c944:	2000      	movs	r0, #0
 800c946:	e007      	b.n	800c958 <__sfputs_r+0x22>
 800c948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c94c:	463a      	mov	r2, r7
 800c94e:	4630      	mov	r0, r6
 800c950:	f7ff ffda 	bl	800c908 <__sfputc_r>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d1f3      	bne.n	800c940 <__sfputs_r+0xa>
 800c958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c95c <_vfiprintf_r>:
 800c95c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c960:	460d      	mov	r5, r1
 800c962:	b09d      	sub	sp, #116	@ 0x74
 800c964:	4614      	mov	r4, r2
 800c966:	4698      	mov	r8, r3
 800c968:	4606      	mov	r6, r0
 800c96a:	b118      	cbz	r0, 800c974 <_vfiprintf_r+0x18>
 800c96c:	6a03      	ldr	r3, [r0, #32]
 800c96e:	b90b      	cbnz	r3, 800c974 <_vfiprintf_r+0x18>
 800c970:	f7ff fab6 	bl	800bee0 <__sinit>
 800c974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c976:	07d9      	lsls	r1, r3, #31
 800c978:	d405      	bmi.n	800c986 <_vfiprintf_r+0x2a>
 800c97a:	89ab      	ldrh	r3, [r5, #12]
 800c97c:	059a      	lsls	r2, r3, #22
 800c97e:	d402      	bmi.n	800c986 <_vfiprintf_r+0x2a>
 800c980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c982:	f7ff fc50 	bl	800c226 <__retarget_lock_acquire_recursive>
 800c986:	89ab      	ldrh	r3, [r5, #12]
 800c988:	071b      	lsls	r3, r3, #28
 800c98a:	d501      	bpl.n	800c990 <_vfiprintf_r+0x34>
 800c98c:	692b      	ldr	r3, [r5, #16]
 800c98e:	b99b      	cbnz	r3, 800c9b8 <_vfiprintf_r+0x5c>
 800c990:	4629      	mov	r1, r5
 800c992:	4630      	mov	r0, r6
 800c994:	f000 ff04 	bl	800d7a0 <__swsetup_r>
 800c998:	b170      	cbz	r0, 800c9b8 <_vfiprintf_r+0x5c>
 800c99a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c99c:	07dc      	lsls	r4, r3, #31
 800c99e:	d504      	bpl.n	800c9aa <_vfiprintf_r+0x4e>
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9a4:	b01d      	add	sp, #116	@ 0x74
 800c9a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9aa:	89ab      	ldrh	r3, [r5, #12]
 800c9ac:	0598      	lsls	r0, r3, #22
 800c9ae:	d4f7      	bmi.n	800c9a0 <_vfiprintf_r+0x44>
 800c9b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9b2:	f7ff fc39 	bl	800c228 <__retarget_lock_release_recursive>
 800c9b6:	e7f3      	b.n	800c9a0 <_vfiprintf_r+0x44>
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9bc:	2320      	movs	r3, #32
 800c9be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9c6:	2330      	movs	r3, #48	@ 0x30
 800c9c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb78 <_vfiprintf_r+0x21c>
 800c9cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9d0:	f04f 0901 	mov.w	r9, #1
 800c9d4:	4623      	mov	r3, r4
 800c9d6:	469a      	mov	sl, r3
 800c9d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9dc:	b10a      	cbz	r2, 800c9e2 <_vfiprintf_r+0x86>
 800c9de:	2a25      	cmp	r2, #37	@ 0x25
 800c9e0:	d1f9      	bne.n	800c9d6 <_vfiprintf_r+0x7a>
 800c9e2:	ebba 0b04 	subs.w	fp, sl, r4
 800c9e6:	d00b      	beq.n	800ca00 <_vfiprintf_r+0xa4>
 800c9e8:	465b      	mov	r3, fp
 800c9ea:	4622      	mov	r2, r4
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ffa1 	bl	800c936 <__sfputs_r>
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	f000 80a7 	beq.w	800cb48 <_vfiprintf_r+0x1ec>
 800c9fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9fc:	445a      	add	r2, fp
 800c9fe:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca00:	f89a 3000 	ldrb.w	r3, [sl]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 809f 	beq.w	800cb48 <_vfiprintf_r+0x1ec>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca14:	f10a 0a01 	add.w	sl, sl, #1
 800ca18:	9304      	str	r3, [sp, #16]
 800ca1a:	9307      	str	r3, [sp, #28]
 800ca1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca20:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca22:	4654      	mov	r4, sl
 800ca24:	2205      	movs	r2, #5
 800ca26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca2a:	4853      	ldr	r0, [pc, #332]	@ (800cb78 <_vfiprintf_r+0x21c>)
 800ca2c:	f7f3 fbe8 	bl	8000200 <memchr>
 800ca30:	9a04      	ldr	r2, [sp, #16]
 800ca32:	b9d8      	cbnz	r0, 800ca6c <_vfiprintf_r+0x110>
 800ca34:	06d1      	lsls	r1, r2, #27
 800ca36:	bf44      	itt	mi
 800ca38:	2320      	movmi	r3, #32
 800ca3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca3e:	0713      	lsls	r3, r2, #28
 800ca40:	bf44      	itt	mi
 800ca42:	232b      	movmi	r3, #43	@ 0x2b
 800ca44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca48:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca4e:	d015      	beq.n	800ca7c <_vfiprintf_r+0x120>
 800ca50:	9a07      	ldr	r2, [sp, #28]
 800ca52:	4654      	mov	r4, sl
 800ca54:	2000      	movs	r0, #0
 800ca56:	f04f 0c0a 	mov.w	ip, #10
 800ca5a:	4621      	mov	r1, r4
 800ca5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca60:	3b30      	subs	r3, #48	@ 0x30
 800ca62:	2b09      	cmp	r3, #9
 800ca64:	d94b      	bls.n	800cafe <_vfiprintf_r+0x1a2>
 800ca66:	b1b0      	cbz	r0, 800ca96 <_vfiprintf_r+0x13a>
 800ca68:	9207      	str	r2, [sp, #28]
 800ca6a:	e014      	b.n	800ca96 <_vfiprintf_r+0x13a>
 800ca6c:	eba0 0308 	sub.w	r3, r0, r8
 800ca70:	fa09 f303 	lsl.w	r3, r9, r3
 800ca74:	4313      	orrs	r3, r2
 800ca76:	9304      	str	r3, [sp, #16]
 800ca78:	46a2      	mov	sl, r4
 800ca7a:	e7d2      	b.n	800ca22 <_vfiprintf_r+0xc6>
 800ca7c:	9b03      	ldr	r3, [sp, #12]
 800ca7e:	1d19      	adds	r1, r3, #4
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	9103      	str	r1, [sp, #12]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	bfbb      	ittet	lt
 800ca88:	425b      	neglt	r3, r3
 800ca8a:	f042 0202 	orrlt.w	r2, r2, #2
 800ca8e:	9307      	strge	r3, [sp, #28]
 800ca90:	9307      	strlt	r3, [sp, #28]
 800ca92:	bfb8      	it	lt
 800ca94:	9204      	strlt	r2, [sp, #16]
 800ca96:	7823      	ldrb	r3, [r4, #0]
 800ca98:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca9a:	d10a      	bne.n	800cab2 <_vfiprintf_r+0x156>
 800ca9c:	7863      	ldrb	r3, [r4, #1]
 800ca9e:	2b2a      	cmp	r3, #42	@ 0x2a
 800caa0:	d132      	bne.n	800cb08 <_vfiprintf_r+0x1ac>
 800caa2:	9b03      	ldr	r3, [sp, #12]
 800caa4:	1d1a      	adds	r2, r3, #4
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	9203      	str	r2, [sp, #12]
 800caaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caae:	3402      	adds	r4, #2
 800cab0:	9305      	str	r3, [sp, #20]
 800cab2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb88 <_vfiprintf_r+0x22c>
 800cab6:	7821      	ldrb	r1, [r4, #0]
 800cab8:	2203      	movs	r2, #3
 800caba:	4650      	mov	r0, sl
 800cabc:	f7f3 fba0 	bl	8000200 <memchr>
 800cac0:	b138      	cbz	r0, 800cad2 <_vfiprintf_r+0x176>
 800cac2:	9b04      	ldr	r3, [sp, #16]
 800cac4:	eba0 000a 	sub.w	r0, r0, sl
 800cac8:	2240      	movs	r2, #64	@ 0x40
 800caca:	4082      	lsls	r2, r0
 800cacc:	4313      	orrs	r3, r2
 800cace:	3401      	adds	r4, #1
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad6:	4829      	ldr	r0, [pc, #164]	@ (800cb7c <_vfiprintf_r+0x220>)
 800cad8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cadc:	2206      	movs	r2, #6
 800cade:	f7f3 fb8f 	bl	8000200 <memchr>
 800cae2:	2800      	cmp	r0, #0
 800cae4:	d03f      	beq.n	800cb66 <_vfiprintf_r+0x20a>
 800cae6:	4b26      	ldr	r3, [pc, #152]	@ (800cb80 <_vfiprintf_r+0x224>)
 800cae8:	bb1b      	cbnz	r3, 800cb32 <_vfiprintf_r+0x1d6>
 800caea:	9b03      	ldr	r3, [sp, #12]
 800caec:	3307      	adds	r3, #7
 800caee:	f023 0307 	bic.w	r3, r3, #7
 800caf2:	3308      	adds	r3, #8
 800caf4:	9303      	str	r3, [sp, #12]
 800caf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caf8:	443b      	add	r3, r7
 800cafa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cafc:	e76a      	b.n	800c9d4 <_vfiprintf_r+0x78>
 800cafe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb02:	460c      	mov	r4, r1
 800cb04:	2001      	movs	r0, #1
 800cb06:	e7a8      	b.n	800ca5a <_vfiprintf_r+0xfe>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	3401      	adds	r4, #1
 800cb0c:	9305      	str	r3, [sp, #20]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	f04f 0c0a 	mov.w	ip, #10
 800cb14:	4620      	mov	r0, r4
 800cb16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb1a:	3a30      	subs	r2, #48	@ 0x30
 800cb1c:	2a09      	cmp	r2, #9
 800cb1e:	d903      	bls.n	800cb28 <_vfiprintf_r+0x1cc>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d0c6      	beq.n	800cab2 <_vfiprintf_r+0x156>
 800cb24:	9105      	str	r1, [sp, #20]
 800cb26:	e7c4      	b.n	800cab2 <_vfiprintf_r+0x156>
 800cb28:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e7f0      	b.n	800cb14 <_vfiprintf_r+0x1b8>
 800cb32:	ab03      	add	r3, sp, #12
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	462a      	mov	r2, r5
 800cb38:	4b12      	ldr	r3, [pc, #72]	@ (800cb84 <_vfiprintf_r+0x228>)
 800cb3a:	a904      	add	r1, sp, #16
 800cb3c:	4630      	mov	r0, r6
 800cb3e:	f3af 8000 	nop.w
 800cb42:	4607      	mov	r7, r0
 800cb44:	1c78      	adds	r0, r7, #1
 800cb46:	d1d6      	bne.n	800caf6 <_vfiprintf_r+0x19a>
 800cb48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb4a:	07d9      	lsls	r1, r3, #31
 800cb4c:	d405      	bmi.n	800cb5a <_vfiprintf_r+0x1fe>
 800cb4e:	89ab      	ldrh	r3, [r5, #12]
 800cb50:	059a      	lsls	r2, r3, #22
 800cb52:	d402      	bmi.n	800cb5a <_vfiprintf_r+0x1fe>
 800cb54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb56:	f7ff fb67 	bl	800c228 <__retarget_lock_release_recursive>
 800cb5a:	89ab      	ldrh	r3, [r5, #12]
 800cb5c:	065b      	lsls	r3, r3, #25
 800cb5e:	f53f af1f 	bmi.w	800c9a0 <_vfiprintf_r+0x44>
 800cb62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb64:	e71e      	b.n	800c9a4 <_vfiprintf_r+0x48>
 800cb66:	ab03      	add	r3, sp, #12
 800cb68:	9300      	str	r3, [sp, #0]
 800cb6a:	462a      	mov	r2, r5
 800cb6c:	4b05      	ldr	r3, [pc, #20]	@ (800cb84 <_vfiprintf_r+0x228>)
 800cb6e:	a904      	add	r1, sp, #16
 800cb70:	4630      	mov	r0, r6
 800cb72:	f000 f923 	bl	800cdbc <_printf_i>
 800cb76:	e7e4      	b.n	800cb42 <_vfiprintf_r+0x1e6>
 800cb78:	0800df68 	.word	0x0800df68
 800cb7c:	0800df72 	.word	0x0800df72
 800cb80:	00000000 	.word	0x00000000
 800cb84:	0800c937 	.word	0x0800c937
 800cb88:	0800df6e 	.word	0x0800df6e

0800cb8c <malloc>:
 800cb8c:	4b02      	ldr	r3, [pc, #8]	@ (800cb98 <malloc+0xc>)
 800cb8e:	4601      	mov	r1, r0
 800cb90:	6818      	ldr	r0, [r3, #0]
 800cb92:	f000 b825 	b.w	800cbe0 <_malloc_r>
 800cb96:	bf00      	nop
 800cb98:	20000044 	.word	0x20000044

0800cb9c <sbrk_aligned>:
 800cb9c:	b570      	push	{r4, r5, r6, lr}
 800cb9e:	4e0f      	ldr	r6, [pc, #60]	@ (800cbdc <sbrk_aligned+0x40>)
 800cba0:	460c      	mov	r4, r1
 800cba2:	6831      	ldr	r1, [r6, #0]
 800cba4:	4605      	mov	r5, r0
 800cba6:	b911      	cbnz	r1, 800cbae <sbrk_aligned+0x12>
 800cba8:	f000 fe6a 	bl	800d880 <_sbrk_r>
 800cbac:	6030      	str	r0, [r6, #0]
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	f000 fe65 	bl	800d880 <_sbrk_r>
 800cbb6:	1c43      	adds	r3, r0, #1
 800cbb8:	d103      	bne.n	800cbc2 <sbrk_aligned+0x26>
 800cbba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	bd70      	pop	{r4, r5, r6, pc}
 800cbc2:	1cc4      	adds	r4, r0, #3
 800cbc4:	f024 0403 	bic.w	r4, r4, #3
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d0f8      	beq.n	800cbbe <sbrk_aligned+0x22>
 800cbcc:	1a21      	subs	r1, r4, r0
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 fe56 	bl	800d880 <_sbrk_r>
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d1f2      	bne.n	800cbbe <sbrk_aligned+0x22>
 800cbd8:	e7ef      	b.n	800cbba <sbrk_aligned+0x1e>
 800cbda:	bf00      	nop
 800cbdc:	20002f34 	.word	0x20002f34

0800cbe0 <_malloc_r>:
 800cbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbe4:	1ccd      	adds	r5, r1, #3
 800cbe6:	f025 0503 	bic.w	r5, r5, #3
 800cbea:	3508      	adds	r5, #8
 800cbec:	2d0c      	cmp	r5, #12
 800cbee:	bf38      	it	cc
 800cbf0:	250c      	movcc	r5, #12
 800cbf2:	2d00      	cmp	r5, #0
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	db01      	blt.n	800cbfc <_malloc_r+0x1c>
 800cbf8:	42a9      	cmp	r1, r5
 800cbfa:	d904      	bls.n	800cc06 <_malloc_r+0x26>
 800cbfc:	230c      	movs	r3, #12
 800cbfe:	6033      	str	r3, [r6, #0]
 800cc00:	2000      	movs	r0, #0
 800cc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ccdc <_malloc_r+0xfc>
 800cc0a:	f000 fc2b 	bl	800d464 <__malloc_lock>
 800cc0e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc12:	461c      	mov	r4, r3
 800cc14:	bb44      	cbnz	r4, 800cc68 <_malloc_r+0x88>
 800cc16:	4629      	mov	r1, r5
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f7ff ffbf 	bl	800cb9c <sbrk_aligned>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	4604      	mov	r4, r0
 800cc22:	d158      	bne.n	800ccd6 <_malloc_r+0xf6>
 800cc24:	f8d8 4000 	ldr.w	r4, [r8]
 800cc28:	4627      	mov	r7, r4
 800cc2a:	2f00      	cmp	r7, #0
 800cc2c:	d143      	bne.n	800ccb6 <_malloc_r+0xd6>
 800cc2e:	2c00      	cmp	r4, #0
 800cc30:	d04b      	beq.n	800ccca <_malloc_r+0xea>
 800cc32:	6823      	ldr	r3, [r4, #0]
 800cc34:	4639      	mov	r1, r7
 800cc36:	4630      	mov	r0, r6
 800cc38:	eb04 0903 	add.w	r9, r4, r3
 800cc3c:	f000 fe20 	bl	800d880 <_sbrk_r>
 800cc40:	4581      	cmp	r9, r0
 800cc42:	d142      	bne.n	800ccca <_malloc_r+0xea>
 800cc44:	6821      	ldr	r1, [r4, #0]
 800cc46:	1a6d      	subs	r5, r5, r1
 800cc48:	4629      	mov	r1, r5
 800cc4a:	4630      	mov	r0, r6
 800cc4c:	f7ff ffa6 	bl	800cb9c <sbrk_aligned>
 800cc50:	3001      	adds	r0, #1
 800cc52:	d03a      	beq.n	800ccca <_malloc_r+0xea>
 800cc54:	6823      	ldr	r3, [r4, #0]
 800cc56:	442b      	add	r3, r5
 800cc58:	6023      	str	r3, [r4, #0]
 800cc5a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc5e:	685a      	ldr	r2, [r3, #4]
 800cc60:	bb62      	cbnz	r2, 800ccbc <_malloc_r+0xdc>
 800cc62:	f8c8 7000 	str.w	r7, [r8]
 800cc66:	e00f      	b.n	800cc88 <_malloc_r+0xa8>
 800cc68:	6822      	ldr	r2, [r4, #0]
 800cc6a:	1b52      	subs	r2, r2, r5
 800cc6c:	d420      	bmi.n	800ccb0 <_malloc_r+0xd0>
 800cc6e:	2a0b      	cmp	r2, #11
 800cc70:	d917      	bls.n	800cca2 <_malloc_r+0xc2>
 800cc72:	1961      	adds	r1, r4, r5
 800cc74:	42a3      	cmp	r3, r4
 800cc76:	6025      	str	r5, [r4, #0]
 800cc78:	bf18      	it	ne
 800cc7a:	6059      	strne	r1, [r3, #4]
 800cc7c:	6863      	ldr	r3, [r4, #4]
 800cc7e:	bf08      	it	eq
 800cc80:	f8c8 1000 	streq.w	r1, [r8]
 800cc84:	5162      	str	r2, [r4, r5]
 800cc86:	604b      	str	r3, [r1, #4]
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f000 fbf1 	bl	800d470 <__malloc_unlock>
 800cc8e:	f104 000b 	add.w	r0, r4, #11
 800cc92:	1d23      	adds	r3, r4, #4
 800cc94:	f020 0007 	bic.w	r0, r0, #7
 800cc98:	1ac2      	subs	r2, r0, r3
 800cc9a:	bf1c      	itt	ne
 800cc9c:	1a1b      	subne	r3, r3, r0
 800cc9e:	50a3      	strne	r3, [r4, r2]
 800cca0:	e7af      	b.n	800cc02 <_malloc_r+0x22>
 800cca2:	6862      	ldr	r2, [r4, #4]
 800cca4:	42a3      	cmp	r3, r4
 800cca6:	bf0c      	ite	eq
 800cca8:	f8c8 2000 	streq.w	r2, [r8]
 800ccac:	605a      	strne	r2, [r3, #4]
 800ccae:	e7eb      	b.n	800cc88 <_malloc_r+0xa8>
 800ccb0:	4623      	mov	r3, r4
 800ccb2:	6864      	ldr	r4, [r4, #4]
 800ccb4:	e7ae      	b.n	800cc14 <_malloc_r+0x34>
 800ccb6:	463c      	mov	r4, r7
 800ccb8:	687f      	ldr	r7, [r7, #4]
 800ccba:	e7b6      	b.n	800cc2a <_malloc_r+0x4a>
 800ccbc:	461a      	mov	r2, r3
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	d1fb      	bne.n	800ccbc <_malloc_r+0xdc>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	6053      	str	r3, [r2, #4]
 800ccc8:	e7de      	b.n	800cc88 <_malloc_r+0xa8>
 800ccca:	230c      	movs	r3, #12
 800cccc:	6033      	str	r3, [r6, #0]
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 fbce 	bl	800d470 <__malloc_unlock>
 800ccd4:	e794      	b.n	800cc00 <_malloc_r+0x20>
 800ccd6:	6005      	str	r5, [r0, #0]
 800ccd8:	e7d6      	b.n	800cc88 <_malloc_r+0xa8>
 800ccda:	bf00      	nop
 800ccdc:	20002f38 	.word	0x20002f38

0800cce0 <_printf_common>:
 800cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce4:	4616      	mov	r6, r2
 800cce6:	4698      	mov	r8, r3
 800cce8:	688a      	ldr	r2, [r1, #8]
 800ccea:	690b      	ldr	r3, [r1, #16]
 800ccec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	bfb8      	it	lt
 800ccf4:	4613      	movlt	r3, r2
 800ccf6:	6033      	str	r3, [r6, #0]
 800ccf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	460c      	mov	r4, r1
 800cd00:	b10a      	cbz	r2, 800cd06 <_printf_common+0x26>
 800cd02:	3301      	adds	r3, #1
 800cd04:	6033      	str	r3, [r6, #0]
 800cd06:	6823      	ldr	r3, [r4, #0]
 800cd08:	0699      	lsls	r1, r3, #26
 800cd0a:	bf42      	ittt	mi
 800cd0c:	6833      	ldrmi	r3, [r6, #0]
 800cd0e:	3302      	addmi	r3, #2
 800cd10:	6033      	strmi	r3, [r6, #0]
 800cd12:	6825      	ldr	r5, [r4, #0]
 800cd14:	f015 0506 	ands.w	r5, r5, #6
 800cd18:	d106      	bne.n	800cd28 <_printf_common+0x48>
 800cd1a:	f104 0a19 	add.w	sl, r4, #25
 800cd1e:	68e3      	ldr	r3, [r4, #12]
 800cd20:	6832      	ldr	r2, [r6, #0]
 800cd22:	1a9b      	subs	r3, r3, r2
 800cd24:	42ab      	cmp	r3, r5
 800cd26:	dc26      	bgt.n	800cd76 <_printf_common+0x96>
 800cd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cd2c:	6822      	ldr	r2, [r4, #0]
 800cd2e:	3b00      	subs	r3, #0
 800cd30:	bf18      	it	ne
 800cd32:	2301      	movne	r3, #1
 800cd34:	0692      	lsls	r2, r2, #26
 800cd36:	d42b      	bmi.n	800cd90 <_printf_common+0xb0>
 800cd38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd3c:	4641      	mov	r1, r8
 800cd3e:	4638      	mov	r0, r7
 800cd40:	47c8      	blx	r9
 800cd42:	3001      	adds	r0, #1
 800cd44:	d01e      	beq.n	800cd84 <_printf_common+0xa4>
 800cd46:	6823      	ldr	r3, [r4, #0]
 800cd48:	6922      	ldr	r2, [r4, #16]
 800cd4a:	f003 0306 	and.w	r3, r3, #6
 800cd4e:	2b04      	cmp	r3, #4
 800cd50:	bf02      	ittt	eq
 800cd52:	68e5      	ldreq	r5, [r4, #12]
 800cd54:	6833      	ldreq	r3, [r6, #0]
 800cd56:	1aed      	subeq	r5, r5, r3
 800cd58:	68a3      	ldr	r3, [r4, #8]
 800cd5a:	bf0c      	ite	eq
 800cd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd60:	2500      	movne	r5, #0
 800cd62:	4293      	cmp	r3, r2
 800cd64:	bfc4      	itt	gt
 800cd66:	1a9b      	subgt	r3, r3, r2
 800cd68:	18ed      	addgt	r5, r5, r3
 800cd6a:	2600      	movs	r6, #0
 800cd6c:	341a      	adds	r4, #26
 800cd6e:	42b5      	cmp	r5, r6
 800cd70:	d11a      	bne.n	800cda8 <_printf_common+0xc8>
 800cd72:	2000      	movs	r0, #0
 800cd74:	e008      	b.n	800cd88 <_printf_common+0xa8>
 800cd76:	2301      	movs	r3, #1
 800cd78:	4652      	mov	r2, sl
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	47c8      	blx	r9
 800cd80:	3001      	adds	r0, #1
 800cd82:	d103      	bne.n	800cd8c <_printf_common+0xac>
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8c:	3501      	adds	r5, #1
 800cd8e:	e7c6      	b.n	800cd1e <_printf_common+0x3e>
 800cd90:	18e1      	adds	r1, r4, r3
 800cd92:	1c5a      	adds	r2, r3, #1
 800cd94:	2030      	movs	r0, #48	@ 0x30
 800cd96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd9a:	4422      	add	r2, r4
 800cd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cda0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cda4:	3302      	adds	r3, #2
 800cda6:	e7c7      	b.n	800cd38 <_printf_common+0x58>
 800cda8:	2301      	movs	r3, #1
 800cdaa:	4622      	mov	r2, r4
 800cdac:	4641      	mov	r1, r8
 800cdae:	4638      	mov	r0, r7
 800cdb0:	47c8      	blx	r9
 800cdb2:	3001      	adds	r0, #1
 800cdb4:	d0e6      	beq.n	800cd84 <_printf_common+0xa4>
 800cdb6:	3601      	adds	r6, #1
 800cdb8:	e7d9      	b.n	800cd6e <_printf_common+0x8e>
	...

0800cdbc <_printf_i>:
 800cdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc0:	7e0f      	ldrb	r7, [r1, #24]
 800cdc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cdc4:	2f78      	cmp	r7, #120	@ 0x78
 800cdc6:	4691      	mov	r9, r2
 800cdc8:	4680      	mov	r8, r0
 800cdca:	460c      	mov	r4, r1
 800cdcc:	469a      	mov	sl, r3
 800cdce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cdd2:	d807      	bhi.n	800cde4 <_printf_i+0x28>
 800cdd4:	2f62      	cmp	r7, #98	@ 0x62
 800cdd6:	d80a      	bhi.n	800cdee <_printf_i+0x32>
 800cdd8:	2f00      	cmp	r7, #0
 800cdda:	f000 80d2 	beq.w	800cf82 <_printf_i+0x1c6>
 800cdde:	2f58      	cmp	r7, #88	@ 0x58
 800cde0:	f000 80b9 	beq.w	800cf56 <_printf_i+0x19a>
 800cde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cde8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdec:	e03a      	b.n	800ce64 <_printf_i+0xa8>
 800cdee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdf2:	2b15      	cmp	r3, #21
 800cdf4:	d8f6      	bhi.n	800cde4 <_printf_i+0x28>
 800cdf6:	a101      	add	r1, pc, #4	@ (adr r1, 800cdfc <_printf_i+0x40>)
 800cdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdfc:	0800ce55 	.word	0x0800ce55
 800ce00:	0800ce69 	.word	0x0800ce69
 800ce04:	0800cde5 	.word	0x0800cde5
 800ce08:	0800cde5 	.word	0x0800cde5
 800ce0c:	0800cde5 	.word	0x0800cde5
 800ce10:	0800cde5 	.word	0x0800cde5
 800ce14:	0800ce69 	.word	0x0800ce69
 800ce18:	0800cde5 	.word	0x0800cde5
 800ce1c:	0800cde5 	.word	0x0800cde5
 800ce20:	0800cde5 	.word	0x0800cde5
 800ce24:	0800cde5 	.word	0x0800cde5
 800ce28:	0800cf69 	.word	0x0800cf69
 800ce2c:	0800ce93 	.word	0x0800ce93
 800ce30:	0800cf23 	.word	0x0800cf23
 800ce34:	0800cde5 	.word	0x0800cde5
 800ce38:	0800cde5 	.word	0x0800cde5
 800ce3c:	0800cf8b 	.word	0x0800cf8b
 800ce40:	0800cde5 	.word	0x0800cde5
 800ce44:	0800ce93 	.word	0x0800ce93
 800ce48:	0800cde5 	.word	0x0800cde5
 800ce4c:	0800cde5 	.word	0x0800cde5
 800ce50:	0800cf2b 	.word	0x0800cf2b
 800ce54:	6833      	ldr	r3, [r6, #0]
 800ce56:	1d1a      	adds	r2, r3, #4
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	6032      	str	r2, [r6, #0]
 800ce5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce64:	2301      	movs	r3, #1
 800ce66:	e09d      	b.n	800cfa4 <_printf_i+0x1e8>
 800ce68:	6833      	ldr	r3, [r6, #0]
 800ce6a:	6820      	ldr	r0, [r4, #0]
 800ce6c:	1d19      	adds	r1, r3, #4
 800ce6e:	6031      	str	r1, [r6, #0]
 800ce70:	0606      	lsls	r6, r0, #24
 800ce72:	d501      	bpl.n	800ce78 <_printf_i+0xbc>
 800ce74:	681d      	ldr	r5, [r3, #0]
 800ce76:	e003      	b.n	800ce80 <_printf_i+0xc4>
 800ce78:	0645      	lsls	r5, r0, #25
 800ce7a:	d5fb      	bpl.n	800ce74 <_printf_i+0xb8>
 800ce7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce80:	2d00      	cmp	r5, #0
 800ce82:	da03      	bge.n	800ce8c <_printf_i+0xd0>
 800ce84:	232d      	movs	r3, #45	@ 0x2d
 800ce86:	426d      	negs	r5, r5
 800ce88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce8c:	4859      	ldr	r0, [pc, #356]	@ (800cff4 <_printf_i+0x238>)
 800ce8e:	230a      	movs	r3, #10
 800ce90:	e011      	b.n	800ceb6 <_printf_i+0xfa>
 800ce92:	6821      	ldr	r1, [r4, #0]
 800ce94:	6833      	ldr	r3, [r6, #0]
 800ce96:	0608      	lsls	r0, r1, #24
 800ce98:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce9c:	d402      	bmi.n	800cea4 <_printf_i+0xe8>
 800ce9e:	0649      	lsls	r1, r1, #25
 800cea0:	bf48      	it	mi
 800cea2:	b2ad      	uxthmi	r5, r5
 800cea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800cea6:	4853      	ldr	r0, [pc, #332]	@ (800cff4 <_printf_i+0x238>)
 800cea8:	6033      	str	r3, [r6, #0]
 800ceaa:	bf14      	ite	ne
 800ceac:	230a      	movne	r3, #10
 800ceae:	2308      	moveq	r3, #8
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ceb6:	6866      	ldr	r6, [r4, #4]
 800ceb8:	60a6      	str	r6, [r4, #8]
 800ceba:	2e00      	cmp	r6, #0
 800cebc:	bfa2      	ittt	ge
 800cebe:	6821      	ldrge	r1, [r4, #0]
 800cec0:	f021 0104 	bicge.w	r1, r1, #4
 800cec4:	6021      	strge	r1, [r4, #0]
 800cec6:	b90d      	cbnz	r5, 800cecc <_printf_i+0x110>
 800cec8:	2e00      	cmp	r6, #0
 800ceca:	d04b      	beq.n	800cf64 <_printf_i+0x1a8>
 800cecc:	4616      	mov	r6, r2
 800cece:	fbb5 f1f3 	udiv	r1, r5, r3
 800ced2:	fb03 5711 	mls	r7, r3, r1, r5
 800ced6:	5dc7      	ldrb	r7, [r0, r7]
 800ced8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cedc:	462f      	mov	r7, r5
 800cede:	42bb      	cmp	r3, r7
 800cee0:	460d      	mov	r5, r1
 800cee2:	d9f4      	bls.n	800cece <_printf_i+0x112>
 800cee4:	2b08      	cmp	r3, #8
 800cee6:	d10b      	bne.n	800cf00 <_printf_i+0x144>
 800cee8:	6823      	ldr	r3, [r4, #0]
 800ceea:	07df      	lsls	r7, r3, #31
 800ceec:	d508      	bpl.n	800cf00 <_printf_i+0x144>
 800ceee:	6923      	ldr	r3, [r4, #16]
 800cef0:	6861      	ldr	r1, [r4, #4]
 800cef2:	4299      	cmp	r1, r3
 800cef4:	bfde      	ittt	le
 800cef6:	2330      	movle	r3, #48	@ 0x30
 800cef8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cefc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cf00:	1b92      	subs	r2, r2, r6
 800cf02:	6122      	str	r2, [r4, #16]
 800cf04:	f8cd a000 	str.w	sl, [sp]
 800cf08:	464b      	mov	r3, r9
 800cf0a:	aa03      	add	r2, sp, #12
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	4640      	mov	r0, r8
 800cf10:	f7ff fee6 	bl	800cce0 <_printf_common>
 800cf14:	3001      	adds	r0, #1
 800cf16:	d14a      	bne.n	800cfae <_printf_i+0x1f2>
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf1c:	b004      	add	sp, #16
 800cf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf22:	6823      	ldr	r3, [r4, #0]
 800cf24:	f043 0320 	orr.w	r3, r3, #32
 800cf28:	6023      	str	r3, [r4, #0]
 800cf2a:	4833      	ldr	r0, [pc, #204]	@ (800cff8 <_printf_i+0x23c>)
 800cf2c:	2778      	movs	r7, #120	@ 0x78
 800cf2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	6831      	ldr	r1, [r6, #0]
 800cf36:	061f      	lsls	r7, r3, #24
 800cf38:	f851 5b04 	ldr.w	r5, [r1], #4
 800cf3c:	d402      	bmi.n	800cf44 <_printf_i+0x188>
 800cf3e:	065f      	lsls	r7, r3, #25
 800cf40:	bf48      	it	mi
 800cf42:	b2ad      	uxthmi	r5, r5
 800cf44:	6031      	str	r1, [r6, #0]
 800cf46:	07d9      	lsls	r1, r3, #31
 800cf48:	bf44      	itt	mi
 800cf4a:	f043 0320 	orrmi.w	r3, r3, #32
 800cf4e:	6023      	strmi	r3, [r4, #0]
 800cf50:	b11d      	cbz	r5, 800cf5a <_printf_i+0x19e>
 800cf52:	2310      	movs	r3, #16
 800cf54:	e7ac      	b.n	800ceb0 <_printf_i+0xf4>
 800cf56:	4827      	ldr	r0, [pc, #156]	@ (800cff4 <_printf_i+0x238>)
 800cf58:	e7e9      	b.n	800cf2e <_printf_i+0x172>
 800cf5a:	6823      	ldr	r3, [r4, #0]
 800cf5c:	f023 0320 	bic.w	r3, r3, #32
 800cf60:	6023      	str	r3, [r4, #0]
 800cf62:	e7f6      	b.n	800cf52 <_printf_i+0x196>
 800cf64:	4616      	mov	r6, r2
 800cf66:	e7bd      	b.n	800cee4 <_printf_i+0x128>
 800cf68:	6833      	ldr	r3, [r6, #0]
 800cf6a:	6825      	ldr	r5, [r4, #0]
 800cf6c:	6961      	ldr	r1, [r4, #20]
 800cf6e:	1d18      	adds	r0, r3, #4
 800cf70:	6030      	str	r0, [r6, #0]
 800cf72:	062e      	lsls	r6, r5, #24
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	d501      	bpl.n	800cf7c <_printf_i+0x1c0>
 800cf78:	6019      	str	r1, [r3, #0]
 800cf7a:	e002      	b.n	800cf82 <_printf_i+0x1c6>
 800cf7c:	0668      	lsls	r0, r5, #25
 800cf7e:	d5fb      	bpl.n	800cf78 <_printf_i+0x1bc>
 800cf80:	8019      	strh	r1, [r3, #0]
 800cf82:	2300      	movs	r3, #0
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	4616      	mov	r6, r2
 800cf88:	e7bc      	b.n	800cf04 <_printf_i+0x148>
 800cf8a:	6833      	ldr	r3, [r6, #0]
 800cf8c:	1d1a      	adds	r2, r3, #4
 800cf8e:	6032      	str	r2, [r6, #0]
 800cf90:	681e      	ldr	r6, [r3, #0]
 800cf92:	6862      	ldr	r2, [r4, #4]
 800cf94:	2100      	movs	r1, #0
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7f3 f932 	bl	8000200 <memchr>
 800cf9c:	b108      	cbz	r0, 800cfa2 <_printf_i+0x1e6>
 800cf9e:	1b80      	subs	r0, r0, r6
 800cfa0:	6060      	str	r0, [r4, #4]
 800cfa2:	6863      	ldr	r3, [r4, #4]
 800cfa4:	6123      	str	r3, [r4, #16]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfac:	e7aa      	b.n	800cf04 <_printf_i+0x148>
 800cfae:	6923      	ldr	r3, [r4, #16]
 800cfb0:	4632      	mov	r2, r6
 800cfb2:	4649      	mov	r1, r9
 800cfb4:	4640      	mov	r0, r8
 800cfb6:	47d0      	blx	sl
 800cfb8:	3001      	adds	r0, #1
 800cfba:	d0ad      	beq.n	800cf18 <_printf_i+0x15c>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	079b      	lsls	r3, r3, #30
 800cfc0:	d413      	bmi.n	800cfea <_printf_i+0x22e>
 800cfc2:	68e0      	ldr	r0, [r4, #12]
 800cfc4:	9b03      	ldr	r3, [sp, #12]
 800cfc6:	4298      	cmp	r0, r3
 800cfc8:	bfb8      	it	lt
 800cfca:	4618      	movlt	r0, r3
 800cfcc:	e7a6      	b.n	800cf1c <_printf_i+0x160>
 800cfce:	2301      	movs	r3, #1
 800cfd0:	4632      	mov	r2, r6
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	47d0      	blx	sl
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d09d      	beq.n	800cf18 <_printf_i+0x15c>
 800cfdc:	3501      	adds	r5, #1
 800cfde:	68e3      	ldr	r3, [r4, #12]
 800cfe0:	9903      	ldr	r1, [sp, #12]
 800cfe2:	1a5b      	subs	r3, r3, r1
 800cfe4:	42ab      	cmp	r3, r5
 800cfe6:	dcf2      	bgt.n	800cfce <_printf_i+0x212>
 800cfe8:	e7eb      	b.n	800cfc2 <_printf_i+0x206>
 800cfea:	2500      	movs	r5, #0
 800cfec:	f104 0619 	add.w	r6, r4, #25
 800cff0:	e7f5      	b.n	800cfde <_printf_i+0x222>
 800cff2:	bf00      	nop
 800cff4:	0800df79 	.word	0x0800df79
 800cff8:	0800df8a 	.word	0x0800df8a

0800cffc <_scanf_chars>:
 800cffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d000:	4615      	mov	r5, r2
 800d002:	688a      	ldr	r2, [r1, #8]
 800d004:	4680      	mov	r8, r0
 800d006:	460c      	mov	r4, r1
 800d008:	b932      	cbnz	r2, 800d018 <_scanf_chars+0x1c>
 800d00a:	698a      	ldr	r2, [r1, #24]
 800d00c:	2a00      	cmp	r2, #0
 800d00e:	bf14      	ite	ne
 800d010:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800d014:	2201      	moveq	r2, #1
 800d016:	608a      	str	r2, [r1, #8]
 800d018:	6822      	ldr	r2, [r4, #0]
 800d01a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d0ac <_scanf_chars+0xb0>
 800d01e:	06d1      	lsls	r1, r2, #27
 800d020:	bf5f      	itttt	pl
 800d022:	681a      	ldrpl	r2, [r3, #0]
 800d024:	1d11      	addpl	r1, r2, #4
 800d026:	6019      	strpl	r1, [r3, #0]
 800d028:	6816      	ldrpl	r6, [r2, #0]
 800d02a:	2700      	movs	r7, #0
 800d02c:	69a0      	ldr	r0, [r4, #24]
 800d02e:	b188      	cbz	r0, 800d054 <_scanf_chars+0x58>
 800d030:	2801      	cmp	r0, #1
 800d032:	d107      	bne.n	800d044 <_scanf_chars+0x48>
 800d034:	682b      	ldr	r3, [r5, #0]
 800d036:	781a      	ldrb	r2, [r3, #0]
 800d038:	6963      	ldr	r3, [r4, #20]
 800d03a:	5c9b      	ldrb	r3, [r3, r2]
 800d03c:	b953      	cbnz	r3, 800d054 <_scanf_chars+0x58>
 800d03e:	2f00      	cmp	r7, #0
 800d040:	d031      	beq.n	800d0a6 <_scanf_chars+0xaa>
 800d042:	e022      	b.n	800d08a <_scanf_chars+0x8e>
 800d044:	2802      	cmp	r0, #2
 800d046:	d120      	bne.n	800d08a <_scanf_chars+0x8e>
 800d048:	682b      	ldr	r3, [r5, #0]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800d050:	071b      	lsls	r3, r3, #28
 800d052:	d41a      	bmi.n	800d08a <_scanf_chars+0x8e>
 800d054:	6823      	ldr	r3, [r4, #0]
 800d056:	06da      	lsls	r2, r3, #27
 800d058:	bf5e      	ittt	pl
 800d05a:	682b      	ldrpl	r3, [r5, #0]
 800d05c:	781b      	ldrbpl	r3, [r3, #0]
 800d05e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d062:	682a      	ldr	r2, [r5, #0]
 800d064:	686b      	ldr	r3, [r5, #4]
 800d066:	3201      	adds	r2, #1
 800d068:	602a      	str	r2, [r5, #0]
 800d06a:	68a2      	ldr	r2, [r4, #8]
 800d06c:	3b01      	subs	r3, #1
 800d06e:	3a01      	subs	r2, #1
 800d070:	606b      	str	r3, [r5, #4]
 800d072:	3701      	adds	r7, #1
 800d074:	60a2      	str	r2, [r4, #8]
 800d076:	b142      	cbz	r2, 800d08a <_scanf_chars+0x8e>
 800d078:	2b00      	cmp	r3, #0
 800d07a:	dcd7      	bgt.n	800d02c <_scanf_chars+0x30>
 800d07c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d080:	4629      	mov	r1, r5
 800d082:	4640      	mov	r0, r8
 800d084:	4798      	blx	r3
 800d086:	2800      	cmp	r0, #0
 800d088:	d0d0      	beq.n	800d02c <_scanf_chars+0x30>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	f013 0310 	ands.w	r3, r3, #16
 800d090:	d105      	bne.n	800d09e <_scanf_chars+0xa2>
 800d092:	68e2      	ldr	r2, [r4, #12]
 800d094:	3201      	adds	r2, #1
 800d096:	60e2      	str	r2, [r4, #12]
 800d098:	69a2      	ldr	r2, [r4, #24]
 800d09a:	b102      	cbz	r2, 800d09e <_scanf_chars+0xa2>
 800d09c:	7033      	strb	r3, [r6, #0]
 800d09e:	6923      	ldr	r3, [r4, #16]
 800d0a0:	443b      	add	r3, r7
 800d0a2:	6123      	str	r3, [r4, #16]
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0aa:	bf00      	nop
 800d0ac:	0800dfb7 	.word	0x0800dfb7

0800d0b0 <_scanf_i>:
 800d0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b4:	4698      	mov	r8, r3
 800d0b6:	4b74      	ldr	r3, [pc, #464]	@ (800d288 <_scanf_i+0x1d8>)
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	4682      	mov	sl, r0
 800d0bc:	4616      	mov	r6, r2
 800d0be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	ab03      	add	r3, sp, #12
 800d0c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d0ca:	4b70      	ldr	r3, [pc, #448]	@ (800d28c <_scanf_i+0x1dc>)
 800d0cc:	69a1      	ldr	r1, [r4, #24]
 800d0ce:	4a70      	ldr	r2, [pc, #448]	@ (800d290 <_scanf_i+0x1e0>)
 800d0d0:	2903      	cmp	r1, #3
 800d0d2:	bf08      	it	eq
 800d0d4:	461a      	moveq	r2, r3
 800d0d6:	68a3      	ldr	r3, [r4, #8]
 800d0d8:	9201      	str	r2, [sp, #4]
 800d0da:	1e5a      	subs	r2, r3, #1
 800d0dc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d0e0:	bf88      	it	hi
 800d0e2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d0e6:	4627      	mov	r7, r4
 800d0e8:	bf82      	ittt	hi
 800d0ea:	eb03 0905 	addhi.w	r9, r3, r5
 800d0ee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d0f2:	60a3      	strhi	r3, [r4, #8]
 800d0f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d0f8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d0fc:	bf98      	it	ls
 800d0fe:	f04f 0900 	movls.w	r9, #0
 800d102:	6023      	str	r3, [r4, #0]
 800d104:	463d      	mov	r5, r7
 800d106:	f04f 0b00 	mov.w	fp, #0
 800d10a:	6831      	ldr	r1, [r6, #0]
 800d10c:	ab03      	add	r3, sp, #12
 800d10e:	7809      	ldrb	r1, [r1, #0]
 800d110:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d114:	2202      	movs	r2, #2
 800d116:	f7f3 f873 	bl	8000200 <memchr>
 800d11a:	b328      	cbz	r0, 800d168 <_scanf_i+0xb8>
 800d11c:	f1bb 0f01 	cmp.w	fp, #1
 800d120:	d159      	bne.n	800d1d6 <_scanf_i+0x126>
 800d122:	6862      	ldr	r2, [r4, #4]
 800d124:	b92a      	cbnz	r2, 800d132 <_scanf_i+0x82>
 800d126:	6822      	ldr	r2, [r4, #0]
 800d128:	2108      	movs	r1, #8
 800d12a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d12e:	6061      	str	r1, [r4, #4]
 800d130:	6022      	str	r2, [r4, #0]
 800d132:	6822      	ldr	r2, [r4, #0]
 800d134:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d138:	6022      	str	r2, [r4, #0]
 800d13a:	68a2      	ldr	r2, [r4, #8]
 800d13c:	1e51      	subs	r1, r2, #1
 800d13e:	60a1      	str	r1, [r4, #8]
 800d140:	b192      	cbz	r2, 800d168 <_scanf_i+0xb8>
 800d142:	6832      	ldr	r2, [r6, #0]
 800d144:	1c51      	adds	r1, r2, #1
 800d146:	6031      	str	r1, [r6, #0]
 800d148:	7812      	ldrb	r2, [r2, #0]
 800d14a:	f805 2b01 	strb.w	r2, [r5], #1
 800d14e:	6872      	ldr	r2, [r6, #4]
 800d150:	3a01      	subs	r2, #1
 800d152:	2a00      	cmp	r2, #0
 800d154:	6072      	str	r2, [r6, #4]
 800d156:	dc07      	bgt.n	800d168 <_scanf_i+0xb8>
 800d158:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d15c:	4631      	mov	r1, r6
 800d15e:	4650      	mov	r0, sl
 800d160:	4790      	blx	r2
 800d162:	2800      	cmp	r0, #0
 800d164:	f040 8085 	bne.w	800d272 <_scanf_i+0x1c2>
 800d168:	f10b 0b01 	add.w	fp, fp, #1
 800d16c:	f1bb 0f03 	cmp.w	fp, #3
 800d170:	d1cb      	bne.n	800d10a <_scanf_i+0x5a>
 800d172:	6863      	ldr	r3, [r4, #4]
 800d174:	b90b      	cbnz	r3, 800d17a <_scanf_i+0xca>
 800d176:	230a      	movs	r3, #10
 800d178:	6063      	str	r3, [r4, #4]
 800d17a:	6863      	ldr	r3, [r4, #4]
 800d17c:	4945      	ldr	r1, [pc, #276]	@ (800d294 <_scanf_i+0x1e4>)
 800d17e:	6960      	ldr	r0, [r4, #20]
 800d180:	1ac9      	subs	r1, r1, r3
 800d182:	f000 f889 	bl	800d298 <__sccl>
 800d186:	f04f 0b00 	mov.w	fp, #0
 800d18a:	68a3      	ldr	r3, [r4, #8]
 800d18c:	6822      	ldr	r2, [r4, #0]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d03d      	beq.n	800d20e <_scanf_i+0x15e>
 800d192:	6831      	ldr	r1, [r6, #0]
 800d194:	6960      	ldr	r0, [r4, #20]
 800d196:	f891 c000 	ldrb.w	ip, [r1]
 800d19a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d19e:	2800      	cmp	r0, #0
 800d1a0:	d035      	beq.n	800d20e <_scanf_i+0x15e>
 800d1a2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d1a6:	d124      	bne.n	800d1f2 <_scanf_i+0x142>
 800d1a8:	0510      	lsls	r0, r2, #20
 800d1aa:	d522      	bpl.n	800d1f2 <_scanf_i+0x142>
 800d1ac:	f10b 0b01 	add.w	fp, fp, #1
 800d1b0:	f1b9 0f00 	cmp.w	r9, #0
 800d1b4:	d003      	beq.n	800d1be <_scanf_i+0x10e>
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d1bc:	60a3      	str	r3, [r4, #8]
 800d1be:	6873      	ldr	r3, [r6, #4]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	6073      	str	r3, [r6, #4]
 800d1c6:	dd1b      	ble.n	800d200 <_scanf_i+0x150>
 800d1c8:	6833      	ldr	r3, [r6, #0]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	6033      	str	r3, [r6, #0]
 800d1ce:	68a3      	ldr	r3, [r4, #8]
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	60a3      	str	r3, [r4, #8]
 800d1d4:	e7d9      	b.n	800d18a <_scanf_i+0xda>
 800d1d6:	f1bb 0f02 	cmp.w	fp, #2
 800d1da:	d1ae      	bne.n	800d13a <_scanf_i+0x8a>
 800d1dc:	6822      	ldr	r2, [r4, #0]
 800d1de:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d1e2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d1e6:	d1bf      	bne.n	800d168 <_scanf_i+0xb8>
 800d1e8:	2110      	movs	r1, #16
 800d1ea:	6061      	str	r1, [r4, #4]
 800d1ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d1f0:	e7a2      	b.n	800d138 <_scanf_i+0x88>
 800d1f2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d1f6:	6022      	str	r2, [r4, #0]
 800d1f8:	780b      	ldrb	r3, [r1, #0]
 800d1fa:	f805 3b01 	strb.w	r3, [r5], #1
 800d1fe:	e7de      	b.n	800d1be <_scanf_i+0x10e>
 800d200:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d204:	4631      	mov	r1, r6
 800d206:	4650      	mov	r0, sl
 800d208:	4798      	blx	r3
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d0df      	beq.n	800d1ce <_scanf_i+0x11e>
 800d20e:	6823      	ldr	r3, [r4, #0]
 800d210:	05d9      	lsls	r1, r3, #23
 800d212:	d50d      	bpl.n	800d230 <_scanf_i+0x180>
 800d214:	42bd      	cmp	r5, r7
 800d216:	d909      	bls.n	800d22c <_scanf_i+0x17c>
 800d218:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d21c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d220:	4632      	mov	r2, r6
 800d222:	4650      	mov	r0, sl
 800d224:	4798      	blx	r3
 800d226:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800d22a:	464d      	mov	r5, r9
 800d22c:	42bd      	cmp	r5, r7
 800d22e:	d028      	beq.n	800d282 <_scanf_i+0x1d2>
 800d230:	6822      	ldr	r2, [r4, #0]
 800d232:	f012 0210 	ands.w	r2, r2, #16
 800d236:	d113      	bne.n	800d260 <_scanf_i+0x1b0>
 800d238:	702a      	strb	r2, [r5, #0]
 800d23a:	6863      	ldr	r3, [r4, #4]
 800d23c:	9e01      	ldr	r6, [sp, #4]
 800d23e:	4639      	mov	r1, r7
 800d240:	4650      	mov	r0, sl
 800d242:	47b0      	blx	r6
 800d244:	f8d8 3000 	ldr.w	r3, [r8]
 800d248:	6821      	ldr	r1, [r4, #0]
 800d24a:	1d1a      	adds	r2, r3, #4
 800d24c:	f8c8 2000 	str.w	r2, [r8]
 800d250:	f011 0f20 	tst.w	r1, #32
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	d00f      	beq.n	800d278 <_scanf_i+0x1c8>
 800d258:	6018      	str	r0, [r3, #0]
 800d25a:	68e3      	ldr	r3, [r4, #12]
 800d25c:	3301      	adds	r3, #1
 800d25e:	60e3      	str	r3, [r4, #12]
 800d260:	6923      	ldr	r3, [r4, #16]
 800d262:	1bed      	subs	r5, r5, r7
 800d264:	445d      	add	r5, fp
 800d266:	442b      	add	r3, r5
 800d268:	6123      	str	r3, [r4, #16]
 800d26a:	2000      	movs	r0, #0
 800d26c:	b007      	add	sp, #28
 800d26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d272:	f04f 0b00 	mov.w	fp, #0
 800d276:	e7ca      	b.n	800d20e <_scanf_i+0x15e>
 800d278:	07ca      	lsls	r2, r1, #31
 800d27a:	bf4c      	ite	mi
 800d27c:	8018      	strhmi	r0, [r3, #0]
 800d27e:	6018      	strpl	r0, [r3, #0]
 800d280:	e7eb      	b.n	800d25a <_scanf_i+0x1aa>
 800d282:	2001      	movs	r0, #1
 800d284:	e7f2      	b.n	800d26c <_scanf_i+0x1bc>
 800d286:	bf00      	nop
 800d288:	0800dac0 	.word	0x0800dac0
 800d28c:	0800d641 	.word	0x0800d641
 800d290:	0800d721 	.word	0x0800d721
 800d294:	0800dfab 	.word	0x0800dfab

0800d298 <__sccl>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	780b      	ldrb	r3, [r1, #0]
 800d29c:	4604      	mov	r4, r0
 800d29e:	2b5e      	cmp	r3, #94	@ 0x5e
 800d2a0:	bf0b      	itete	eq
 800d2a2:	784b      	ldrbeq	r3, [r1, #1]
 800d2a4:	1c4a      	addne	r2, r1, #1
 800d2a6:	1c8a      	addeq	r2, r1, #2
 800d2a8:	2100      	movne	r1, #0
 800d2aa:	bf08      	it	eq
 800d2ac:	2101      	moveq	r1, #1
 800d2ae:	3801      	subs	r0, #1
 800d2b0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d2b4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d2b8:	42a8      	cmp	r0, r5
 800d2ba:	d1fb      	bne.n	800d2b4 <__sccl+0x1c>
 800d2bc:	b90b      	cbnz	r3, 800d2c2 <__sccl+0x2a>
 800d2be:	1e50      	subs	r0, r2, #1
 800d2c0:	bd70      	pop	{r4, r5, r6, pc}
 800d2c2:	f081 0101 	eor.w	r1, r1, #1
 800d2c6:	54e1      	strb	r1, [r4, r3]
 800d2c8:	4610      	mov	r0, r2
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d2d0:	2d2d      	cmp	r5, #45	@ 0x2d
 800d2d2:	d005      	beq.n	800d2e0 <__sccl+0x48>
 800d2d4:	2d5d      	cmp	r5, #93	@ 0x5d
 800d2d6:	d016      	beq.n	800d306 <__sccl+0x6e>
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	d0f1      	beq.n	800d2c0 <__sccl+0x28>
 800d2dc:	462b      	mov	r3, r5
 800d2de:	e7f2      	b.n	800d2c6 <__sccl+0x2e>
 800d2e0:	7846      	ldrb	r6, [r0, #1]
 800d2e2:	2e5d      	cmp	r6, #93	@ 0x5d
 800d2e4:	d0fa      	beq.n	800d2dc <__sccl+0x44>
 800d2e6:	42b3      	cmp	r3, r6
 800d2e8:	dcf8      	bgt.n	800d2dc <__sccl+0x44>
 800d2ea:	3002      	adds	r0, #2
 800d2ec:	461a      	mov	r2, r3
 800d2ee:	3201      	adds	r2, #1
 800d2f0:	4296      	cmp	r6, r2
 800d2f2:	54a1      	strb	r1, [r4, r2]
 800d2f4:	dcfb      	bgt.n	800d2ee <__sccl+0x56>
 800d2f6:	1af2      	subs	r2, r6, r3
 800d2f8:	3a01      	subs	r2, #1
 800d2fa:	1c5d      	adds	r5, r3, #1
 800d2fc:	42b3      	cmp	r3, r6
 800d2fe:	bfa8      	it	ge
 800d300:	2200      	movge	r2, #0
 800d302:	18ab      	adds	r3, r5, r2
 800d304:	e7e1      	b.n	800d2ca <__sccl+0x32>
 800d306:	4610      	mov	r0, r2
 800d308:	e7da      	b.n	800d2c0 <__sccl+0x28>
	...

0800d30c <__sflush_r>:
 800d30c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d314:	0716      	lsls	r6, r2, #28
 800d316:	4605      	mov	r5, r0
 800d318:	460c      	mov	r4, r1
 800d31a:	d454      	bmi.n	800d3c6 <__sflush_r+0xba>
 800d31c:	684b      	ldr	r3, [r1, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	dc02      	bgt.n	800d328 <__sflush_r+0x1c>
 800d322:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d324:	2b00      	cmp	r3, #0
 800d326:	dd48      	ble.n	800d3ba <__sflush_r+0xae>
 800d328:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d32a:	2e00      	cmp	r6, #0
 800d32c:	d045      	beq.n	800d3ba <__sflush_r+0xae>
 800d32e:	2300      	movs	r3, #0
 800d330:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d334:	682f      	ldr	r7, [r5, #0]
 800d336:	6a21      	ldr	r1, [r4, #32]
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	d030      	beq.n	800d39e <__sflush_r+0x92>
 800d33c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d33e:	89a3      	ldrh	r3, [r4, #12]
 800d340:	0759      	lsls	r1, r3, #29
 800d342:	d505      	bpl.n	800d350 <__sflush_r+0x44>
 800d344:	6863      	ldr	r3, [r4, #4]
 800d346:	1ad2      	subs	r2, r2, r3
 800d348:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d34a:	b10b      	cbz	r3, 800d350 <__sflush_r+0x44>
 800d34c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	2300      	movs	r3, #0
 800d352:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d354:	6a21      	ldr	r1, [r4, #32]
 800d356:	4628      	mov	r0, r5
 800d358:	47b0      	blx	r6
 800d35a:	1c43      	adds	r3, r0, #1
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	d106      	bne.n	800d36e <__sflush_r+0x62>
 800d360:	6829      	ldr	r1, [r5, #0]
 800d362:	291d      	cmp	r1, #29
 800d364:	d82b      	bhi.n	800d3be <__sflush_r+0xb2>
 800d366:	4a2a      	ldr	r2, [pc, #168]	@ (800d410 <__sflush_r+0x104>)
 800d368:	410a      	asrs	r2, r1
 800d36a:	07d6      	lsls	r6, r2, #31
 800d36c:	d427      	bmi.n	800d3be <__sflush_r+0xb2>
 800d36e:	2200      	movs	r2, #0
 800d370:	6062      	str	r2, [r4, #4]
 800d372:	04d9      	lsls	r1, r3, #19
 800d374:	6922      	ldr	r2, [r4, #16]
 800d376:	6022      	str	r2, [r4, #0]
 800d378:	d504      	bpl.n	800d384 <__sflush_r+0x78>
 800d37a:	1c42      	adds	r2, r0, #1
 800d37c:	d101      	bne.n	800d382 <__sflush_r+0x76>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	b903      	cbnz	r3, 800d384 <__sflush_r+0x78>
 800d382:	6560      	str	r0, [r4, #84]	@ 0x54
 800d384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d386:	602f      	str	r7, [r5, #0]
 800d388:	b1b9      	cbz	r1, 800d3ba <__sflush_r+0xae>
 800d38a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d38e:	4299      	cmp	r1, r3
 800d390:	d002      	beq.n	800d398 <__sflush_r+0x8c>
 800d392:	4628      	mov	r0, r5
 800d394:	f7fe ff4a 	bl	800c22c <_free_r>
 800d398:	2300      	movs	r3, #0
 800d39a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d39c:	e00d      	b.n	800d3ba <__sflush_r+0xae>
 800d39e:	2301      	movs	r3, #1
 800d3a0:	4628      	mov	r0, r5
 800d3a2:	47b0      	blx	r6
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	1c50      	adds	r0, r2, #1
 800d3a8:	d1c9      	bne.n	800d33e <__sflush_r+0x32>
 800d3aa:	682b      	ldr	r3, [r5, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d0c6      	beq.n	800d33e <__sflush_r+0x32>
 800d3b0:	2b1d      	cmp	r3, #29
 800d3b2:	d001      	beq.n	800d3b8 <__sflush_r+0xac>
 800d3b4:	2b16      	cmp	r3, #22
 800d3b6:	d11e      	bne.n	800d3f6 <__sflush_r+0xea>
 800d3b8:	602f      	str	r7, [r5, #0]
 800d3ba:	2000      	movs	r0, #0
 800d3bc:	e022      	b.n	800d404 <__sflush_r+0xf8>
 800d3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c2:	b21b      	sxth	r3, r3
 800d3c4:	e01b      	b.n	800d3fe <__sflush_r+0xf2>
 800d3c6:	690f      	ldr	r7, [r1, #16]
 800d3c8:	2f00      	cmp	r7, #0
 800d3ca:	d0f6      	beq.n	800d3ba <__sflush_r+0xae>
 800d3cc:	0793      	lsls	r3, r2, #30
 800d3ce:	680e      	ldr	r6, [r1, #0]
 800d3d0:	bf08      	it	eq
 800d3d2:	694b      	ldreq	r3, [r1, #20]
 800d3d4:	600f      	str	r7, [r1, #0]
 800d3d6:	bf18      	it	ne
 800d3d8:	2300      	movne	r3, #0
 800d3da:	eba6 0807 	sub.w	r8, r6, r7
 800d3de:	608b      	str	r3, [r1, #8]
 800d3e0:	f1b8 0f00 	cmp.w	r8, #0
 800d3e4:	dde9      	ble.n	800d3ba <__sflush_r+0xae>
 800d3e6:	6a21      	ldr	r1, [r4, #32]
 800d3e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3ea:	4643      	mov	r3, r8
 800d3ec:	463a      	mov	r2, r7
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	47b0      	blx	r6
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	dc08      	bgt.n	800d408 <__sflush_r+0xfc>
 800d3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3fe:	81a3      	strh	r3, [r4, #12]
 800d400:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d408:	4407      	add	r7, r0
 800d40a:	eba8 0800 	sub.w	r8, r8, r0
 800d40e:	e7e7      	b.n	800d3e0 <__sflush_r+0xd4>
 800d410:	dfbffffe 	.word	0xdfbffffe

0800d414 <_fflush_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	690b      	ldr	r3, [r1, #16]
 800d418:	4605      	mov	r5, r0
 800d41a:	460c      	mov	r4, r1
 800d41c:	b913      	cbnz	r3, 800d424 <_fflush_r+0x10>
 800d41e:	2500      	movs	r5, #0
 800d420:	4628      	mov	r0, r5
 800d422:	bd38      	pop	{r3, r4, r5, pc}
 800d424:	b118      	cbz	r0, 800d42e <_fflush_r+0x1a>
 800d426:	6a03      	ldr	r3, [r0, #32]
 800d428:	b90b      	cbnz	r3, 800d42e <_fflush_r+0x1a>
 800d42a:	f7fe fd59 	bl	800bee0 <__sinit>
 800d42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d0f3      	beq.n	800d41e <_fflush_r+0xa>
 800d436:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d438:	07d0      	lsls	r0, r2, #31
 800d43a:	d404      	bmi.n	800d446 <_fflush_r+0x32>
 800d43c:	0599      	lsls	r1, r3, #22
 800d43e:	d402      	bmi.n	800d446 <_fflush_r+0x32>
 800d440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d442:	f7fe fef0 	bl	800c226 <__retarget_lock_acquire_recursive>
 800d446:	4628      	mov	r0, r5
 800d448:	4621      	mov	r1, r4
 800d44a:	f7ff ff5f 	bl	800d30c <__sflush_r>
 800d44e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d450:	07da      	lsls	r2, r3, #31
 800d452:	4605      	mov	r5, r0
 800d454:	d4e4      	bmi.n	800d420 <_fflush_r+0xc>
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	059b      	lsls	r3, r3, #22
 800d45a:	d4e1      	bmi.n	800d420 <_fflush_r+0xc>
 800d45c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d45e:	f7fe fee3 	bl	800c228 <__retarget_lock_release_recursive>
 800d462:	e7dd      	b.n	800d420 <_fflush_r+0xc>

0800d464 <__malloc_lock>:
 800d464:	4801      	ldr	r0, [pc, #4]	@ (800d46c <__malloc_lock+0x8>)
 800d466:	f7fe bede 	b.w	800c226 <__retarget_lock_acquire_recursive>
 800d46a:	bf00      	nop
 800d46c:	20002f30 	.word	0x20002f30

0800d470 <__malloc_unlock>:
 800d470:	4801      	ldr	r0, [pc, #4]	@ (800d478 <__malloc_unlock+0x8>)
 800d472:	f7fe bed9 	b.w	800c228 <__retarget_lock_release_recursive>
 800d476:	bf00      	nop
 800d478:	20002f30 	.word	0x20002f30

0800d47c <__submore>:
 800d47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d480:	460c      	mov	r4, r1
 800d482:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d484:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d488:	4299      	cmp	r1, r3
 800d48a:	d11d      	bne.n	800d4c8 <__submore+0x4c>
 800d48c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d490:	f7ff fba6 	bl	800cbe0 <_malloc_r>
 800d494:	b918      	cbnz	r0, 800d49e <__submore+0x22>
 800d496:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d49e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4a2:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d4a4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d4a8:	6360      	str	r0, [r4, #52]	@ 0x34
 800d4aa:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d4ae:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d4b2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d4b6:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d4ba:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d4be:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d4c2:	6020      	str	r0, [r4, #0]
 800d4c4:	2000      	movs	r0, #0
 800d4c6:	e7e8      	b.n	800d49a <__submore+0x1e>
 800d4c8:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d4ca:	0077      	lsls	r7, r6, #1
 800d4cc:	463a      	mov	r2, r7
 800d4ce:	f000 f80f 	bl	800d4f0 <_realloc_r>
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	2800      	cmp	r0, #0
 800d4d6:	d0de      	beq.n	800d496 <__submore+0x1a>
 800d4d8:	eb00 0806 	add.w	r8, r0, r6
 800d4dc:	4601      	mov	r1, r0
 800d4de:	4632      	mov	r2, r6
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	f000 f9dd 	bl	800d8a0 <memcpy>
 800d4e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d4ea:	f8c4 8000 	str.w	r8, [r4]
 800d4ee:	e7e9      	b.n	800d4c4 <__submore+0x48>

0800d4f0 <_realloc_r>:
 800d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f4:	4680      	mov	r8, r0
 800d4f6:	4615      	mov	r5, r2
 800d4f8:	460c      	mov	r4, r1
 800d4fa:	b921      	cbnz	r1, 800d506 <_realloc_r+0x16>
 800d4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d500:	4611      	mov	r1, r2
 800d502:	f7ff bb6d 	b.w	800cbe0 <_malloc_r>
 800d506:	b92a      	cbnz	r2, 800d514 <_realloc_r+0x24>
 800d508:	f7fe fe90 	bl	800c22c <_free_r>
 800d50c:	2400      	movs	r4, #0
 800d50e:	4620      	mov	r0, r4
 800d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d514:	f000 f9d2 	bl	800d8bc <_malloc_usable_size_r>
 800d518:	4285      	cmp	r5, r0
 800d51a:	4606      	mov	r6, r0
 800d51c:	d802      	bhi.n	800d524 <_realloc_r+0x34>
 800d51e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d522:	d8f4      	bhi.n	800d50e <_realloc_r+0x1e>
 800d524:	4629      	mov	r1, r5
 800d526:	4640      	mov	r0, r8
 800d528:	f7ff fb5a 	bl	800cbe0 <_malloc_r>
 800d52c:	4607      	mov	r7, r0
 800d52e:	2800      	cmp	r0, #0
 800d530:	d0ec      	beq.n	800d50c <_realloc_r+0x1c>
 800d532:	42b5      	cmp	r5, r6
 800d534:	462a      	mov	r2, r5
 800d536:	4621      	mov	r1, r4
 800d538:	bf28      	it	cs
 800d53a:	4632      	movcs	r2, r6
 800d53c:	f000 f9b0 	bl	800d8a0 <memcpy>
 800d540:	4621      	mov	r1, r4
 800d542:	4640      	mov	r0, r8
 800d544:	f7fe fe72 	bl	800c22c <_free_r>
 800d548:	463c      	mov	r4, r7
 800d54a:	e7e0      	b.n	800d50e <_realloc_r+0x1e>

0800d54c <_strtol_l.constprop.0>:
 800d54c:	2b24      	cmp	r3, #36	@ 0x24
 800d54e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d552:	4686      	mov	lr, r0
 800d554:	4690      	mov	r8, r2
 800d556:	d801      	bhi.n	800d55c <_strtol_l.constprop.0+0x10>
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d106      	bne.n	800d56a <_strtol_l.constprop.0+0x1e>
 800d55c:	f7fe fe38 	bl	800c1d0 <__errno>
 800d560:	2316      	movs	r3, #22
 800d562:	6003      	str	r3, [r0, #0]
 800d564:	2000      	movs	r0, #0
 800d566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56a:	4834      	ldr	r0, [pc, #208]	@ (800d63c <_strtol_l.constprop.0+0xf0>)
 800d56c:	460d      	mov	r5, r1
 800d56e:	462a      	mov	r2, r5
 800d570:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d574:	5d06      	ldrb	r6, [r0, r4]
 800d576:	f016 0608 	ands.w	r6, r6, #8
 800d57a:	d1f8      	bne.n	800d56e <_strtol_l.constprop.0+0x22>
 800d57c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d57e:	d12d      	bne.n	800d5dc <_strtol_l.constprop.0+0x90>
 800d580:	782c      	ldrb	r4, [r5, #0]
 800d582:	2601      	movs	r6, #1
 800d584:	1c95      	adds	r5, r2, #2
 800d586:	f033 0210 	bics.w	r2, r3, #16
 800d58a:	d109      	bne.n	800d5a0 <_strtol_l.constprop.0+0x54>
 800d58c:	2c30      	cmp	r4, #48	@ 0x30
 800d58e:	d12a      	bne.n	800d5e6 <_strtol_l.constprop.0+0x9a>
 800d590:	782a      	ldrb	r2, [r5, #0]
 800d592:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d596:	2a58      	cmp	r2, #88	@ 0x58
 800d598:	d125      	bne.n	800d5e6 <_strtol_l.constprop.0+0x9a>
 800d59a:	786c      	ldrb	r4, [r5, #1]
 800d59c:	2310      	movs	r3, #16
 800d59e:	3502      	adds	r5, #2
 800d5a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d5a4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	fbbc f9f3 	udiv	r9, ip, r3
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d5b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d5b8:	2f09      	cmp	r7, #9
 800d5ba:	d81b      	bhi.n	800d5f4 <_strtol_l.constprop.0+0xa8>
 800d5bc:	463c      	mov	r4, r7
 800d5be:	42a3      	cmp	r3, r4
 800d5c0:	dd27      	ble.n	800d612 <_strtol_l.constprop.0+0xc6>
 800d5c2:	1c57      	adds	r7, r2, #1
 800d5c4:	d007      	beq.n	800d5d6 <_strtol_l.constprop.0+0x8a>
 800d5c6:	4581      	cmp	r9, r0
 800d5c8:	d320      	bcc.n	800d60c <_strtol_l.constprop.0+0xc0>
 800d5ca:	d101      	bne.n	800d5d0 <_strtol_l.constprop.0+0x84>
 800d5cc:	45a2      	cmp	sl, r4
 800d5ce:	db1d      	blt.n	800d60c <_strtol_l.constprop.0+0xc0>
 800d5d0:	fb00 4003 	mla	r0, r0, r3, r4
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5da:	e7eb      	b.n	800d5b4 <_strtol_l.constprop.0+0x68>
 800d5dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800d5de:	bf04      	itt	eq
 800d5e0:	782c      	ldrbeq	r4, [r5, #0]
 800d5e2:	1c95      	addeq	r5, r2, #2
 800d5e4:	e7cf      	b.n	800d586 <_strtol_l.constprop.0+0x3a>
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1da      	bne.n	800d5a0 <_strtol_l.constprop.0+0x54>
 800d5ea:	2c30      	cmp	r4, #48	@ 0x30
 800d5ec:	bf0c      	ite	eq
 800d5ee:	2308      	moveq	r3, #8
 800d5f0:	230a      	movne	r3, #10
 800d5f2:	e7d5      	b.n	800d5a0 <_strtol_l.constprop.0+0x54>
 800d5f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d5f8:	2f19      	cmp	r7, #25
 800d5fa:	d801      	bhi.n	800d600 <_strtol_l.constprop.0+0xb4>
 800d5fc:	3c37      	subs	r4, #55	@ 0x37
 800d5fe:	e7de      	b.n	800d5be <_strtol_l.constprop.0+0x72>
 800d600:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d604:	2f19      	cmp	r7, #25
 800d606:	d804      	bhi.n	800d612 <_strtol_l.constprop.0+0xc6>
 800d608:	3c57      	subs	r4, #87	@ 0x57
 800d60a:	e7d8      	b.n	800d5be <_strtol_l.constprop.0+0x72>
 800d60c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d610:	e7e1      	b.n	800d5d6 <_strtol_l.constprop.0+0x8a>
 800d612:	1c53      	adds	r3, r2, #1
 800d614:	d108      	bne.n	800d628 <_strtol_l.constprop.0+0xdc>
 800d616:	2322      	movs	r3, #34	@ 0x22
 800d618:	f8ce 3000 	str.w	r3, [lr]
 800d61c:	4660      	mov	r0, ip
 800d61e:	f1b8 0f00 	cmp.w	r8, #0
 800d622:	d0a0      	beq.n	800d566 <_strtol_l.constprop.0+0x1a>
 800d624:	1e69      	subs	r1, r5, #1
 800d626:	e006      	b.n	800d636 <_strtol_l.constprop.0+0xea>
 800d628:	b106      	cbz	r6, 800d62c <_strtol_l.constprop.0+0xe0>
 800d62a:	4240      	negs	r0, r0
 800d62c:	f1b8 0f00 	cmp.w	r8, #0
 800d630:	d099      	beq.n	800d566 <_strtol_l.constprop.0+0x1a>
 800d632:	2a00      	cmp	r2, #0
 800d634:	d1f6      	bne.n	800d624 <_strtol_l.constprop.0+0xd8>
 800d636:	f8c8 1000 	str.w	r1, [r8]
 800d63a:	e794      	b.n	800d566 <_strtol_l.constprop.0+0x1a>
 800d63c:	0800dfb7 	.word	0x0800dfb7

0800d640 <_strtol_r>:
 800d640:	f7ff bf84 	b.w	800d54c <_strtol_l.constprop.0>

0800d644 <_strtoul_l.constprop.0>:
 800d644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d648:	4e34      	ldr	r6, [pc, #208]	@ (800d71c <_strtoul_l.constprop.0+0xd8>)
 800d64a:	4686      	mov	lr, r0
 800d64c:	460d      	mov	r5, r1
 800d64e:	4628      	mov	r0, r5
 800d650:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d654:	5d37      	ldrb	r7, [r6, r4]
 800d656:	f017 0708 	ands.w	r7, r7, #8
 800d65a:	d1f8      	bne.n	800d64e <_strtoul_l.constprop.0+0xa>
 800d65c:	2c2d      	cmp	r4, #45	@ 0x2d
 800d65e:	d12f      	bne.n	800d6c0 <_strtoul_l.constprop.0+0x7c>
 800d660:	782c      	ldrb	r4, [r5, #0]
 800d662:	2701      	movs	r7, #1
 800d664:	1c85      	adds	r5, r0, #2
 800d666:	f033 0010 	bics.w	r0, r3, #16
 800d66a:	d109      	bne.n	800d680 <_strtoul_l.constprop.0+0x3c>
 800d66c:	2c30      	cmp	r4, #48	@ 0x30
 800d66e:	d12c      	bne.n	800d6ca <_strtoul_l.constprop.0+0x86>
 800d670:	7828      	ldrb	r0, [r5, #0]
 800d672:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d676:	2858      	cmp	r0, #88	@ 0x58
 800d678:	d127      	bne.n	800d6ca <_strtoul_l.constprop.0+0x86>
 800d67a:	786c      	ldrb	r4, [r5, #1]
 800d67c:	2310      	movs	r3, #16
 800d67e:	3502      	adds	r5, #2
 800d680:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800d684:	2600      	movs	r6, #0
 800d686:	fbb8 f8f3 	udiv	r8, r8, r3
 800d68a:	fb03 f908 	mul.w	r9, r3, r8
 800d68e:	ea6f 0909 	mvn.w	r9, r9
 800d692:	4630      	mov	r0, r6
 800d694:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d698:	f1bc 0f09 	cmp.w	ip, #9
 800d69c:	d81c      	bhi.n	800d6d8 <_strtoul_l.constprop.0+0x94>
 800d69e:	4664      	mov	r4, ip
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	dd2a      	ble.n	800d6fa <_strtoul_l.constprop.0+0xb6>
 800d6a4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800d6a8:	d007      	beq.n	800d6ba <_strtoul_l.constprop.0+0x76>
 800d6aa:	4580      	cmp	r8, r0
 800d6ac:	d322      	bcc.n	800d6f4 <_strtoul_l.constprop.0+0xb0>
 800d6ae:	d101      	bne.n	800d6b4 <_strtoul_l.constprop.0+0x70>
 800d6b0:	45a1      	cmp	r9, r4
 800d6b2:	db1f      	blt.n	800d6f4 <_strtoul_l.constprop.0+0xb0>
 800d6b4:	fb00 4003 	mla	r0, r0, r3, r4
 800d6b8:	2601      	movs	r6, #1
 800d6ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6be:	e7e9      	b.n	800d694 <_strtoul_l.constprop.0+0x50>
 800d6c0:	2c2b      	cmp	r4, #43	@ 0x2b
 800d6c2:	bf04      	itt	eq
 800d6c4:	782c      	ldrbeq	r4, [r5, #0]
 800d6c6:	1c85      	addeq	r5, r0, #2
 800d6c8:	e7cd      	b.n	800d666 <_strtoul_l.constprop.0+0x22>
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1d8      	bne.n	800d680 <_strtoul_l.constprop.0+0x3c>
 800d6ce:	2c30      	cmp	r4, #48	@ 0x30
 800d6d0:	bf0c      	ite	eq
 800d6d2:	2308      	moveq	r3, #8
 800d6d4:	230a      	movne	r3, #10
 800d6d6:	e7d3      	b.n	800d680 <_strtoul_l.constprop.0+0x3c>
 800d6d8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d6dc:	f1bc 0f19 	cmp.w	ip, #25
 800d6e0:	d801      	bhi.n	800d6e6 <_strtoul_l.constprop.0+0xa2>
 800d6e2:	3c37      	subs	r4, #55	@ 0x37
 800d6e4:	e7dc      	b.n	800d6a0 <_strtoul_l.constprop.0+0x5c>
 800d6e6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d6ea:	f1bc 0f19 	cmp.w	ip, #25
 800d6ee:	d804      	bhi.n	800d6fa <_strtoul_l.constprop.0+0xb6>
 800d6f0:	3c57      	subs	r4, #87	@ 0x57
 800d6f2:	e7d5      	b.n	800d6a0 <_strtoul_l.constprop.0+0x5c>
 800d6f4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800d6f8:	e7df      	b.n	800d6ba <_strtoul_l.constprop.0+0x76>
 800d6fa:	1c73      	adds	r3, r6, #1
 800d6fc:	d106      	bne.n	800d70c <_strtoul_l.constprop.0+0xc8>
 800d6fe:	2322      	movs	r3, #34	@ 0x22
 800d700:	f8ce 3000 	str.w	r3, [lr]
 800d704:	4630      	mov	r0, r6
 800d706:	b932      	cbnz	r2, 800d716 <_strtoul_l.constprop.0+0xd2>
 800d708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d70c:	b107      	cbz	r7, 800d710 <_strtoul_l.constprop.0+0xcc>
 800d70e:	4240      	negs	r0, r0
 800d710:	2a00      	cmp	r2, #0
 800d712:	d0f9      	beq.n	800d708 <_strtoul_l.constprop.0+0xc4>
 800d714:	b106      	cbz	r6, 800d718 <_strtoul_l.constprop.0+0xd4>
 800d716:	1e69      	subs	r1, r5, #1
 800d718:	6011      	str	r1, [r2, #0]
 800d71a:	e7f5      	b.n	800d708 <_strtoul_l.constprop.0+0xc4>
 800d71c:	0800dfb7 	.word	0x0800dfb7

0800d720 <_strtoul_r>:
 800d720:	f7ff bf90 	b.w	800d644 <_strtoul_l.constprop.0>

0800d724 <__swbuf_r>:
 800d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d726:	460e      	mov	r6, r1
 800d728:	4614      	mov	r4, r2
 800d72a:	4605      	mov	r5, r0
 800d72c:	b118      	cbz	r0, 800d736 <__swbuf_r+0x12>
 800d72e:	6a03      	ldr	r3, [r0, #32]
 800d730:	b90b      	cbnz	r3, 800d736 <__swbuf_r+0x12>
 800d732:	f7fe fbd5 	bl	800bee0 <__sinit>
 800d736:	69a3      	ldr	r3, [r4, #24]
 800d738:	60a3      	str	r3, [r4, #8]
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	071a      	lsls	r2, r3, #28
 800d73e:	d501      	bpl.n	800d744 <__swbuf_r+0x20>
 800d740:	6923      	ldr	r3, [r4, #16]
 800d742:	b943      	cbnz	r3, 800d756 <__swbuf_r+0x32>
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f000 f82a 	bl	800d7a0 <__swsetup_r>
 800d74c:	b118      	cbz	r0, 800d756 <__swbuf_r+0x32>
 800d74e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d752:	4638      	mov	r0, r7
 800d754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	6922      	ldr	r2, [r4, #16]
 800d75a:	1a98      	subs	r0, r3, r2
 800d75c:	6963      	ldr	r3, [r4, #20]
 800d75e:	b2f6      	uxtb	r6, r6
 800d760:	4283      	cmp	r3, r0
 800d762:	4637      	mov	r7, r6
 800d764:	dc05      	bgt.n	800d772 <__swbuf_r+0x4e>
 800d766:	4621      	mov	r1, r4
 800d768:	4628      	mov	r0, r5
 800d76a:	f7ff fe53 	bl	800d414 <_fflush_r>
 800d76e:	2800      	cmp	r0, #0
 800d770:	d1ed      	bne.n	800d74e <__swbuf_r+0x2a>
 800d772:	68a3      	ldr	r3, [r4, #8]
 800d774:	3b01      	subs	r3, #1
 800d776:	60a3      	str	r3, [r4, #8]
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	6022      	str	r2, [r4, #0]
 800d77e:	701e      	strb	r6, [r3, #0]
 800d780:	6962      	ldr	r2, [r4, #20]
 800d782:	1c43      	adds	r3, r0, #1
 800d784:	429a      	cmp	r2, r3
 800d786:	d004      	beq.n	800d792 <__swbuf_r+0x6e>
 800d788:	89a3      	ldrh	r3, [r4, #12]
 800d78a:	07db      	lsls	r3, r3, #31
 800d78c:	d5e1      	bpl.n	800d752 <__swbuf_r+0x2e>
 800d78e:	2e0a      	cmp	r6, #10
 800d790:	d1df      	bne.n	800d752 <__swbuf_r+0x2e>
 800d792:	4621      	mov	r1, r4
 800d794:	4628      	mov	r0, r5
 800d796:	f7ff fe3d 	bl	800d414 <_fflush_r>
 800d79a:	2800      	cmp	r0, #0
 800d79c:	d0d9      	beq.n	800d752 <__swbuf_r+0x2e>
 800d79e:	e7d6      	b.n	800d74e <__swbuf_r+0x2a>

0800d7a0 <__swsetup_r>:
 800d7a0:	b538      	push	{r3, r4, r5, lr}
 800d7a2:	4b29      	ldr	r3, [pc, #164]	@ (800d848 <__swsetup_r+0xa8>)
 800d7a4:	4605      	mov	r5, r0
 800d7a6:	6818      	ldr	r0, [r3, #0]
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	b118      	cbz	r0, 800d7b4 <__swsetup_r+0x14>
 800d7ac:	6a03      	ldr	r3, [r0, #32]
 800d7ae:	b90b      	cbnz	r3, 800d7b4 <__swsetup_r+0x14>
 800d7b0:	f7fe fb96 	bl	800bee0 <__sinit>
 800d7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7b8:	0719      	lsls	r1, r3, #28
 800d7ba:	d422      	bmi.n	800d802 <__swsetup_r+0x62>
 800d7bc:	06da      	lsls	r2, r3, #27
 800d7be:	d407      	bmi.n	800d7d0 <__swsetup_r+0x30>
 800d7c0:	2209      	movs	r2, #9
 800d7c2:	602a      	str	r2, [r5, #0]
 800d7c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7c8:	81a3      	strh	r3, [r4, #12]
 800d7ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7ce:	e033      	b.n	800d838 <__swsetup_r+0x98>
 800d7d0:	0758      	lsls	r0, r3, #29
 800d7d2:	d512      	bpl.n	800d7fa <__swsetup_r+0x5a>
 800d7d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7d6:	b141      	cbz	r1, 800d7ea <__swsetup_r+0x4a>
 800d7d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7dc:	4299      	cmp	r1, r3
 800d7de:	d002      	beq.n	800d7e6 <__swsetup_r+0x46>
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f7fe fd23 	bl	800c22c <_free_r>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7ea:	89a3      	ldrh	r3, [r4, #12]
 800d7ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d7f0:	81a3      	strh	r3, [r4, #12]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	6063      	str	r3, [r4, #4]
 800d7f6:	6923      	ldr	r3, [r4, #16]
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	89a3      	ldrh	r3, [r4, #12]
 800d7fc:	f043 0308 	orr.w	r3, r3, #8
 800d800:	81a3      	strh	r3, [r4, #12]
 800d802:	6923      	ldr	r3, [r4, #16]
 800d804:	b94b      	cbnz	r3, 800d81a <__swsetup_r+0x7a>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d810:	d003      	beq.n	800d81a <__swsetup_r+0x7a>
 800d812:	4621      	mov	r1, r4
 800d814:	4628      	mov	r0, r5
 800d816:	f7fe fbbf 	bl	800bf98 <__smakebuf_r>
 800d81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d81e:	f013 0201 	ands.w	r2, r3, #1
 800d822:	d00a      	beq.n	800d83a <__swsetup_r+0x9a>
 800d824:	2200      	movs	r2, #0
 800d826:	60a2      	str	r2, [r4, #8]
 800d828:	6962      	ldr	r2, [r4, #20]
 800d82a:	4252      	negs	r2, r2
 800d82c:	61a2      	str	r2, [r4, #24]
 800d82e:	6922      	ldr	r2, [r4, #16]
 800d830:	b942      	cbnz	r2, 800d844 <__swsetup_r+0xa4>
 800d832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d836:	d1c5      	bne.n	800d7c4 <__swsetup_r+0x24>
 800d838:	bd38      	pop	{r3, r4, r5, pc}
 800d83a:	0799      	lsls	r1, r3, #30
 800d83c:	bf58      	it	pl
 800d83e:	6962      	ldrpl	r2, [r4, #20]
 800d840:	60a2      	str	r2, [r4, #8]
 800d842:	e7f4      	b.n	800d82e <__swsetup_r+0x8e>
 800d844:	2000      	movs	r0, #0
 800d846:	e7f7      	b.n	800d838 <__swsetup_r+0x98>
 800d848:	20000044 	.word	0x20000044

0800d84c <memmove>:
 800d84c:	4288      	cmp	r0, r1
 800d84e:	b510      	push	{r4, lr}
 800d850:	eb01 0402 	add.w	r4, r1, r2
 800d854:	d902      	bls.n	800d85c <memmove+0x10>
 800d856:	4284      	cmp	r4, r0
 800d858:	4623      	mov	r3, r4
 800d85a:	d807      	bhi.n	800d86c <memmove+0x20>
 800d85c:	1e43      	subs	r3, r0, #1
 800d85e:	42a1      	cmp	r1, r4
 800d860:	d008      	beq.n	800d874 <memmove+0x28>
 800d862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d86a:	e7f8      	b.n	800d85e <memmove+0x12>
 800d86c:	4402      	add	r2, r0
 800d86e:	4601      	mov	r1, r0
 800d870:	428a      	cmp	r2, r1
 800d872:	d100      	bne.n	800d876 <memmove+0x2a>
 800d874:	bd10      	pop	{r4, pc}
 800d876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d87e:	e7f7      	b.n	800d870 <memmove+0x24>

0800d880 <_sbrk_r>:
 800d880:	b538      	push	{r3, r4, r5, lr}
 800d882:	4d06      	ldr	r5, [pc, #24]	@ (800d89c <_sbrk_r+0x1c>)
 800d884:	2300      	movs	r3, #0
 800d886:	4604      	mov	r4, r0
 800d888:	4608      	mov	r0, r1
 800d88a:	602b      	str	r3, [r5, #0]
 800d88c:	f7f3 fe26 	bl	80014dc <_sbrk>
 800d890:	1c43      	adds	r3, r0, #1
 800d892:	d102      	bne.n	800d89a <_sbrk_r+0x1a>
 800d894:	682b      	ldr	r3, [r5, #0]
 800d896:	b103      	cbz	r3, 800d89a <_sbrk_r+0x1a>
 800d898:	6023      	str	r3, [r4, #0]
 800d89a:	bd38      	pop	{r3, r4, r5, pc}
 800d89c:	20002f2c 	.word	0x20002f2c

0800d8a0 <memcpy>:
 800d8a0:	440a      	add	r2, r1
 800d8a2:	4291      	cmp	r1, r2
 800d8a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d8a8:	d100      	bne.n	800d8ac <memcpy+0xc>
 800d8aa:	4770      	bx	lr
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8b6:	4291      	cmp	r1, r2
 800d8b8:	d1f9      	bne.n	800d8ae <memcpy+0xe>
 800d8ba:	bd10      	pop	{r4, pc}

0800d8bc <_malloc_usable_size_r>:
 800d8bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8c0:	1f18      	subs	r0, r3, #4
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	bfbc      	itt	lt
 800d8c6:	580b      	ldrlt	r3, [r1, r0]
 800d8c8:	18c0      	addlt	r0, r0, r3
 800d8ca:	4770      	bx	lr

0800d8cc <_init>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	bf00      	nop
 800d8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d2:	bc08      	pop	{r3}
 800d8d4:	469e      	mov	lr, r3
 800d8d6:	4770      	bx	lr

0800d8d8 <_fini>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	bf00      	nop
 800d8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8de:	bc08      	pop	{r3}
 800d8e0:	469e      	mov	lr, r3
 800d8e2:	4770      	bx	lr
