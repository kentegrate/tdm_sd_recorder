
tdm_sd_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800d10c  0800d10c  0000e10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d580  0800d580  0000f094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d580  0800d580  0000e580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d588  0800d588  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d588  0800d588  0000e588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d58c  0800d58c  0000e58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d590  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000338c  20000094  0800d624  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20003420  0800d624  0000f420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ba1  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000363f  00000000  00000000  00025c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000292a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee2  00000000  00000000  0002a618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4be  00000000  00000000  0002b4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196af  00000000  00000000  000559b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b23  00000000  00000000  0006f067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162b8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf0  00000000  00000000  00162bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001687c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d0f4 	.word	0x0800d0f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d0f4 	.word	0x0800d0f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sd_card_init>:
static FATFS sdCard;
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
void sd_card_init()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	490f      	ldr	r1, [pc, #60]	@ (80005d4 <sd_card_init+0x44>)
 8000598:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <sd_card_init+0x48>)
 800059a:	f009 ffff 	bl	800a59c <f_mount>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <sd_card_init+0x4c>)
 80005a4:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <sd_card_init+0x4c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d007      	beq.n	80005be <sd_card_init+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <sd_card_init+0x4c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <sd_card_init+0x50>)
 80005b6:	f00b f93f 	bl	800b838 <iprintf>
		while(1);
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <sd_card_init+0x54>)
 80005c0:	f00b f9a2 	bl	800b908 <puts>
	    printf("sdCard.fs_type = %d\n", sdCard.fs_type); // Check if fs_type is set
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <sd_card_init+0x48>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <sd_card_init+0x58>)
 80005cc:	f00b f934 	bl	800b838 <iprintf>

	}
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000329c 	.word	0x2000329c
 80005d8:	200000b4 	.word	0x200000b4
 80005dc:	200000b0 	.word	0x200000b0
 80005e0:	0800d10c 	.word	0x0800d10c
 80005e4:	0800d130 	.word	0x0800d130
 80005e8:	0800d154 	.word	0x0800d154

080005ec <start_recording>:

void start_recording(uint32_t fs, char* file_name, uint8_t n_channels)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	//static char file_name[] = "w_000.wav";
	uint32_t temp_number;

	static uint8_t file_counter = 10;
	//int file_number_digits = file_counter;
	uint32_t byte_rate = fs * 4 * n_channels; // fs * 32 bit (4 bytes) x n_channels
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	617b      	str	r3, [r7, #20]
	wav_file_header[22] = (uint8_t)n_channels;
 8000606:	4a36      	ldr	r2, [pc, #216]	@ (80006e0 <start_recording+0xf4>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7593      	strb	r3, [r2, #22]

	wav_file_header[24] = (uint8_t)fs;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b33      	ldr	r3, [pc, #204]	@ (80006e0 <start_recording+0xf4>)
 8000612:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(fs >> 8);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <start_recording+0xf4>)
 800061c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(fs >> 16);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <start_recording+0xf4>)
 8000626:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(fs >> 24);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	0e1b      	lsrs	r3, r3, #24
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <start_recording+0xf4>)
 8000630:	76da      	strb	r2, [r3, #27]

	wav_file_header[28] = (uint8_t)byte_rate;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <start_recording+0xf4>)
 8000638:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <start_recording+0xf4>)
 8000642:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <start_recording+0xf4>)
 800064c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <start_recording+0xf4>)
 8000656:	77da      	strb	r2, [r3, #31]

	wav_file_header[32] = (uint8_t)(4 * n_channels); // 32 bit (4 bytes) x n_channels
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <start_recording+0xf4>)
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
	//file_name[4] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[3] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[2] = file_number_digits%10 + 48;
	printf("file name %s \n", file_name);
 8000664:	68b9      	ldr	r1, [r7, #8]
 8000666:	481f      	ldr	r0, [pc, #124]	@ (80006e4 <start_recording+0xf8>)
 8000668:	f00b f8e6 	bl	800b838 <iprintf>
	//file_counter++;

	// creating a file
	sd_result = f_open(&wavFile ,"0:/test2.wav", FA_WRITE|FA_CREATE_ALWAYS);
 800066c:	220a      	movs	r2, #10
 800066e:	491e      	ldr	r1, [pc, #120]	@ (80006e8 <start_recording+0xfc>)
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <start_recording+0x100>)
 8000672:	f009 ffd9 	bl	800a628 <f_open>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <start_recording+0x104>)
 800067c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <start_recording+0x104>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d007      	beq.n	8000696 <start_recording+0xaa>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <start_recording+0x104>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <start_recording+0x108>)
 800068e:	f00b f8d3 	bl	800b838 <iprintf>
		while(1);
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <start_recording+0xa6>
	}
	else
	{
		printf("succeeded in opening a file \n");
 8000696:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <start_recording+0x10c>)
 8000698:	f00b f936 	bl	800b908 <puts>
	}
	wav_file_size = 0;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <start_recording+0x110>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80006a2:	2064      	movs	r0, #100	@ 0x64
 80006a4:	f000 ffc4 	bl	8001630 <HAL_Delay>

	sd_result = f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	222c      	movs	r2, #44	@ 0x2c
 80006ae:	490c      	ldr	r1, [pc, #48]	@ (80006e0 <start_recording+0xf4>)
 80006b0:	480e      	ldr	r0, [pc, #56]	@ (80006ec <start_recording+0x100>)
 80006b2:	f00a f981 	bl	800a9b8 <f_write>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <start_recording+0x104>)
 80006bc:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <start_recording+0x104>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d007      	beq.n	80006d6 <start_recording+0xea>
	{
		printf("error in writing the first sector: %d \n", sd_result);
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <start_recording+0x104>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <start_recording+0x114>)
 80006ce:	f00b f8b3 	bl	800b838 <iprintf>
		while(1);
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <start_recording+0xe6>
	}
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	0800d16c 	.word	0x0800d16c
 80006e8:	0800d17c 	.word	0x0800d17c
 80006ec:	200010e8 	.word	0x200010e8
 80006f0:	200000b0 	.word	0x200000b0
 80006f4:	0800d18c 	.word	0x0800d18c
 80006f8:	0800d1ac 	.word	0x0800d1ac
 80006fc:	20002118 	.word	0x20002118
 8000700:	0800d1cc 	.word	0x0800d1cc

08000704 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size) // data size is in bytes.
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <write2wave_file+0x54>)
 8000712:	f00b f8f9 	bl	800b908 <puts>


	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 8000716:	887a      	ldrh	r2, [r7, #2]
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	480f      	ldr	r0, [pc, #60]	@ (800075c <write2wave_file+0x58>)
 8000720:	f00a f94a 	bl	800a9b8 <f_write>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <write2wave_file+0x5c>)
 800072a:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <write2wave_file+0x5c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d007      	beq.n	8000744 <write2wave_file+0x40>
	{
		printf("error in writing to the file: %d \n", sd_result);
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <write2wave_file+0x5c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	480a      	ldr	r0, [pc, #40]	@ (8000764 <write2wave_file+0x60>)
 800073c:	f00b f87c 	bl	800b838 <iprintf>
		while(1);
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <write2wave_file+0x3c>
	}
	wav_file_size += data_size;
 8000744:	887a      	ldrh	r2, [r7, #2]
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <write2wave_file+0x64>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <write2wave_file+0x64>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	0800d1f4 	.word	0x0800d1f4
 800075c:	200010e8 	.word	0x200010e8
 8000760:	200000b0 	.word	0x200000b0
 8000764:	0800d1f8 	.word	0x0800d1f8
 8000768:	20002118 	.word	0x20002118

0800076c <stop_recording>:

void stop_recording()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <stop_recording+0xd8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b08      	subs	r3, #8
 8000778:	4a32      	ldr	r2, [pc, #200]	@ (8000844 <stop_recording+0xd8>)
 800077a:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 800077c:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <stop_recording+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <stop_recording+0xdc>)
 8000784:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000786:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <stop_recording+0xd8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <stop_recording+0xdc>)
 8000790:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000792:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <stop_recording+0xd8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	0c1b      	lsrs	r3, r3, #16
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <stop_recording+0xdc>)
 800079c:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800079e:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <stop_recording+0xd8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	0e1b      	lsrs	r3, r3, #24
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <stop_recording+0xdc>)
 80007a8:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 80007aa:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <stop_recording+0xd8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b24      	subs	r3, #36	@ 0x24
 80007b0:	4a24      	ldr	r2, [pc, #144]	@ (8000844 <stop_recording+0xd8>)
 80007b2:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <stop_recording+0xd8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <stop_recording+0xdc>)
 80007bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <stop_recording+0xd8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <stop_recording+0xdc>)
 80007ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <stop_recording+0xd8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <stop_recording+0xdc>)
 80007d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <stop_recording+0xd8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <stop_recording+0xdc>)
 80007e6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4817      	ldr	r0, [pc, #92]	@ (800084c <stop_recording+0xe0>)
 80007ee:	f00a fb1f 	bl	800ae30 <f_lseek>
	sd_result = f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	222c      	movs	r2, #44	@ 0x2c
 80007f6:	4914      	ldr	r1, [pc, #80]	@ (8000848 <stop_recording+0xdc>)
 80007f8:	4814      	ldr	r0, [pc, #80]	@ (800084c <stop_recording+0xe0>)
 80007fa:	f00a f8dd 	bl	800a9b8 <f_write>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <stop_recording+0xe4>)
 8000804:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <stop_recording+0xe4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d007      	beq.n	800081e <stop_recording+0xb2>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <stop_recording+0xe4>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	480f      	ldr	r0, [pc, #60]	@ (8000854 <stop_recording+0xe8>)
 8000816:	f00b f80f 	bl	800b838 <iprintf>
		while(1);
 800081a:	bf00      	nop
 800081c:	e7fd      	b.n	800081a <stop_recording+0xae>
	}
	f_close(&wavFile);
 800081e:	480b      	ldr	r0, [pc, #44]	@ (800084c <stop_recording+0xe0>)
 8000820:	f00a fadc 	bl	800addc <f_close>
	first_time = 0;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <stop_recording+0xec>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
	printf("wrote %ld bytes.\n", wav_file_size);
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <stop_recording+0xd8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	480a      	ldr	r0, [pc, #40]	@ (800085c <stop_recording+0xf0>)
 8000832:	f00b f801 	bl	800b838 <iprintf>
	printf("closed the file \n");
 8000836:	480a      	ldr	r0, [pc, #40]	@ (8000860 <stop_recording+0xf4>)
 8000838:	f00b f866 	bl	800b908 <puts>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20002118 	.word	0x20002118
 8000848:	20000000 	.word	0x20000000
 800084c:	200010e8 	.word	0x200010e8
 8000850:	200000b0 	.word	0x200000b0
 8000854:	0800d21c 	.word	0x0800d21c
 8000858:	2000211c 	.word	0x2000211c
 800085c:	0800d248 	.word	0x0800d248
 8000860:	0800d25c 	.word	0x0800d25c

08000864 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <HAL_UART_RxCpltCallback+0x7c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d130      	bne.n	80008d8 <HAL_UART_RxCpltCallback+0x74>

        if (uart_rx_buffer[uart_rx_index] == '\n') {
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <HAL_UART_RxCpltCallback+0x84>)
 8000880:	5c9b      	ldrb	r3, [r3, r2]
 8000882:	2b0a      	cmp	r3, #10
 8000884:	d10d      	bne.n	80008a2 <HAL_UART_RxCpltCallback+0x3e>
            uart_rx_buffer[uart_rx_index] = '\0';
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <HAL_UART_RxCpltCallback+0x84>)
 8000890:	2100      	movs	r1, #0
 8000892:	5499      	strb	r1, [r3, r2]
            command_received = 1;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_UART_RxCpltCallback+0x88>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
            uart_rx_index = 0;
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e00f      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x5e>
        } else if (uart_rx_index < CMD_BUFFER_SIZE - 1) {
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80008aa:	d807      	bhi.n	80008bc <HAL_UART_RxCpltCallback+0x58>
            uart_rx_index = uart_rx_index + 1;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e002      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x5e>



        } else {
            uart_rx_index = 0; // Reset index on overflow
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <HAL_UART_RxCpltCallback+0x84>)
 80008cc:	4413      	add	r3, r2
 80008ce:	2201      	movs	r2, #1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	@ (80008f0 <HAL_UART_RxCpltCallback+0x8c>)
 80008d4:	f005 fe1a 	bl	800650c <HAL_UART_Receive_IT>
    }
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004400 	.word	0x40004400
 80008e4:	20003280 	.word	0x20003280
 80008e8:	20003200 	.word	0x20003200
 80008ec:	20003284 	.word	0x20003284
 80008f0:	20002270 	.word	0x20002270

080008f4 <process_command>:

void process_command(char *command) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b092      	sub	sp, #72	@ 0x48
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    if (command[0] == 's' && command[1] == ' ') {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b73      	cmp	r3, #115	@ 0x73
 8000902:	d115      	bne.n	8000930 <process_command+0x3c>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b20      	cmp	r3, #32
 800090c:	d110      	bne.n	8000930 <process_command+0x3c>
        char filename[CMD_BUFFER_SIZE];
        sscanf(command, "s %s", filename);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	461a      	mov	r2, r3
 8000914:	4915      	ldr	r1, [pc, #84]	@ (800096c <process_command+0x78>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f00a fdfa 	bl	800b510 <siscanf>
        StartRecording(filename);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fac5 	bl	8000eb0 <StartRecording>
        recording_state = 1;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <process_command+0x7c>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
    if (command[0] == 's' && command[1] == ' ') {
 800092c:	bf00      	nop
    } else if (strcmp(command, "c") == 0) {
        SendCurrentStatus();
    } else {
        IndicateInvalidCommand();
    }
}
 800092e:	e018      	b.n	8000962 <process_command+0x6e>
    } else if (strcmp(command, "e") == 0) {
 8000930:	4910      	ldr	r1, [pc, #64]	@ (8000974 <process_command+0x80>)
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fc54 	bl	80001e0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <process_command+0x56>
        recording_state = 0;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <process_command+0x7c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
        StopRecording();
 8000944:	f000 fae0 	bl	8000f08 <StopRecording>
}
 8000948:	e00b      	b.n	8000962 <process_command+0x6e>
    } else if (strcmp(command, "c") == 0) {
 800094a:	490b      	ldr	r1, [pc, #44]	@ (8000978 <process_command+0x84>)
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fc47 	bl	80001e0 <strcmp>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <process_command+0x6a>
        SendCurrentStatus();
 8000958:	f000 faea 	bl	8000f30 <SendCurrentStatus>
}
 800095c:	e001      	b.n	8000962 <process_command+0x6e>
        IndicateInvalidCommand();
 800095e:	f000 fb01 	bl	8000f64 <IndicateInvalidCommand>
}
 8000962:	bf00      	nop
 8000964:	3748      	adds	r7, #72	@ 0x48
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0800d270 	.word	0x0800d270
 8000970:	20003288 	.word	0x20003288
 8000974:	0800d278 	.word	0x0800d278
 8000978:	0800d27c 	.word	0x0800d27c

0800097c <UART_SendString>:

void UART_SendString(UART_HandleTypeDef *huart, char *str) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f7ff fc22 	bl	80001d0 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f005 fd2e 	bl	80063f8 <HAL_UART_Transmit>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 80009a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <main+0xc4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00a fcbc 	bl	800b32e <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fdbf 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f86b 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 f987 	bl	8000cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c2:	f000 f967 	bl	8000c94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009c6:	f000 f935 	bl	8000c34 <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 80009ca:	f000 f90f 	bl	8000bec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80009ce:	f007 fe25 	bl	800861c <MX_FATFS_Init>
  MX_SAI2_Init();
 80009d2:	f000 f8b1 	bl	8000b38 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  sd_card_init();
 80009d6:	f7ff fddb 	bl	8000590 <sd_card_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_rx_index = 0;
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <main+0xc8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <main+0xc8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <main+0xcc>)
 80009ea:	4413      	add	r3, r2
 80009ec:	2201      	movs	r2, #1
 80009ee:	4619      	mov	r1, r3
 80009f0:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <main+0xd0>)
 80009f2:	f005 fd8b 	bl	800650c <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (command_received) {
 80009f6:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <main+0xd4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <main+0x66>
          process_command(uart_rx_buffer);
 80009fe:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <main+0xcc>)
 8000a00:	f7ff ff78 	bl	80008f4 <process_command>
          command_received = 0;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <main+0xd4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
      }

	  if(recording_state && half_tdm)
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <main+0xd8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d016      	beq.n	8000a40 <main+0x9c>
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <main+0xdc>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d011      	beq.n	8000a40 <main+0x9c>
	  {

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <main+0xe0>)
 8000a22:	f001 fb73 	bl	800210c <HAL_GPIO_WritePin>
		  write2wave_file(((uint8_t*)data_tdm),	 sizeof(data_tdm)/2); // half count * 4 byte per sample
 8000a26:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000a2a:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <main+0xe4>)
 8000a2c:	f7ff fe6a 	bl	8000704 <write2wave_file>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2120      	movs	r1, #32
 8000a34:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <main+0xe0>)
 8000a36:	f001 fb69 	bl	800210c <HAL_GPIO_WritePin>

		  half_tdm = 0;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <main+0xdc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
	  }
	  if(recording_state && full_tdm)
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <main+0xd8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0d6      	beq.n	80009f6 <main+0x52>
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <main+0xe8>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0d1      	beq.n	80009f6 <main+0x52>
	  {
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
		  write2wave_file(((uint8_t*)data_tdm) + sizeof(data_tdm)/2, sizeof(data_tdm)/2);
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <main+0xec>)
 8000a54:	f44f 61f0 	mov.w	r1, #1920	@ 0x780
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe53 	bl	8000704 <write2wave_file>
		  //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);

		  full_tdm = 0;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <main+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
      if (command_received) {
 8000a64:	e7c7      	b.n	80009f6 <main+0x52>
 8000a66:	bf00      	nop
 8000a68:	20000044 	.word	0x20000044
 8000a6c:	20003280 	.word	0x20003280
 8000a70:	20003200 	.word	0x20003200
 8000a74:	20002270 	.word	0x20002270
 8000a78:	20003284 	.word	0x20003284
 8000a7c:	20003288 	.word	0x20003288
 8000a80:	200031fc 	.word	0x200031fc
 8000a84:	48000800 	.word	0x48000800
 8000a88:	200022f8 	.word	0x200022f8
 8000a8c:	200031fd 	.word	0x200031fd
 8000a90:	20002a78 	.word	0x20002a78

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	@ 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	@ 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a ff38 	bl	800b918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aba:	f001 fb4d 	bl	8002158 <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 fa70 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000aea:	2304      	movs	r3, #4
 8000aec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fb84 	bl	8002204 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b02:	f000 fa51 	bl	8000fa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 ff4c 	bl	80029bc <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b2a:	f000 fa3d 	bl	8000fa8 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	@ 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000be8 <MX_SAI2_Init+0xb0>)
 8000b40:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_32;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b50:	22e0      	movs	r2, #224	@ 0xe0
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b7a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b7e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.FrameInit.FrameLength = 256;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000b9a:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ba0:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000ba8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000bae:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000bb0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bb4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 8;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000bc4:	2208      	movs	r2, #8
 8000bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000FFFF;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000bca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bce:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_SAI2_Init+0xac>)
 8000bd2:	f003 fc31 	bl	8004438 <HAL_SAI_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_SAI2_Init+0xa8>
  {
    Error_Handler();
 8000bdc:	f000 f9e4 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20002120 	.word	0x20002120
 8000be8:	40015804 	.word	0x40015804

08000bec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <MX_SDMMC1_SD_Init+0x44>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c16:	2208      	movs	r2, #8
 8000c18:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c1a:	4b04      	ldr	r3, [pc, #16]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200021ec 	.word	0x200021ec
 8000c30:	40012800 	.word	0x40012800

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	@ (8000c90 <MX_USART2_UART_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c78:	f005 fb70 	bl	800635c <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 f991 	bl	8000fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20002270 	.word	0x20002270
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_DMA_Init+0x38>)
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <MX_DMA_Init+0x38>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_DMA_Init+0x38>)
 8000ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2010      	movs	r0, #16
 8000cb8:	f000 fdb9 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cbc:	2010      	movs	r0, #16
 8000cbe:	f000 fdd2 	bl	8001866 <HAL_NVIC_EnableIRQ>

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b52      	ldr	r3, [pc, #328]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a51      	ldr	r2, [pc, #324]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a4b      	ldr	r2, [pc, #300]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b49      	ldr	r3, [pc, #292]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b46      	ldr	r3, [pc, #280]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a45      	ldr	r2, [pc, #276]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b43      	ldr	r3, [pc, #268]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b40      	ldr	r3, [pc, #256]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a3f      	ldr	r2, [pc, #252]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b3a      	ldr	r3, [pc, #232]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a39      	ldr	r2, [pc, #228]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d66:	f001 f9d1 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2160      	movs	r1, #96	@ 0x60
 8000d6e:	4831      	ldr	r0, [pc, #196]	@ (8000e34 <MX_GPIO_Init+0x164>)
 8000d70:	f001 f9cc 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	482a      	ldr	r0, [pc, #168]	@ (8000e34 <MX_GPIO_Init+0x164>)
 8000d8c:	f000 fffc 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000da0:	230d      	movs	r3, #13
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f000 ffeb 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db2:	2320      	movs	r3, #32
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dcc:	f000 ffdc 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dd0:	2360      	movs	r3, #96	@ 0x60
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4813      	ldr	r0, [pc, #76]	@ (8000e34 <MX_GPIO_Init+0x164>)
 8000de8:	f000 ffce 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000dfe:	230d      	movs	r3, #13
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	480a      	ldr	r0, [pc, #40]	@ (8000e34 <MX_GPIO_Init+0x164>)
 8000e0a:	f000 ffbd 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e0e:	2310      	movs	r3, #16
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <MX_GPIO_Init+0x168>)
 8000e22:	f000 ffb1 	bl	8001d88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000800 	.word	0x48000800
 8000e38:	48000400 	.word	0x48000400

08000e3c <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2140      	movs	r1, #64	@ 0x40
 8000e48:	4806      	ldr	r0, [pc, #24]	@ (8000e64 <HAL_SAI_RxCpltCallback+0x28>)
 8000e4a:	f001 f95f 	bl	800210c <HAL_GPIO_WritePin>
	full_tdm = 1;
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_SAI_RxCpltCallback+0x2c>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[0];
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <HAL_SAI_RxCpltCallback+0x30>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a05      	ldr	r2, [pc, #20]	@ (8000e70 <HAL_SAI_RxCpltCallback+0x34>)
 8000e5a:	6013      	str	r3, [r2, #0]
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	48000800 	.word	0x48000800
 8000e68:	200031fd 	.word	0x200031fd
 8000e6c:	200022f8 	.word	0x200022f8
 8000e70:	200031f8 	.word	0x200031f8

08000e74 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2140      	movs	r1, #64	@ 0x40
 8000e80:	4807      	ldr	r0, [pc, #28]	@ (8000ea0 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000e82:	f001 f943 	bl	800210c <HAL_GPIO_WritePin>
	half_tdm= 1;
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[WAV_WRITE_SAMPLE_COUNT/2];
 8000e8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_SAI_RxHalfCpltCallback+0x34>)
 8000e8e:	f8d3 3780 	ldr.w	r3, [r3, #1920]	@ 0x780
 8000e92:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <HAL_SAI_RxHalfCpltCallback+0x38>)
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	200031fc 	.word	0x200031fc
 8000ea8:	200022f8 	.word	0x200022f8
 8000eac:	200031f8 	.word	0x200031f8

08000eb0 <StartRecording>:

void StartRecording(char *filename) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
    snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "Starting recording to file: %s\r\n", filename);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <StartRecording+0x44>)
 8000ebc:	2140      	movs	r1, #64	@ 0x40
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <StartRecording+0x48>)
 8000ec0:	f00a faf2 	bl	800b4a8 <sniprintf>
    UART_SendString(&huart2, uart_tx_buffer);
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <StartRecording+0x48>)
 8000ec6:	480d      	ldr	r0, [pc, #52]	@ (8000efc <StartRecording+0x4c>)
 8000ec8:	f7ff fd58 	bl	800097c <UART_SendString>
    // Implement file opening/creation here
    start_recording(SAI_AUDIO_FREQUENCY_48K, filename, (uint8_t)hsai_BlockA2.SlotInit.SlotNumber);
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <StartRecording+0x50>)
 8000ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	6879      	ldr	r1, [r7, #4]
 8000ed6:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8000eda:	f7ff fb87 	bl	80005ec <start_recording>
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t *)data_tdm, WAV_WRITE_SAMPLE_COUNT); // THIS SHOULD NOT BE NUMBER OF BYTES!!!
 8000ede:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 8000ee2:	4908      	ldr	r1, [pc, #32]	@ (8000f04 <StartRecording+0x54>)
 8000ee4:	4806      	ldr	r0, [pc, #24]	@ (8000f00 <StartRecording+0x50>)
 8000ee6:	f003 fc6d 	bl	80047c4 <HAL_SAI_Receive_DMA>

}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	0800d280 	.word	0x0800d280
 8000ef8:	20003240 	.word	0x20003240
 8000efc:	20002270 	.word	0x20002270
 8000f00:	20002120 	.word	0x20002120
 8000f04:	200022f8 	.word	0x200022f8

08000f08 <StopRecording>:

void StopRecording() {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	HAL_SAI_DMAStop(&hsai_BlockA2);
 8000f0c:	4805      	ldr	r0, [pc, #20]	@ (8000f24 <StopRecording+0x1c>)
 8000f0e:	f003 fc05 	bl	800471c <HAL_SAI_DMAStop>
    UART_SendString(&huart2, "Stopping recording\r\n");
 8000f12:	4905      	ldr	r1, [pc, #20]	@ (8000f28 <StopRecording+0x20>)
 8000f14:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <StopRecording+0x24>)
 8000f16:	f7ff fd31 	bl	800097c <UART_SendString>
    // Implement file closing and clean-up here
    stop_recording();
 8000f1a:	f7ff fc27 	bl	800076c <stop_recording>
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20002120 	.word	0x20002120
 8000f28:	0800d2a4 	.word	0x0800d2a4
 8000f2c:	20002270 	.word	0x20002270

08000f30 <SendCurrentStatus>:

void SendCurrentStatus() {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
    if (recording_state == 1) {
 8000f34:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <SendCurrentStatus+0x24>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d104      	bne.n	8000f46 <SendCurrentStatus+0x16>
        UART_SendString(&huart2, "Recording in progress\r\n");
 8000f3c:	4906      	ldr	r1, [pc, #24]	@ (8000f58 <SendCurrentStatus+0x28>)
 8000f3e:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <SendCurrentStatus+0x2c>)
 8000f40:	f7ff fd1c 	bl	800097c <UART_SendString>
    } else {
        UART_SendString(&huart2, "Recording stopped\r\n");
    }
}
 8000f44:	e003      	b.n	8000f4e <SendCurrentStatus+0x1e>
        UART_SendString(&huart2, "Recording stopped\r\n");
 8000f46:	4906      	ldr	r1, [pc, #24]	@ (8000f60 <SendCurrentStatus+0x30>)
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <SendCurrentStatus+0x2c>)
 8000f4a:	f7ff fd17 	bl	800097c <UART_SendString>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20003288 	.word	0x20003288
 8000f58:	0800d2bc 	.word	0x0800d2bc
 8000f5c:	20002270 	.word	0x20002270
 8000f60:	0800d2d4 	.word	0x0800d2d4

08000f64 <IndicateInvalidCommand>:

void IndicateInvalidCommand() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    UART_SendString(&huart2, "Invalid command received\r\n");
 8000f68:	4902      	ldr	r1, [pc, #8]	@ (8000f74 <IndicateInvalidCommand+0x10>)
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <IndicateInvalidCommand+0x14>)
 8000f6c:	f7ff fd06 	bl	800097c <UART_SendString>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	0800d2e8 	.word	0x0800d2e8
 8000f78:	20002270 	.word	0x20002270

08000f7c <_write>:
int _write(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len, HAL_MAX_DELAY);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	4804      	ldr	r0, [pc, #16]	@ (8000fa4 <_write+0x28>)
 8000f94:	f005 fa30 	bl	80063f8 <HAL_UART_Transmit>
  return len;
 8000f98:	687b      	ldr	r3, [r7, #4]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20002270 	.word	0x20002270

08000fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd2:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd6:	4a08      	ldr	r2, [pc, #32]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fde:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <HAL_MspInit+0x44>)
 8000fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ac      	sub	sp, #176	@ 0xb0
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2288      	movs	r2, #136	@ 0x88
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00a fc7b 	bl	800b918 <memset>
  if(hsd->Instance==SDMMC1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a37      	ldr	r2, [pc, #220]	@ (8001104 <HAL_SD_MspInit+0x108>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d167      	bne.n	80010fc <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 800102c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001030:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8001032:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001036:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fee0 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800104a:	f7ff ffad 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800104e:	4b2e      	ldr	r3, [pc, #184]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 8001054:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001058:	6613      	str	r3, [r2, #96]	@ 0x60
 800105a:	4b2b      	ldr	r3, [pc, #172]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	4b28      	ldr	r3, [pc, #160]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	4a27      	ldr	r2, [pc, #156]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001072:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107e:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <HAL_SD_MspInit+0x10c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001096:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800109a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010b0:	230c      	movs	r3, #12
 80010b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ba:	4619      	mov	r1, r3
 80010bc:	4813      	ldr	r0, [pc, #76]	@ (800110c <HAL_SD_MspInit+0x110>)
 80010be:	f000 fe63 	bl	8001d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010c2:	2304      	movs	r3, #4
 80010c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c8:	2302      	movs	r3, #2
 80010ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010da:	230c      	movs	r3, #12
 80010dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010e4:	4619      	mov	r1, r3
 80010e6:	480a      	ldr	r0, [pc, #40]	@ (8001110 <HAL_SD_MspInit+0x114>)
 80010e8:	f000 fe4e 	bl	8001d88 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2031      	movs	r0, #49	@ 0x31
 80010f2:	f000 fb9c 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80010f6:	2031      	movs	r0, #49	@ 0x31
 80010f8:	f000 fbb5 	bl	8001866 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80010fc:	bf00      	nop
 80010fe:	37b0      	adds	r7, #176	@ 0xb0
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40012800 	.word	0x40012800
 8001108:	40021000 	.word	0x40021000
 800110c:	48000800 	.word	0x48000800
 8001110:	48000c00 	.word	0x48000c00

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b0ac      	sub	sp, #176	@ 0xb0
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2288      	movs	r2, #136	@ 0x88
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f00a fbef 	bl	800b918 <memset>
  if(huart->Instance==USART2)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a25      	ldr	r2, [pc, #148]	@ (80011d4 <HAL_UART_MspInit+0xc0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d143      	bne.n	80011cc <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001144:	2302      	movs	r3, #2
 8001146:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fe57 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800115c:	f7ff ff24 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <HAL_UART_MspInit+0xc4>)
 8001162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001164:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <HAL_UART_MspInit+0xc4>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116a:	6593      	str	r3, [r2, #88]	@ 0x58
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <HAL_UART_MspInit+0xc4>)
 800116e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0xc4>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	4a16      	ldr	r2, [pc, #88]	@ (80011d8 <HAL_UART_MspInit+0xc4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_UART_MspInit+0xc4>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001190:	230c      	movs	r3, #12
 8001192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a8:	2307      	movs	r3, #7
 80011aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b8:	f000 fde6 	bl	8001d88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011bc:	2200      	movs	r2, #0
 80011be:	2100      	movs	r1, #0
 80011c0:	2026      	movs	r0, #38	@ 0x26
 80011c2:	f000 fb34 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011c6:	2026      	movs	r0, #38	@ 0x26
 80011c8:	f000 fb4d 	bl	8001866 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011cc:	bf00      	nop
 80011ce:	37b0      	adds	r7, #176	@ 0xb0
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40004400 	.word	0x40004400
 80011d8:	40021000 	.word	0x40021000

080011dc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b0aa      	sub	sp, #168	@ 0xa8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2288      	movs	r2, #136	@ 0x88
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00a fb93 	bl	800b918 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a41      	ldr	r2, [pc, #260]	@ (80012fc <HAL_SAI_MspInit+0x120>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d17a      	bne.n	80012f2 <HAL_SAI_MspInit+0x116>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001202:	2300      	movs	r3, #0
 8001204:	677b      	str	r3, [r7, #116]	@ 0x74
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001206:	2302      	movs	r3, #2
 8001208:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800120a:	2301      	movs	r3, #1
 800120c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 800120e:	230d      	movs	r3, #13
 8001210:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8001212:	2311      	movs	r3, #17
 8001214:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001216:	2302      	movs	r3, #2
 8001218:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800121a:	2302      	movs	r3, #2
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800121e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fdeb 	bl	8002e04 <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 8001234:	f7ff feb8 	bl	8000fa8 <Error_Handler>
    }

    if (SAI2_client == 0)
 8001238:	4b31      	ldr	r3, [pc, #196]	@ (8001300 <HAL_SAI_MspInit+0x124>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10b      	bne.n	8001258 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001240:	4b30      	ldr	r3, [pc, #192]	@ (8001304 <HAL_SAI_MspInit+0x128>)
 8001242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001244:	4a2f      	ldr	r2, [pc, #188]	@ (8001304 <HAL_SAI_MspInit+0x128>)
 8001246:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800124a:	6613      	str	r3, [r2, #96]	@ 0x60
 800124c:	4b2d      	ldr	r3, [pc, #180]	@ (8001304 <HAL_SAI_MspInit+0x128>)
 800124e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001250:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <HAL_SAI_MspInit+0x124>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	4a28      	ldr	r2, [pc, #160]	@ (8001300 <HAL_SAI_MspInit+0x124>)
 8001260:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001262:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001266:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800127c:	230d      	movs	r3, #13
 800127e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001286:	4619      	mov	r1, r3
 8001288:	481f      	ldr	r0, [pc, #124]	@ (8001308 <HAL_SAI_MspInit+0x12c>)
 800128a:	f000 fd7d 	bl	8001d88 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <HAL_SAI_MspInit+0x130>)
 8001290:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <HAL_SAI_MspInit+0x134>)
 8001292:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_SAI_MspInit+0x130>)
 8001296:	2201      	movs	r2, #1
 8001298:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <HAL_SAI_MspInit+0x130>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012b2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012b4:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ba:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80012bc:	4b13      	ldr	r3, [pc, #76]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012be:	2220      	movs	r2, #32
 80012c0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 80012ca:	4810      	ldr	r0, [pc, #64]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012cc:	f000 fae6 	bl	800189c <HAL_DMA_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_SAI_MspInit+0xfe>
    {
      Error_Handler();
 80012d6:	f7ff fe67 	bl	8000fa8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012de:	671a      	str	r2, [r3, #112]	@ 0x70
 80012e0:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a08      	ldr	r2, [pc, #32]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 80012ec:	4a07      	ldr	r2, [pc, #28]	@ (800130c <HAL_SAI_MspInit+0x130>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 80012f2:	bf00      	nop
 80012f4:	37a8      	adds	r7, #168	@ 0xa8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40015804 	.word	0x40015804
 8001300:	2000328c 	.word	0x2000328c
 8001304:	40021000 	.word	0x40021000
 8001308:	48000400 	.word	0x48000400
 800130c:	200021a4 	.word	0x200021a4
 8001310:	4002006c 	.word	0x4002006c

08001314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001318:	bf00      	nop
 800131a:	e7fd      	b.n	8001318 <NMI_Handler+0x4>

0800131c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <MemManage_Handler+0x4>

0800132c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <BusFault_Handler+0x4>

08001334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <UsageFault_Handler+0x4>

0800133c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800136a:	f000 f941 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001378:	4802      	ldr	r0, [pc, #8]	@ (8001384 <DMA1_Channel6_IRQHandler+0x10>)
 800137a:	f000 fc26 	bl	8001bca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200021a4 	.word	0x200021a4

08001388 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800138c:	4802      	ldr	r0, [pc, #8]	@ (8001398 <USART2_IRQHandler+0x10>)
 800138e:	f005 f909 	bl	80065a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20002270 	.word	0x20002270

0800139c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013a0:	4802      	ldr	r0, [pc, #8]	@ (80013ac <SDMMC1_IRQHandler+0x10>)
 80013a2:	f003 ffc5 	bl	8005330 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200021ec 	.word	0x200021ec

080013b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	e00a      	b.n	80013d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013c2:	f3af 8000 	nop.w
 80013c6:	4601      	mov	r1, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	3301      	adds	r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	dbf0      	blt.n	80013c2 <_read+0x12>
  }

  return len;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001412:	605a      	str	r2, [r3, #4]
  return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_isatty>:

int _isatty(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f00a fab8 	bl	800b9f8 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	@ (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	@ (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20018000 	.word	0x20018000
 80014b4:	00006000 	.word	0x00006000
 80014b8:	20003290 	.word	0x20003290
 80014bc:	20003420 	.word	0x20003420

080014c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	@ (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800151c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e8:	f7ff ffea 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480c      	ldr	r0, [pc, #48]	@ (8001520 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ee:	490d      	ldr	r1, [pc, #52]	@ (8001524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <LoopForever+0xe>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a0a      	ldr	r2, [pc, #40]	@ (800152c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001504:	4c0a      	ldr	r4, [pc, #40]	@ (8001530 <LoopForever+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f00a fa77 	bl	800ba04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001516:	f7ff fa45 	bl	80009a4 <main>

0800151a <LoopForever>:

LoopForever:
    b LoopForever
 800151a:	e7fe      	b.n	800151a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800151c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001528:	0800d590 	.word	0x0800d590
  ldr r2, =_sbss
 800152c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001530:	20003420 	.word	0x20003420

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_Init+0x3c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a0b      	ldr	r2, [pc, #44]	@ (8001574 <HAL_Init+0x3c>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f962 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001554:	2000      	movs	r0, #0
 8001556:	f000 f80f 	bl	8001578 <HAL_InitTick>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	71fb      	strb	r3, [r7, #7]
 8001564:	e001      	b.n	800156a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001566:	f7ff fd25 	bl	8000fb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156a:	79fb      	ldrb	r3, [r7, #7]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40022000 	.word	0x40022000

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001584:	4b17      	ldr	r3, [pc, #92]	@ (80015e4 <HAL_InitTick+0x6c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800158c:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_InitTick+0x70>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b14      	ldr	r3, [pc, #80]	@ (80015e4 <HAL_InitTick+0x6c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f96d 	bl	8001882 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d809      	bhi.n	80015c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015bc:	f000 f937 	bl	800182e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c0:	4a0a      	ldr	r2, [pc, #40]	@ (80015ec <HAL_InitTick+0x74>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e004      	b.n	80015d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e001      	b.n	80015d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000034 	.word	0x20000034
 80015e8:	2000002c 	.word	0x2000002c
 80015ec:	20000030 	.word	0x20000030

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	@ (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000034 	.word	0x20000034
 8001614:	20003294 	.word	0x20003294

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20003294 	.word	0x20003294

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800164a:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000034 	.word	0x20000034

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	@ (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	@ (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	@ (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e098      	b.n	80019e0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b4d      	ldr	r3, [pc, #308]	@ (80019ec <HAL_DMA_Init+0x150>)
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d80f      	bhi.n	80018da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	4b4b      	ldr	r3, [pc, #300]	@ (80019f0 <HAL_DMA_Init+0x154>)
 80018c2:	4413      	add	r3, r2
 80018c4:	4a4b      	ldr	r2, [pc, #300]	@ (80019f4 <HAL_DMA_Init+0x158>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	009a      	lsls	r2, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a48      	ldr	r2, [pc, #288]	@ (80019f8 <HAL_DMA_Init+0x15c>)
 80018d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80018d8:	e00e      	b.n	80018f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <HAL_DMA_Init+0x160>)
 80018e2:	4413      	add	r3, r2
 80018e4:	4a43      	ldr	r2, [pc, #268]	@ (80019f4 <HAL_DMA_Init+0x158>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	009a      	lsls	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a42      	ldr	r2, [pc, #264]	@ (8001a00 <HAL_DMA_Init+0x164>)
 80018f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800190e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001912:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001952:	d039      	beq.n	80019c8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	4a27      	ldr	r2, [pc, #156]	@ (80019f8 <HAL_DMA_Init+0x15c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d11a      	bne.n	8001994 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <HAL_DMA_Init+0x168>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f003 031c 	and.w	r3, r3, #28
 800196a:	210f      	movs	r1, #15
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	4924      	ldr	r1, [pc, #144]	@ (8001a04 <HAL_DMA_Init+0x168>)
 8001974:	4013      	ands	r3, r2
 8001976:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001978:	4b22      	ldr	r3, [pc, #136]	@ (8001a04 <HAL_DMA_Init+0x168>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001984:	f003 031c 	and.w	r3, r3, #28
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	491d      	ldr	r1, [pc, #116]	@ (8001a04 <HAL_DMA_Init+0x168>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
 8001992:	e019      	b.n	80019c8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001994:	4b1c      	ldr	r3, [pc, #112]	@ (8001a08 <HAL_DMA_Init+0x16c>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	f003 031c 	and.w	r3, r3, #28
 80019a0:	210f      	movs	r1, #15
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	4917      	ldr	r1, [pc, #92]	@ (8001a08 <HAL_DMA_Init+0x16c>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019ae:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_DMA_Init+0x16c>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6859      	ldr	r1, [r3, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f003 031c 	and.w	r3, r3, #28
 80019be:	fa01 f303 	lsl.w	r3, r1, r3
 80019c2:	4911      	ldr	r1, [pc, #68]	@ (8001a08 <HAL_DMA_Init+0x16c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	40020407 	.word	0x40020407
 80019f0:	bffdfff8 	.word	0xbffdfff8
 80019f4:	cccccccd 	.word	0xcccccccd
 80019f8:	40020000 	.word	0x40020000
 80019fc:	bffdfbf8 	.word	0xbffdfbf8
 8001a00:	40020400 	.word	0x40020400
 8001a04:	400200a8 	.word	0x400200a8
 8001a08:	400204a8 	.word	0x400204a8

08001a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Start_IT+0x20>
 8001a28:	2302      	movs	r3, #2
 8001a2a:	e04b      	b.n	8001ac4 <HAL_DMA_Start_IT+0xb8>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d13a      	bne.n	8001ab6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2202      	movs	r2, #2
 8001a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 0201 	bic.w	r2, r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	68b9      	ldr	r1, [r7, #8]
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f95f 	bl	8001d28 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d008      	beq.n	8001a84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 020e 	orr.w	r2, r2, #14
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e00f      	b.n	8001aa4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0204 	bic.w	r2, r2, #4
 8001a92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 020a 	orr.w	r2, r2, #10
 8001aa2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e005      	b.n	8001ac2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d008      	beq.n	8001af6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2204      	movs	r2, #4
 8001ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e022      	b.n	8001b3c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 020e 	bic.w	r2, r2, #14
 8001b04:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 0201 	bic.w	r2, r2, #1
 8001b14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f003 021c 	and.w	r2, r3, #28
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	2101      	movs	r1, #1
 8001b24:	fa01 f202 	lsl.w	r2, r1, r2
 8001b28:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d005      	beq.n	8001b6c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2204      	movs	r2, #4
 8001b64:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	73fb      	strb	r3, [r7, #15]
 8001b6a:	e029      	b.n	8001bc0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 020e 	bic.w	r2, r2, #14
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b90:	f003 021c 	and.w	r2, r3, #28
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	4798      	blx	r3
    }
  }
  return status;
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be6:	f003 031c 	and.w	r3, r3, #28
 8001bea:	2204      	movs	r2, #4
 8001bec:	409a      	lsls	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d026      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x7a>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d021      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d107      	bne.n	8001c1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0204 	bic.w	r2, r2, #4
 8001c1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	f003 021c 	and.w	r2, r3, #28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2104      	movs	r1, #4
 8001c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d071      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c42:	e06c      	b.n	8001d1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c48:	f003 031c 	and.w	r3, r3, #28
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	409a      	lsls	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d02e      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0xec>
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d029      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d10b      	bne.n	8001c88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020a 	bic.w	r2, r2, #10
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8c:	f003 021c 	and.w	r2, r3, #28
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c94:	2102      	movs	r1, #2
 8001c96:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d038      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cb4:	e033      	b.n	8001d1e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cba:	f003 031c 	and.w	r3, r3, #28
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	409a      	lsls	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d02a      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x156>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d025      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 020e 	bic.w	r2, r2, #14
 8001ce2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce8:	f003 021c 	and.w	r2, r3, #28
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
}
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	f003 021c 	and.w	r2, r3, #28
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d108      	bne.n	8001d6c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d6a:	e007      	b.n	8001d7c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	60da      	str	r2, [r3, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e17f      	b.n	8002098 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 8171 	beq.w	8002092 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d005      	beq.n	8001dc8 <HAL_GPIO_Init+0x40>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 0201 	and.w	r2, r3, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d118      	bne.n	8001e68 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	f003 0201 	and.w	r2, r3, #1
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d017      	beq.n	8001ea4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	2203      	movs	r2, #3
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d123      	bne.n	8001ef8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	08da      	lsrs	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3208      	adds	r2, #8
 8001eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	220f      	movs	r2, #15
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	6939      	ldr	r1, [r7, #16]
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0203 	and.w	r2, r3, #3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 80ac 	beq.w	8002092 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80020b8 <HAL_GPIO_Init+0x330>)
 8001f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80020b8 <HAL_GPIO_Init+0x330>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f46:	4b5c      	ldr	r3, [pc, #368]	@ (80020b8 <HAL_GPIO_Init+0x330>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f52:	4a5a      	ldr	r2, [pc, #360]	@ (80020bc <HAL_GPIO_Init+0x334>)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4013      	ands	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x242>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4f      	ldr	r2, [pc, #316]	@ (80020c0 <HAL_GPIO_Init+0x338>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x23e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	@ (80020c4 <HAL_GPIO_Init+0x33c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x23a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4d      	ldr	r2, [pc, #308]	@ (80020c8 <HAL_GPIO_Init+0x340>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x236>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	@ (80020cc <HAL_GPIO_Init+0x344>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x232>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80020d0 <HAL_GPIO_Init+0x348>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x22e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80020d4 <HAL_GPIO_Init+0x34c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x22a>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e00c      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00a      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x244>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fdc:	4937      	ldr	r1, [pc, #220]	@ (80020bc <HAL_GPIO_Init+0x334>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fea:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4313      	orrs	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800200e:	4a32      	ldr	r2, [pc, #200]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002014:	4b30      	ldr	r3, [pc, #192]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002038:	4a27      	ldr	r2, [pc, #156]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800203e:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002062:	4a1d      	ldr	r2, [pc, #116]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800208c:	4a12      	ldr	r2, [pc, #72]	@ (80020d8 <HAL_GPIO_Init+0x350>)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	3301      	adds	r3, #1
 8002096:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa22 f303 	lsr.w	r3, r2, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f47f ae78 	bne.w	8001d98 <HAL_GPIO_Init+0x10>
  }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40010000 	.word	0x40010000
 80020c0:	48000400 	.word	0x48000400
 80020c4:	48000800 	.word	0x48000800
 80020c8:	48000c00 	.word	0x48000c00
 80020cc:	48001000 	.word	0x48001000
 80020d0:	48001400 	.word	0x48001400
 80020d4:	48001800 	.word	0x48001800
 80020d8:	40010400 	.word	0x40010400

080020dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	887b      	ldrh	r3, [r7, #2]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d002      	beq.n	80020fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e001      	b.n	80020fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002128:	e002      	b.n	8002130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002140:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <HAL_PWREx_GetVoltageRange+0x18>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40007000 	.word	0x40007000

08002158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002166:	d130      	bne.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	4b23      	ldr	r3, [pc, #140]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002174:	d038      	beq.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002176:	4b20      	ldr	r3, [pc, #128]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2232      	movs	r2, #50	@ 0x32
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9b      	lsrs	r3, r3, #18
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219c:	e002      	b.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	4b14      	ldr	r3, [pc, #80]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b0:	d102      	bne.n	80021b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f2      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c4:	d110      	bne.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e00f      	b.n	80021ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021ca:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021d6:	d007      	beq.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d8:	4b07      	ldr	r3, [pc, #28]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e0:	4a05      	ldr	r2, [pc, #20]	@ (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000
 80021fc:	2000002c 	.word	0x2000002c
 8002200:	431bde83 	.word	0x431bde83

08002204 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ca      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002216:	4b97      	ldr	r3, [pc, #604]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002220:	4b94      	ldr	r3, [pc, #592]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80e4 	beq.w	8002400 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_RCC_OscConfig+0x4a>
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	2b0c      	cmp	r3, #12
 8002242:	f040 808b 	bne.w	800235c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b01      	cmp	r3, #1
 800224a:	f040 8087 	bne.w	800235c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800224e:	4b89      	ldr	r3, [pc, #548]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_RCC_OscConfig+0x62>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e3a2      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1a      	ldr	r2, [r3, #32]
 800226a:	4b82      	ldr	r3, [pc, #520]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_RCC_OscConfig+0x7c>
 8002276:	4b7f      	ldr	r3, [pc, #508]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800227e:	e005      	b.n	800228c <HAL_RCC_OscConfig+0x88>
 8002280:	4b7c      	ldr	r3, [pc, #496]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800228c:	4293      	cmp	r3, r2
 800228e:	d223      	bcs.n	80022d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4618      	mov	r0, r3
 8002296:	f000 fd55 	bl	8002d44 <RCC_SetFlashLatencyFromMSIRange>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e383      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a4:	4b73      	ldr	r3, [pc, #460]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a72      	ldr	r2, [pc, #456]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b70      	ldr	r3, [pc, #448]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	496d      	ldr	r1, [pc, #436]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	4968      	ldr	r1, [pc, #416]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	604b      	str	r3, [r1, #4]
 80022d6:	e025      	b.n	8002324 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d8:	4b66      	ldr	r3, [pc, #408]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a65      	ldr	r2, [pc, #404]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022de:	f043 0308 	orr.w	r3, r3, #8
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b63      	ldr	r3, [pc, #396]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	4960      	ldr	r1, [pc, #384]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022f6:	4b5f      	ldr	r3, [pc, #380]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	495b      	ldr	r1, [pc, #364]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002306:	4313      	orrs	r3, r2
 8002308:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 fd15 	bl	8002d44 <RCC_SetFlashLatencyFromMSIRange>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e343      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002324:	f000 fc4a 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b52      	ldr	r3, [pc, #328]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	4950      	ldr	r1, [pc, #320]	@ (8002478 <HAL_RCC_OscConfig+0x274>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	f003 031f 	and.w	r3, r3, #31
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a4e      	ldr	r2, [pc, #312]	@ (800247c <HAL_RCC_OscConfig+0x278>)
 8002342:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002344:	4b4e      	ldr	r3, [pc, #312]	@ (8002480 <HAL_RCC_OscConfig+0x27c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f915 	bl	8001578 <HAL_InitTick>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d052      	beq.n	80023fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	e327      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d032      	beq.n	80023ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002364:	4b43      	ldr	r3, [pc, #268]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a42      	ldr	r2, [pc, #264]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002370:	f7ff f952 	bl	8001618 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002378:	f7ff f94e 	bl	8001618 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e310      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238a:	4b3a      	ldr	r3, [pc, #232]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002396:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a36      	ldr	r2, [pc, #216]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b34      	ldr	r3, [pc, #208]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4931      	ldr	r1, [pc, #196]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	492c      	ldr	r1, [pc, #176]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
 80023c8:	e01a      	b.n	8002400 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a29      	ldr	r2, [pc, #164]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d6:	f7ff f91f 	bl	8001618 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023de:	f7ff f91b 	bl	8001618 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e2dd      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f0:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x1da>
 80023fc:	e000      	b.n	8002400 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d074      	beq.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b08      	cmp	r3, #8
 8002410:	d005      	beq.n	800241e <HAL_RCC_OscConfig+0x21a>
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b0c      	cmp	r3, #12
 8002416:	d10e      	bne.n	8002436 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d10b      	bne.n	8002436 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d064      	beq.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d160      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e2ba      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x24a>
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e026      	b.n	800249c <HAL_RCC_OscConfig+0x298>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002456:	d115      	bne.n	8002484 <HAL_RCC_OscConfig+0x280>
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800245e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a02      	ldr	r2, [pc, #8]	@ (8002474 <HAL_RCC_OscConfig+0x270>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e014      	b.n	800249c <HAL_RCC_OscConfig+0x298>
 8002472:	bf00      	nop
 8002474:	40021000 	.word	0x40021000
 8002478:	0800d354 	.word	0x0800d354
 800247c:	2000002c 	.word	0x2000002c
 8002480:	20000030 	.word	0x20000030
 8002484:	4ba0      	ldr	r3, [pc, #640]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a9f      	ldr	r2, [pc, #636]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800248a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	4b9d      	ldr	r3, [pc, #628]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a9c      	ldr	r2, [pc, #624]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800249a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d013      	beq.n	80024cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff f8b8 	bl	8001618 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ac:	f7ff f8b4 	bl	8001618 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b64      	cmp	r3, #100	@ 0x64
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e276      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024be:	4b92      	ldr	r3, [pc, #584]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x2a8>
 80024ca:	e014      	b.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff f8a4 	bl	8001618 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f8a0 	bl	8001618 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b64      	cmp	r3, #100	@ 0x64
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e262      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e6:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2d0>
 80024f2:	e000      	b.n	80024f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d060      	beq.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d005      	beq.n	8002514 <HAL_RCC_OscConfig+0x310>
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b0c      	cmp	r3, #12
 800250c:	d119      	bne.n	8002542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d116      	bne.n	8002542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002514:	4b7c      	ldr	r3, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_OscConfig+0x328>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e23f      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b76      	ldr	r3, [pc, #472]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	4973      	ldr	r1, [pc, #460]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002540:	e040      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d023      	beq.n	8002592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800254a:	4b6f      	ldr	r3, [pc, #444]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a6e      	ldr	r2, [pc, #440]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7ff f85f 	bl	8001618 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255e:	f7ff f85b 	bl	8001618 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e21d      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002570:	4b65      	ldr	r3, [pc, #404]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800257c:	4b62      	ldr	r3, [pc, #392]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	061b      	lsls	r3, r3, #24
 800258a:	495f      	ldr	r1, [pc, #380]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e018      	b.n	80025c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002592:	4b5d      	ldr	r3, [pc, #372]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5c      	ldr	r2, [pc, #368]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800259c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259e:	f7ff f83b 	bl	8001618 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a6:	f7ff f837 	bl	8001618 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e1f9      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b8:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0308 	and.w	r3, r3, #8
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d03c      	beq.n	800264a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01c      	beq.n	8002612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80025da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025de:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff f816 	bl	8001618 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f0:	f7ff f812 	bl	8001618 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1d4      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002604:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ef      	beq.n	80025f0 <HAL_RCC_OscConfig+0x3ec>
 8002610:	e01b      	b.n	800264a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002618:	4a3b      	ldr	r2, [pc, #236]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7fe fff9 	bl	8001618 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fff5 	bl	8001618 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1b7      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800263c:	4b32      	ldr	r3, [pc, #200]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ef      	bne.n	800262a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a6 	beq.w	80027a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800265c:	4b2a      	ldr	r3, [pc, #168]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10d      	bne.n	8002684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266c:	4a26      	ldr	r2, [pc, #152]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 800266e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002672:	6593      	str	r3, [r2, #88]	@ 0x58
 8002674:	4b24      	ldr	r3, [pc, #144]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002680:	2301      	movs	r3, #1
 8002682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	4b21      	ldr	r3, [pc, #132]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a1d      	ldr	r2, [pc, #116]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800269c:	f7fe ffbc 	bl	8001618 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe ffb8 	bl	8001618 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e17a      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b6:	4b15      	ldr	r3, [pc, #84]	@ (800270c <HAL_RCC_OscConfig+0x508>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_RCC_OscConfig+0x4d8>
 80026ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026da:	e029      	b.n	8002730 <HAL_RCC_OscConfig+0x52c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b05      	cmp	r3, #5
 80026e2:	d115      	bne.n	8002710 <HAL_RCC_OscConfig+0x50c>
 80026e4:	4b08      	ldr	r3, [pc, #32]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ea:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fa:	4a03      	ldr	r2, [pc, #12]	@ (8002708 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x52c>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	40007000 	.word	0x40007000
 8002710:	4b9c      	ldr	r3, [pc, #624]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002716:	4a9b      	ldr	r2, [pc, #620]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002720:	4b98      	ldr	r3, [pc, #608]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002726:	4a97      	ldr	r2, [pc, #604]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d016      	beq.n	8002766 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7fe ff6e 	bl	8001618 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273e:	e00a      	b.n	8002756 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002740:	f7fe ff6a 	bl	8001618 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274e:	4293      	cmp	r3, r2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e12a      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	4b8b      	ldr	r3, [pc, #556]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ed      	beq.n	8002740 <HAL_RCC_OscConfig+0x53c>
 8002764:	e015      	b.n	8002792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002766:	f7fe ff57 	bl	8001618 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276c:	e00a      	b.n	8002784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276e:	f7fe ff53 	bl	8001618 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277c:	4293      	cmp	r3, r2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e113      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	4b7f      	ldr	r3, [pc, #508]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1ed      	bne.n	800276e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002792:	7ffb      	ldrb	r3, [r7, #31]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d105      	bne.n	80027a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002798:	4b7a      	ldr	r3, [pc, #488]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	4a79      	ldr	r2, [pc, #484]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800279e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80fe 	beq.w	80029aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	f040 80d0 	bne.w	8002958 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027b8:	4b72      	ldr	r3, [pc, #456]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d130      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	3b01      	subs	r3, #1
 80027d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d127      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d11f      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80027f8:	2a07      	cmp	r2, #7
 80027fa:	bf14      	ite	ne
 80027fc:	2201      	movne	r2, #1
 80027fe:	2200      	moveq	r2, #0
 8002800:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002802:	4293      	cmp	r3, r2
 8002804:	d113      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d109      	bne.n	800282e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	085b      	lsrs	r3, r3, #1
 8002826:	3b01      	subs	r3, #1
 8002828:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d06e      	beq.n	800290c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b0c      	cmp	r3, #12
 8002832:	d069      	beq.n	8002908 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002834:	4b53      	ldr	r3, [pc, #332]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002840:	4b50      	ldr	r3, [pc, #320]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0ad      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002850:	4b4c      	ldr	r3, [pc, #304]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a4b      	ldr	r2, [pc, #300]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800285a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285c:	f7fe fedc 	bl	8001618 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fed8 	bl	8001618 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e09a      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002876:	4b43      	ldr	r3, [pc, #268]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002882:	4b40      	ldr	r3, [pc, #256]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	4b40      	ldr	r3, [pc, #256]	@ (8002988 <HAL_RCC_OscConfig+0x784>)
 8002888:	4013      	ands	r3, r2
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002892:	3a01      	subs	r2, #1
 8002894:	0112      	lsls	r2, r2, #4
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800289c:	0212      	lsls	r2, r2, #8
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028a4:	0852      	lsrs	r2, r2, #1
 80028a6:	3a01      	subs	r2, #1
 80028a8:	0552      	lsls	r2, r2, #21
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028b0:	0852      	lsrs	r2, r2, #1
 80028b2:	3a01      	subs	r2, #1
 80028b4:	0652      	lsls	r2, r2, #25
 80028b6:	4311      	orrs	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028bc:	0912      	lsrs	r2, r2, #4
 80028be:	0452      	lsls	r2, r2, #17
 80028c0:	430a      	orrs	r2, r1
 80028c2:	4930      	ldr	r1, [pc, #192]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e0:	f7fe fe9a 	bl	8001618 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fe fe96 	bl	8001618 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e058      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fa:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002906:	e050      	b.n	80029aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e04f      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d148      	bne.n	80029aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002918:	4b1a      	ldr	r3, [pc, #104]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a19      	ldr	r2, [pc, #100]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002924:	4b17      	ldr	r3, [pc, #92]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800292a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002930:	f7fe fe72 	bl	8001618 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fe6e 	bl	8001618 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e030      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	4b0e      	ldr	r3, [pc, #56]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x734>
 8002956:	e028      	b.n	80029aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d023      	beq.n	80029a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800295e:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a08      	ldr	r2, [pc, #32]	@ (8002984 <HAL_RCC_OscConfig+0x780>)
 8002964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fe55 	bl	8001618 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002970:	e00c      	b.n	800298c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fe51 	bl	8001618 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d905      	bls.n	800298c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e013      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
 8002984:	40021000 	.word	0x40021000
 8002988:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_OscConfig+0x7b0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ec      	bne.n	8002972 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_RCC_OscConfig+0x7b0>)
 800299a:	68da      	ldr	r2, [r3, #12]
 800299c:	4905      	ldr	r1, [pc, #20]	@ (80029b4 <HAL_RCC_OscConfig+0x7b0>)
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_RCC_OscConfig+0x7b4>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	60cb      	str	r3, [r1, #12]
 80029a4:	e001      	b.n	80029aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	feeefffc 	.word	0xfeeefffc

080029bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0e7      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b75      	ldr	r3, [pc, #468]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d910      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b72      	ldr	r3, [pc, #456]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4970      	ldr	r1, [pc, #448]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0cf      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d010      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	4b66      	ldr	r3, [pc, #408]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d908      	bls.n	8002a2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1c:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4960      	ldr	r1, [pc, #384]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d04c      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a42:	4b5a      	ldr	r3, [pc, #360]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d121      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0a6      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5a:	4b54      	ldr	r3, [pc, #336]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d115      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e09a      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a72:	4b4e      	ldr	r3, [pc, #312]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e08e      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a82:	4b4a      	ldr	r3, [pc, #296]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e086      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a92:	4b46      	ldr	r3, [pc, #280]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f023 0203 	bic.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4943      	ldr	r1, [pc, #268]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fdb8 	bl	8001618 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe fdb4 	bl	8001618 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e06e      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 020c 	and.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d1eb      	bne.n	8002aac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d010      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d208      	bcs.n	8002b02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af0:	4b2e      	ldr	r3, [pc, #184]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	492b      	ldr	r1, [pc, #172]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b02:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d210      	bcs.n	8002b32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 0207 	bic.w	r2, r3, #7
 8002b18:	4923      	ldr	r1, [pc, #140]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b20:	4b21      	ldr	r3, [pc, #132]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e036      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0304 	and.w	r3, r3, #4
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	4918      	ldr	r1, [pc, #96]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4910      	ldr	r1, [pc, #64]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b70:	f000 f824 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <HAL_RCC_ClockConfig+0x1f0>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	490b      	ldr	r1, [pc, #44]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	4a09      	ldr	r2, [pc, #36]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1fc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fcef 	bl	8001578 <HAL_InitTick>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	0800d354 	.word	0x0800d354
 8002bb4:	2000002c 	.word	0x2000002c
 8002bb8:	20000030 	.word	0x20000030

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b089      	sub	sp, #36	@ 0x24
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bca:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b0c      	cmp	r3, #12
 8002be8:	d121      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d11e      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf0:	4b34      	ldr	r3, [pc, #208]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bfc:	4b31      	ldr	r3, [pc, #196]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	091b      	lsrs	r3, r3, #4
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c18:	4a2b      	ldr	r2, [pc, #172]	@ (8002cc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10d      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d102      	bne.n	8002c3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c34:	4b25      	ldr	r3, [pc, #148]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e004      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c40:	4b23      	ldr	r3, [pc, #140]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	2b0c      	cmp	r3, #12
 8002c48:	d134      	bne.n	8002cb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d003      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0xac>
 8002c60:	e005      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	e005      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c68:	4b19      	ldr	r3, [pc, #100]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c6a:	617b      	str	r3, [r7, #20]
      break;
 8002c6c:	e002      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	617b      	str	r3, [r7, #20]
      break;
 8002c72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	3301      	adds	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	0e5b      	lsrs	r3, r3, #25
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	@ 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	0800d36c 	.word	0x0800d36c
 8002ccc:	00f42400 	.word	0x00f42400
 8002cd0:	01770000 	.word	0x01770000

08002cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cd8:	4b03      	ldr	r3, [pc, #12]	@ (8002ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	2000002c 	.word	0x2000002c

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cf0:	f7ff fff0 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	@ (8002d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	0800d364 	.word	0x0800d364

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d1c:	f7ff ffda 	bl	8002cd4 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0adb      	lsrs	r3, r3, #11
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4904      	ldr	r1, [pc, #16]	@ (8002d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	0800d364 	.word	0x0800d364

08002d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d50:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d003      	beq.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d5c:	f7ff f9ee 	bl	800213c <HAL_PWREx_GetVoltageRange>
 8002d60:	6178      	str	r0, [r7, #20]
 8002d62:	e014      	b.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d70:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d7c:	f7ff f9de 	bl	800213c <HAL_PWREx_GetVoltageRange>
 8002d80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d82:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d94:	d10b      	bne.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b80      	cmp	r3, #128	@ 0x80
 8002d9a:	d919      	bls.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002da0:	d902      	bls.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da2:	2302      	movs	r3, #2
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	e013      	b.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002da8:	2301      	movs	r3, #1
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e010      	b.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b80      	cmp	r3, #128	@ 0x80
 8002db2:	d902      	bls.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002db4:	2303      	movs	r3, #3
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e00a      	b.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b80      	cmp	r3, #128	@ 0x80
 8002dbe:	d102      	bne.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	e004      	b.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b70      	cmp	r3, #112	@ 0x70
 8002dca:	d101      	bne.n	8002dd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dcc:	2301      	movs	r3, #1
 8002dce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 0207 	bic.w	r2, r3, #7
 8002dd8:	4909      	ldr	r1, [pc, #36]	@ (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002de0:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	40022000 	.word	0x40022000

08002e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e10:	2300      	movs	r3, #0
 8002e12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d041      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e28:	d02a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e2e:	d824      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e3a:	d81e      	bhi.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e44:	d010      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e46:	e018      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e48:	4b86      	ldr	r3, [pc, #536]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a85      	ldr	r2, [pc, #532]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e54:	e015      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 f829 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8002e62:	4603      	mov	r3, r0
 8002e64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e66:	e00c      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3320      	adds	r3, #32
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f914 	bl	800409c <RCCEx_PLLSAI2_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e78:	e003      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e82:	7cfb      	ldrb	r3, [r7, #19]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e88:	4b76      	ldr	r3, [pc, #472]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e96:	4973      	ldr	r1, [pc, #460]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e9e:	e001      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d041      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002eb8:	d02a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002eba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ebe:	d824      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ec0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ec4:	d008      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ec6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002eca:	d81e      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ed4:	d010      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ed6:	e018      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ed8:	4b62      	ldr	r3, [pc, #392]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	4a61      	ldr	r2, [pc, #388]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ee2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ee4:	e015      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3304      	adds	r3, #4
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f000 ffe1 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef6:	e00c      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3320      	adds	r3, #32
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 f8cc 	bl	800409c <RCCEx_PLLSAI2_Config>
 8002f04:	4603      	mov	r3, r0
 8002f06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f08:	e003      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	74fb      	strb	r3, [r7, #19]
      break;
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f12:	7cfb      	ldrb	r3, [r7, #19]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f18:	4b52      	ldr	r3, [pc, #328]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f26:	494f      	ldr	r1, [pc, #316]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f2e:	e001      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a0 	beq.w	8003082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5c:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f60:	4a40      	ldr	r2, [pc, #256]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f66:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f68:	4b3e      	ldr	r3, [pc, #248]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f74:	2301      	movs	r3, #1
 8002f76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f78:	4b3b      	ldr	r3, [pc, #236]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f84:	f7fe fb48 	bl	8001618 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f8a:	e009      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8c:	f7fe fb44 	bl	8001618 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d902      	bls.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f9e:	e005      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa0:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0ef      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d15c      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01f      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d019      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fd0:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fdc:	4b21      	ldr	r3, [pc, #132]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	4a20      	ldr	r2, [pc, #128]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fec:	4b1d      	ldr	r3, [pc, #116]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ffc:	4a19      	ldr	r2, [pc, #100]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fb03 	bl	8001618 <HAL_GetTick>
 8003012:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003014:	e00b      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe faff 	bl	8001618 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d902      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	74fb      	strb	r3, [r7, #19]
            break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302e:	4b0d      	ldr	r3, [pc, #52]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ec      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003042:	4b08      	ldr	r3, [pc, #32]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003052:	4904      	ldr	r1, [pc, #16]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800305a:	e009      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
 8003060:	e006      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003070:	7c7b      	ldrb	r3, [r7, #17]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d105      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b9e      	ldr	r3, [pc, #632]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	4a9d      	ldr	r2, [pc, #628]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003080:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800308e:	4b98      	ldr	r3, [pc, #608]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003094:	f023 0203 	bic.w	r2, r3, #3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	4994      	ldr	r1, [pc, #592]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00a      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b0:	4b8f      	ldr	r3, [pc, #572]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b6:	f023 020c 	bic.w	r2, r3, #12
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030be:	498c      	ldr	r1, [pc, #560]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00a      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030d2:	4b87      	ldr	r3, [pc, #540]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e0:	4983      	ldr	r1, [pc, #524]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0308 	and.w	r3, r3, #8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00a      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030f4:	4b7e      	ldr	r3, [pc, #504]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	497b      	ldr	r1, [pc, #492]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003104:	4313      	orrs	r3, r2
 8003106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00a      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003116:	4b76      	ldr	r3, [pc, #472]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003124:	4972      	ldr	r1, [pc, #456]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	4313      	orrs	r3, r2
 8003128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003138:	4b6d      	ldr	r3, [pc, #436]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003146:	496a      	ldr	r1, [pc, #424]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003148:	4313      	orrs	r3, r2
 800314a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800315a:	4b65      	ldr	r3, [pc, #404]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003160:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003168:	4961      	ldr	r1, [pc, #388]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800317c:	4b5c      	ldr	r3, [pc, #368]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	4959      	ldr	r1, [pc, #356]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319e:	4b54      	ldr	r3, [pc, #336]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ac:	4950      	ldr	r1, [pc, #320]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00a      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c0:	4b4b      	ldr	r3, [pc, #300]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	4948      	ldr	r1, [pc, #288]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031e2:	4b43      	ldr	r3, [pc, #268]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f0:	493f      	ldr	r1, [pc, #252]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d028      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003204:	4b3a      	ldr	r3, [pc, #232]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003212:	4937      	ldr	r1, [pc, #220]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003222:	d106      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003224:	4b32      	ldr	r3, [pc, #200]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	4a31      	ldr	r2, [pc, #196]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800322e:	60d3      	str	r3, [r2, #12]
 8003230:	e011      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800323a:	d10c      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fe36 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d028      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003262:	4b23      	ldr	r3, [pc, #140]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003268:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003270:	491f      	ldr	r1, [pc, #124]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003280:	d106      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003282:	4b1b      	ldr	r3, [pc, #108]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328c:	60d3      	str	r3, [r2, #12]
 800328e:	e011      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003298:	d10c      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3304      	adds	r3, #4
 800329e:	2101      	movs	r1, #1
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fe07 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032aa:	7cfb      	ldrb	r3, [r7, #19]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02b      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ce:	4908      	ldr	r1, [pc, #32]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032de:	d109      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e0:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4a02      	ldr	r2, [pc, #8]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ea:	60d3      	str	r3, [r2, #12]
 80032ec:	e014      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fdd5 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02f      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003324:	4b2b      	ldr	r3, [pc, #172]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003332:	4928      	ldr	r1, [pc, #160]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800333e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003342:	d10d      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fdb2 	bl	8003eb4 <RCCEx_PLLSAI1_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003354:	7cfb      	ldrb	r3, [r7, #19]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	74bb      	strb	r3, [r7, #18]
 800335e:	e011      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003364:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003368:	d10c      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3320      	adds	r3, #32
 800336e:	2102      	movs	r1, #2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fe93 	bl	800409c <RCCEx_PLLSAI2_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003390:	4b10      	ldr	r3, [pc, #64]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800339e:	490d      	ldr	r1, [pc, #52]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033c2:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033ea:	d13e      	bne.n	800346a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80033ec:	4bb2      	ldr	r3, [pc, #712]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80033ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033f6:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033fe:	d028      	beq.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003406:	f200 8542 	bhi.w	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003410:	d005      	beq.n	800341e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003418:	d00e      	beq.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800341a:	f000 bd38 	b.w	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800341e:	4ba6      	ldr	r3, [pc, #664]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b02      	cmp	r3, #2
 800342a:	f040 8532 	bne.w	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800342e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003432:	61fb      	str	r3, [r7, #28]
      break;
 8003434:	f000 bd2d 	b.w	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003438:	4b9f      	ldr	r3, [pc, #636]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800343a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b02      	cmp	r3, #2
 8003444:	f040 8527 	bne.w	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003448:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800344c:	61fb      	str	r3, [r7, #28]
      break;
 800344e:	f000 bd22 	b.w	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003452:	4b99      	ldr	r3, [pc, #612]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800345e:	f040 851c 	bne.w	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003462:	4b96      	ldr	r3, [pc, #600]	@ (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003464:	61fb      	str	r3, [r7, #28]
      break;
 8003466:	f000 bd18 	b.w	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346a:	4b93      	ldr	r3, [pc, #588]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d036      	beq.n	80034e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2b03      	cmp	r3, #3
 800347e:	d840      	bhi.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d020      	beq.n	80034ce <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 800348c:	e039      	b.n	8003502 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800348e:	4b8a      	ldr	r3, [pc, #552]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b02      	cmp	r3, #2
 8003498:	d116      	bne.n	80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800349a:	4b87      	ldr	r3, [pc, #540]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80034a6:	4b84      	ldr	r3, [pc, #528]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	e005      	b.n	80034be <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80034b2:	4b81      	ldr	r3, [pc, #516]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b8:	0a1b      	lsrs	r3, r3, #8
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	4a80      	ldr	r2, [pc, #512]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80034c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80034c6:	e01f      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	61bb      	str	r3, [r7, #24]
      break;
 80034cc:	e01c      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034ce:	4b7a      	ldr	r3, [pc, #488]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034da:	d102      	bne.n	80034e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80034dc:	4b79      	ldr	r3, [pc, #484]	@ (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80034de:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80034e0:	e012      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
      break;
 80034e6:	e00f      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034e8:	4b73      	ldr	r3, [pc, #460]	@ (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034f4:	d102      	bne.n	80034fc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80034f6:	4b74      	ldr	r3, [pc, #464]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80034f8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80034fa:	e005      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	61bb      	str	r3, [r7, #24]
      break;
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	61bb      	str	r3, [r7, #24]
      break;
 8003506:	bf00      	nop
    }

    switch(PeriphClk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800350e:	f000 80dd 	beq.w	80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003518:	f200 84c1 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003522:	f000 80d3 	beq.w	80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800352c:	f200 84b7 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003536:	f000 835f 	beq.w	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003540:	f200 84ad 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800354a:	f000 847e 	beq.w	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003554:	f200 84a3 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355e:	f000 82cd 	beq.w	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003568:	f200 8499 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003572:	f000 80ab 	beq.w	80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357c:	f200 848f 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003586:	f000 8090 	beq.w	80036aa <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003590:	f200 8485 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800359a:	d07f      	beq.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a2:	f200 847c 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ac:	f000 8403 	beq.w	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b6:	f200 8472 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c0:	f000 83af 	beq.w	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ca:	f200 8468 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d4:	f000 8379 	beq.w	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035de:	f200 845e 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b80      	cmp	r3, #128	@ 0x80
 80035e6:	f000 8344 	beq.w	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	@ 0x80
 80035ee:	f200 8456 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d84b      	bhi.n	8003690 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 844f 	beq.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	2b1f      	cmp	r3, #31
 8003606:	f200 844a 	bhi.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800360a:	a201      	add	r2, pc, #4	@ (adr r2, 8003610 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	080037f9 	.word	0x080037f9
 8003614:	08003867 	.word	0x08003867
 8003618:	08003e9f 	.word	0x08003e9f
 800361c:	080038fb 	.word	0x080038fb
 8003620:	08003e9f 	.word	0x08003e9f
 8003624:	08003e9f 	.word	0x08003e9f
 8003628:	08003e9f 	.word	0x08003e9f
 800362c:	08003981 	.word	0x08003981
 8003630:	08003e9f 	.word	0x08003e9f
 8003634:	08003e9f 	.word	0x08003e9f
 8003638:	08003e9f 	.word	0x08003e9f
 800363c:	08003e9f 	.word	0x08003e9f
 8003640:	08003e9f 	.word	0x08003e9f
 8003644:	08003e9f 	.word	0x08003e9f
 8003648:	08003e9f 	.word	0x08003e9f
 800364c:	080039f9 	.word	0x080039f9
 8003650:	08003e9f 	.word	0x08003e9f
 8003654:	08003e9f 	.word	0x08003e9f
 8003658:	08003e9f 	.word	0x08003e9f
 800365c:	08003e9f 	.word	0x08003e9f
 8003660:	08003e9f 	.word	0x08003e9f
 8003664:	08003e9f 	.word	0x08003e9f
 8003668:	08003e9f 	.word	0x08003e9f
 800366c:	08003e9f 	.word	0x08003e9f
 8003670:	08003e9f 	.word	0x08003e9f
 8003674:	08003e9f 	.word	0x08003e9f
 8003678:	08003e9f 	.word	0x08003e9f
 800367c:	08003e9f 	.word	0x08003e9f
 8003680:	08003e9f 	.word	0x08003e9f
 8003684:	08003e9f 	.word	0x08003e9f
 8003688:	08003e9f 	.word	0x08003e9f
 800368c:	08003a7b 	.word	0x08003a7b
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b40      	cmp	r3, #64	@ 0x40
 8003694:	f000 82c1 	beq.w	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003698:	f000 bc01 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036a2:	f000 fdd9 	bl	8004258 <RCCEx_GetSAIxPeriphCLKFreq>
 80036a6:	61f8      	str	r0, [r7, #28]
      break;
 80036a8:	e3fa      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80036aa:	69b9      	ldr	r1, [r7, #24]
 80036ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80036b0:	f000 fdd2 	bl	8004258 <RCCEx_GetSAIxPeriphCLKFreq>
 80036b4:	61f8      	str	r0, [r7, #28]
      break;
 80036b6:	e3f3      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80036b8:	40021000 	.word	0x40021000
 80036bc:	000bb800 	.word	0x000bb800
 80036c0:	0800d36c 	.word	0x0800d36c
 80036c4:	00f42400 	.word	0x00f42400
 80036c8:	01770000 	.word	0x01770000
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80036cc:	4ba9      	ldr	r3, [pc, #676]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036de:	d00c      	beq.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036e6:	d87f      	bhi.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ee:	d04e      	beq.n	800378e <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036f6:	d01d      	beq.n	8003734 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80036f8:	e076      	b.n	80037e8 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80036fa:	4b9e      	ldr	r3, [pc, #632]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d172      	bne.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003706:	4b9b      	ldr	r3, [pc, #620]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003712:	4b98      	ldr	r3, [pc, #608]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	091b      	lsrs	r3, r3, #4
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	e005      	b.n	800372a <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800371e:	4b95      	ldr	r3, [pc, #596]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a93      	ldr	r2, [pc, #588]	@ (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	61fb      	str	r3, [r7, #28]
          break;
 8003732:	e05b      	b.n	80037ec <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003734:	4b8f      	ldr	r3, [pc, #572]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003740:	d156      	bne.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003742:	4b8c      	ldr	r3, [pc, #560]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800374a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800374e:	d14f      	bne.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003750:	4b88      	ldr	r3, [pc, #544]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800375a:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	fb03 f202 	mul.w	r2, r3, r2
 8003764:	4b83      	ldr	r3, [pc, #524]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	3301      	adds	r3, #1
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003776:	4b7f      	ldr	r3, [pc, #508]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	0d5b      	lsrs	r3, r3, #21
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	3301      	adds	r3, #1
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	fbb2 f3f3 	udiv	r3, r2, r3
 800378a:	61fb      	str	r3, [r7, #28]
          break;
 800378c:	e030      	b.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800378e:	4b79      	ldr	r3, [pc, #484]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003796:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800379a:	d12b      	bne.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800379c:	4b75      	ldr	r3, [pc, #468]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037a8:	d124      	bne.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80037aa:	4b72      	ldr	r3, [pc, #456]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	0a1b      	lsrs	r3, r3, #8
 80037b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037b4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	fb03 f202 	mul.w	r2, r3, r2
 80037be:	4b6d      	ldr	r3, [pc, #436]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	3301      	adds	r3, #1
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80037d0:	4b68      	ldr	r3, [pc, #416]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	0d5b      	lsrs	r3, r3, #21
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	61fb      	str	r3, [r7, #28]
          break;
 80037e6:	e005      	b.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80037e8:	bf00      	nop
 80037ea:	e359      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037ec:	bf00      	nop
 80037ee:	e357      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037f0:	bf00      	nop
 80037f2:	e355      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037f4:	bf00      	nop
        break;
 80037f6:	e353      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80037f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b03      	cmp	r3, #3
 8003808:	d827      	bhi.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800380a:	a201      	add	r2, pc, #4	@ (adr r2, 8003810 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003821 	.word	0x08003821
 8003814:	08003829 	.word	0x08003829
 8003818:	08003831 	.word	0x08003831
 800381c:	08003845 	.word	0x08003845
          frequency = HAL_RCC_GetPCLK2Freq();
 8003820:	f7ff fa7a 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8003824:	61f8      	str	r0, [r7, #28]
          break;
 8003826:	e01d      	b.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003828:	f7ff f9c8 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 800382c:	61f8      	str	r0, [r7, #28]
          break;
 800382e:	e019      	b.n	8003864 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003830:	4b50      	ldr	r3, [pc, #320]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383c:	d10f      	bne.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800383e:	4b4f      	ldr	r3, [pc, #316]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003840:	61fb      	str	r3, [r7, #28]
          break;
 8003842:	e00c      	b.n	800385e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003844:	4b4b      	ldr	r3, [pc, #300]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d107      	bne.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003852:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003856:	61fb      	str	r3, [r7, #28]
          break;
 8003858:	e003      	b.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800385a:	bf00      	nop
 800385c:	e320      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800385e:	bf00      	nop
 8003860:	e31e      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003862:	bf00      	nop
        break;
 8003864:	e31c      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003866:	4b43      	ldr	r3, [pc, #268]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800386c:	f003 030c 	and.w	r3, r3, #12
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d83a      	bhi.n	80038ee <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003878:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800387a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387e:	bf00      	nop
 8003880:	080038b5 	.word	0x080038b5
 8003884:	080038ef 	.word	0x080038ef
 8003888:	080038ef 	.word	0x080038ef
 800388c:	080038ef 	.word	0x080038ef
 8003890:	080038bd 	.word	0x080038bd
 8003894:	080038ef 	.word	0x080038ef
 8003898:	080038ef 	.word	0x080038ef
 800389c:	080038ef 	.word	0x080038ef
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038ef 	.word	0x080038ef
 80038a8:	080038ef 	.word	0x080038ef
 80038ac:	080038ef 	.word	0x080038ef
 80038b0:	080038d9 	.word	0x080038d9
          frequency = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7ff fa1a 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80038b8:	61f8      	str	r0, [r7, #28]
          break;
 80038ba:	e01d      	b.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80038bc:	f7ff f97e 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 80038c0:	61f8      	str	r0, [r7, #28]
          break;
 80038c2:	e019      	b.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d0:	d10f      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80038d2:	4b2a      	ldr	r3, [pc, #168]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80038d4:	61fb      	str	r3, [r7, #28]
          break;
 80038d6:	e00c      	b.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038d8:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80038e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038ea:	61fb      	str	r3, [r7, #28]
          break;
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80038ee:	bf00      	nop
 80038f0:	e2d6      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038f2:	bf00      	nop
 80038f4:	e2d4      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038f6:	bf00      	nop
        break;
 80038f8:	e2d2      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80038fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b30      	cmp	r3, #48	@ 0x30
 800390a:	d021      	beq.n	8003950 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b30      	cmp	r3, #48	@ 0x30
 8003910:	d829      	bhi.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b20      	cmp	r3, #32
 8003916:	d011      	beq.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b20      	cmp	r3, #32
 800391c:	d823      	bhi.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b10      	cmp	r3, #16
 8003928:	d004      	beq.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800392a:	e01c      	b.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 800392c:	f7ff f9de 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003930:	61f8      	str	r0, [r7, #28]
          break;
 8003932:	e01d      	b.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003934:	f7ff f942 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003938:	61f8      	str	r0, [r7, #28]
          break;
 800393a:	e019      	b.n	8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003944:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003948:	d10f      	bne.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800394a:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800394c:	61fb      	str	r3, [r7, #28]
          break;
 800394e:	e00c      	b.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003950:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b02      	cmp	r3, #2
 800395c:	d107      	bne.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800395e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003962:	61fb      	str	r3, [r7, #28]
          break;
 8003964:	e003      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003966:	bf00      	nop
 8003968:	e29a      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800396a:	bf00      	nop
 800396c:	e298      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800396e:	bf00      	nop
        break;
 8003970:	e296      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	0800d36c 	.word	0x0800d36c
 800397c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003980:	4b9b      	ldr	r3, [pc, #620]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003986:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003990:	d021      	beq.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2bc0      	cmp	r3, #192	@ 0xc0
 8003996:	d829      	bhi.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b80      	cmp	r3, #128	@ 0x80
 800399c:	d011      	beq.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	2b80      	cmp	r3, #128	@ 0x80
 80039a2:	d823      	bhi.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	2b40      	cmp	r3, #64	@ 0x40
 80039ae:	d004      	beq.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80039b0:	e01c      	b.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80039b2:	f7ff f99b 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80039b6:	61f8      	str	r0, [r7, #28]
          break;
 80039b8:	e01d      	b.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80039ba:	f7ff f8ff 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 80039be:	61f8      	str	r0, [r7, #28]
          break;
 80039c0:	e019      	b.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039c2:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ce:	d10f      	bne.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80039d0:	4b88      	ldr	r3, [pc, #544]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80039d2:	61fb      	str	r3, [r7, #28]
          break;
 80039d4:	e00c      	b.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80039d6:	4b86      	ldr	r3, [pc, #536]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d107      	bne.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80039e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039e8:	61fb      	str	r3, [r7, #28]
          break;
 80039ea:	e003      	b.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80039ec:	bf00      	nop
 80039ee:	e257      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039f0:	bf00      	nop
 80039f2:	e255      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039f4:	bf00      	nop
        break;
 80039f6:	e253      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80039f8:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a0a:	d025      	beq.n	8003a58 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a12:	d82c      	bhi.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a1a:	d013      	beq.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a22:	d824      	bhi.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d004      	beq.n	8003a34 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a30:	d004      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003a32:	e01c      	b.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7ff f95a 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003a38:	61f8      	str	r0, [r7, #28]
          break;
 8003a3a:	e01d      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a3c:	f7ff f8be 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003a40:	61f8      	str	r0, [r7, #28]
          break;
 8003a42:	e019      	b.n	8003a78 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a44:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a50:	d10f      	bne.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003a52:	4b68      	ldr	r3, [pc, #416]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003a54:	61fb      	str	r3, [r7, #28]
          break;
 8003a56:	e00c      	b.n	8003a72 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a58:	4b65      	ldr	r3, [pc, #404]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d107      	bne.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003a66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a6a:	61fb      	str	r3, [r7, #28]
          break;
 8003a6c:	e003      	b.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003a6e:	bf00      	nop
 8003a70:	e216      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a72:	bf00      	nop
 8003a74:	e214      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a76:	bf00      	nop
        break;
 8003a78:	e212      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a8c:	d025      	beq.n	8003ada <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a94:	d82c      	bhi.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a9c:	d013      	beq.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa4:	d824      	bhi.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab2:	d004      	beq.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003ab4:	e01c      	b.n	8003af0 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ab6:	f7ff f919 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003aba:	61f8      	str	r0, [r7, #28]
          break;
 8003abc:	e01d      	b.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003abe:	f7ff f87d 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003ac2:	61f8      	str	r0, [r7, #28]
          break;
 8003ac4:	e019      	b.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad2:	d10f      	bne.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003ad4:	4b47      	ldr	r3, [pc, #284]	@ (8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003ad6:	61fb      	str	r3, [r7, #28]
          break;
 8003ad8:	e00c      	b.n	8003af4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ada:	4b45      	ldr	r3, [pc, #276]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003ae8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aec:	61fb      	str	r3, [r7, #28]
          break;
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003af0:	bf00      	nop
 8003af2:	e1d5      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003af4:	bf00      	nop
 8003af6:	e1d3      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003af8:	bf00      	nop
        break;
 8003afa:	e1d1      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003afc:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b0e:	d00c      	beq.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b16:	d864      	bhi.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1e:	d008      	beq.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b26:	d030      	beq.n	8003b8a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003b28:	e05b      	b.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7ff f847 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003b2e:	61f8      	str	r0, [r7, #28]
          break;
 8003b30:	e05c      	b.n	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003b32:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b3e:	d152      	bne.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003b40:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d04c      	beq.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003b4c:	4b28      	ldr	r3, [pc, #160]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	0a1b      	lsrs	r3, r3, #8
 8003b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b56:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	fb03 f202 	mul.w	r2, r3, r2
 8003b60:	4b23      	ldr	r3, [pc, #140]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b70:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003b72:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	0e5b      	lsrs	r3, r3, #25
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	61fb      	str	r3, [r7, #28]
          break;
 8003b88:	e02d      	b.n	8003be6 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003b8a:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b96:	d128      	bne.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003b98:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d022      	beq.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003ba4:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bae:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	fb03 f202 	mul.w	r2, r3, r2
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	0e5b      	lsrs	r3, r3, #25
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bde:	61fb      	str	r3, [r7, #28]
          break;
 8003be0:	e003      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003be2:	bf00      	nop
 8003be4:	e15c      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003be6:	bf00      	nop
 8003be8:	e15a      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bea:	bf00      	nop
        break;
 8003bec:	e158      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003bf8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c02:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003c0a:	f7ff f885 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8003c0e:	61f8      	str	r0, [r7, #28]
        break;
 8003c10:	e146      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe ffd3 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003c16:	61f8      	str	r0, [r7, #28]
        break;
 8003c18:	e142      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003c1a:	4b95      	ldr	r3, [pc, #596]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c20:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2c:	d013      	beq.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c34:	d819      	bhi.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d004      	beq.n	8003c46 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c42:	d004      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003c44:	e011      	b.n	8003c6a <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c46:	f7ff f851 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003c4a:	61f8      	str	r0, [r7, #28]
          break;
 8003c4c:	e010      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe ffb5 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003c52:	61f8      	str	r0, [r7, #28]
          break;
 8003c54:	e00c      	b.n	8003c70 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c56:	4b86      	ldr	r3, [pc, #536]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c62:	d104      	bne.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003c64:	4b83      	ldr	r3, [pc, #524]	@ (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003c66:	61fb      	str	r3, [r7, #28]
          break;
 8003c68:	e001      	b.n	8003c6e <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003c6a:	bf00      	nop
 8003c6c:	e118      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c6e:	bf00      	nop
        break;
 8003c70:	e116      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003c72:	4b7f      	ldr	r3, [pc, #508]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c7c:	613b      	str	r3, [r7, #16]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c84:	d013      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c8c:	d819      	bhi.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003c9c:	e011      	b.n	8003cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c9e:	f7ff f825 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003ca2:	61f8      	str	r0, [r7, #28]
          break;
 8003ca4:	e010      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ca6:	f7fe ff89 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003caa:	61f8      	str	r0, [r7, #28]
          break;
 8003cac:	e00c      	b.n	8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cae:	4b70      	ldr	r3, [pc, #448]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cba:	d104      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003cbc:	4b6d      	ldr	r3, [pc, #436]	@ (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003cbe:	61fb      	str	r3, [r7, #28]
          break;
 8003cc0:	e001      	b.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003cc2:	bf00      	nop
 8003cc4:	e0ec      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cc6:	bf00      	nop
        break;
 8003cc8:	e0ea      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003cca:	4b69      	ldr	r3, [pc, #420]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cdc:	d013      	beq.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ce4:	d819      	bhi.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d004      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003cf4:	e011      	b.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cf6:	f7fe fff9 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003cfa:	61f8      	str	r0, [r7, #28]
          break;
 8003cfc:	e010      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003cfe:	f7fe ff5d 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003d02:	61f8      	str	r0, [r7, #28]
          break;
 8003d04:	e00c      	b.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d06:	4b5a      	ldr	r3, [pc, #360]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d104      	bne.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003d14:	4b57      	ldr	r3, [pc, #348]	@ (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d16:	61fb      	str	r3, [r7, #28]
          break;
 8003d18:	e001      	b.n	8003d1e <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003d1a:	bf00      	nop
 8003d1c:	e0c0      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d1e:	bf00      	nop
        break;
 8003d20:	e0be      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003d22:	4b53      	ldr	r3, [pc, #332]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d28:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d34:	d02c      	beq.n	8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d3c:	d833      	bhi.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d44:	d01a      	beq.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d4c:	d82b      	bhi.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d5a:	d004      	beq.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003d5c:	e023      	b.n	8003da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d5e:	f7fe ffc5 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003d62:	61f8      	str	r0, [r7, #28]
          break;
 8003d64:	e026      	b.n	8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d66:	4b42      	ldr	r3, [pc, #264]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11a      	bne.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003d74:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d78:	61fb      	str	r3, [r7, #28]
          break;
 8003d7a:	e016      	b.n	8003daa <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d7c:	4b3c      	ldr	r3, [pc, #240]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d88:	d111      	bne.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d8c:	61fb      	str	r3, [r7, #28]
          break;
 8003d8e:	e00e      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d90:	4b37      	ldr	r3, [pc, #220]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003da2:	61fb      	str	r3, [r7, #28]
          break;
 8003da4:	e005      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003da6:	bf00      	nop
 8003da8:	e07a      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003daa:	bf00      	nop
 8003dac:	e078      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dae:	bf00      	nop
 8003db0:	e076      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003db2:	bf00      	nop
        break;
 8003db4:	e074      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003db6:	4b2e      	ldr	r3, [pc, #184]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dbc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dc8:	d02c      	beq.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dd0:	d833      	bhi.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd8:	d01a      	beq.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de0:	d82b      	bhi.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d004      	beq.n	8003df2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dee:	d004      	beq.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003df0:	e023      	b.n	8003e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003df2:	f7fe ff7b 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003df6:	61f8      	str	r0, [r7, #28]
          break;
 8003df8:	e026      	b.n	8003e48 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d11a      	bne.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003e08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e0c:	61fb      	str	r3, [r7, #28]
          break;
 8003e0e:	e016      	b.n	8003e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e10:	4b17      	ldr	r3, [pc, #92]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1c:	d111      	bne.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003e1e:	4b15      	ldr	r3, [pc, #84]	@ (8003e74 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003e20:	61fb      	str	r3, [r7, #28]
          break;
 8003e22:	e00e      	b.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e24:	4b12      	ldr	r3, [pc, #72]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d109      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e36:	61fb      	str	r3, [r7, #28]
          break;
 8003e38:	e005      	b.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003e3a:	bf00      	nop
 8003e3c:	e030      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e3e:	bf00      	nop
 8003e40:	e02e      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e42:	bf00      	nop
 8003e44:	e02c      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e46:	bf00      	nop
        break;
 8003e48:	e02a      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003e4a:	4b09      	ldr	r3, [pc, #36]	@ (8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e54:	613b      	str	r3, [r7, #16]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e62:	d009      	beq.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003e64:	e012      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e66:	f7fe ff41 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8003e6a:	61f8      	str	r0, [r7, #28]
          break;
 8003e6c:	e00e      	b.n	8003e8c <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e78:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e84:	d101      	bne.n	8003e8a <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003e88:	61fb      	str	r3, [r7, #28]
          break;
 8003e8a:	bf00      	nop
        break;
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e006      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e92:	bf00      	nop
 8003e94:	e004      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e002      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e9e:	bf00      	nop
    }
  }

  return(frequency);
 8003ea0:	69fb      	ldr	r3, [r7, #28]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	00f42400 	.word	0x00f42400

08003eb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ec2:	4b75      	ldr	r3, [pc, #468]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0303 	and.w	r3, r3, #3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ece:	4b72      	ldr	r3, [pc, #456]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0203 	and.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10d      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d047      	beq.n	8003f8a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	73fb      	strb	r3, [r7, #15]
 8003efe:	e044      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d018      	beq.n	8003f3a <RCCEx_PLLSAI1_Config+0x86>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d825      	bhi.n	8003f58 <RCCEx_PLLSAI1_Config+0xa4>
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d002      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0x62>
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d009      	beq.n	8003f28 <RCCEx_PLLSAI1_Config+0x74>
 8003f14:	e020      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f16:	4b60      	ldr	r3, [pc, #384]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d11d      	bne.n	8003f5e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f26:	e01a      	b.n	8003f5e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f28:	4b5b      	ldr	r3, [pc, #364]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d116      	bne.n	8003f62 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f38:	e013      	b.n	8003f62 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f3a:	4b57      	ldr	r3, [pc, #348]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10f      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f46:	4b54      	ldr	r3, [pc, #336]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f56:	e006      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e004      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e002      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f62:	bf00      	nop
 8003f64:	e000      	b.n	8003f68 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f66:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	430b      	orrs	r3, r1
 8003f84:	4944      	ldr	r1, [pc, #272]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d17d      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f90:	4b41      	ldr	r3, [pc, #260]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a40      	ldr	r2, [pc, #256]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f9c:	f7fd fb3c 	bl	8001618 <HAL_GetTick>
 8003fa0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa2:	e009      	b.n	8003fb8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fa4:	f7fd fb38 	bl	8001618 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d902      	bls.n	8003fb8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fb6:	e005      	b.n	8003fc4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fb8:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1ef      	bne.n	8003fa4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d160      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d111      	bne.n	8003ff4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd0:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6892      	ldr	r2, [r2, #8]
 8003fe0:	0211      	lsls	r1, r2, #8
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
 8003fe6:	0912      	lsrs	r2, r2, #4
 8003fe8:	0452      	lsls	r2, r2, #17
 8003fea:	430a      	orrs	r2, r1
 8003fec:	492a      	ldr	r1, [pc, #168]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	610b      	str	r3, [r1, #16]
 8003ff2:	e027      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d112      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffa:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004002:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6892      	ldr	r2, [r2, #8]
 800400a:	0211      	lsls	r1, r2, #8
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6912      	ldr	r2, [r2, #16]
 8004010:	0852      	lsrs	r2, r2, #1
 8004012:	3a01      	subs	r2, #1
 8004014:	0552      	lsls	r2, r2, #21
 8004016:	430a      	orrs	r2, r1
 8004018:	491f      	ldr	r1, [pc, #124]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	610b      	str	r3, [r1, #16]
 800401e:	e011      	b.n	8004044 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004028:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6892      	ldr	r2, [r2, #8]
 8004030:	0211      	lsls	r1, r2, #8
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6952      	ldr	r2, [r2, #20]
 8004036:	0852      	lsrs	r2, r2, #1
 8004038:	3a01      	subs	r2, #1
 800403a:	0652      	lsls	r2, r2, #25
 800403c:	430a      	orrs	r2, r1
 800403e:	4916      	ldr	r1, [pc, #88]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004044:	4b14      	ldr	r3, [pc, #80]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a13      	ldr	r2, [pc, #76]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800404e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fd fae2 	bl	8001618 <HAL_GetTick>
 8004054:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004056:	e009      	b.n	800406c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004058:	f7fd fade 	bl	8001618 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d902      	bls.n	800406c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	73fb      	strb	r3, [r7, #15]
          break;
 800406a:	e005      	b.n	8004078 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ef      	beq.n	8004058 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004078:	7bfb      	ldrb	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800407e:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	4904      	ldr	r1, [pc, #16]	@ (8004098 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	4313      	orrs	r3, r2
 800408a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800408c:	7bfb      	ldrb	r3, [r7, #15]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000

0800409c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d018      	beq.n	80040e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040b6:	4b67      	ldr	r3, [pc, #412]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0203 	and.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d10d      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ce:	4b61      	ldr	r3, [pc, #388]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f003 0307 	and.w	r3, r3, #7
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
       ||
 80040de:	429a      	cmp	r2, r3
 80040e0:	d047      	beq.n	8004172 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
 80040e6:	e044      	b.n	8004172 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d018      	beq.n	8004122 <RCCEx_PLLSAI2_Config+0x86>
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d825      	bhi.n	8004140 <RCCEx_PLLSAI2_Config+0xa4>
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d002      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0x62>
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d009      	beq.n	8004110 <RCCEx_PLLSAI2_Config+0x74>
 80040fc:	e020      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040fe:	4b55      	ldr	r3, [pc, #340]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d11d      	bne.n	8004146 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410e:	e01a      	b.n	8004146 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004110:	4b50      	ldr	r3, [pc, #320]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d116      	bne.n	800414a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e013      	b.n	800414a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004122:	4b4c      	ldr	r3, [pc, #304]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10f      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800412e:	4b49      	ldr	r3, [pc, #292]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d109      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800413e:	e006      	b.n	800414e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
      break;
 8004144:	e004      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004146:	bf00      	nop
 8004148:	e002      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414a:	bf00      	nop
 800414c:	e000      	b.n	8004150 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10d      	bne.n	8004172 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004156:	4b3f      	ldr	r3, [pc, #252]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6819      	ldr	r1, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	430b      	orrs	r3, r1
 800416c:	4939      	ldr	r1, [pc, #228]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416e:	4313      	orrs	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004172:	7bfb      	ldrb	r3, [r7, #15]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d167      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004178:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a35      	ldr	r2, [pc, #212]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800417e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004184:	f7fd fa48 	bl	8001618 <HAL_GetTick>
 8004188:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800418a:	e009      	b.n	80041a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800418c:	f7fd fa44 	bl	8001618 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d902      	bls.n	80041a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	73fb      	strb	r3, [r7, #15]
        break;
 800419e:	e005      	b.n	80041ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ef      	bne.n	800418c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d14a      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d111      	bne.n	80041dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041b8:	4b26      	ldr	r3, [pc, #152]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6892      	ldr	r2, [r2, #8]
 80041c8:	0211      	lsls	r1, r2, #8
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	68d2      	ldr	r2, [r2, #12]
 80041ce:	0912      	lsrs	r2, r2, #4
 80041d0:	0452      	lsls	r2, r2, #17
 80041d2:	430a      	orrs	r2, r1
 80041d4:	491f      	ldr	r1, [pc, #124]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	614b      	str	r3, [r1, #20]
 80041da:	e011      	b.n	8004200 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6892      	ldr	r2, [r2, #8]
 80041ec:	0211      	lsls	r1, r2, #8
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6912      	ldr	r2, [r2, #16]
 80041f2:	0852      	lsrs	r2, r2, #1
 80041f4:	3a01      	subs	r2, #1
 80041f6:	0652      	lsls	r2, r2, #25
 80041f8:	430a      	orrs	r2, r1
 80041fa:	4916      	ldr	r1, [pc, #88]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004200:	4b14      	ldr	r3, [pc, #80]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a13      	ldr	r2, [pc, #76]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fd fa04 	bl	8001618 <HAL_GetTick>
 8004210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004212:	e009      	b.n	8004228 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004214:	f7fd fa00 	bl	8001618 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d902      	bls.n	8004228 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	73fb      	strb	r3, [r7, #15]
          break;
 8004226:	e005      	b.n	8004234 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ef      	beq.n	8004214 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004234:	7bfb      	ldrb	r3, [r7, #15]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800423a:	4b06      	ldr	r3, [pc, #24]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423c:	695a      	ldr	r2, [r3, #20]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	4904      	ldr	r1, [pc, #16]	@ (8004254 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	4313      	orrs	r3, r2
 8004246:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000

08004258 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	@ 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004274:	d10c      	bne.n	8004290 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004276:	4b6e      	ldr	r3, [pc, #440]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800427c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004280:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004288:	d112      	bne.n	80042b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800428a:	4b6a      	ldr	r3, [pc, #424]	@ (8004434 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	e00f      	b.n	80042b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004296:	d10b      	bne.n	80042b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004298:	4b65      	ldr	r3, [pc, #404]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80042a2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042aa:	d101      	bne.n	80042b0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80042ac:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80042ae:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f040 80b4 	bne.w	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042c2:	d003      	beq.n	80042cc <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ca:	d135      	bne.n	8004338 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80042cc:	4b58      	ldr	r3, [pc, #352]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042d8:	f040 80a1 	bne.w	800441e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80042dc:	4b54      	ldr	r3, [pc, #336]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 809a 	beq.w	800441e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80042ea:	4b51      	ldr	r3, [pc, #324]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	3301      	adds	r3, #1
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80042fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004308:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10a      	bne.n	8004326 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004310:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 800431c:	2311      	movs	r3, #17
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e001      	b.n	8004326 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004322:	2307      	movs	r3, #7
 8004324:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	fb03 f202 	mul.w	r2, r3, r2
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004336:	e072      	b.n	800441e <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d133      	bne.n	80043a6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800433e:	4b3c      	ldr	r3, [pc, #240]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800434a:	d169      	bne.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800434c:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d063      	beq.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004358:	4b35      	ldr	r3, [pc, #212]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	3301      	adds	r3, #1
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	fbb2 f3f3 	udiv	r3, r2, r3
 800436a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800436c:	4b30      	ldr	r3, [pc, #192]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004376:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10a      	bne.n	8004394 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800437e:	4b2c      	ldr	r3, [pc, #176]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800438a:	2311      	movs	r3, #17
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e001      	b.n	8004394 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004390:	2307      	movs	r3, #7
 8004392:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	fb03 f202 	mul.w	r2, r3, r2
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	e03c      	b.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ac:	d003      	beq.n	80043b6 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043b4:	d134      	bne.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80043b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c2:	d12d      	bne.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d027      	beq.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80043d0:	4b17      	ldr	r3, [pc, #92]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	3301      	adds	r3, #1
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80043e4:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	0a1b      	lsrs	r3, r3, #8
 80043ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043ee:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80043f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004402:	2311      	movs	r3, #17
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e001      	b.n	800440c <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004408:	2307      	movs	r3, #7
 800440a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	fb03 f202 	mul.w	r2, r3, r2
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e000      	b.n	8004420 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800441e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004420:	69fb      	ldr	r3, [r7, #28]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	01770000 	.word	0x01770000

08004438 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e155      	b.n	80046f6 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d106      	bne.n	8004464 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fc febc 	bl	80011dc <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa7d 	bl	8004964 <SAI_Disable>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e140      	b.n	80046f6 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	2b02      	cmp	r3, #2
 8004482:	d00c      	beq.n	800449e <HAL_SAI_Init+0x66>
 8004484:	2b02      	cmp	r3, #2
 8004486:	d80d      	bhi.n	80044a4 <HAL_SAI_Init+0x6c>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <HAL_SAI_Init+0x5a>
 800448c:	2b01      	cmp	r3, #1
 800448e:	d003      	beq.n	8004498 <HAL_SAI_Init+0x60>
 8004490:	e008      	b.n	80044a4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
      break;
 8004496:	e008      	b.n	80044aa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004498:	2310      	movs	r3, #16
 800449a:	61fb      	str	r3, [r7, #28]
      break;
 800449c:	e005      	b.n	80044aa <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800449e:	2320      	movs	r3, #32
 80044a0:	61fb      	str	r3, [r7, #28]
      break;
 80044a2:	e002      	b.n	80044aa <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61fb      	str	r3, [r7, #28]
      break;
 80044a8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d81d      	bhi.n	80044ee <HAL_SAI_Init+0xb6>
 80044b2:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <HAL_SAI_Init+0x80>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044c9 	.word	0x080044c9
 80044bc:	080044cf 	.word	0x080044cf
 80044c0:	080044d7 	.word	0x080044d7
 80044c4:	080044df 	.word	0x080044df
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
      break;
 80044cc:	e012      	b.n	80044f4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80044ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044d2:	617b      	str	r3, [r7, #20]
      break;
 80044d4:	e00e      	b.n	80044f4 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80044d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044da:	617b      	str	r3, [r7, #20]
      break;
 80044dc:	e00a      	b.n	80044f4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80044de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044e2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	61fb      	str	r3, [r7, #28]
      break;
 80044ec:	e002      	b.n	80044f4 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
      break;
 80044f2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a81      	ldr	r2, [pc, #516]	@ (8004700 <HAL_SAI_Init+0x2c8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_SAI_Init+0xd0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a80      	ldr	r2, [pc, #512]	@ (8004704 <HAL_SAI_Init+0x2cc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004508:	4a7f      	ldr	r2, [pc, #508]	@ (8004708 <HAL_SAI_Init+0x2d0>)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e002      	b.n	8004516 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004510:	4a7e      	ldr	r2, [pc, #504]	@ (800470c <HAL_SAI_Init+0x2d4>)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d041      	beq.n	80045a2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a77      	ldr	r2, [pc, #476]	@ (8004700 <HAL_SAI_Init+0x2c8>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d004      	beq.n	8004532 <HAL_SAI_Init+0xfa>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a75      	ldr	r2, [pc, #468]	@ (8004704 <HAL_SAI_Init+0x2cc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d105      	bne.n	800453e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004532:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004536:	f7fe ff4f 	bl	80033d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800453a:	6138      	str	r0, [r7, #16]
 800453c:	e004      	b.n	8004548 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800453e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004542:	f7fe ff49 	bl	80033d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004546:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	025b      	lsls	r3, r3, #9
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a6b      	ldr	r2, [pc, #428]	@ (8004710 <HAL_SAI_Init+0x2d8>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	08da      	lsrs	r2, r3, #3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	4b67      	ldr	r3, [pc, #412]	@ (8004710 <HAL_SAI_Init+0x2d8>)
 8004572:	fba3 2301 	umull	r2, r3, r3, r1
 8004576:	08da      	lsrs	r2, r3, #3
 8004578:	4613      	mov	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	4413      	add	r3, r2
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	1aca      	subs	r2, r1, r3
 8004582:	2a08      	cmp	r2, #8
 8004584:	d904      	bls.n	8004590 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004594:	2b04      	cmp	r3, #4
 8004596:	d104      	bne.n	80045a2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	085a      	lsrs	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_SAI_Init+0x17a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d109      	bne.n	80045c6 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_SAI_Init+0x186>
 80045ba:	2300      	movs	r3, #0
 80045bc:	e001      	b.n	80045c2 <HAL_SAI_Init+0x18a>
 80045be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045c2:	61bb      	str	r3, [r7, #24]
 80045c4:	e008      	b.n	80045d8 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d102      	bne.n	80045d4 <HAL_SAI_Init+0x19c>
 80045ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045d2:	e000      	b.n	80045d6 <HAL_SAI_Init+0x19e>
 80045d4:	2300      	movs	r3, #0
 80045d6:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4b4c      	ldr	r3, [pc, #304]	@ (8004714 <HAL_SAI_Init+0x2dc>)
 80045e4:	400b      	ands	r3, r1
 80045e6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045f6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045fc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	431a      	orrs	r2, r3
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004610:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800461c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	051b      	lsls	r3, r3, #20
 8004624:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800463c:	f023 030f 	bic.w	r3, r3, #15
 8004640:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699a      	ldr	r2, [r3, #24]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6899      	ldr	r1, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	4b2b      	ldr	r3, [pc, #172]	@ (8004718 <HAL_SAI_Init+0x2e0>)
 800466c:	400b      	ands	r3, r1
 800466e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6899      	ldr	r1, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004680:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004686:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800468c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	3b01      	subs	r3, #1
 8004694:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004696:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68d9      	ldr	r1, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80046ae:	400b      	ands	r3, r1
 80046b0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68d9      	ldr	r1, [r3, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80046c8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	3b01      	subs	r3, #1
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40015404 	.word	0x40015404
 8004704:	40015424 	.word	0x40015424
 8004708:	40015400 	.word	0x40015400
 800470c:	40015800 	.word	0x40015800
 8004710:	cccccccd 	.word	0xcccccccd
 8004714:	ff05c010 	.word	0xff05c010
 8004718:	fff88000 	.word	0xfff88000

0800471c <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_SAI_DMAStop+0x1a>
 8004732:	2302      	movs	r3, #2
 8004734:	e042      	b.n	80047bc <HAL_SAI_DMAStop+0xa0>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f910 	bl	8004964 <SAI_Disable>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800475c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b12      	cmp	r3, #18
 8004768:	d108      	bne.n	800477c <HAL_SAI_DMAStop+0x60>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_SAI_DMAStop+0x60>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd f9a8 	bl	8001acc <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b22      	cmp	r3, #34	@ 0x22
 8004786:	d108      	bne.n	800479a <HAL_SAI_DMAStop+0x7e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478c:	2b00      	cmp	r3, #0
 800478e:	d004      	beq.n	800479a <HAL_SAI_DMAStop+0x7e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd f999 	bl	8001acc <HAL_DMA_Abort>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0208 	orr.w	r2, r2, #8
 80047a8:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SAI_Receive_DMA+0x1a>
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e074      	b.n	80048cc <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d16d      	bne.n	80048ca <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_SAI_Receive_DMA+0x38>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e067      	b.n	80048cc <HAL_SAI_Receive_DMA+0x108>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	88fa      	ldrh	r2, [r7, #6]
 8004816:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2222      	movs	r2, #34	@ 0x22
 8004826:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	4a29      	ldr	r2, [pc, #164]	@ (80048d4 <HAL_SAI_Receive_DMA+0x110>)
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	4a28      	ldr	r2, [pc, #160]	@ (80048d8 <HAL_SAI_Receive_DMA+0x114>)
 8004838:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	4a27      	ldr	r2, [pc, #156]	@ (80048dc <HAL_SAI_Receive_DMA+0x118>)
 8004840:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	2200      	movs	r2, #0
 8004848:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	331c      	adds	r3, #28
 8004854:	4619      	mov	r1, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485a:	461a      	mov	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004862:	f7fd f8d3 	bl	8001a0c <HAL_DMA_Start_IT>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e029      	b.n	80048cc <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004878:	2100      	movs	r1, #0
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	f000 f83a 	bl	80048f4 <SAI_InterruptFlag>
 8004880:	4601      	mov	r1, r0
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800489e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d107      	bne.n	80048be <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048bc:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048c6:	2300      	movs	r3, #0
 80048c8:	e000      	b.n	80048cc <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80048ca:	2302      	movs	r3, #2
  }
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	08004a37 	.word	0x08004a37
 80048d8:	080049d9 	.word	0x080049d9
 80048dc:	08004a53 	.word	0x08004a53

080048e0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004900:	2301      	movs	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d103      	bne.n	8004912 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f043 0308 	orr.w	r3, r3, #8
 8004910:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	2b08      	cmp	r3, #8
 8004918:	d10b      	bne.n	8004932 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800491e:	2b03      	cmp	r3, #3
 8004920:	d003      	beq.n	800492a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d103      	bne.n	8004932 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f043 0310 	orr.w	r3, r3, #16
 8004930:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d003      	beq.n	8004942 <SAI_InterruptFlag+0x4e>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d104      	bne.n	800494c <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e003      	b.n	8004954 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8004954:	68fb      	ldr	r3, [r7, #12]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800496c:	4b18      	ldr	r3, [pc, #96]	@ (80049d0 <SAI_Disable+0x6c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <SAI_Disable+0x70>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	0b1b      	lsrs	r3, r3, #12
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800498e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	72fb      	strb	r3, [r7, #11]
      break;
 80049aa:	e009      	b.n	80049c0 <SAI_Disable+0x5c>
    }
    count--;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e7      	bne.n	8004990 <SAI_Disable+0x2c>

  return status;
 80049c0:	7afb      	ldrb	r3, [r7, #11]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	2000002c 	.word	0x2000002c
 80049d4:	95cbec1b 	.word	0x95cbec1b

080049d8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	2b20      	cmp	r3, #32
 80049ec:	d01c      	beq.n	8004a28 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80049fc:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004a06:	2100      	movs	r1, #0
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f7ff ff73 	bl	80048f4 <SAI_InterruptFlag>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	43d9      	mvns	r1, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7fc fa07 	bl	8000e3c <HAL_SAI_RxCpltCallback>
#endif
}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7fc fa15 	bl	8000e74 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004a7e:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f7ff ff6f 	bl	8004964 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff ff22 	bl	80048e0 <HAL_SAI_ErrorCallback>
#endif
}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e02d      	b.n	8004b12 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d105      	bne.n	8004ace <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fc fa97 	bl	8000ffc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 f820 	bl	8004b1c <HAL_SD_InitCard>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e015      	b.n	8004b12 <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 ff6f 	bl	80059d0 <HAL_SD_ConfigWideBusOperation>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e00a      	b.n	8004b12 <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b1c:	b5b0      	push	{r4, r5, r7, lr}
 8004b1e:	b08e      	sub	sp, #56	@ 0x38
 8004b20:	af04      	add	r7, sp, #16
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004b38:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004b3c:	f7fe fc4c 	bl	80033d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b40:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d109      	bne.n	8004b5c <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b56:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e07b      	b.n	8004c54 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	09db      	lsrs	r3, r3, #7
 8004b60:	4a3e      	ldr	r2, [pc, #248]	@ (8004c5c <HAL_SD_InitCard+0x140>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	3b02      	subs	r3, #2
 8004b6a:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681d      	ldr	r5, [r3, #0]
 8004b70:	466c      	mov	r4, sp
 8004b72:	f107 0314 	add.w	r3, r7, #20
 8004b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b84:	4628      	mov	r0, r5
 8004b86:	f002 ffd3 	bl	8007b30 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b98:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f003 f811 	bl	8007bc6 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bb2:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004bc0:	4a27      	ldr	r2, [pc, #156]	@ (8004c60 <HAL_SD_InitCard+0x144>)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fc fd30 	bl	8001630 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f001 f907 	bl	8005de4 <SD_PowerON>
 8004bd6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00b      	beq.n	8004bf6 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e02e      	b.n	8004c54 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f001 f834 	bl	8005c64 <SD_InitCard>
 8004bfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e01b      	b.n	8004c54 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c24:	4618      	mov	r0, r3
 8004c26:	f003 f861 	bl	8007cec <SDMMC_CmdBlockLength>
 8004c2a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00f      	beq.n	8004c52 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a0b      	ldr	r2, [pc, #44]	@ (8004c64 <HAL_SD_InitCard+0x148>)
 8004c38:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3728      	adds	r7, #40	@ 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5c:	014f8b59 	.word	0x014f8b59
 8004c60:	00012110 	.word	0x00012110
 8004c64:	004005ff 	.word	0x004005ff

08004c68 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b092      	sub	sp, #72	@ 0x48
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c76:	f7fc fccf 	bl	8001618 <HAL_GetTick>
 8004c7a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e1bd      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f040 81b0 	bne.w	8005008 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	441a      	add	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d907      	bls.n	8004ccc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e1a4      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d002      	beq.n	8004cea <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce6:	025b      	lsls	r3, r3, #9
 8004ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cee:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	025b      	lsls	r3, r3, #9
 8004cf4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004cf6:	2390      	movs	r3, #144	@ 0x90
 8004cf8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f107 0214 	add.w	r2, r7, #20
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 ffbf 	bl	8007c94 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d90a      	bls.n	8004d32 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f003 f823 	bl	8007d74 <SDMMC_CmdReadMultiBlock>
 8004d2e:	6478      	str	r0, [r7, #68]	@ 0x44
 8004d30:	e009      	b.n	8004d46 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f002 fff6 	bl	8007d30 <SDMMC_CmdReadSingleBlock>
 8004d44:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d012      	beq.n	8004d72 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a7a      	ldr	r2, [pc, #488]	@ (8004f3c <HAL_SD_ReadBlocks+0x2d4>)
 8004d52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e151      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d76:	e061      	b.n	8004e3c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03c      	beq.n	8004e00 <HAL_SD_ReadBlocks+0x198>
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d039      	beq.n	8004e00 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d90:	e033      	b.n	8004dfa <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f002 fef7 	bl	8007b8a <SDMMC_ReadFIFO>
 8004d9c:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da8:	3301      	adds	r3, #1
 8004daa:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dae:	3b01      	subs	r3, #1
 8004db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dca:	0c1b      	lsrs	r3, r3, #16
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de0:	0e1b      	lsrs	r3, r3, #24
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004de6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dea:	3301      	adds	r3, #1
 8004dec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df0:	3b01      	subs	r3, #1
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004df6:	3301      	adds	r3, #1
 8004df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfc:	2b07      	cmp	r3, #7
 8004dfe:	d9c8      	bls.n	8004d92 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004e00:	f7fc fc0a 	bl	8001618 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d902      	bls.n	8004e16 <HAL_SD_ReadBlocks+0x1ae>
 8004e10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d112      	bne.n	8004e3c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a48      	ldr	r2, [pc, #288]	@ (8004f3c <HAL_SD_ReadBlocks+0x2d4>)
 8004e1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0ec      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e42:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d096      	beq.n	8004d78 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d022      	beq.n	8004e9e <HAL_SD_ReadBlocks+0x236>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d91f      	bls.n	8004e9e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d01b      	beq.n	8004e9e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f002 ffe8 	bl	8007e40 <SDMMC_CmdStopTransfer>
 8004e70:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d012      	beq.n	8004e9e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a2f      	ldr	r2, [pc, #188]	@ (8004f3c <HAL_SD_ReadBlocks+0x2d4>)
 8004e7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e86:	431a      	orrs	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0bb      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	@ (8004f3c <HAL_SD_ReadBlocks+0x2d4>)
 8004eb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb8:	f043 0208 	orr.w	r2, r3, #8
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e0a1      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d012      	beq.n	8004f06 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a15      	ldr	r2, [pc, #84]	@ (8004f3c <HAL_SD_ReadBlocks+0x2d4>)
 8004ee6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	f043 0202 	orr.w	r2, r3, #2
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e087      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d064      	beq.n	8004fde <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a08      	ldr	r2, [pc, #32]	@ (8004f3c <HAL_SD_ReadBlocks+0x2d4>)
 8004f1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	f043 0220 	orr.w	r2, r3, #32
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e06d      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
 8004f3a:	bf00      	nop
 8004f3c:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 fe20 	bl	8007b8a <SDMMC_ReadFIFO>
 8004f4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004f4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f52:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	3301      	adds	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f62:	0a1b      	lsrs	r3, r3, #8
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f72:	3b01      	subs	r3, #1
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	b2da      	uxtb	r2, r3
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f7e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	3301      	adds	r3, #1
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8e:	0e1b      	lsrs	r3, r3, #24
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f94:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	3301      	adds	r3, #1
 8004f9a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004fa2:	f7fc fb39 	bl	8001618 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d902      	bls.n	8004fb8 <HAL_SD_ReadBlocks+0x350>
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d112      	bne.n	8004fde <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a18      	ldr	r2, [pc, #96]	@ (8005020 <HAL_SD_ReadBlocks+0x3b8>)
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e01b      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_SD_ReadBlocks+0x38a>
 8004fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1a6      	bne.n	8004f40 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004ffa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e006      	b.n	8005016 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
  }
}
 8005016:	4618      	mov	r0, r3
 8005018:	3748      	adds	r7, #72	@ 0x48
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	004005ff 	.word	0x004005ff

08005024 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b092      	sub	sp, #72	@ 0x48
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
 8005030:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005032:	f7fc faf1 	bl	8001618 <HAL_GetTick>
 8005036:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d107      	bne.n	8005056 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e165      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	f040 8158 	bne.w	8005314 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800506a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	441a      	add	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005074:	429a      	cmp	r2, r3
 8005076:	d907      	bls.n	8005088 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800507c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e14c      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2203      	movs	r2, #3
 800508c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509c:	2b01      	cmp	r3, #1
 800509e:	d002      	beq.n	80050a6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80050a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a2:	025b      	lsls	r3, r3, #9
 80050a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050aa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	025b      	lsls	r3, r3, #9
 80050b0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80050b2:	2390      	movs	r3, #144	@ 0x90
 80050b4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80050b6:	2300      	movs	r3, #0
 80050b8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80050be:	2301      	movs	r3, #1
 80050c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f107 0218 	add.w	r2, r7, #24
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 fde1 	bl	8007c94 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d90a      	bls.n	80050ee <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050e4:	4618      	mov	r0, r3
 80050e6:	f002 fe89 	bl	8007dfc <SDMMC_CmdWriteMultiBlock>
 80050ea:	6478      	str	r0, [r7, #68]	@ 0x44
 80050ec:	e009      	b.n	8005102 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2210      	movs	r2, #16
 80050f2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050fa:	4618      	mov	r0, r3
 80050fc:	f002 fe5c 	bl	8007db8 <SDMMC_CmdWriteSingleBlock>
 8005100:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005102:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a87      	ldr	r2, [pc, #540]	@ (800532c <HAL_SD_WriteBlocks+0x308>)
 800510e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005116:	431a      	orrs	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e0f9      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005132:	e065      	b.n	8005200 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d040      	beq.n	80051c4 <HAL_SD_WriteBlocks+0x1a0>
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03d      	beq.n	80051c4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005148:	2300      	movs	r3, #0
 800514a:	643b      	str	r3, [r7, #64]	@ 0x40
 800514c:	e037      	b.n	80051be <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800514e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005156:	3301      	adds	r3, #1
 8005158:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800515a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800515c:	3b01      	subs	r3, #1
 800515e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	021a      	lsls	r2, r3, #8
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	4313      	orrs	r3, r2
 800516a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800516c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516e:	3301      	adds	r3, #1
 8005170:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005174:	3b01      	subs	r3, #1
 8005176:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	041a      	lsls	r2, r3, #16
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	3301      	adds	r3, #1
 8005188:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800518a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518c:	3b01      	subs	r3, #1
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	061a      	lsls	r2, r3, #24
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800519c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519e:	3301      	adds	r3, #1
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80051a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a4:	3b01      	subs	r3, #1
 80051a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f107 0214 	add.w	r2, r7, #20
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f002 fcf6 	bl	8007ba4 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80051b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051ba:	3301      	adds	r3, #1
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c0:	2b07      	cmp	r3, #7
 80051c2:	d9c4      	bls.n	800514e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80051c4:	f7fc fa28 	bl	8001618 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d902      	bls.n	80051da <HAL_SD_WriteBlocks+0x1b6>
 80051d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d112      	bne.n	8005200 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a53      	ldr	r2, [pc, #332]	@ (800532c <HAL_SD_WriteBlocks+0x308>)
 80051e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e8:	431a      	orrs	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e090      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005206:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800520a:	2b00      	cmp	r3, #0
 800520c:	d092      	beq.n	8005134 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d022      	beq.n	8005262 <HAL_SD_WriteBlocks+0x23e>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d91f      	bls.n	8005262 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005226:	2b03      	cmp	r3, #3
 8005228:	d01b      	beq.n	8005262 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f002 fe06 	bl	8007e40 <SDMMC_CmdStopTransfer>
 8005234:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005238:	2b00      	cmp	r3, #0
 800523a:	d012      	beq.n	8005262 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a3a      	ldr	r2, [pc, #232]	@ (800532c <HAL_SD_WriteBlocks+0x308>)
 8005242:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800524a:	431a      	orrs	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e05f      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d012      	beq.n	8005296 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a2d      	ldr	r2, [pc, #180]	@ (800532c <HAL_SD_WriteBlocks+0x308>)
 8005276:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527c:	f043 0208 	orr.w	r2, r3, #8
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e045      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800529c:	f003 0302 	and.w	r3, r3, #2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d012      	beq.n	80052ca <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a20      	ldr	r2, [pc, #128]	@ (800532c <HAL_SD_WriteBlocks+0x308>)
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b0:	f043 0202 	orr.w	r2, r3, #2
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e02b      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d012      	beq.n	80052fe <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a13      	ldr	r2, [pc, #76]	@ (800532c <HAL_SD_WriteBlocks+0x308>)
 80052de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	f043 0210 	orr.w	r2, r3, #16
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e011      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005306:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	e006      	b.n	8005322 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
  }
}
 8005322:	4618      	mov	r0, r3
 8005324:	3748      	adds	r7, #72	@ 0x48
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	004005ff 	.word	0x004005ff

08005330 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_SD_IRQHandler+0x2e>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 ff5a 	bl	8006210 <SD_Read_IT>
 800535c:	e155      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 808f 	beq.w	800548c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005376:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6812      	ldr	r2, [r2, #0]
 8005382:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 8005386:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800538a:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d039      	beq.n	800541a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d104      	bne.n	80053ba <HAL_SD_IRQHandler+0x8a>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d011      	beq.n	80053de <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f002 fd3e 	bl	8007e40 <SDMMC_CmdStopTransfer>
 80053c4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f91f 	bl	800561c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80053e6:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d104      	bne.n	800540a <HAL_SD_IRQHandler+0xda>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f003 f9a6 	bl	800875c <HAL_SD_RxCpltCallback>
 8005410:	e0fb      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f003 f998 	bl	8008748 <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005418:	e0f7      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 80f2 	beq.w	800560a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d011      	beq.n	8005454 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f002 fd03 	bl	8007e40 <SDMMC_CmdStopTransfer>
 800543a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d008      	beq.n	8005454 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	431a      	orrs	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8e4 	bl	800561c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	f040 80d5 	bne.w	800560a <HAL_SD_IRQHandler+0x2da>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 80cf 	bne.w	800560a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f022 0208 	bic.w	r2, r2, #8
 800547a:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f003 f95f 	bl	8008748 <HAL_SD_TxCpltCallback>
}
 800548a:	e0be      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_SD_IRQHandler+0x17c>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 ff04 	bl	80062b2 <SD_Write_IT>
 80054aa:	e0ae      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054b2:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80a7 	beq.w	800560a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ce:	f043 0202 	orr.w	r2, r3, #2
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d005      	beq.n	80054f0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	f043 0208 	orr.w	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005502:	f043 0220 	orr.w	r2, r3, #32
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d005      	beq.n	8005524 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551c:	f043 0210 	orr.w	r2, r3, #16
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f240 523a 	movw	r2, #1338	@ 0x53a
 800552c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800553c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f002 fc7c 	bl	8007e40 <SDMMC_CmdStopTransfer>
 8005548:	4602      	mov	r2, r0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f855 	bl	800561c <HAL_SD_ErrorCallback>
}
 8005572:	e04a      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800557a:	2b00      	cmp	r3, #0
 800557c:	d045      	beq.n	800560a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_SD_IRQHandler+0x262>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0320 	and.w	r3, r3, #32
 800558e:	2b00      	cmp	r3, #0
 8005590:	d011      	beq.n	80055b6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	4a1f      	ldr	r2, [pc, #124]	@ (8005614 <HAL_SD_IRQHandler+0x2e4>)
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fc fad2 	bl	8001b48 <HAL_DMA_Abort_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d02f      	beq.n	800560a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 faea 	bl	8005b88 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80055b4:	e029      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 0301 	and.w	r3, r3, #1
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <HAL_SD_IRQHandler+0x29a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d011      	beq.n	80055ee <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ce:	4a12      	ldr	r2, [pc, #72]	@ (8005618 <HAL_SD_IRQHandler+0x2e8>)
 80055d0:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fc fab6 	bl	8001b48 <HAL_DMA_Abort_IT>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fb05 	bl	8005bf6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80055ec:	e00d      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f003 f896 	bl	8008734 <HAL_SD_AbortCallback>
}
 8005608:	e7ff      	b.n	800560a <HAL_SD_IRQHandler+0x2da>
 800560a:	bf00      	nop
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	08005b89 	.word	0x08005b89
 8005618:	08005bf7 	.word	0x08005bf7

0800561c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800563e:	0f9b      	lsrs	r3, r3, #30
 8005640:	b2da      	uxtb	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800564a:	0e9b      	lsrs	r3, r3, #26
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	b2da      	uxtb	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800565c:	0e1b      	lsrs	r3, r3, #24
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	b2da      	uxtb	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800566e:	0c1b      	lsrs	r3, r3, #16
 8005670:	b2da      	uxtb	r2, r3
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800567a:	0a1b      	lsrs	r3, r3, #8
 800567c:	b2da      	uxtb	r2, r3
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005686:	b2da      	uxtb	r2, r3
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005690:	0d1b      	lsrs	r3, r3, #20
 8005692:	b29a      	uxth	r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ae:	0bdb      	lsrs	r3, r3, #15
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c0:	0b9b      	lsrs	r3, r3, #14
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d2:	0b5b      	lsrs	r3, r3, #13
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056e4:	0b1b      	lsrs	r3, r3, #12
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2200      	movs	r2, #0
 80056f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d163      	bne.n	80057c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005704:	009a      	lsls	r2, r3, #2
 8005706:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800570a:	4013      	ands	r3, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005710:	0f92      	lsrs	r2, r2, #30
 8005712:	431a      	orrs	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800571c:	0edb      	lsrs	r3, r3, #27
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	b2da      	uxtb	r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800572e:	0e1b      	lsrs	r3, r3, #24
 8005730:	b2db      	uxtb	r3, r3
 8005732:	f003 0307 	and.w	r3, r3, #7
 8005736:	b2da      	uxtb	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005740:	0d5b      	lsrs	r3, r3, #21
 8005742:	b2db      	uxtb	r3, r3
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	b2da      	uxtb	r2, r3
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005752:	0c9b      	lsrs	r3, r3, #18
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	b2da      	uxtb	r2, r3
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005764:	0bdb      	lsrs	r3, r3, #15
 8005766:	b2db      	uxtb	r3, r3
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	b2da      	uxtb	r2, r3
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	7e1b      	ldrb	r3, [r3, #24]
 8005780:	b2db      	uxtb	r3, r3
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	3302      	adds	r3, #2
 8005788:	2201      	movs	r2, #1
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005792:	fb03 f202 	mul.w	r2, r3, r2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	7a1b      	ldrb	r3, [r3, #8]
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	2201      	movs	r2, #1
 80057a6:	409a      	lsls	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80057b4:	0a52      	lsrs	r2, r2, #9
 80057b6:	fb03 f202 	mul.w	r2, r3, r2
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80057c6:	e031      	b.n	800582c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d11d      	bne.n	800580c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057d4:	041b      	lsls	r3, r3, #16
 80057d6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	431a      	orrs	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	3301      	adds	r3, #1
 80057ec:	029a      	lsls	r2, r3, #10
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005800:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	661a      	str	r2, [r3, #96]	@ 0x60
 800580a:	e00f      	b.n	800582c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a58      	ldr	r2, [pc, #352]	@ (8005974 <HAL_SD_GetCardCSD+0x344>)
 8005812:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005818:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e09d      	b.n	8005968 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005830:	0b9b      	lsrs	r3, r3, #14
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	b2da      	uxtb	r2, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005842:	09db      	lsrs	r3, r3, #7
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584a:	b2da      	uxtb	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800585a:	b2da      	uxtb	r2, r3
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	0fdb      	lsrs	r3, r3, #31
 8005866:	b2da      	uxtb	r2, r3
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005870:	0f5b      	lsrs	r3, r3, #29
 8005872:	b2db      	uxtb	r3, r3
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	b2da      	uxtb	r2, r3
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005882:	0e9b      	lsrs	r3, r3, #26
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	b2da      	uxtb	r2, r3
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005894:	0d9b      	lsrs	r3, r3, #22
 8005896:	b2db      	uxtb	r3, r3
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	b2da      	uxtb	r2, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a6:	0d5b      	lsrs	r3, r3, #21
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d6:	0bdb      	lsrs	r3, r3, #15
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ea:	0b9b      	lsrs	r3, r3, #14
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058fe:	0b5b      	lsrs	r3, r3, #13
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	b2da      	uxtb	r2, r3
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005912:	0b1b      	lsrs	r3, r3, #12
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005926:	0a9b      	lsrs	r3, r3, #10
 8005928:	b2db      	uxtb	r3, r3
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	b2da      	uxtb	r2, r3
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	b2db      	uxtb	r3, r3
 800593e:	f003 0303 	and.w	r3, r3, #3
 8005942:	b2da      	uxtb	r2, r3
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005956:	b2da      	uxtb	r2, r3
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	004005ff 	.word	0x004005ff

08005978 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80059d0:	b5b0      	push	{r4, r5, r7, lr}
 80059d2:	b090      	sub	sp, #64	@ 0x40
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2203      	movs	r2, #3
 80059e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ec:	2b03      	cmp	r3, #3
 80059ee:	d02e      	beq.n	8005a4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059f6:	d106      	bne.n	8005a06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a04:	e029      	b.n	8005a5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a0c:	d10a      	bne.n	8005a24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fa9e 	bl	8005f50 <SD_WideBus_Enable>
 8005a14:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a22:	e01a      	b.n	8005a5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fadb 	bl	8005fe6 <SD_WideBus_Disable>
 8005a30:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a3e:	e00c      	b.n	8005a5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a4c:	e005      	b.n	8005a5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a52:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a35      	ldr	r2, [pc, #212]	@ (8005b3c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a70:	e042      	b.n	8005af8 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005a72:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005a76:	f7fd fcaf 	bl	80033d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a7a:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d031      	beq.n	8005ae6 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	3302      	adds	r3, #2
 8005aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aaa:	4a25      	ldr	r2, [pc, #148]	@ (8005b40 <HAL_SD_ConfigWideBusOperation+0x170>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d907      	bls.n	8005ac0 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	4a24      	ldr	r2, [pc, #144]	@ (8005b44 <HAL_SD_ConfigWideBusOperation+0x174>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	0ddb      	lsrs	r3, r3, #23
 8005aba:	3b02      	subs	r3, #2
 8005abc:	623b      	str	r3, [r7, #32]
 8005abe:	e002      	b.n	8005ac6 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681d      	ldr	r5, [r3, #0]
 8005aca:	466c      	mov	r4, sp
 8005acc:	f107 0318 	add.w	r3, r7, #24
 8005ad0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ad4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f002 f826 	bl	8007b30 <SDMMC_Init>
 8005ae4:	e008      	b.n	8005af8 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b00:	4618      	mov	r0, r3
 8005b02:	f002 f8f3 	bl	8007cec <SDMMC_CmdBlockLength>
 8005b06:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a0a      	ldr	r2, [pc, #40]	@ (8005b3c <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005b14:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005b30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3730      	adds	r7, #48	@ 0x30
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b3c:	004005ff 	.word	0x004005ff
 8005b40:	017d7840 	.word	0x017d7840
 8005b44:	55e63b89 	.word	0x55e63b89

08005b48 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9d0 	bl	8005f00 <SD_SendStatus>
 8005b60:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d005      	beq.n	8005b74 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	0a5b      	lsrs	r3, r3, #9
 8005b78:	f003 030f 	and.w	r3, r3, #15
 8005b7c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005b7e:	693b      	ldr	r3, [r7, #16]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff ffd1 	bl	8005b48 <HAL_SD_GetCardState>
 8005ba6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d002      	beq.n	8005bc2 <SD_DMATxAbort+0x3a>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b05      	cmp	r3, #5
 8005bc0:	d10a      	bne.n	8005bd8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f002 f93a 	bl	8007e40 <SDMMC_CmdStopTransfer>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d103      	bne.n	8005be8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f002 fda7 	bl	8008734 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005be6:	e002      	b.n	8005bee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fd17 	bl	800561c <HAL_SD_ErrorCallback>
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c02:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005c0c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f7ff ff9a 	bl	8005b48 <HAL_SD_GetCardState>
 8005c14:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b06      	cmp	r3, #6
 8005c28:	d002      	beq.n	8005c30 <SD_DMARxAbort+0x3a>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b05      	cmp	r3, #5
 8005c2e:	d10a      	bne.n	8005c46 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f002 f903 	bl	8007e40 <SDMMC_CmdStopTransfer>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	431a      	orrs	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d103      	bne.n	8005c56 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f002 fd70 	bl	8008734 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005c54:	e002      	b.n	8005c5c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f7ff fce0 	bl	800561c <HAL_SD_ErrorCallback>
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b090      	sub	sp, #64	@ 0x40
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 ffb5 	bl	8007be4 <SDMMC_GetPowerState>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c80:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005c84:	e0aa      	b.n	8005ddc <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d02f      	beq.n	8005cee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f002 f9de 	bl	8008054 <SDMMC_CmdSendCID>
 8005c98:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <SD_InitCard+0x40>
    {
      return errorstate;
 8005ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca2:	e09b      	b.n	8005ddc <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 ffdf 	bl	8007c6e <SDMMC_GetResponse>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2104      	movs	r1, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f001 ffd6 	bl	8007c6e <SDMMC_GetResponse>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2108      	movs	r1, #8
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 ffcd 	bl	8007c6e <SDMMC_GetResponse>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	210c      	movs	r1, #12
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 ffc4 	bl	8007c6e <SDMMC_GetResponse>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d00d      	beq.n	8005d12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f107 020e 	add.w	r2, r7, #14
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f002 f9e4 	bl	80080ce <SDMMC_CmdSetRelAdd>
 8005d06:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <SD_InitCard+0xae>
    {
      return errorstate;
 8005d0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d10:	e064      	b.n	8005ddc <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d036      	beq.n	8005d88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005d1a:	89fb      	ldrh	r3, [r7, #14]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f002 f9ae 	bl	8008090 <SDMMC_CmdSendCSD>
 8005d34:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d3e:	e04d      	b.n	8005ddc <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2100      	movs	r1, #0
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 ff91 	bl	8007c6e <SDMMC_GetResponse>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2104      	movs	r1, #4
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 ff88 	bl	8007c6e <SDMMC_GetResponse>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2108      	movs	r1, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 ff7f 	bl	8007c6e <SDMMC_GetResponse>
 8005d70:	4602      	mov	r2, r0
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	210c      	movs	r1, #12
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 ff76 	bl	8007c6e <SDMMC_GetResponse>
 8005d82:	4602      	mov	r2, r0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2104      	movs	r1, #4
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f001 ff6d 	bl	8007c6e <SDMMC_GetResponse>
 8005d94:	4603      	mov	r3, r0
 8005d96:	0d1a      	lsrs	r2, r3, #20
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005d9c:	f107 0310 	add.w	r3, r7, #16
 8005da0:	4619      	mov	r1, r3
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7ff fc44 	bl	8005630 <HAL_SD_GetCardCSD>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005dae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005db2:	e013      	b.n	8005ddc <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6819      	ldr	r1, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	461c      	mov	r4, r3
 8005dc2:	4615      	mov	r5, r2
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	4608      	mov	r0, r1
 8005dca:	f002 f85b 	bl	8007e84 <SDMMC_CmdSelDesel>
 8005dce:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <SD_InitCard+0x176>
  {
    return errorstate;
 8005dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd8:	e000      	b.n	8005ddc <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3740      	adds	r7, #64	@ 0x40
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bdb0      	pop	{r4, r5, r7, pc}

08005de4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	2300      	movs	r3, #0
 8005df6:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f002 f864 	bl	8007eca <SDMMC_CmdGoIdleState>
 8005e02:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <SD_PowerON+0x2a>
  {
    return errorstate;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	e072      	b.n	8005ef4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f002 f877 	bl	8007f06 <SDMMC_CmdOperCond>
 8005e18:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 f84d 	bl	8007eca <SDMMC_CmdGoIdleState>
 8005e30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	e05b      	b.n	8005ef4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d137      	bne.n	8005eba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f002 f877 	bl	8007f44 <SDMMC_CmdAppCommand>
 8005e56:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d02d      	beq.n	8005eba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e5e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e62:	e047      	b.n	8005ef4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f002 f86a 	bl	8007f44 <SDMMC_CmdAppCommand>
 8005e70:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <SD_PowerON+0x98>
    {
      return errorstate;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	e03b      	b.n	8005ef4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	491e      	ldr	r1, [pc, #120]	@ (8005efc <SD_PowerON+0x118>)
 8005e82:	4618      	mov	r0, r3
 8005e84:	f002 f880 	bl	8007f88 <SDMMC_CmdAppOperCommand>
 8005e88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d002      	beq.n	8005e96 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e94:	e02e      	b.n	8005ef4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fee6 	bl	8007c6e <SDMMC_GetResponse>
 8005ea2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	0fdb      	lsrs	r3, r3, #31
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <SD_PowerON+0xcc>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <SD_PowerON+0xce>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]

    count++;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d802      	bhi.n	8005eca <SD_PowerON+0xe6>
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d0cc      	beq.n	8005e64 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d902      	bls.n	8005eda <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005ed4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ed8:	e00c      	b.n	8005ef4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	645a      	str	r2, [r3, #68]	@ 0x44
 8005eea:	e002      	b.n	8005ef2 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	c1100000 	.word	0xc1100000

08005f00 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d102      	bne.n	8005f16 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005f10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f14:	e018      	b.n	8005f48 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1e:	041b      	lsls	r3, r3, #16
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f002 f8f4 	bl	8008110 <SDMMC_CmdSendStatus>
 8005f28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	e009      	b.n	8005f48 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2100      	movs	r1, #0
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fe97 	bl	8007c6e <SDMMC_GetResponse>
 8005f40:	4602      	mov	r2, r0
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 fe81 	bl	8007c6e <SDMMC_GetResponse>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f76:	d102      	bne.n	8005f7e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f7c:	e02f      	b.n	8005fde <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f879 	bl	800607c <SD_FindSCR>
 8005f8a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	e023      	b.n	8005fde <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01c      	beq.n	8005fda <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	4619      	mov	r1, r3
 8005fac:	4610      	mov	r0, r2
 8005fae:	f001 ffc9 	bl	8007f44 <SDMMC_CmdAppCommand>
 8005fb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	e00f      	b.n	8005fde <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2102      	movs	r1, #2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f002 f802 	bl	8007fce <SDMMC_CmdBusWidth>
 8005fca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	e003      	b.n	8005fde <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e001      	b.n	8005fde <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fda:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fe36 	bl	8007c6e <SDMMC_GetResponse>
 8006002:	4603      	mov	r3, r0
 8006004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800600c:	d102      	bne.n	8006014 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800600e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006012:	e02f      	b.n	8006074 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006014:	f107 030c 	add.w	r3, r7, #12
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f82e 	bl	800607c <SD_FindSCR>
 8006020:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	e023      	b.n	8006074 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01c      	beq.n	8006070 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603e:	041b      	lsls	r3, r3, #16
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f001 ff7e 	bl	8007f44 <SDMMC_CmdAppCommand>
 8006048:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	e00f      	b.n	8006074 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2100      	movs	r1, #0
 800605a:	4618      	mov	r0, r3
 800605c:	f001 ffb7 	bl	8007fce <SDMMC_CmdBusWidth>
 8006060:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	e003      	b.n	8006074 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800606c:	2300      	movs	r3, #0
 800606e:	e001      	b.n	8006074 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006070:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006074:	4618      	mov	r0, r3
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b08f      	sub	sp, #60	@ 0x3c
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006086:	f7fb fac7 	bl	8001618 <HAL_GetTick>
 800608a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006090:	2300      	movs	r3, #0
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2108      	movs	r1, #8
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 fe22 	bl	8007cec <SDMMC_CmdBlockLength>
 80060a8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80060b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b2:	e0a9      	b.n	8006208 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060bc:	041b      	lsls	r3, r3, #16
 80060be:	4619      	mov	r1, r3
 80060c0:	4610      	mov	r0, r2
 80060c2:	f001 ff3f 	bl	8007f44 <SDMMC_CmdAppCommand>
 80060c6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d001      	beq.n	80060d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80060ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d0:	e09a      	b.n	8006208 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80060d8:	2308      	movs	r3, #8
 80060da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80060dc:	2330      	movs	r3, #48	@ 0x30
 80060de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060e0:	2302      	movs	r3, #2
 80060e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060e4:	2300      	movs	r3, #0
 80060e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80060e8:	2301      	movs	r3, #1
 80060ea:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f107 0210 	add.w	r2, r7, #16
 80060f4:	4611      	mov	r1, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f001 fdcc 	bl	8007c94 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f001 ff86 	bl	8008012 <SDMMC_CmdSendSCR>
 8006106:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d022      	beq.n	8006154 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	e07a      	b.n	8006208 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00e      	beq.n	800613e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	f107 0208 	add.w	r2, r7, #8
 800612c:	18d4      	adds	r4, r2, r3
 800612e:	4608      	mov	r0, r1
 8006130:	f001 fd2b 	bl	8007b8a <SDMMC_ReadFIFO>
 8006134:	4603      	mov	r3, r0
 8006136:	6023      	str	r3, [r4, #0]
      index++;
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613a:	3301      	adds	r3, #1
 800613c:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800613e:	f7fb fa6b 	bl	8001618 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800614c:	d102      	bne.n	8006154 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800614e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006152:	e059      	b.n	8006208 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800615a:	f240 432a 	movw	r3, #1066	@ 0x42a
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0d6      	beq.n	8006112 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616a:	f003 0308 	and.w	r3, r3, #8
 800616e:	2b00      	cmp	r3, #0
 8006170:	d005      	beq.n	800617e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2208      	movs	r2, #8
 8006178:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800617a:	2308      	movs	r3, #8
 800617c:	e044      	b.n	8006208 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d005      	beq.n	8006198 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2202      	movs	r2, #2
 8006192:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006194:	2302      	movs	r3, #2
 8006196:	e037      	b.n	8006208 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619e:	f003 0320 	and.w	r3, r3, #32
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2220      	movs	r2, #32
 80061ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80061ae:	2320      	movs	r3, #32
 80061b0:	e02a      	b.n	8006208 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80061ba:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	061a      	lsls	r2, r3, #24
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	021b      	lsls	r3, r3, #8
 80061c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	0e1b      	lsrs	r3, r3, #24
 80061d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061dc:	601a      	str	r2, [r3, #0]
    scr++;
 80061de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e0:	3304      	adds	r3, #4
 80061e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	061a      	lsls	r2, r3, #24
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	0a1b      	lsrs	r3, r3, #8
 80061f6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	0e1b      	lsrs	r3, r3, #24
 8006200:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006204:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	373c      	adds	r7, #60	@ 0x3c
 800620c:	46bd      	mov	sp, r7
 800620e:	bd90      	pop	{r4, r7, pc}

08006210 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006222:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d03f      	beq.n	80062aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e033      	b.n	8006298 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fca8 	bl	8007b8a <SDMMC_ReadFIFO>
 800623a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3b01      	subs	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b2da      	uxtb	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	701a      	strb	r2, [r3, #0]
      tmp++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	3b01      	subs	r3, #1
 8006264:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	b2da      	uxtb	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	3b01      	subs	r3, #1
 800627a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	0e1b      	lsrs	r3, r3, #24
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	3301      	adds	r3, #1
 800628a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	3b01      	subs	r3, #1
 8006290:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	3301      	adds	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b07      	cmp	r3, #7
 800629c:	d9c8      	bls.n	8006230 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80062aa:	bf00      	nop
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d043      	beq.n	8006354 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80062cc:	2300      	movs	r3, #0
 80062ce:	617b      	str	r3, [r7, #20]
 80062d0:	e037      	b.n	8006342 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	3b01      	subs	r3, #1
 80062e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	021a      	lsls	r2, r3, #8
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	3301      	adds	r3, #1
 80062f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	041a      	lsls	r2, r3, #16
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4313      	orrs	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	3301      	adds	r3, #1
 800630c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3b01      	subs	r3, #1
 8006312:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	061a      	lsls	r2, r3, #24
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4313      	orrs	r3, r2
 800631e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f107 0208 	add.w	r2, r7, #8
 8006334:	4611      	mov	r1, r2
 8006336:	4618      	mov	r0, r3
 8006338:	f001 fc34 	bl	8007ba4 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	3301      	adds	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b07      	cmp	r3, #7
 8006346:	d9c4      	bls.n	80062d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8006354:	bf00      	nop
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e040      	b.n	80063f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fa fec8 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2224      	movs	r2, #36	@ 0x24
 8006388:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0201 	bic.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fedc 	bl	8007160 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fc21 	bl	8006bf0 <UART_SetConfig>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d101      	bne.n	80063b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e01b      	b.n	80063f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 ff5b 	bl	80072a4 <UART_CheckIdleState>
 80063ee:	4603      	mov	r3, r0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3708      	adds	r7, #8
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800640c:	2b20      	cmp	r3, #32
 800640e:	d177      	bne.n	8006500 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_UART_Transmit+0x24>
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e070      	b.n	8006502 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2221      	movs	r2, #33	@ 0x21
 800642c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800642e:	f7fb f8f3 	bl	8001618 <HAL_GetTick>
 8006432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	88fa      	ldrh	r2, [r7, #6]
 8006438:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800644c:	d108      	bne.n	8006460 <HAL_UART_Transmit+0x68>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d104      	bne.n	8006460 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	e003      	b.n	8006468 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006464:	2300      	movs	r3, #0
 8006466:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006468:	e02f      	b.n	80064ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	2180      	movs	r1, #128	@ 0x80
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 ffbd 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e03b      	b.n	8006502 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10b      	bne.n	80064a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	881a      	ldrh	r2, [r3, #0]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800649c:	b292      	uxth	r2, r2
 800649e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	3302      	adds	r3, #2
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	e007      	b.n	80064b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	781a      	ldrb	r2, [r3, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3301      	adds	r3, #1
 80064b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064be:	b29b      	uxth	r3, r3
 80064c0:	3b01      	subs	r3, #1
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1c9      	bne.n	800646a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	9300      	str	r3, [sp, #0]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2200      	movs	r2, #0
 80064de:	2140      	movs	r1, #64	@ 0x40
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 ff87 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e005      	b.n	8006502 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	e000      	b.n	8006502 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006500:	2302      	movs	r3, #2
  }
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08a      	sub	sp, #40	@ 0x28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006520:	2b20      	cmp	r3, #32
 8006522:	d137      	bne.n	8006594 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_UART_Receive_IT+0x24>
 800652a:	88fb      	ldrh	r3, [r7, #6]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e030      	b.n	8006596 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a18      	ldr	r2, [pc, #96]	@ (80065a0 <HAL_UART_Receive_IT+0x94>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d01f      	beq.n	8006584 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	613b      	str	r3, [r7, #16]
   return(result);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006566:	627b      	str	r3, [r7, #36]	@ 0x24
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	623b      	str	r3, [r7, #32]
 8006572:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69f9      	ldr	r1, [r7, #28]
 8006576:	6a3a      	ldr	r2, [r7, #32]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	61bb      	str	r3, [r7, #24]
   return(result);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e6      	bne.n	8006552 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	461a      	mov	r2, r3
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 ffa0 	bl	80074d0 <UART_Start_Receive_IT>
 8006590:	4603      	mov	r3, r0
 8006592:	e000      	b.n	8006596 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006594:	2302      	movs	r3, #2
  }
}
 8006596:	4618      	mov	r0, r3
 8006598:	3728      	adds	r7, #40	@ 0x28
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	40008000 	.word	0x40008000

080065a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b0ba      	sub	sp, #232	@ 0xe8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065ce:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065d2:	4013      	ands	r3, r2
 80065d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d115      	bne.n	800660c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065e4:	f003 0320 	and.w	r3, r3, #32
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00f      	beq.n	800660c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 82ca 	beq.w	8006b96 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	4798      	blx	r3
      }
      return;
 800660a:	e2c4      	b.n	8006b96 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800660c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006610:	2b00      	cmp	r3, #0
 8006612:	f000 8117 	beq.w	8006844 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006626:	4b85      	ldr	r3, [pc, #532]	@ (800683c <HAL_UART_IRQHandler+0x298>)
 8006628:	4013      	ands	r3, r2
 800662a:	2b00      	cmp	r3, #0
 800662c:	f000 810a 	beq.w	8006844 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d011      	beq.n	8006660 <HAL_UART_IRQHandler+0xbc>
 800663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2201      	movs	r2, #1
 800664e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006656:	f043 0201 	orr.w	r2, r3, #1
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d011      	beq.n	8006690 <HAL_UART_IRQHandler+0xec>
 800666c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2202      	movs	r2, #2
 800667e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006686:	f043 0204 	orr.w	r2, r3, #4
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d011      	beq.n	80066c0 <HAL_UART_IRQHandler+0x11c>
 800669c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2204      	movs	r2, #4
 80066ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b6:	f043 0202 	orr.w	r2, r3, #2
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d017      	beq.n	80066fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066f2:	f043 0208 	orr.w	r2, r3, #8
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006704:	2b00      	cmp	r3, #0
 8006706:	d012      	beq.n	800672e <HAL_UART_IRQHandler+0x18a>
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800670c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00c      	beq.n	800672e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800671c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006724:	f043 0220 	orr.w	r2, r3, #32
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006734:	2b00      	cmp	r3, #0
 8006736:	f000 8230 	beq.w	8006b9a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00d      	beq.n	8006762 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d007      	beq.n	8006762 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006768:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d005      	beq.n	8006786 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800677a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800677e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006782:	2b00      	cmp	r3, #0
 8006784:	d04f      	beq.n	8006826 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 ff68 	bl	800765c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006796:	2b40      	cmp	r3, #64	@ 0x40
 8006798:	d141      	bne.n	800681e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067a8:	e853 3f00 	ldrex	r3, [r3]
 80067ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3308      	adds	r3, #8
 80067c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067d6:	e841 2300 	strex	r3, r2, [r1]
 80067da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1d9      	bne.n	800679a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d013      	beq.n	8006816 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f2:	4a13      	ldr	r2, [pc, #76]	@ (8006840 <HAL_UART_IRQHandler+0x29c>)
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fa:	4618      	mov	r0, r3
 80067fc:	f7fb f9a4 	bl	8001b48 <HAL_DMA_Abort_IT>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d017      	beq.n	8006836 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800680a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006814:	e00f      	b.n	8006836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f9d4 	bl	8006bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e00b      	b.n	8006836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9d0 	bl	8006bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e007      	b.n	8006836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9cc 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006834:	e1b1      	b.n	8006b9a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006836:	bf00      	nop
    return;
 8006838:	e1af      	b.n	8006b9a <HAL_UART_IRQHandler+0x5f6>
 800683a:	bf00      	nop
 800683c:	04000120 	.word	0x04000120
 8006840:	08007725 	.word	0x08007725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006848:	2b01      	cmp	r3, #1
 800684a:	f040 816a 	bne.w	8006b22 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8163 	beq.w	8006b22 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800685c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006860:	f003 0310 	and.w	r3, r3, #16
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 815c 	beq.w	8006b22 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2210      	movs	r2, #16
 8006870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	f040 80d4 	bne.w	8006a2a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800688e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80ad 	beq.w	80069f2 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800689e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068a2:	429a      	cmp	r2, r3
 80068a4:	f080 80a5 	bcs.w	80069f2 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0320 	and.w	r3, r3, #32
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8086 	bne.w	80069d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80068fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1da      	bne.n	80068c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800691e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3308      	adds	r3, #8
 800692e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006932:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006936:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800693a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1e1      	bne.n	800690e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3308      	adds	r3, #8
 8006950:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800695a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800695c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	3308      	adds	r3, #8
 800696a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800696e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006970:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006974:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800697c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e3      	bne.n	800694a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2220      	movs	r2, #32
 8006986:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800699e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a0:	f023 0310 	bic.w	r3, r3, #16
 80069a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e4      	bne.n	8006990 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fb f87e 	bl	8001acc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	4619      	mov	r1, r3
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f8f4 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069f0:	e0d5      	b.n	8006b9e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069fc:	429a      	cmp	r2, r3
 80069fe:	f040 80ce 	bne.w	8006b9e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b20      	cmp	r3, #32
 8006a10:	f040 80c5 	bne.w	8006b9e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8d8 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
      return;
 8006a28:	e0b9      	b.n	8006b9e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 80ab 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 80a6 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3308      	adds	r3, #8
 8006aac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ab0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e3      	bne.n	8006a8c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f023 0310 	bic.w	r3, r3, #16
 8006aec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	69b9      	ldr	r1, [r7, #24]
 8006b00:	69fa      	ldr	r2, [r7, #28]
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	617b      	str	r3, [r7, #20]
   return(result);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e4      	bne.n	8006ad8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2202      	movs	r2, #2
 8006b12:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f85c 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b20:	e03f      	b.n	8006ba2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d00e      	beq.n	8006b4c <HAL_UART_IRQHandler+0x5a8>
 8006b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 ffe9 	bl	8007b1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b4a:	e02d      	b.n	8006ba8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00e      	beq.n	8006b76 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d008      	beq.n	8006b76 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01c      	beq.n	8006ba6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
    }
    return;
 8006b74:	e017      	b.n	8006ba6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d012      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x604>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fdde 	bl	8007750 <UART_EndTransmit_IT>
    return;
 8006b94:	e008      	b.n	8006ba8 <HAL_UART_IRQHandler+0x604>
      return;
 8006b96:	bf00      	nop
 8006b98:	e006      	b.n	8006ba8 <HAL_UART_IRQHandler+0x604>
    return;
 8006b9a:	bf00      	nop
 8006b9c:	e004      	b.n	8006ba8 <HAL_UART_IRQHandler+0x604>
      return;
 8006b9e:	bf00      	nop
 8006ba0:	e002      	b.n	8006ba8 <HAL_UART_IRQHandler+0x604>
      return;
 8006ba2:	bf00      	nop
 8006ba4:	e000      	b.n	8006ba8 <HAL_UART_IRQHandler+0x604>
    return;
 8006ba6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006ba8:	37e8      	adds	r7, #232	@ 0xe8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop

08006bb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf4:	b08a      	sub	sp, #40	@ 0x28
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	69db      	ldr	r3, [r3, #28]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4ba4      	ldr	r3, [pc, #656]	@ (8006eb0 <UART_SetConfig+0x2c0>)
 8006c20:	4013      	ands	r3, r2
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	6812      	ldr	r2, [r2, #0]
 8006c26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	68da      	ldr	r2, [r3, #12]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a99      	ldr	r2, [pc, #612]	@ (8006eb4 <UART_SetConfig+0x2c4>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a90      	ldr	r2, [pc, #576]	@ (8006eb8 <UART_SetConfig+0x2c8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d126      	bne.n	8006cc8 <UART_SetConfig+0xd8>
 8006c7a:	4b90      	ldr	r3, [pc, #576]	@ (8006ebc <UART_SetConfig+0x2cc>)
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	f003 0303 	and.w	r3, r3, #3
 8006c84:	2b03      	cmp	r3, #3
 8006c86:	d81b      	bhi.n	8006cc0 <UART_SetConfig+0xd0>
 8006c88:	a201      	add	r2, pc, #4	@ (adr r2, 8006c90 <UART_SetConfig+0xa0>)
 8006c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8e:	bf00      	nop
 8006c90:	08006ca1 	.word	0x08006ca1
 8006c94:	08006cb1 	.word	0x08006cb1
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ca6:	e116      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cae:	e112      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb6:	e10e      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cbe:	e10a      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc6:	e106      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec0 <UART_SetConfig+0x2d0>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d138      	bne.n	8006d44 <UART_SetConfig+0x154>
 8006cd2:	4b7a      	ldr	r3, [pc, #488]	@ (8006ebc <UART_SetConfig+0x2cc>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd8:	f003 030c 	and.w	r3, r3, #12
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d82d      	bhi.n	8006d3c <UART_SetConfig+0x14c>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <UART_SetConfig+0xf8>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d1d 	.word	0x08006d1d
 8006cec:	08006d3d 	.word	0x08006d3d
 8006cf0:	08006d3d 	.word	0x08006d3d
 8006cf4:	08006d3d 	.word	0x08006d3d
 8006cf8:	08006d2d 	.word	0x08006d2d
 8006cfc:	08006d3d 	.word	0x08006d3d
 8006d00:	08006d3d 	.word	0x08006d3d
 8006d04:	08006d3d 	.word	0x08006d3d
 8006d08:	08006d25 	.word	0x08006d25
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006d3d 	.word	0x08006d3d
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d35 	.word	0x08006d35
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d22:	e0d8      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d24:	2302      	movs	r3, #2
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2a:	e0d4      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d2c:	2304      	movs	r3, #4
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d32:	e0d0      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d34:	2308      	movs	r3, #8
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d3a:	e0cc      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d42:	e0c8      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a5e      	ldr	r2, [pc, #376]	@ (8006ec4 <UART_SetConfig+0x2d4>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d125      	bne.n	8006d9a <UART_SetConfig+0x1aa>
 8006d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8006ebc <UART_SetConfig+0x2cc>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d58:	2b30      	cmp	r3, #48	@ 0x30
 8006d5a:	d016      	beq.n	8006d8a <UART_SetConfig+0x19a>
 8006d5c:	2b30      	cmp	r3, #48	@ 0x30
 8006d5e:	d818      	bhi.n	8006d92 <UART_SetConfig+0x1a2>
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d00a      	beq.n	8006d7a <UART_SetConfig+0x18a>
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d814      	bhi.n	8006d92 <UART_SetConfig+0x1a2>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <UART_SetConfig+0x182>
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d008      	beq.n	8006d82 <UART_SetConfig+0x192>
 8006d70:	e00f      	b.n	8006d92 <UART_SetConfig+0x1a2>
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d78:	e0ad      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d80:	e0a9      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d82:	2304      	movs	r3, #4
 8006d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d88:	e0a5      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d90:	e0a1      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d92:	2310      	movs	r3, #16
 8006d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d98:	e09d      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8006ec8 <UART_SetConfig+0x2d8>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d125      	bne.n	8006df0 <UART_SetConfig+0x200>
 8006da4:	4b45      	ldr	r3, [pc, #276]	@ (8006ebc <UART_SetConfig+0x2cc>)
 8006da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006daa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006dae:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db0:	d016      	beq.n	8006de0 <UART_SetConfig+0x1f0>
 8006db2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db4:	d818      	bhi.n	8006de8 <UART_SetConfig+0x1f8>
 8006db6:	2b80      	cmp	r3, #128	@ 0x80
 8006db8:	d00a      	beq.n	8006dd0 <UART_SetConfig+0x1e0>
 8006dba:	2b80      	cmp	r3, #128	@ 0x80
 8006dbc:	d814      	bhi.n	8006de8 <UART_SetConfig+0x1f8>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <UART_SetConfig+0x1d8>
 8006dc2:	2b40      	cmp	r3, #64	@ 0x40
 8006dc4:	d008      	beq.n	8006dd8 <UART_SetConfig+0x1e8>
 8006dc6:	e00f      	b.n	8006de8 <UART_SetConfig+0x1f8>
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dce:	e082      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd6:	e07e      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006dd8:	2304      	movs	r3, #4
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dde:	e07a      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006de0:	2308      	movs	r3, #8
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de6:	e076      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006de8:	2310      	movs	r3, #16
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dee:	e072      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a35      	ldr	r2, [pc, #212]	@ (8006ecc <UART_SetConfig+0x2dc>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d12a      	bne.n	8006e50 <UART_SetConfig+0x260>
 8006dfa:	4b30      	ldr	r3, [pc, #192]	@ (8006ebc <UART_SetConfig+0x2cc>)
 8006dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e08:	d01a      	beq.n	8006e40 <UART_SetConfig+0x250>
 8006e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e0e:	d81b      	bhi.n	8006e48 <UART_SetConfig+0x258>
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e14:	d00c      	beq.n	8006e30 <UART_SetConfig+0x240>
 8006e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1a:	d815      	bhi.n	8006e48 <UART_SetConfig+0x258>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <UART_SetConfig+0x238>
 8006e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e24:	d008      	beq.n	8006e38 <UART_SetConfig+0x248>
 8006e26:	e00f      	b.n	8006e48 <UART_SetConfig+0x258>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2e:	e052      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e30:	2302      	movs	r3, #2
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e36:	e04e      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e38:	2304      	movs	r3, #4
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3e:	e04a      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e40:	2308      	movs	r3, #8
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e46:	e046      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e48:	2310      	movs	r3, #16
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e042      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a17      	ldr	r2, [pc, #92]	@ (8006eb4 <UART_SetConfig+0x2c4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d13a      	bne.n	8006ed0 <UART_SetConfig+0x2e0>
 8006e5a:	4b18      	ldr	r3, [pc, #96]	@ (8006ebc <UART_SetConfig+0x2cc>)
 8006e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e60:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e64:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e68:	d01a      	beq.n	8006ea0 <UART_SetConfig+0x2b0>
 8006e6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e6e:	d81b      	bhi.n	8006ea8 <UART_SetConfig+0x2b8>
 8006e70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e74:	d00c      	beq.n	8006e90 <UART_SetConfig+0x2a0>
 8006e76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7a:	d815      	bhi.n	8006ea8 <UART_SetConfig+0x2b8>
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <UART_SetConfig+0x298>
 8006e80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e84:	d008      	beq.n	8006e98 <UART_SetConfig+0x2a8>
 8006e86:	e00f      	b.n	8006ea8 <UART_SetConfig+0x2b8>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e8e:	e022      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e90:	2302      	movs	r3, #2
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e96:	e01e      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006e98:	2304      	movs	r3, #4
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9e:	e01a      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006ea0:	2308      	movs	r3, #8
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea6:	e016      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eae:	e012      	b.n	8006ed6 <UART_SetConfig+0x2e6>
 8006eb0:	efff69f3 	.word	0xefff69f3
 8006eb4:	40008000 	.word	0x40008000
 8006eb8:	40013800 	.word	0x40013800
 8006ebc:	40021000 	.word	0x40021000
 8006ec0:	40004400 	.word	0x40004400
 8006ec4:	40004800 	.word	0x40004800
 8006ec8:	40004c00 	.word	0x40004c00
 8006ecc:	40005000 	.word	0x40005000
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a9f      	ldr	r2, [pc, #636]	@ (8007158 <UART_SetConfig+0x568>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d17a      	bne.n	8006fd6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d824      	bhi.n	8006f32 <UART_SetConfig+0x342>
 8006ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef0 <UART_SetConfig+0x300>)
 8006eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eee:	bf00      	nop
 8006ef0:	08006f15 	.word	0x08006f15
 8006ef4:	08006f33 	.word	0x08006f33
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f33 	.word	0x08006f33
 8006f00:	08006f23 	.word	0x08006f23
 8006f04:	08006f33 	.word	0x08006f33
 8006f08:	08006f33 	.word	0x08006f33
 8006f0c:	08006f33 	.word	0x08006f33
 8006f10:	08006f2b 	.word	0x08006f2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f14:	f7fb feea 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8006f18:	61f8      	str	r0, [r7, #28]
        break;
 8006f1a:	e010      	b.n	8006f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f1c:	4b8f      	ldr	r3, [pc, #572]	@ (800715c <UART_SetConfig+0x56c>)
 8006f1e:	61fb      	str	r3, [r7, #28]
        break;
 8006f20:	e00d      	b.n	8006f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f22:	f7fb fe4b 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8006f26:	61f8      	str	r0, [r7, #28]
        break;
 8006f28:	e009      	b.n	8006f3e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f2e:	61fb      	str	r3, [r7, #28]
        break;
 8006f30:	e005      	b.n	8006f3e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 80fb 	beq.w	800713c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d305      	bcc.n	8006f62 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f5c:	69fa      	ldr	r2, [r7, #28]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d903      	bls.n	8006f6a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f68:	e0e8      	b.n	800713c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	461c      	mov	r4, r3
 8006f70:	4615      	mov	r5, r2
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	022b      	lsls	r3, r5, #8
 8006f7c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f80:	0222      	lsls	r2, r4, #8
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	6849      	ldr	r1, [r1, #4]
 8006f86:	0849      	lsrs	r1, r1, #1
 8006f88:	2000      	movs	r0, #0
 8006f8a:	4688      	mov	r8, r1
 8006f8c:	4681      	mov	r9, r0
 8006f8e:	eb12 0a08 	adds.w	sl, r2, r8
 8006f92:	eb43 0b09 	adc.w	fp, r3, r9
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	607a      	str	r2, [r7, #4]
 8006fa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 f97a 	bl	80002a0 <__aeabi_uldivmod>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fba:	d308      	bcc.n	8006fce <UART_SetConfig+0x3de>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fc2:	d204      	bcs.n	8006fce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	60da      	str	r2, [r3, #12]
 8006fcc:	e0b6      	b.n	800713c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fd4:	e0b2      	b.n	800713c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	69db      	ldr	r3, [r3, #28]
 8006fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fde:	d15e      	bne.n	800709e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fe0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d828      	bhi.n	800703a <UART_SetConfig+0x44a>
 8006fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <UART_SetConfig+0x400>)
 8006fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	08007015 	.word	0x08007015
 8006ff4:	0800701d 	.word	0x0800701d
 8006ff8:	08007025 	.word	0x08007025
 8006ffc:	0800703b 	.word	0x0800703b
 8007000:	0800702b 	.word	0x0800702b
 8007004:	0800703b 	.word	0x0800703b
 8007008:	0800703b 	.word	0x0800703b
 800700c:	0800703b 	.word	0x0800703b
 8007010:	08007033 	.word	0x08007033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007014:	f7fb fe6a 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 8007018:	61f8      	str	r0, [r7, #28]
        break;
 800701a:	e014      	b.n	8007046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800701c:	f7fb fe7c 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8007020:	61f8      	str	r0, [r7, #28]
        break;
 8007022:	e010      	b.n	8007046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007024:	4b4d      	ldr	r3, [pc, #308]	@ (800715c <UART_SetConfig+0x56c>)
 8007026:	61fb      	str	r3, [r7, #28]
        break;
 8007028:	e00d      	b.n	8007046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800702a:	f7fb fdc7 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 800702e:	61f8      	str	r0, [r7, #28]
        break;
 8007030:	e009      	b.n	8007046 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007036:	61fb      	str	r3, [r7, #28]
        break;
 8007038:	e005      	b.n	8007046 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d077      	beq.n	800713c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	005a      	lsls	r2, r3, #1
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007060:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	2b0f      	cmp	r3, #15
 8007066:	d916      	bls.n	8007096 <UART_SetConfig+0x4a6>
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800706e:	d212      	bcs.n	8007096 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f023 030f 	bic.w	r3, r3, #15
 8007078:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	085b      	lsrs	r3, r3, #1
 800707e:	b29b      	uxth	r3, r3
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	b29a      	uxth	r2, r3
 8007086:	8afb      	ldrh	r3, [r7, #22]
 8007088:	4313      	orrs	r3, r2
 800708a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	8afa      	ldrh	r2, [r7, #22]
 8007092:	60da      	str	r2, [r3, #12]
 8007094:	e052      	b.n	800713c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800709c:	e04e      	b.n	800713c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800709e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d827      	bhi.n	80070f6 <UART_SetConfig+0x506>
 80070a6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ac <UART_SetConfig+0x4bc>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070e1 	.word	0x080070e1
 80070b8:	080070f7 	.word	0x080070f7
 80070bc:	080070e7 	.word	0x080070e7
 80070c0:	080070f7 	.word	0x080070f7
 80070c4:	080070f7 	.word	0x080070f7
 80070c8:	080070f7 	.word	0x080070f7
 80070cc:	080070ef 	.word	0x080070ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d0:	f7fb fe0c 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 80070d4:	61f8      	str	r0, [r7, #28]
        break;
 80070d6:	e014      	b.n	8007102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d8:	f7fb fe1e 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 80070dc:	61f8      	str	r0, [r7, #28]
        break;
 80070de:	e010      	b.n	8007102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e0:	4b1e      	ldr	r3, [pc, #120]	@ (800715c <UART_SetConfig+0x56c>)
 80070e2:	61fb      	str	r3, [r7, #28]
        break;
 80070e4:	e00d      	b.n	8007102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e6:	f7fb fd69 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 80070ea:	61f8      	str	r0, [r7, #28]
        break;
 80070ec:	e009      	b.n	8007102 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070f2:	61fb      	str	r3, [r7, #28]
        break;
 80070f4:	e005      	b.n	8007102 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007100:	bf00      	nop
    }

    if (pclk != 0U)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d019      	beq.n	800713c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	085a      	lsrs	r2, r3, #1
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	441a      	add	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	fbb2 f3f3 	udiv	r3, r2, r3
 800711a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b0f      	cmp	r3, #15
 8007120:	d909      	bls.n	8007136 <UART_SetConfig+0x546>
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007128:	d205      	bcs.n	8007136 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	60da      	str	r2, [r3, #12]
 8007134:	e002      	b.n	800713c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2200      	movs	r2, #0
 8007146:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007148:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	@ 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007156:	bf00      	nop
 8007158:	40008000 	.word	0x40008000
 800715c:	00f42400 	.word	0x00f42400

08007160 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716c:	f003 0308 	and.w	r3, r3, #8
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	430a      	orrs	r2, r1
 80071cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01a      	beq.n	8007276 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800725a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800725e:	d10a      	bne.n	8007276 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b098      	sub	sp, #96	@ 0x60
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072b4:	f7fa f9b0 	bl	8001618 <HAL_GetTick>
 80072b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0308 	and.w	r3, r3, #8
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d12e      	bne.n	8007326 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f88c 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d021      	beq.n	8007326 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007300:	647b      	str	r3, [r7, #68]	@ 0x44
 8007302:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800730e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2220      	movs	r2, #32
 8007318:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e062      	b.n	80073ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b04      	cmp	r3, #4
 8007332:	d149      	bne.n	80073c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800733c:	2200      	movs	r2, #0
 800733e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f856 	bl	80073f4 <UART_WaitOnFlagUntilTimeout>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d03c      	beq.n	80073c8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	e853 3f00 	ldrex	r3, [r3]
 800735a:	623b      	str	r3, [r7, #32]
   return(result);
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007362:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800736c:	633b      	str	r3, [r7, #48]	@ 0x30
 800736e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007374:	e841 2300 	strex	r3, r2, [r1]
 8007378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1e6      	bne.n	800734e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	e853 3f00 	ldrex	r3, [r3]
 800738e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f023 0301 	bic.w	r3, r3, #1
 8007396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3308      	adds	r3, #8
 800739e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a0:	61fa      	str	r2, [r7, #28]
 80073a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a4:	69b9      	ldr	r1, [r7, #24]
 80073a6:	69fa      	ldr	r2, [r7, #28]
 80073a8:	e841 2300 	strex	r3, r2, [r1]
 80073ac:	617b      	str	r3, [r7, #20]
   return(result);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1e5      	bne.n	8007380 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e011      	b.n	80073ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2220      	movs	r2, #32
 80073cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3758      	adds	r7, #88	@ 0x58
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007404:	e04f      	b.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800740c:	d04b      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800740e:	f7fa f903 	bl	8001618 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	429a      	cmp	r2, r3
 800741c:	d302      	bcc.n	8007424 <UART_WaitOnFlagUntilTimeout+0x30>
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e04e      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d037      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b80      	cmp	r3, #128	@ 0x80
 800743a:	d034      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	2b40      	cmp	r3, #64	@ 0x40
 8007440:	d031      	beq.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69db      	ldr	r3, [r3, #28]
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b08      	cmp	r3, #8
 800744e:	d110      	bne.n	8007472 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2208      	movs	r2, #8
 8007456:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 f8ff 	bl	800765c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2208      	movs	r2, #8
 8007462:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e029      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007480:	d111      	bne.n	80074a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800748a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f8e5 	bl	800765c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e00f      	b.n	80074c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	69da      	ldr	r2, [r3, #28]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	4013      	ands	r3, r2
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	bf0c      	ite	eq
 80074b6:	2301      	moveq	r3, #1
 80074b8:	2300      	movne	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	461a      	mov	r2, r3
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d0a0      	beq.n	8007406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b097      	sub	sp, #92	@ 0x5c
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007502:	d10e      	bne.n	8007522 <UART_Start_Receive_IT+0x52>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d105      	bne.n	8007518 <UART_Start_Receive_IT+0x48>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007512:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007516:	e02d      	b.n	8007574 <UART_Start_Receive_IT+0xa4>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	22ff      	movs	r2, #255	@ 0xff
 800751c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007520:	e028      	b.n	8007574 <UART_Start_Receive_IT+0xa4>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d10d      	bne.n	8007546 <UART_Start_Receive_IT+0x76>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <UART_Start_Receive_IT+0x6c>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	22ff      	movs	r2, #255	@ 0xff
 8007536:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800753a:	e01b      	b.n	8007574 <UART_Start_Receive_IT+0xa4>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	227f      	movs	r2, #127	@ 0x7f
 8007540:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007544:	e016      	b.n	8007574 <UART_Start_Receive_IT+0xa4>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800754e:	d10d      	bne.n	800756c <UART_Start_Receive_IT+0x9c>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d104      	bne.n	8007562 <UART_Start_Receive_IT+0x92>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	227f      	movs	r2, #127	@ 0x7f
 800755c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007560:	e008      	b.n	8007574 <UART_Start_Receive_IT+0xa4>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	223f      	movs	r2, #63	@ 0x3f
 8007566:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800756a:	e003      	b.n	8007574 <UART_Start_Receive_IT+0xa4>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2222      	movs	r2, #34	@ 0x22
 8007580:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3308      	adds	r3, #8
 800758a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800758e:	e853 3f00 	ldrex	r3, [r3]
 8007592:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007596:	f043 0301 	orr.w	r3, r3, #1
 800759a:	657b      	str	r3, [r7, #84]	@ 0x54
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3308      	adds	r3, #8
 80075a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80075a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80075b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e5      	bne.n	8007584 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c0:	d107      	bne.n	80075d2 <UART_Start_Receive_IT+0x102>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d103      	bne.n	80075d2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4a21      	ldr	r2, [pc, #132]	@ (8007654 <UART_Start_Receive_IT+0x184>)
 80075ce:	669a      	str	r2, [r3, #104]	@ 0x68
 80075d0:	e002      	b.n	80075d8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a20      	ldr	r2, [pc, #128]	@ (8007658 <UART_Start_Receive_IT+0x188>)
 80075d6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d019      	beq.n	8007614 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80075f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007600:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e6      	bne.n	80075e0 <UART_Start_Receive_IT+0x110>
 8007612:	e018      	b.n	8007646 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	613b      	str	r3, [r7, #16]
   return(result);
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f043 0320 	orr.w	r3, r3, #32
 8007628:	653b      	str	r3, [r7, #80]	@ 0x50
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	461a      	mov	r2, r3
 8007630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007632:	623b      	str	r3, [r7, #32]
 8007634:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007636:	69f9      	ldr	r1, [r7, #28]
 8007638:	6a3a      	ldr	r2, [r7, #32]
 800763a:	e841 2300 	strex	r3, r2, [r1]
 800763e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1e6      	bne.n	8007614 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	375c      	adds	r7, #92	@ 0x5c
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	08007961 	.word	0x08007961
 8007658:	080077a5 	.word	0x080077a5

0800765c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b095      	sub	sp, #84	@ 0x54
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007682:	643b      	str	r3, [r7, #64]	@ 0x40
 8007684:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e6      	bne.n	8007664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e5      	bne.n	8007696 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d118      	bne.n	8007704 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0310 	bic.w	r3, r3, #16
 80076e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	613b      	str	r3, [r7, #16]
   return(result);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007718:	bf00      	nop
 800771a:	3754      	adds	r7, #84	@ 0x54
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff fa3e 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	60bb      	str	r3, [r7, #8]
   return(result);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800776c:	61fb      	str	r3, [r7, #28]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6979      	ldr	r1, [r7, #20]
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	613b      	str	r3, [r7, #16]
   return(result);
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e6      	bne.n	8007758 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2220      	movs	r2, #32
 800778e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fa0a 	bl	8006bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779c:	bf00      	nop
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b09c      	sub	sp, #112	@ 0x70
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077bc:	2b22      	cmp	r3, #34	@ 0x22
 80077be:	f040 80be 	bne.w	800793e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077d0:	b2d9      	uxtb	r1, r3
 80077d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077dc:	400a      	ands	r2, r1
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	f040 80a3 	bne.w	8007952 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800781a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800781c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007820:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800782a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800782c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007830:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e6      	bne.n	800780c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800784e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	667b      	str	r3, [r7, #100]	@ 0x64
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3308      	adds	r3, #8
 800785c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800785e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007860:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800786c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e5      	bne.n	800783e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2220      	movs	r2, #32
 8007876:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a34      	ldr	r2, [pc, #208]	@ (800795c <UART_RxISR_8BIT+0x1b8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d01f      	beq.n	80078d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d018      	beq.n	80078d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	623b      	str	r3, [r7, #32]
   return(result);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80078be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d12e      	bne.n	8007936 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	e853 3f00 	ldrex	r3, [r3]
 80078ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0310 	bic.w	r3, r3, #16
 80078f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	461a      	mov	r2, r3
 80078fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078fc:	61fb      	str	r3, [r7, #28]
 80078fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007900:	69b9      	ldr	r1, [r7, #24]
 8007902:	69fa      	ldr	r2, [r7, #28]
 8007904:	e841 2300 	strex	r3, r2, [r1]
 8007908:	617b      	str	r3, [r7, #20]
   return(result);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d1e6      	bne.n	80078de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b10      	cmp	r3, #16
 800791c:	d103      	bne.n	8007926 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2210      	movs	r2, #16
 8007924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff f952 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007934:	e00d      	b.n	8007952 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7f8 ff94 	bl	8000864 <HAL_UART_RxCpltCallback>
}
 800793c:	e009      	b.n	8007952 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	8b1b      	ldrh	r3, [r3, #24]
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f042 0208 	orr.w	r2, r2, #8
 800794e:	b292      	uxth	r2, r2
 8007950:	831a      	strh	r2, [r3, #24]
}
 8007952:	bf00      	nop
 8007954:	3770      	adds	r7, #112	@ 0x70
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	40008000 	.word	0x40008000

08007960 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b09c      	sub	sp, #112	@ 0x70
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800796e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007978:	2b22      	cmp	r3, #34	@ 0x22
 800797a:	f040 80be 	bne.w	8007afa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007984:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800798c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800798e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007992:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007996:	4013      	ands	r3, r2
 8007998:	b29a      	uxth	r2, r3
 800799a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800799c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	1c9a      	adds	r2, r3, #2
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079ae:	b29b      	uxth	r3, r3
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f040 80a3 	bne.w	8007b0e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d0:	e853 3f00 	ldrex	r3, [r3]
 80079d4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80079e8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e6      	bne.n	80079c8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	3308      	adds	r3, #8
 8007a00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a04:	e853 3f00 	ldrex	r3, [r3]
 8007a08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	f023 0301 	bic.w	r3, r3, #1
 8007a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3308      	adds	r3, #8
 8007a18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a1a:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e5      	bne.n	80079fa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a34      	ldr	r2, [pc, #208]	@ (8007b18 <UART_RxISR_16BIT+0x1b8>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d01f      	beq.n	8007a8c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d018      	beq.n	8007a8c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a7a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e6      	bne.n	8007a5a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d12e      	bne.n	8007af2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	f023 0310 	bic.w	r3, r3, #16
 8007aae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6979      	ldr	r1, [r7, #20]
 8007abe:	69ba      	ldr	r2, [r7, #24]
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d103      	bne.n	8007ae2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2210      	movs	r2, #16
 8007ae0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7ff f874 	bl	8006bd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007af0:	e00d      	b.n	8007b0e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7f8 feb6 	bl	8000864 <HAL_UART_RxCpltCallback>
}
 8007af8:	e009      	b.n	8007b0e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	8b1b      	ldrh	r3, [r3, #24]
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0208 	orr.w	r2, r2, #8
 8007b0a:	b292      	uxth	r2, r2
 8007b0c:	831a      	strh	r2, [r3, #24]
}
 8007b0e:	bf00      	nop
 8007b10:	3770      	adds	r7, #112	@ 0x70
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	40008000 	.word	0x40008000

08007b1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007b30:	b084      	sub	sp, #16
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	f107 001c 	add.w	r0, r7, #28
 8007b3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007b4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007b52:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007b56:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007b5a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8007b5e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8007b6e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	431a      	orrs	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	b004      	add	sp, #16
 8007b88:	4770      	bx	lr

08007b8a <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc4:	4770      	bx	lr

08007bc6 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2203      	movs	r2, #3
 8007bd2:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007bd4:	2002      	movs	r0, #2
 8007bd6:	f7f9 fd2b 	bl	8001630 <HAL_Delay>

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0303 	and.w	r3, r3, #3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007c24:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007c2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007c3a:	f023 030f 	bic.w	r3, r3, #15
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	b2db      	uxtb	r3, r3
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3314      	adds	r3, #20
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	4413      	add	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007cc0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007cc6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cd2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0

}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007cfa:	2310      	movs	r3, #16
 8007cfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cfe:	2340      	movs	r3, #64	@ 0x40
 8007d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d02:	2300      	movs	r3, #0
 8007d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d0c:	f107 0308 	add.w	r3, r7, #8
 8007d10:	4619      	mov	r1, r3
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff ff74 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d1c:	2110      	movs	r1, #16
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fa18 	bl	8008154 <SDMMC_GetCmdResp1>
 8007d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d26:	69fb      	ldr	r3, [r7, #28]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007d3e:	2311      	movs	r3, #17
 8007d40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d42:	2340      	movs	r3, #64	@ 0x40
 8007d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	4619      	mov	r1, r3
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff ff52 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d60:	2111      	movs	r1, #17
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f9f6 	bl	8008154 <SDMMC_GetCmdResp1>
 8007d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3720      	adds	r7, #32
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007d82:	2312      	movs	r3, #18
 8007d84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d86:	2340      	movs	r3, #64	@ 0x40
 8007d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d94:	f107 0308 	add.w	r3, r7, #8
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff ff30 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007da4:	2112      	movs	r1, #18
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f9d4 	bl	8008154 <SDMMC_GetCmdResp1>
 8007dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dae:	69fb      	ldr	r3, [r7, #28]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007dc6:	2318      	movs	r3, #24
 8007dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dca:	2340      	movs	r3, #64	@ 0x40
 8007dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007dd8:	f107 0308 	add.w	r3, r7, #8
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff ff0e 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de8:	2118      	movs	r1, #24
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f9b2 	bl	8008154 <SDMMC_GetCmdResp1>
 8007df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007df2:	69fb      	ldr	r3, [r7, #28]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007e0a:	2319      	movs	r3, #25
 8007e0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e0e:	2340      	movs	r3, #64	@ 0x40
 8007e10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e1c:	f107 0308 	add.w	r3, r7, #8
 8007e20:	4619      	mov	r1, r3
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff feec 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2c:	2119      	movs	r1, #25
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f990 	bl	8008154 <SDMMC_GetCmdResp1>
 8007e34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e36:	69fb      	ldr	r3, [r7, #28]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b088      	sub	sp, #32
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e50:	2340      	movs	r3, #64	@ 0x40
 8007e52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e5c:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e5e:	f107 0308 	add.w	r3, r7, #8
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fecb 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007e6a:	4a05      	ldr	r2, [pc, #20]	@ (8007e80 <SDMMC_CmdStopTransfer+0x40>)
 8007e6c:	210c      	movs	r1, #12
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f970 	bl	8008154 <SDMMC_GetCmdResp1>
 8007e74:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8007e76:	69fb      	ldr	r3, [r7, #28]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	05f5e100 	.word	0x05f5e100

08007e84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b08a      	sub	sp, #40	@ 0x28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007e94:	2307      	movs	r3, #7
 8007e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e98:	2340      	movs	r3, #64	@ 0x40
 8007e9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ea0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ea4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ea6:	f107 0310 	add.w	r3, r7, #16
 8007eaa:	4619      	mov	r1, r3
 8007eac:	68f8      	ldr	r0, [r7, #12]
 8007eae:	f7ff fea7 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eb6:	2107      	movs	r1, #7
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f000 f94b 	bl	8008154 <SDMMC_GetCmdResp1>
 8007ebe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3728      	adds	r7, #40	@ 0x28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b088      	sub	sp, #32
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007eda:	2300      	movs	r3, #0
 8007edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ee8:	f107 0308 	add.w	r3, r7, #8
 8007eec:	4619      	mov	r1, r3
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff fe86 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fb65 	bl	80085c4 <SDMMC_GetCmdError>
 8007efa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007efc:	69fb      	ldr	r3, [r7, #28]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b088      	sub	sp, #32
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f0e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007f12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f14:	2308      	movs	r3, #8
 8007f16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f18:	2340      	movs	r3, #64	@ 0x40
 8007f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f26:	f107 0308 	add.w	r3, r7, #8
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff fe67 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 faf8 	bl	8008528 <SDMMC_GetCmdResp7>
 8007f38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f3a:	69fb      	ldr	r3, [r7, #28]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3720      	adds	r7, #32
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007f52:	2337      	movs	r3, #55	@ 0x37
 8007f54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f56:	2340      	movs	r3, #64	@ 0x40
 8007f58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f64:	f107 0308 	add.w	r3, r7, #8
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff fe48 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f74:	2137      	movs	r1, #55	@ 0x37
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f8ec 	bl	8008154 <SDMMC_GetCmdResp1>
 8007f7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f7e:	69fb      	ldr	r3, [r7, #28]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3720      	adds	r7, #32
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b088      	sub	sp, #32
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f9c:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007f9e:	2329      	movs	r3, #41	@ 0x29
 8007fa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fa2:	2340      	movs	r3, #64	@ 0x40
 8007fa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fb0:	f107 0308 	add.w	r3, r7, #8
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7ff fe22 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f9ff 	bl	80083c0 <SDMMC_GetCmdResp3>
 8007fc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3720      	adds	r7, #32
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b088      	sub	sp, #32
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007fdc:	2306      	movs	r3, #6
 8007fde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe0:	2340      	movs	r3, #64	@ 0x40
 8007fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fee:	f107 0308 	add.w	r3, r7, #8
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff fe03 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ffe:	2106      	movs	r1, #6
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f8a7 	bl	8008154 <SDMMC_GetCmdResp1>
 8008006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008008:	69fb      	ldr	r3, [r7, #28]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b088      	sub	sp, #32
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800801a:	2300      	movs	r3, #0
 800801c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800801e:	2333      	movs	r3, #51	@ 0x33
 8008020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008022:	2340      	movs	r3, #64	@ 0x40
 8008024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800802a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800802e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008030:	f107 0308 	add.w	r3, r7, #8
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fde2 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800803c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008040:	2133      	movs	r1, #51	@ 0x33
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f886 	bl	8008154 <SDMMC_GetCmdResp1>
 8008048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800804a:	69fb      	ldr	r3, [r7, #28]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3720      	adds	r7, #32
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008060:	2302      	movs	r3, #2
 8008062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008064:	23c0      	movs	r3, #192	@ 0xc0
 8008066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800806c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff fdc1 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f956 	bl	8008330 <SDMMC_GetCmdResp2>
 8008084:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008086:	69fb      	ldr	r3, [r7, #28]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3720      	adds	r7, #32
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800809e:	2309      	movs	r3, #9
 80080a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80080a2:	23c0      	movs	r3, #192	@ 0xc0
 80080a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080b0:	f107 0308 	add.w	r3, r7, #8
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7ff fda2 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f937 	bl	8008330 <SDMMC_GetCmdResp2>
 80080c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080c4:	69fb      	ldr	r3, [r7, #28]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3720      	adds	r7, #32
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b088      	sub	sp, #32
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80080d8:	2300      	movs	r3, #0
 80080da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80080dc:	2303      	movs	r3, #3
 80080de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080e0:	2340      	movs	r3, #64	@ 0x40
 80080e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fd83 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	2103      	movs	r1, #3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f99c 	bl	800843c <SDMMC_GetCmdResp6>
 8008104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008106:	69fb      	ldr	r3, [r7, #28]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b088      	sub	sp, #32
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800811e:	230d      	movs	r3, #13
 8008120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008122:	2340      	movs	r3, #64	@ 0x40
 8008124:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800812a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800812e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008130:	f107 0308 	add.w	r3, r7, #8
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7ff fd62 	bl	8007c00 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800813c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008140:	210d      	movs	r1, #13
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f806 	bl	8008154 <SDMMC_GetCmdResp1>
 8008148:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800814a:	69fb      	ldr	r3, [r7, #28]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	460b      	mov	r3, r1
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008162:	4b70      	ldr	r3, [pc, #448]	@ (8008324 <SDMMC_GetCmdResp1+0x1d0>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a70      	ldr	r2, [pc, #448]	@ (8008328 <SDMMC_GetCmdResp1+0x1d4>)
 8008168:	fba2 2303 	umull	r2, r3, r2, r3
 800816c:	0a5a      	lsrs	r2, r3, #9
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	fb02 f303 	mul.w	r3, r2, r3
 8008174:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	61fa      	str	r2, [r7, #28]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d102      	bne.n	8008186 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008180:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008184:	e0c9      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800818a:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0ef      	beq.n	8008176 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1ea      	bne.n	8008176 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d004      	beq.n	80081b6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2204      	movs	r2, #4
 80081b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081b2:	2304      	movs	r3, #4
 80081b4:	e0b1      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e0a6      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	22c5      	movs	r2, #197	@ 0xc5
 80081d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7ff fd3e 	bl	8007c54 <SDMMC_GetCommandResponse>
 80081d8:	4603      	mov	r3, r0
 80081da:	461a      	mov	r2, r3
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	4293      	cmp	r3, r2
 80081e0:	d001      	beq.n	80081e6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e099      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80081e6:	2100      	movs	r1, #0
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff fd40 	bl	8007c6e <SDMMC_GetResponse>
 80081ee:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4b4e      	ldr	r3, [pc, #312]	@ (800832c <SDMMC_GetCmdResp1+0x1d8>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e08d      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	da02      	bge.n	800820a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008204:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008208:	e087      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008214:	2340      	movs	r3, #64	@ 0x40
 8008216:	e080      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d001      	beq.n	8008226 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008222:	2380      	movs	r3, #128	@ 0x80
 8008224:	e079      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008230:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008234:	e071      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d002      	beq.n	8008246 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008244:	e069      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008254:	e061      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008260:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008264:	e059      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008270:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008274:	e051      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008284:	e049      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008290:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008294:	e041      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80082a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a4:	e039      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d002      	beq.n	80082b6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80082b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80082b4:	e031      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d002      	beq.n	80082c6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80082c0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80082c4:	e029      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80082d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082d4:	e021      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d002      	beq.n	80082e6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80082e0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80082e4:	e019      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d002      	beq.n	80082f6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80082f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082f4:	e011      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008300:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008304:	e009      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f003 0308 	and.w	r3, r3, #8
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008310:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008314:	e001      	b.n	800831a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008316:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	2000002c 	.word	0x2000002c
 8008328:	10624dd3 	.word	0x10624dd3
 800832c:	fdffe008 	.word	0xfdffe008

08008330 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008338:	4b1f      	ldr	r3, [pc, #124]	@ (80083b8 <SDMMC_GetCmdResp2+0x88>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a1f      	ldr	r2, [pc, #124]	@ (80083bc <SDMMC_GetCmdResp2+0x8c>)
 800833e:	fba2 2303 	umull	r2, r3, r2, r3
 8008342:	0a5b      	lsrs	r3, r3, #9
 8008344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	1e5a      	subs	r2, r3, #1
 8008352:	60fa      	str	r2, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d102      	bne.n	800835e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008358:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800835c:	e026      	b.n	80083ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008362:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0ef      	beq.n	800834e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1ea      	bne.n	800834e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800837c:	f003 0304 	and.w	r3, r3, #4
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2204      	movs	r2, #4
 8008388:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800838a:	2304      	movs	r3, #4
 800838c:	e00e      	b.n	80083ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	d004      	beq.n	80083a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e003      	b.n	80083ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	22c5      	movs	r2, #197	@ 0xc5
 80083a8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	2000002c 	.word	0x2000002c
 80083bc:	10624dd3 	.word	0x10624dd3

080083c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008434 <SDMMC_GetCmdResp3+0x74>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008438 <SDMMC_GetCmdResp3+0x78>)
 80083ce:	fba2 2303 	umull	r2, r3, r2, r3
 80083d2:	0a5b      	lsrs	r3, r3, #9
 80083d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083d8:	fb02 f303 	mul.w	r3, r2, r3
 80083dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1e5a      	subs	r2, r3, #1
 80083e2:	60fa      	str	r2, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80083ec:	e01b      	b.n	8008426 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0ef      	beq.n	80083de <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1ea      	bne.n	80083de <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840c:	f003 0304 	and.w	r3, r3, #4
 8008410:	2b00      	cmp	r3, #0
 8008412:	d004      	beq.n	800841e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2204      	movs	r2, #4
 8008418:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800841a:	2304      	movs	r3, #4
 800841c:	e003      	b.n	8008426 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	22c5      	movs	r2, #197	@ 0xc5
 8008422:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3714      	adds	r7, #20
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	2000002c 	.word	0x2000002c
 8008438:	10624dd3 	.word	0x10624dd3

0800843c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b088      	sub	sp, #32
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	460b      	mov	r3, r1
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800844a:	4b35      	ldr	r3, [pc, #212]	@ (8008520 <SDMMC_GetCmdResp6+0xe4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a35      	ldr	r2, [pc, #212]	@ (8008524 <SDMMC_GetCmdResp6+0xe8>)
 8008450:	fba2 2303 	umull	r2, r3, r2, r3
 8008454:	0a5b      	lsrs	r3, r3, #9
 8008456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800845a:	fb02 f303 	mul.w	r3, r2, r3
 800845e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	1e5a      	subs	r2, r3, #1
 8008464:	61fa      	str	r2, [r7, #28]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d102      	bne.n	8008470 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800846a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800846e:	e052      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008474:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0ef      	beq.n	8008460 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1ea      	bne.n	8008460 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d004      	beq.n	80084a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2204      	movs	r2, #4
 800849a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800849c:	2304      	movs	r3, #4
 800849e:	e03a      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2201      	movs	r2, #1
 80084b0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e02f      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff fbcc 	bl	8007c54 <SDMMC_GetCommandResponse>
 80084bc:	4603      	mov	r3, r0
 80084be:	461a      	mov	r2, r3
 80084c0:	7afb      	ldrb	r3, [r7, #11]
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d001      	beq.n	80084ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e025      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	22c5      	movs	r2, #197	@ 0xc5
 80084ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80084d0:	2100      	movs	r1, #0
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff fbcb 	bl	8007c6e <SDMMC_GetResponse>
 80084d8:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d106      	bne.n	80084f2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	0c1b      	lsrs	r3, r3, #16
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e011      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80084fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008500:	e009      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800850c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008510:	e001      	b.n	8008516 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008512:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008516:	4618      	mov	r0, r3
 8008518:	3720      	adds	r7, #32
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000002c 	.word	0x2000002c
 8008524:	10624dd3 	.word	0x10624dd3

08008528 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008530:	4b22      	ldr	r3, [pc, #136]	@ (80085bc <SDMMC_GetCmdResp7+0x94>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a22      	ldr	r2, [pc, #136]	@ (80085c0 <SDMMC_GetCmdResp7+0x98>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	0a5b      	lsrs	r3, r3, #9
 800853c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008540:	fb02 f303 	mul.w	r3, r2, r3
 8008544:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	1e5a      	subs	r2, r3, #1
 800854a:	60fa      	str	r2, [r7, #12]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d102      	bne.n	8008556 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008550:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008554:	e02c      	b.n	80085b0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800855a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0ef      	beq.n	8008546 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1ea      	bne.n	8008546 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008574:	f003 0304 	and.w	r3, r3, #4
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2204      	movs	r2, #4
 8008580:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008582:	2304      	movs	r3, #4
 8008584:	e014      	b.n	80085b0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858a:	f003 0301 	and.w	r3, r3, #1
 800858e:	2b00      	cmp	r3, #0
 8008590:	d004      	beq.n	800859c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008598:	2301      	movs	r3, #1
 800859a:	e009      	b.n	80085b0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2240      	movs	r2, #64	@ 0x40
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80085ae:	2300      	movs	r3, #0

}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	2000002c 	.word	0x2000002c
 80085c0:	10624dd3 	.word	0x10624dd3

080085c4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085cc:	4b11      	ldr	r3, [pc, #68]	@ (8008614 <SDMMC_GetCmdError+0x50>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a11      	ldr	r2, [pc, #68]	@ (8008618 <SDMMC_GetCmdError+0x54>)
 80085d2:	fba2 2303 	umull	r2, r3, r2, r3
 80085d6:	0a5b      	lsrs	r3, r3, #9
 80085d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085dc:	fb02 f303 	mul.w	r3, r2, r3
 80085e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1e5a      	subs	r2, r3, #1
 80085e6:	60fa      	str	r2, [r7, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80085f0:	e009      	b.n	8008606 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0f1      	beq.n	80085e2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	22c5      	movs	r2, #197	@ 0xc5
 8008602:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	2000002c 	.word	0x2000002c
 8008618:	10624dd3 	.word	0x10624dd3

0800861c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008620:	4904      	ldr	r1, [pc, #16]	@ (8008634 <MX_FATFS_Init+0x18>)
 8008622:	4805      	ldr	r0, [pc, #20]	@ (8008638 <MX_FATFS_Init+0x1c>)
 8008624:	f002 fe74 	bl	800b310 <FATFS_LinkDriver>
 8008628:	4603      	mov	r3, r0
 800862a:	461a      	mov	r2, r3
 800862c:	4b03      	ldr	r3, [pc, #12]	@ (800863c <MX_FATFS_Init+0x20>)
 800862e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008630:	bf00      	nop
 8008632:	bd80      	pop	{r7, pc}
 8008634:	2000329c 	.word	0x2000329c
 8008638:	0800d39c 	.word	0x0800d39c
 800863c:	20003298 	.word	0x20003298

08008640 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008644:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008646:	4618      	mov	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008656:	2300      	movs	r3, #0
 8008658:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800865a:	f000 f89e 	bl	800879a <BSP_SD_IsDetected>
 800865e:	4603      	mov	r3, r0
 8008660:	2b01      	cmp	r3, #1
 8008662:	d001      	beq.n	8008668 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008664:	2302      	movs	r3, #2
 8008666:	e005      	b.n	8008674 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008668:	4804      	ldr	r0, [pc, #16]	@ (800867c <BSP_SD_Init+0x2c>)
 800866a:	f7fc fa1b 	bl	8004aa4 <HAL_SD_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008672:	79fb      	ldrb	r3, [r7, #7]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3708      	adds	r7, #8
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200021ec 	.word	0x200021ec

08008680 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af02      	add	r7, sp, #8
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	607a      	str	r2, [r7, #4]
 800868c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	68f9      	ldr	r1, [r7, #12]
 800869c:	4806      	ldr	r0, [pc, #24]	@ (80086b8 <BSP_SD_ReadBlocks+0x38>)
 800869e:	f7fc fae3 	bl	8004c68 <HAL_SD_ReadBlocks>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200021ec 	.word	0x200021ec

080086bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af02      	add	r7, sp, #8
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	68f9      	ldr	r1, [r7, #12]
 80086d8:	4806      	ldr	r0, [pc, #24]	@ (80086f4 <BSP_SD_WriteBlocks+0x38>)
 80086da:	f7fc fca3 	bl	8005024 <HAL_SD_WriteBlocks>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	200021ec 	.word	0x200021ec

080086f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80086fc:	4805      	ldr	r0, [pc, #20]	@ (8008714 <BSP_SD_GetCardState+0x1c>)
 80086fe:	f7fd fa23 	bl	8005b48 <HAL_SD_GetCardState>
 8008702:	4603      	mov	r3, r0
 8008704:	2b04      	cmp	r3, #4
 8008706:	bf14      	ite	ne
 8008708:	2301      	movne	r3, #1
 800870a:	2300      	moveq	r3, #0
 800870c:	b2db      	uxtb	r3, r3
}
 800870e:	4618      	mov	r0, r3
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	200021ec 	.word	0x200021ec

08008718 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008720:	6879      	ldr	r1, [r7, #4]
 8008722:	4803      	ldr	r0, [pc, #12]	@ (8008730 <BSP_SD_GetCardInfo+0x18>)
 8008724:	f7fd f928 	bl	8005978 <HAL_SD_GetCardInfo>
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	200021ec 	.word	0x200021ec

08008734 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800873c:	f000 f818 	bl	8008770 <BSP_SD_AbortCallback>
}
 8008740:	bf00      	nop
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008750:	f000 f815 	bl	800877e <BSP_SD_WriteCpltCallback>
}
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008764:	f000 f812 	bl	800878c <BSP_SD_ReadCpltCallback>
}
 8008768:	bf00      	nop
 800876a:	3708      	adds	r7, #8
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0

}
 8008774:	bf00      	nop
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800877e:	b480      	push	{r7}
 8008780:	af00      	add	r7, sp, #0

}
 8008782:	bf00      	nop
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800878c:	b480      	push	{r7}
 800878e:	af00      	add	r7, sp, #0

}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80087a0:	2301      	movs	r3, #1
 80087a2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80087a4:	f000 f80c 	bl	80087c0 <BSP_PlatformIsDetected>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80087ae:	2300      	movs	r3, #0
 80087b0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80087b2:	79fb      	ldrb	r3, [r7, #7]
 80087b4:	b2db      	uxtb	r3, r3
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80087c6:	2301      	movs	r3, #1
 80087c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80087ca:	2110      	movs	r1, #16
 80087cc:	4806      	ldr	r0, [pc, #24]	@ (80087e8 <BSP_PlatformIsDetected+0x28>)
 80087ce:	f7f9 fc85 	bl	80020dc <HAL_GPIO_ReadPin>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d001      	beq.n	80087dc <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80087d8:	2300      	movs	r3, #0
 80087da:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80087dc:	79fb      	ldrb	r3, [r7, #7]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	48000400 	.word	0x48000400

080087ec <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80087f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008824 <SD_CheckStatus+0x38>)
 80087f8:	2201      	movs	r2, #1
 80087fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80087fc:	f7ff ff7c 	bl	80086f8 <BSP_SD_GetCardState>
 8008800:	4603      	mov	r3, r0
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008806:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <SD_CheckStatus+0x38>)
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f023 0301 	bic.w	r3, r3, #1
 8008810:	b2da      	uxtb	r2, r3
 8008812:	4b04      	ldr	r3, [pc, #16]	@ (8008824 <SD_CheckStatus+0x38>)
 8008814:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008816:	4b03      	ldr	r3, [pc, #12]	@ (8008824 <SD_CheckStatus+0x38>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	b2db      	uxtb	r3, r3
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20000035 	.word	0x20000035

08008828 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008832:	4b0b      	ldr	r3, [pc, #44]	@ (8008860 <SD_initialize+0x38>)
 8008834:	2201      	movs	r2, #1
 8008836:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008838:	f7ff ff0a 	bl	8008650 <BSP_SD_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d107      	bne.n	8008852 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008842:	79fb      	ldrb	r3, [r7, #7]
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff ffd1 	bl	80087ec <SD_CheckStatus>
 800884a:	4603      	mov	r3, r0
 800884c:	461a      	mov	r2, r3
 800884e:	4b04      	ldr	r3, [pc, #16]	@ (8008860 <SD_initialize+0x38>)
 8008850:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008852:	4b03      	ldr	r3, [pc, #12]	@ (8008860 <SD_initialize+0x38>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	b2db      	uxtb	r3, r3
}
 8008858:	4618      	mov	r0, r3
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000035 	.word	0x20000035

08008864 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff ffbb 	bl	80087ec <SD_CheckStatus>
 8008876:	4603      	mov	r3, r0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	4603      	mov	r3, r0
 800888e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	6879      	ldr	r1, [r7, #4]
 800889c:	68b8      	ldr	r0, [r7, #8]
 800889e:	f7ff feef 	bl	8008680 <BSP_SD_ReadBlocks>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d107      	bne.n	80088b8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80088a8:	bf00      	nop
 80088aa:	f7ff ff25 	bl	80086f8 <BSP_SD_GetCardState>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1fa      	bne.n	80088aa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80088b4:	2300      	movs	r3, #0
 80088b6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b086      	sub	sp, #24
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4603      	mov	r3, r0
 80088d0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80088d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	68b8      	ldr	r0, [r7, #8]
 80088e0:	f7ff feec 	bl	80086bc <BSP_SD_WriteBlocks>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d107      	bne.n	80088fa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80088ea:	bf00      	nop
 80088ec:	f7ff ff04 	bl	80086f8 <BSP_SD_GetCardState>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1fa      	bne.n	80088ec <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80088fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08c      	sub	sp, #48	@ 0x30
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	603a      	str	r2, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
 8008910:	460b      	mov	r3, r1
 8008912:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800891a:	4b25      	ldr	r3, [pc, #148]	@ (80089b0 <SD_ioctl+0xac>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	b2db      	uxtb	r3, r3
 8008920:	f003 0301 	and.w	r3, r3, #1
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <SD_ioctl+0x28>
 8008928:	2303      	movs	r3, #3
 800892a:	e03c      	b.n	80089a6 <SD_ioctl+0xa2>

  switch (cmd)
 800892c:	79bb      	ldrb	r3, [r7, #6]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d834      	bhi.n	800899c <SD_ioctl+0x98>
 8008932:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <SD_ioctl+0x34>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	08008949 	.word	0x08008949
 800893c:	08008951 	.word	0x08008951
 8008940:	08008969 	.word	0x08008969
 8008944:	08008983 	.word	0x08008983
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008948:	2300      	movs	r3, #0
 800894a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800894e:	e028      	b.n	80089a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008950:	f107 030c 	add.w	r3, r7, #12
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff fedf 	bl	8008718 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800895a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008966:	e01c      	b.n	80089a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008968:	f107 030c 	add.w	r3, r7, #12
 800896c:	4618      	mov	r0, r3
 800896e:	f7ff fed3 	bl	8008718 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	b29a      	uxth	r2, r3
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800897a:	2300      	movs	r3, #0
 800897c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008980:	e00f      	b.n	80089a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008982:	f107 030c 	add.w	r3, r7, #12
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff fec6 	bl	8008718 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800898c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800898e:	0a5a      	lsrs	r2, r3, #9
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800899a:	e002      	b.n	80089a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800899c:	2304      	movs	r3, #4
 800899e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80089a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3730      	adds	r7, #48	@ 0x30
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000035 	.word	0x20000035

080089b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	4603      	mov	r3, r0
 80089bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80089be:	79fb      	ldrb	r3, [r7, #7]
 80089c0:	4a08      	ldr	r2, [pc, #32]	@ (80089e4 <disk_status+0x30>)
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	79fa      	ldrb	r2, [r7, #7]
 80089cc:	4905      	ldr	r1, [pc, #20]	@ (80089e4 <disk_status+0x30>)
 80089ce:	440a      	add	r2, r1
 80089d0:	7a12      	ldrb	r2, [r2, #8]
 80089d2:	4610      	mov	r0, r2
 80089d4:	4798      	blx	r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200032c8 	.word	0x200032c8

080089e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008a30 <disk_initialize+0x48>)
 80089fa:	5cd3      	ldrb	r3, [r2, r3]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d111      	bne.n	8008a24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a00:	79fb      	ldrb	r3, [r7, #7]
 8008a02:	4a0b      	ldr	r2, [pc, #44]	@ (8008a30 <disk_initialize+0x48>)
 8008a04:	2101      	movs	r1, #1
 8008a06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	4a09      	ldr	r2, [pc, #36]	@ (8008a30 <disk_initialize+0x48>)
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	79fa      	ldrb	r2, [r7, #7]
 8008a16:	4906      	ldr	r1, [pc, #24]	@ (8008a30 <disk_initialize+0x48>)
 8008a18:	440a      	add	r2, r1
 8008a1a:	7a12      	ldrb	r2, [r2, #8]
 8008a1c:	4610      	mov	r0, r2
 8008a1e:	4798      	blx	r3
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	200032c8 	.word	0x200032c8

08008a34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a34:	b590      	push	{r4, r7, lr}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60b9      	str	r1, [r7, #8]
 8008a3c:	607a      	str	r2, [r7, #4]
 8008a3e:	603b      	str	r3, [r7, #0]
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	4a0a      	ldr	r2, [pc, #40]	@ (8008a70 <disk_read+0x3c>)
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	4413      	add	r3, r2
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	689c      	ldr	r4, [r3, #8]
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	4a07      	ldr	r2, [pc, #28]	@ (8008a70 <disk_read+0x3c>)
 8008a54:	4413      	add	r3, r2
 8008a56:	7a18      	ldrb	r0, [r3, #8]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	68b9      	ldr	r1, [r7, #8]
 8008a5e:	47a0      	blx	r4
 8008a60:	4603      	mov	r3, r0
 8008a62:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd90      	pop	{r4, r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	200032c8 	.word	0x200032c8

08008a74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b087      	sub	sp, #28
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab0 <disk_write+0x3c>)
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	4413      	add	r3, r2
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	68dc      	ldr	r4, [r3, #12]
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	4a07      	ldr	r2, [pc, #28]	@ (8008ab0 <disk_write+0x3c>)
 8008a94:	4413      	add	r3, r2
 8008a96:	7a18      	ldrb	r0, [r3, #8]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	68b9      	ldr	r1, [r7, #8]
 8008a9e:	47a0      	blx	r4
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd90      	pop	{r4, r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	200032c8 	.word	0x200032c8

08008ab4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	603a      	str	r2, [r7, #0]
 8008abe:	71fb      	strb	r3, [r7, #7]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	4a09      	ldr	r2, [pc, #36]	@ (8008aec <disk_ioctl+0x38>)
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	79fa      	ldrb	r2, [r7, #7]
 8008ad2:	4906      	ldr	r1, [pc, #24]	@ (8008aec <disk_ioctl+0x38>)
 8008ad4:	440a      	add	r2, r1
 8008ad6:	7a10      	ldrb	r0, [r2, #8]
 8008ad8:	79b9      	ldrb	r1, [r7, #6]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	4798      	blx	r3
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	200032c8 	.word	0x200032c8

08008af0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3301      	adds	r3, #1
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b00:	89fb      	ldrh	r3, [r7, #14]
 8008b02:	021b      	lsls	r3, r3, #8
 8008b04:	b21a      	sxth	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b21b      	sxth	r3, r3
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	b21b      	sxth	r3, r3
 8008b10:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b12:	89fb      	ldrh	r3, [r7, #14]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3714      	adds	r7, #20
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3303      	adds	r3, #3
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	3202      	adds	r2, #2
 8008b38:	7812      	ldrb	r2, [r2, #0]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	021b      	lsls	r3, r3, #8
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	3201      	adds	r2, #1
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7812      	ldrb	r2, [r2, #0]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
	return rv;
 8008b58:	68fb      	ldr	r3, [r7, #12]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	460b      	mov	r3, r1
 8008b70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	1c5a      	adds	r2, r3, #1
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	887a      	ldrh	r2, [r7, #2]
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	887b      	ldrh	r3, [r7, #2]
 8008b80:	0a1b      	lsrs	r3, r3, #8
 8008b82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	1c5a      	adds	r2, r3, #1
 8008b88:	607a      	str	r2, [r7, #4]
 8008b8a:	887a      	ldrh	r2, [r7, #2]
 8008b8c:	b2d2      	uxtb	r2, r2
 8008b8e:	701a      	strb	r2, [r3, #0]
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	1c5a      	adds	r2, r3, #1
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	0a1b      	lsrs	r3, r3, #8
 8008bb6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	607a      	str	r2, [r7, #4]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	0a1b      	lsrs	r3, r3, #8
 8008bc8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	607a      	str	r2, [r7, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	b2d2      	uxtb	r2, r2
 8008be6:	701a      	strb	r2, [r3, #0]
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	1c53      	adds	r3, r2, #1
 8008c12:	613b      	str	r3, [r7, #16]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	1c59      	adds	r1, r3, #1
 8008c18:	6179      	str	r1, [r7, #20]
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3b01      	subs	r3, #1
 8008c22:	607b      	str	r3, [r7, #4]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1f1      	bne.n	8008c0e <mem_cpy+0x1a>
	}
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008c36:	b480      	push	{r7}
 8008c38:	b087      	sub	sp, #28
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	1c5a      	adds	r2, r3, #1
 8008c4a:	617a      	str	r2, [r7, #20]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	b2d2      	uxtb	r2, r2
 8008c50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	3b01      	subs	r3, #1
 8008c56:	607b      	str	r3, [r7, #4]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d1f3      	bne.n	8008c46 <mem_set+0x10>
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	371c      	adds	r7, #28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008c6c:	b480      	push	{r7}
 8008c6e:	b089      	sub	sp, #36	@ 0x24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	1c5a      	adds	r2, r3, #1
 8008c88:	61fa      	str	r2, [r7, #28]
 8008c8a:	781b      	ldrb	r3, [r3, #0]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	61ba      	str	r2, [r7, #24]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	1acb      	subs	r3, r1, r3
 8008c98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	607b      	str	r3, [r7, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d002      	beq.n	8008cac <mem_cmp+0x40>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d0eb      	beq.n	8008c84 <mem_cmp+0x18>

	return r;
 8008cac:	697b      	ldr	r3, [r7, #20]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3724      	adds	r7, #36	@ 0x24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008cc4:	e002      	b.n	8008ccc <chk_chr+0x12>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	607b      	str	r3, [r7, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <chk_chr+0x26>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d1f2      	bne.n	8008cc6 <chk_chr+0xc>
	return *str;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60bb      	str	r3, [r7, #8]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	60fb      	str	r3, [r7, #12]
 8008d02:	e029      	b.n	8008d58 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d04:	4a27      	ldr	r2, [pc, #156]	@ (8008da4 <chk_lock+0xb4>)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	4413      	add	r3, r2
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d01d      	beq.n	8008d4e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d12:	4a24      	ldr	r2, [pc, #144]	@ (8008da4 <chk_lock+0xb4>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	4413      	add	r3, r2
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d116      	bne.n	8008d52 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008d24:	4a1f      	ldr	r2, [pc, #124]	@ (8008da4 <chk_lock+0xb4>)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d10c      	bne.n	8008d52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d38:	4a1a      	ldr	r2, [pc, #104]	@ (8008da4 <chk_lock+0xb4>)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	4413      	add	r3, r2
 8008d40:	3308      	adds	r3, #8
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d102      	bne.n	8008d52 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d4c:	e007      	b.n	8008d5e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3301      	adds	r3, #1
 8008d56:	60fb      	str	r3, [r7, #12]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d9d2      	bls.n	8008d04 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d109      	bne.n	8008d78 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <chk_lock+0x80>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d101      	bne.n	8008d74 <chk_lock+0x84>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e010      	b.n	8008d96 <chk_lock+0xa6>
 8008d74:	2312      	movs	r3, #18
 8008d76:	e00e      	b.n	8008d96 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d108      	bne.n	8008d90 <chk_lock+0xa0>
 8008d7e:	4a09      	ldr	r2, [pc, #36]	@ (8008da4 <chk_lock+0xb4>)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	011b      	lsls	r3, r3, #4
 8008d84:	4413      	add	r3, r2
 8008d86:	330c      	adds	r3, #12
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d8e:	d101      	bne.n	8008d94 <chk_lock+0xa4>
 8008d90:	2310      	movs	r3, #16
 8008d92:	e000      	b.n	8008d96 <chk_lock+0xa6>
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	200032a8 	.word	0x200032a8

08008da8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008dae:	2300      	movs	r3, #0
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	e002      	b.n	8008dba <enq_lock+0x12>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3301      	adds	r3, #1
 8008db8:	607b      	str	r3, [r7, #4]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d806      	bhi.n	8008dce <enq_lock+0x26>
 8008dc0:	4a09      	ldr	r2, [pc, #36]	@ (8008de8 <enq_lock+0x40>)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	4413      	add	r3, r2
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1f2      	bne.n	8008db4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	bf14      	ite	ne
 8008dd4:	2301      	movne	r3, #1
 8008dd6:	2300      	moveq	r3, #0
 8008dd8:	b2db      	uxtb	r3, r3
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	200032a8 	.word	0x200032a8

08008dec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
 8008dfa:	e01f      	b.n	8008e3c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008dfc:	4a41      	ldr	r2, [pc, #260]	@ (8008f04 <inc_lock+0x118>)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	011b      	lsls	r3, r3, #4
 8008e02:	4413      	add	r3, r2
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d113      	bne.n	8008e36 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8008f04 <inc_lock+0x118>)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	4413      	add	r3, r2
 8008e16:	3304      	adds	r3, #4
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d109      	bne.n	8008e36 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e22:	4a38      	ldr	r2, [pc, #224]	@ (8008f04 <inc_lock+0x118>)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	4413      	add	r3, r2
 8008e2a:	3308      	adds	r3, #8
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d006      	beq.n	8008e44 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d9dc      	bls.n	8008dfc <inc_lock+0x10>
 8008e42:	e000      	b.n	8008e46 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008e44:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d132      	bne.n	8008eb2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	e002      	b.n	8008e58 <inc_lock+0x6c>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d806      	bhi.n	8008e6c <inc_lock+0x80>
 8008e5e:	4a29      	ldr	r2, [pc, #164]	@ (8008f04 <inc_lock+0x118>)
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	4413      	add	r3, r2
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1f2      	bne.n	8008e52 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d101      	bne.n	8008e76 <inc_lock+0x8a>
 8008e72:	2300      	movs	r3, #0
 8008e74:	e040      	b.n	8008ef8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	4922      	ldr	r1, [pc, #136]	@ (8008f04 <inc_lock+0x118>)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	011b      	lsls	r3, r3, #4
 8008e80:	440b      	add	r3, r1
 8008e82:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689a      	ldr	r2, [r3, #8]
 8008e88:	491e      	ldr	r1, [pc, #120]	@ (8008f04 <inc_lock+0x118>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	440b      	add	r3, r1
 8008e90:	3304      	adds	r3, #4
 8008e92:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	491a      	ldr	r1, [pc, #104]	@ (8008f04 <inc_lock+0x118>)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	011b      	lsls	r3, r3, #4
 8008e9e:	440b      	add	r3, r1
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008ea4:	4a17      	ldr	r2, [pc, #92]	@ (8008f04 <inc_lock+0x118>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	4413      	add	r3, r2
 8008eac:	330c      	adds	r3, #12
 8008eae:	2200      	movs	r2, #0
 8008eb0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d009      	beq.n	8008ecc <inc_lock+0xe0>
 8008eb8:	4a12      	ldr	r2, [pc, #72]	@ (8008f04 <inc_lock+0x118>)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	011b      	lsls	r3, r3, #4
 8008ebe:	4413      	add	r3, r2
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <inc_lock+0xe0>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	e015      	b.n	8008ef8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d108      	bne.n	8008ee4 <inc_lock+0xf8>
 8008ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8008f04 <inc_lock+0x118>)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	4413      	add	r3, r2
 8008eda:	330c      	adds	r3, #12
 8008edc:	881b      	ldrh	r3, [r3, #0]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	e001      	b.n	8008ee8 <inc_lock+0xfc>
 8008ee4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ee8:	4906      	ldr	r1, [pc, #24]	@ (8008f04 <inc_lock+0x118>)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	440b      	add	r3, r1
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3301      	adds	r3, #1
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	200032a8 	.word	0x200032a8

08008f08 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d825      	bhi.n	8008f68 <dec_lock+0x60>
		n = Files[i].ctr;
 8008f1c:	4a17      	ldr	r2, [pc, #92]	@ (8008f7c <dec_lock+0x74>)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	4413      	add	r3, r2
 8008f24:	330c      	adds	r3, #12
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008f2a:	89fb      	ldrh	r3, [r7, #14]
 8008f2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f30:	d101      	bne.n	8008f36 <dec_lock+0x2e>
 8008f32:	2300      	movs	r3, #0
 8008f34:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008f36:	89fb      	ldrh	r3, [r7, #14]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <dec_lock+0x3a>
 8008f3c:	89fb      	ldrh	r3, [r7, #14]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008f42:	4a0e      	ldr	r2, [pc, #56]	@ (8008f7c <dec_lock+0x74>)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	4413      	add	r3, r2
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	89fa      	ldrh	r2, [r7, #14]
 8008f4e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f50:	89fb      	ldrh	r3, [r7, #14]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d105      	bne.n	8008f62 <dec_lock+0x5a>
 8008f56:	4a09      	ldr	r2, [pc, #36]	@ (8008f7c <dec_lock+0x74>)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	4413      	add	r3, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	737b      	strb	r3, [r7, #13]
 8008f66:	e001      	b.n	8008f6c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008f68:	2302      	movs	r3, #2
 8008f6a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008f6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	200032a8 	.word	0x200032a8

08008f80 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	e010      	b.n	8008fb0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008f8e:	4a0d      	ldr	r2, [pc, #52]	@ (8008fc4 <clear_lock+0x44>)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	011b      	lsls	r3, r3, #4
 8008f94:	4413      	add	r3, r2
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d105      	bne.n	8008faa <clear_lock+0x2a>
 8008f9e:	4a09      	ldr	r2, [pc, #36]	@ (8008fc4 <clear_lock+0x44>)
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	4413      	add	r3, r2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3301      	adds	r3, #1
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d9eb      	bls.n	8008f8e <clear_lock+0xe>
	}
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	200032a8 	.word	0x200032a8

08008fc8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	78db      	ldrb	r3, [r3, #3]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d034      	beq.n	8009046 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fe0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7858      	ldrb	r0, [r3, #1]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008fec:	2301      	movs	r3, #1
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	f7ff fd40 	bl	8008a74 <disk_write>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	73fb      	strb	r3, [r7, #15]
 8008ffe:	e022      	b.n	8009046 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	1ad2      	subs	r2, r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	429a      	cmp	r2, r3
 8009014:	d217      	bcs.n	8009046 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	789b      	ldrb	r3, [r3, #2]
 800901a:	613b      	str	r3, [r7, #16]
 800901c:	e010      	b.n	8009040 <sync_window+0x78>
					wsect += fs->fsize;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4413      	add	r3, r2
 8009026:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	7858      	ldrb	r0, [r3, #1]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009032:	2301      	movs	r3, #1
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	f7ff fd1d 	bl	8008a74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3b01      	subs	r3, #1
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d8eb      	bhi.n	800901e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009046:	7bfb      	ldrb	r3, [r7, #15]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	429a      	cmp	r2, r3
 8009066:	d01b      	beq.n	80090a0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f7ff ffad 	bl	8008fc8 <sync_window>
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d113      	bne.n	80090a0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7858      	ldrb	r0, [r3, #1]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009082:	2301      	movs	r3, #1
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	f7ff fcd5 	bl	8008a34 <disk_read>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d004      	beq.n	800909a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009094:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009096:	2301      	movs	r3, #1
 8009098:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f7ff ff87 	bl	8008fc8 <sync_window>
 80090ba:	4603      	mov	r3, r0
 80090bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80090be:	7bfb      	ldrb	r3, [r7, #15]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d159      	bne.n	8009178 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b03      	cmp	r3, #3
 80090ca:	d149      	bne.n	8009160 <sync_fs+0xb4>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	791b      	ldrb	r3, [r3, #4]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d145      	bne.n	8009160 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	899b      	ldrh	r3, [r3, #12]
 80090de:	461a      	mov	r2, r3
 80090e0:	2100      	movs	r1, #0
 80090e2:	f7ff fda8 	bl	8008c36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	3334      	adds	r3, #52	@ 0x34
 80090ea:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80090ee:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fd37 	bl	8008b66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	3334      	adds	r3, #52	@ 0x34
 80090fc:	4921      	ldr	r1, [pc, #132]	@ (8009184 <sync_fs+0xd8>)
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff fd4c 	bl	8008b9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3334      	adds	r3, #52	@ 0x34
 8009108:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800910c:	491e      	ldr	r1, [pc, #120]	@ (8009188 <sync_fs+0xdc>)
 800910e:	4618      	mov	r0, r3
 8009110:	f7ff fd44 	bl	8008b9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	3334      	adds	r3, #52	@ 0x34
 8009118:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	4619      	mov	r1, r3
 8009122:	4610      	mov	r0, r2
 8009124:	f7ff fd3a 	bl	8008b9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3334      	adds	r3, #52	@ 0x34
 800912c:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	4619      	mov	r1, r3
 8009136:	4610      	mov	r0, r2
 8009138:	f7ff fd30 	bl	8008b9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a1b      	ldr	r3, [r3, #32]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7858      	ldrb	r0, [r3, #1]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009154:	2301      	movs	r3, #1
 8009156:	f7ff fc8d 	bl	8008a74 <disk_write>
			fs->fsi_flag = 0;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2200      	movs	r2, #0
 8009166:	2100      	movs	r1, #0
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff fca3 	bl	8008ab4 <disk_ioctl>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <sync_fs+0xcc>
 8009174:	2301      	movs	r3, #1
 8009176:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	41615252 	.word	0x41615252
 8009188:	61417272 	.word	0x61417272

0800918c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	3b02      	subs	r3, #2
 800919a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	3b02      	subs	r3, #2
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d301      	bcc.n	80091ac <clust2sect+0x20>
 80091a8:	2300      	movs	r3, #0
 80091aa:	e008      	b.n	80091be <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	895b      	ldrh	r3, [r3, #10]
 80091b0:	461a      	mov	r2, r3
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	fb03 f202 	mul.w	r2, r3, r2
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091bc:	4413      	add	r3, r2
}
 80091be:	4618      	mov	r0, r3
 80091c0:	370c      	adds	r7, #12
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b086      	sub	sp, #24
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
 80091d2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d904      	bls.n	80091ea <get_fat+0x20>
 80091e0:	693b      	ldr	r3, [r7, #16]
 80091e2:	699b      	ldr	r3, [r3, #24]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d302      	bcc.n	80091f0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80091ea:	2301      	movs	r3, #1
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	e0ba      	b.n	8009366 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80091f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80091f4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f000 8082 	beq.w	8009304 <get_fat+0x13a>
 8009200:	2b03      	cmp	r3, #3
 8009202:	f300 80a6 	bgt.w	8009352 <get_fat+0x188>
 8009206:	2b01      	cmp	r3, #1
 8009208:	d002      	beq.n	8009210 <get_fat+0x46>
 800920a:	2b02      	cmp	r3, #2
 800920c:	d055      	beq.n	80092ba <get_fat+0xf0>
 800920e:	e0a0      	b.n	8009352 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	60fb      	str	r3, [r7, #12]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	085b      	lsrs	r3, r3, #1
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4413      	add	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	899b      	ldrh	r3, [r3, #12]
 8009226:	4619      	mov	r1, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	fbb3 f3f1 	udiv	r3, r3, r1
 800922e:	4413      	add	r3, r2
 8009230:	4619      	mov	r1, r3
 8009232:	6938      	ldr	r0, [r7, #16]
 8009234:	f7ff ff0c 	bl	8009050 <move_window>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	f040 808c 	bne.w	8009358 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	60fa      	str	r2, [r7, #12]
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	8992      	ldrh	r2, [r2, #12]
 800924a:	fbb3 f1f2 	udiv	r1, r3, r2
 800924e:	fb01 f202 	mul.w	r2, r1, r2
 8009252:	1a9b      	subs	r3, r3, r2
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	4413      	add	r3, r2
 8009258:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800925c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	899b      	ldrh	r3, [r3, #12]
 8009266:	4619      	mov	r1, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	fbb3 f3f1 	udiv	r3, r3, r1
 800926e:	4413      	add	r3, r2
 8009270:	4619      	mov	r1, r3
 8009272:	6938      	ldr	r0, [r7, #16]
 8009274:	f7ff feec 	bl	8009050 <move_window>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d16e      	bne.n	800935c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	899b      	ldrh	r3, [r3, #12]
 8009282:	461a      	mov	r2, r3
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	fbb3 f1f2 	udiv	r1, r3, r2
 800928a:	fb01 f202 	mul.w	r2, r1, r2
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4413      	add	r3, r2
 8009294:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009298:	021b      	lsls	r3, r3, #8
 800929a:	68ba      	ldr	r2, [r7, #8]
 800929c:	4313      	orrs	r3, r2
 800929e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <get_fat+0xe6>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	091b      	lsrs	r3, r3, #4
 80092ae:	e002      	b.n	80092b6 <get_fat+0xec>
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092b6:	617b      	str	r3, [r7, #20]
			break;
 80092b8:	e055      	b.n	8009366 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	899b      	ldrh	r3, [r3, #12]
 80092c2:	085b      	lsrs	r3, r3, #1
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	4619      	mov	r1, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ce:	4413      	add	r3, r2
 80092d0:	4619      	mov	r1, r3
 80092d2:	6938      	ldr	r0, [r7, #16]
 80092d4:	f7ff febc 	bl	8009050 <move_window>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d140      	bne.n	8009360 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	8992      	ldrh	r2, [r2, #12]
 80092ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80092f0:	fb00 f202 	mul.w	r2, r0, r2
 80092f4:	1a9b      	subs	r3, r3, r2
 80092f6:	440b      	add	r3, r1
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7ff fbf9 	bl	8008af0 <ld_word>
 80092fe:	4603      	mov	r3, r0
 8009300:	617b      	str	r3, [r7, #20]
			break;
 8009302:	e030      	b.n	8009366 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	899b      	ldrh	r3, [r3, #12]
 800930c:	089b      	lsrs	r3, r3, #2
 800930e:	b29b      	uxth	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	fbb3 f3f1 	udiv	r3, r3, r1
 8009318:	4413      	add	r3, r2
 800931a:	4619      	mov	r1, r3
 800931c:	6938      	ldr	r0, [r7, #16]
 800931e:	f7ff fe97 	bl	8009050 <move_window>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d11d      	bne.n	8009364 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	8992      	ldrh	r2, [r2, #12]
 8009336:	fbb3 f0f2 	udiv	r0, r3, r2
 800933a:	fb00 f202 	mul.w	r2, r0, r2
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	440b      	add	r3, r1
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fbec 	bl	8008b20 <ld_dword>
 8009348:	4603      	mov	r3, r0
 800934a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800934e:	617b      	str	r3, [r7, #20]
			break;
 8009350:	e009      	b.n	8009366 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009352:	2301      	movs	r3, #1
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e006      	b.n	8009366 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009358:	bf00      	nop
 800935a:	e004      	b.n	8009366 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800935c:	bf00      	nop
 800935e:	e002      	b.n	8009366 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009360:	bf00      	nop
 8009362:	e000      	b.n	8009366 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009364:	bf00      	nop
		}
	}

	return val;
 8009366:	697b      	ldr	r3, [r7, #20]
}
 8009368:	4618      	mov	r0, r3
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009370:	b590      	push	{r4, r7, lr}
 8009372:	b089      	sub	sp, #36	@ 0x24
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800937c:	2302      	movs	r3, #2
 800937e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b01      	cmp	r3, #1
 8009384:	f240 8109 	bls.w	800959a <put_fat+0x22a>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	429a      	cmp	r2, r3
 8009390:	f080 8103 	bcs.w	800959a <put_fat+0x22a>
		switch (fs->fs_type) {
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b03      	cmp	r3, #3
 800939a:	f000 80b6 	beq.w	800950a <put_fat+0x19a>
 800939e:	2b03      	cmp	r3, #3
 80093a0:	f300 80fb 	bgt.w	800959a <put_fat+0x22a>
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d003      	beq.n	80093b0 <put_fat+0x40>
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	f000 8083 	beq.w	80094b4 <put_fat+0x144>
 80093ae:	e0f4      	b.n	800959a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	61bb      	str	r3, [r7, #24]
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	4413      	add	r3, r2
 80093bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	899b      	ldrh	r3, [r3, #12]
 80093c6:	4619      	mov	r1, r3
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80093ce:	4413      	add	r3, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	68f8      	ldr	r0, [r7, #12]
 80093d4:	f7ff fe3c 	bl	8009050 <move_window>
 80093d8:	4603      	mov	r3, r0
 80093da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093dc:	7ffb      	ldrb	r3, [r7, #31]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f040 80d4 	bne.w	800958c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	1c5a      	adds	r2, r3, #1
 80093ee:	61ba      	str	r2, [r7, #24]
 80093f0:	68fa      	ldr	r2, [r7, #12]
 80093f2:	8992      	ldrh	r2, [r2, #12]
 80093f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80093f8:	fb00 f202 	mul.w	r2, r0, r2
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	440b      	add	r3, r1
 8009400:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00d      	beq.n	8009428 <put_fat+0xb8>
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	b25b      	sxtb	r3, r3
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	b25a      	sxtb	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	b2db      	uxtb	r3, r3
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	b25b      	sxtb	r3, r3
 8009420:	4313      	orrs	r3, r2
 8009422:	b25b      	sxtb	r3, r3
 8009424:	b2db      	uxtb	r3, r3
 8009426:	e001      	b.n	800942c <put_fat+0xbc>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	b2db      	uxtb	r3, r3
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2201      	movs	r2, #1
 8009434:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	899b      	ldrh	r3, [r3, #12]
 800943e:	4619      	mov	r1, r3
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	fbb3 f3f1 	udiv	r3, r3, r1
 8009446:	4413      	add	r3, r2
 8009448:	4619      	mov	r1, r3
 800944a:	68f8      	ldr	r0, [r7, #12]
 800944c:	f7ff fe00 	bl	8009050 <move_window>
 8009450:	4603      	mov	r3, r0
 8009452:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009454:	7ffb      	ldrb	r3, [r7, #31]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f040 809a 	bne.w	8009590 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	899b      	ldrh	r3, [r3, #12]
 8009466:	461a      	mov	r2, r3
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	fbb3 f0f2 	udiv	r0, r3, r2
 800946e:	fb00 f202 	mul.w	r2, r0, r2
 8009472:	1a9b      	subs	r3, r3, r2
 8009474:	440b      	add	r3, r1
 8009476:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <put_fat+0x11a>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	091b      	lsrs	r3, r3, #4
 8009486:	b2db      	uxtb	r3, r3
 8009488:	e00e      	b.n	80094a8 <put_fat+0x138>
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	b25b      	sxtb	r3, r3
 8009490:	f023 030f 	bic.w	r3, r3, #15
 8009494:	b25a      	sxtb	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	0a1b      	lsrs	r3, r3, #8
 800949a:	b25b      	sxtb	r3, r3
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	b25b      	sxtb	r3, r3
 80094a2:	4313      	orrs	r3, r2
 80094a4:	b25b      	sxtb	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2201      	movs	r2, #1
 80094b0:	70da      	strb	r2, [r3, #3]
			break;
 80094b2:	e072      	b.n	800959a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	899b      	ldrh	r3, [r3, #12]
 80094bc:	085b      	lsrs	r3, r3, #1
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4619      	mov	r1, r3
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80094c8:	4413      	add	r3, r2
 80094ca:	4619      	mov	r1, r3
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f7ff fdbf 	bl	8009050 <move_window>
 80094d2:	4603      	mov	r3, r0
 80094d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094d6:	7ffb      	ldrb	r3, [r7, #31]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d15b      	bne.n	8009594 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	005b      	lsls	r3, r3, #1
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	8992      	ldrh	r2, [r2, #12]
 80094ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80094ee:	fb00 f202 	mul.w	r2, r0, r2
 80094f2:	1a9b      	subs	r3, r3, r2
 80094f4:	440b      	add	r3, r1
 80094f6:	687a      	ldr	r2, [r7, #4]
 80094f8:	b292      	uxth	r2, r2
 80094fa:	4611      	mov	r1, r2
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff fb32 	bl	8008b66 <st_word>
			fs->wflag = 1;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2201      	movs	r2, #1
 8009506:	70da      	strb	r2, [r3, #3]
			break;
 8009508:	e047      	b.n	800959a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	899b      	ldrh	r3, [r3, #12]
 8009512:	089b      	lsrs	r3, r3, #2
 8009514:	b29b      	uxth	r3, r3
 8009516:	4619      	mov	r1, r3
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	fbb3 f3f1 	udiv	r3, r3, r1
 800951e:	4413      	add	r3, r2
 8009520:	4619      	mov	r1, r3
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f7ff fd94 	bl	8009050 <move_window>
 8009528:	4603      	mov	r3, r0
 800952a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800952c:	7ffb      	ldrb	r3, [r7, #31]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d132      	bne.n	8009598 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	8992      	ldrh	r2, [r2, #12]
 8009546:	fbb3 f0f2 	udiv	r0, r3, r2
 800954a:	fb00 f202 	mul.w	r2, r0, r2
 800954e:	1a9b      	subs	r3, r3, r2
 8009550:	440b      	add	r3, r1
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff fae4 	bl	8008b20 <ld_dword>
 8009558:	4603      	mov	r3, r0
 800955a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800955e:	4323      	orrs	r3, r4
 8009560:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	8992      	ldrh	r2, [r2, #12]
 8009570:	fbb3 f0f2 	udiv	r0, r3, r2
 8009574:	fb00 f202 	mul.w	r2, r0, r2
 8009578:	1a9b      	subs	r3, r3, r2
 800957a:	440b      	add	r3, r1
 800957c:	6879      	ldr	r1, [r7, #4]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fb0c 	bl	8008b9c <st_dword>
			fs->wflag = 1;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	70da      	strb	r2, [r3, #3]
			break;
 800958a:	e006      	b.n	800959a <put_fat+0x22a>
			if (res != FR_OK) break;
 800958c:	bf00      	nop
 800958e:	e004      	b.n	800959a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009590:	bf00      	nop
 8009592:	e002      	b.n	800959a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009594:	bf00      	nop
 8009596:	e000      	b.n	800959a <put_fat+0x22a>
			if (res != FR_OK) break;
 8009598:	bf00      	nop
		}
	}
	return res;
 800959a:	7ffb      	ldrb	r3, [r7, #31]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3724      	adds	r7, #36	@ 0x24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd90      	pop	{r4, r7, pc}

080095a4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b088      	sub	sp, #32
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d904      	bls.n	80095ca <remove_chain+0x26>
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d301      	bcc.n	80095ce <remove_chain+0x2a>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e04b      	b.n	8009666 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00c      	beq.n	80095ee <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80095d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	69b8      	ldr	r0, [r7, #24]
 80095dc:	f7ff fec8 	bl	8009370 <put_fat>
 80095e0:	4603      	mov	r3, r0
 80095e2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80095e4:	7ffb      	ldrb	r3, [r7, #31]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <remove_chain+0x4a>
 80095ea:	7ffb      	ldrb	r3, [r7, #31]
 80095ec:	e03b      	b.n	8009666 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff fdea 	bl	80091ca <get_fat>
 80095f6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d031      	beq.n	8009662 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d101      	bne.n	8009608 <remove_chain+0x64>
 8009604:	2302      	movs	r3, #2
 8009606:	e02e      	b.n	8009666 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800960e:	d101      	bne.n	8009614 <remove_chain+0x70>
 8009610:	2301      	movs	r3, #1
 8009612:	e028      	b.n	8009666 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009614:	2200      	movs	r2, #0
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	69b8      	ldr	r0, [r7, #24]
 800961a:	f7ff fea9 	bl	8009370 <put_fat>
 800961e:	4603      	mov	r3, r0
 8009620:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009622:	7ffb      	ldrb	r3, [r7, #31]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <remove_chain+0x88>
 8009628:	7ffb      	ldrb	r3, [r7, #31]
 800962a:	e01c      	b.n	8009666 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	695a      	ldr	r2, [r3, #20]
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	3b02      	subs	r3, #2
 8009636:	429a      	cmp	r2, r3
 8009638:	d20b      	bcs.n	8009652 <remove_chain+0xae>
			fs->free_clst++;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	695b      	ldr	r3, [r3, #20]
 800963e:	1c5a      	adds	r2, r3, #1
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	791b      	ldrb	r3, [r3, #4]
 8009648:	f043 0301 	orr.w	r3, r3, #1
 800964c:	b2da      	uxtb	r2, r3
 800964e:	69bb      	ldr	r3, [r7, #24]
 8009650:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	d3c6      	bcc.n	80095ee <remove_chain+0x4a>
 8009660:	e000      	b.n	8009664 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009662:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3720      	adds	r7, #32
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b088      	sub	sp, #32
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
 8009676:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10d      	bne.n	80096a0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d004      	beq.n	800969a <create_chain+0x2c>
 8009690:	693b      	ldr	r3, [r7, #16]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	429a      	cmp	r2, r3
 8009698:	d31b      	bcc.n	80096d2 <create_chain+0x64>
 800969a:	2301      	movs	r3, #1
 800969c:	61bb      	str	r3, [r7, #24]
 800969e:	e018      	b.n	80096d2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff fd91 	bl	80091ca <get_fat>
 80096a8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d801      	bhi.n	80096b4 <create_chain+0x46>
 80096b0:	2301      	movs	r3, #1
 80096b2:	e070      	b.n	8009796 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096ba:	d101      	bne.n	80096c0 <create_chain+0x52>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	e06a      	b.n	8009796 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d201      	bcs.n	80096ce <create_chain+0x60>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	e063      	b.n	8009796 <create_chain+0x128>
		scl = clst;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	3301      	adds	r3, #1
 80096da:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	69fa      	ldr	r2, [r7, #28]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d307      	bcc.n	80096f6 <create_chain+0x88>
				ncl = 2;
 80096e6:	2302      	movs	r3, #2
 80096e8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80096ea:	69fa      	ldr	r2, [r7, #28]
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d901      	bls.n	80096f6 <create_chain+0x88>
 80096f2:	2300      	movs	r3, #0
 80096f4:	e04f      	b.n	8009796 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80096f6:	69f9      	ldr	r1, [r7, #28]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff fd66 	bl	80091ca <get_fat>
 80096fe:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d00e      	beq.n	8009724 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d003      	beq.n	8009714 <create_chain+0xa6>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009712:	d101      	bne.n	8009718 <create_chain+0xaa>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	e03e      	b.n	8009796 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	429a      	cmp	r2, r3
 800971e:	d1da      	bne.n	80096d6 <create_chain+0x68>
 8009720:	2300      	movs	r3, #0
 8009722:	e038      	b.n	8009796 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009724:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800972a:	69f9      	ldr	r1, [r7, #28]
 800972c:	6938      	ldr	r0, [r7, #16]
 800972e:	f7ff fe1f 	bl	8009370 <put_fat>
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <create_chain+0xe2>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d006      	beq.n	8009750 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6938      	ldr	r0, [r7, #16]
 8009748:	f7ff fe12 	bl	8009370 <put_fat>
 800974c:	4603      	mov	r3, r0
 800974e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d116      	bne.n	8009784 <create_chain+0x116>
		fs->last_clst = ncl;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	69fa      	ldr	r2, [r7, #28]
 800975a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	695a      	ldr	r2, [r3, #20]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	3b02      	subs	r3, #2
 8009766:	429a      	cmp	r2, r3
 8009768:	d804      	bhi.n	8009774 <create_chain+0x106>
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	1e5a      	subs	r2, r3, #1
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	791b      	ldrb	r3, [r3, #4]
 8009778:	f043 0301 	orr.w	r3, r3, #1
 800977c:	b2da      	uxtb	r2, r3
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	711a      	strb	r2, [r3, #4]
 8009782:	e007      	b.n	8009794 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d102      	bne.n	8009790 <create_chain+0x122>
 800978a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800978e:	e000      	b.n	8009792 <create_chain+0x124>
 8009790:	2301      	movs	r3, #1
 8009792:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009794:	69fb      	ldr	r3, [r7, #28]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800979e:	b480      	push	{r7}
 80097a0:	b087      	sub	sp, #28
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b2:	3304      	adds	r3, #4
 80097b4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	899b      	ldrh	r3, [r3, #12]
 80097ba:	461a      	mov	r2, r3
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	fbb3 f3f2 	udiv	r3, r3, r2
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	8952      	ldrh	r2, [r2, #10]
 80097c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	1d1a      	adds	r2, r3, #4
 80097d0:	613a      	str	r2, [r7, #16]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <clmt_clust+0x42>
 80097dc:	2300      	movs	r3, #0
 80097de:	e010      	b.n	8009802 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d307      	bcc.n	80097f8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	617b      	str	r3, [r7, #20]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	3304      	adds	r3, #4
 80097f4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097f6:	e7e9      	b.n	80097cc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80097f8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	4413      	add	r3, r2
}
 8009802:	4618      	mov	r0, r3
 8009804:	371c      	adds	r7, #28
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b086      	sub	sp, #24
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009824:	d204      	bcs.n	8009830 <dir_sdi+0x22>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	f003 031f 	and.w	r3, r3, #31
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009830:	2302      	movs	r3, #2
 8009832:	e071      	b.n	8009918 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d106      	bne.n	8009854 <dir_sdi+0x46>
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d902      	bls.n	8009854 <dir_sdi+0x46>
		clst = fs->dirbase;
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009852:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10c      	bne.n	8009874 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	095b      	lsrs	r3, r3, #5
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	8912      	ldrh	r2, [r2, #8]
 8009862:	4293      	cmp	r3, r2
 8009864:	d301      	bcc.n	800986a <dir_sdi+0x5c>
 8009866:	2302      	movs	r3, #2
 8009868:	e056      	b.n	8009918 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	61da      	str	r2, [r3, #28]
 8009872:	e02d      	b.n	80098d0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	895b      	ldrh	r3, [r3, #10]
 8009878:	461a      	mov	r2, r3
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	899b      	ldrh	r3, [r3, #12]
 800987e:	fb02 f303 	mul.w	r3, r2, r3
 8009882:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009884:	e019      	b.n	80098ba <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6979      	ldr	r1, [r7, #20]
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff fc9d 	bl	80091ca <get_fat>
 8009890:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009898:	d101      	bne.n	800989e <dir_sdi+0x90>
 800989a:	2301      	movs	r3, #1
 800989c:	e03c      	b.n	8009918 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d904      	bls.n	80098ae <dir_sdi+0xa0>
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	697a      	ldr	r2, [r7, #20]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d301      	bcc.n	80098b2 <dir_sdi+0xa4>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e032      	b.n	8009918 <dir_sdi+0x10a>
			ofs -= csz;
 80098b2:	683a      	ldr	r2, [r7, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d2e1      	bcs.n	8009886 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80098c2:	6979      	ldr	r1, [r7, #20]
 80098c4:	6938      	ldr	r0, [r7, #16]
 80098c6:	f7ff fc61 	bl	800918c <clust2sect>
 80098ca:	4602      	mov	r2, r0
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <dir_sdi+0xd4>
 80098de:	2302      	movs	r3, #2
 80098e0:	e01a      	b.n	8009918 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	69da      	ldr	r2, [r3, #28]
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	899b      	ldrh	r3, [r3, #12]
 80098ea:	4619      	mov	r1, r3
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80098f2:	441a      	add	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	899b      	ldrh	r3, [r3, #12]
 8009902:	461a      	mov	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	fbb3 f0f2 	udiv	r0, r3, r2
 800990a:	fb00 f202 	mul.w	r2, r0, r2
 800990e:	1a9b      	subs	r3, r3, r2
 8009910:	18ca      	adds	r2, r1, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3718      	adds	r7, #24
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	3320      	adds	r3, #32
 8009936:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d003      	beq.n	8009948 <dir_next+0x28>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009946:	d301      	bcc.n	800994c <dir_next+0x2c>
 8009948:	2304      	movs	r3, #4
 800994a:	e0bb      	b.n	8009ac4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	899b      	ldrh	r3, [r3, #12]
 8009950:	461a      	mov	r2, r3
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	fbb3 f1f2 	udiv	r1, r3, r2
 8009958:	fb01 f202 	mul.w	r2, r1, r2
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	2b00      	cmp	r3, #0
 8009960:	f040 809d 	bne.w	8009a9e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	69db      	ldr	r3, [r3, #28]
 8009968:	1c5a      	adds	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10b      	bne.n	800998e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	095b      	lsrs	r3, r3, #5
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	8912      	ldrh	r2, [r2, #8]
 800997e:	4293      	cmp	r3, r2
 8009980:	f0c0 808d 	bcc.w	8009a9e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	61da      	str	r2, [r3, #28]
 800998a:	2304      	movs	r3, #4
 800998c:	e09a      	b.n	8009ac4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	899b      	ldrh	r3, [r3, #12]
 8009992:	461a      	mov	r2, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	fbb3 f3f2 	udiv	r3, r3, r2
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	8952      	ldrh	r2, [r2, #10]
 800999e:	3a01      	subs	r2, #1
 80099a0:	4013      	ands	r3, r2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d17b      	bne.n	8009a9e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	699b      	ldr	r3, [r3, #24]
 80099ac:	4619      	mov	r1, r3
 80099ae:	4610      	mov	r0, r2
 80099b0:	f7ff fc0b 	bl	80091ca <get_fat>
 80099b4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d801      	bhi.n	80099c0 <dir_next+0xa0>
 80099bc:	2302      	movs	r3, #2
 80099be:	e081      	b.n	8009ac4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099c6:	d101      	bne.n	80099cc <dir_next+0xac>
 80099c8:	2301      	movs	r3, #1
 80099ca:	e07b      	b.n	8009ac4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d359      	bcc.n	8009a8a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	61da      	str	r2, [r3, #28]
 80099e2:	2304      	movs	r3, #4
 80099e4:	e06e      	b.n	8009ac4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	f7ff fe3d 	bl	800966e <create_chain>
 80099f4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d101      	bne.n	8009a00 <dir_next+0xe0>
 80099fc:	2307      	movs	r3, #7
 80099fe:	e061      	b.n	8009ac4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d101      	bne.n	8009a0a <dir_next+0xea>
 8009a06:	2302      	movs	r3, #2
 8009a08:	e05c      	b.n	8009ac4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a10:	d101      	bne.n	8009a16 <dir_next+0xf6>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e056      	b.n	8009ac4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fad6 	bl	8008fc8 <sync_window>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <dir_next+0x106>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e04e      	b.n	8009ac4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	899b      	ldrh	r3, [r3, #12]
 8009a30:	461a      	mov	r2, r3
 8009a32:	2100      	movs	r1, #0
 8009a34:	f7ff f8ff 	bl	8008c36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a38:	2300      	movs	r3, #0
 8009a3a:	613b      	str	r3, [r7, #16]
 8009a3c:	6979      	ldr	r1, [r7, #20]
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff fba4 	bl	800918c <clust2sect>
 8009a44:	4602      	mov	r2, r0
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a4a:	e012      	b.n	8009a72 <dir_next+0x152>
						fs->wflag = 1;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009a52:	68f8      	ldr	r0, [r7, #12]
 8009a54:	f7ff fab8 	bl	8008fc8 <sync_window>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d001      	beq.n	8009a62 <dir_next+0x142>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e030      	b.n	8009ac4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	3301      	adds	r3, #1
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a6c:	1c5a      	adds	r2, r3, #1
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	895b      	ldrh	r3, [r3, #10]
 8009a76:	461a      	mov	r2, r3
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d3e6      	bcc.n	8009a4c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	1ad2      	subs	r2, r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a90:	6979      	ldr	r1, [r7, #20]
 8009a92:	68f8      	ldr	r0, [r7, #12]
 8009a94:	f7ff fb7a 	bl	800918c <clust2sect>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	899b      	ldrh	r3, [r3, #12]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ab6:	fb00 f202 	mul.w	r2, r0, r2
 8009aba:	1a9b      	subs	r3, r3, r2
 8009abc:	18ca      	adds	r2, r1, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7ff fe95 	bl	800980e <dir_sdi>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d12b      	bne.n	8009b46 <dir_alloc+0x7a>
		n = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	4619      	mov	r1, r3
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff faa9 	bl	8009050 <move_window>
 8009afe:	4603      	mov	r3, r0
 8009b00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d11d      	bne.n	8009b44 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2be5      	cmp	r3, #229	@ 0xe5
 8009b10:	d004      	beq.n	8009b1c <dir_alloc+0x50>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d107      	bne.n	8009b2c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	613b      	str	r3, [r7, #16]
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d102      	bne.n	8009b30 <dir_alloc+0x64>
 8009b2a:	e00c      	b.n	8009b46 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b30:	2101      	movs	r1, #1
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7ff fef4 	bl	8009920 <dir_next>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b3c:	7dfb      	ldrb	r3, [r7, #23]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0d7      	beq.n	8009af2 <dir_alloc+0x26>
 8009b42:	e000      	b.n	8009b46 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b44:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b46:	7dfb      	ldrb	r3, [r7, #23]
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	d101      	bne.n	8009b50 <dir_alloc+0x84>
 8009b4c:	2307      	movs	r3, #7
 8009b4e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	331a      	adds	r3, #26
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fe ffc1 	bl	8008af0 <ld_word>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2b03      	cmp	r3, #3
 8009b78:	d109      	bne.n	8009b8e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	3314      	adds	r3, #20
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe ffb6 	bl	8008af0 <ld_word>
 8009b84:	4603      	mov	r3, r0
 8009b86:	041b      	lsls	r3, r3, #16
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3710      	adds	r7, #16
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	331a      	adds	r3, #26
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	b292      	uxth	r2, r2
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe ffd9 	bl	8008b66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b03      	cmp	r3, #3
 8009bba:	d109      	bne.n	8009bd0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f103 0214 	add.w	r2, r3, #20
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	0c1b      	lsrs	r3, r3, #16
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4610      	mov	r0, r2
 8009bcc:	f7fe ffcb 	bl	8008b66 <st_word>
	}
}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b086      	sub	sp, #24
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009be6:	2100      	movs	r1, #0
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fe10 	bl	800980e <dir_sdi>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <dir_find+0x24>
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	e03e      	b.n	8009c7a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	4619      	mov	r1, r3
 8009c02:	6938      	ldr	r0, [r7, #16]
 8009c04:	f7ff fa24 	bl	8009050 <move_window>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d12f      	bne.n	8009c72 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d102      	bne.n	8009c26 <dir_find+0x4e>
 8009c20:	2304      	movs	r3, #4
 8009c22:	75fb      	strb	r3, [r7, #23]
 8009c24:	e028      	b.n	8009c78 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	330b      	adds	r3, #11
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c32:	b2da      	uxtb	r2, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a1b      	ldr	r3, [r3, #32]
 8009c3c:	330b      	adds	r3, #11
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10a      	bne.n	8009c5e <dir_find+0x86>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6a18      	ldr	r0, [r3, #32]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	3324      	adds	r3, #36	@ 0x24
 8009c50:	220b      	movs	r2, #11
 8009c52:	4619      	mov	r1, r3
 8009c54:	f7ff f80a 	bl	8008c6c <mem_cmp>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00b      	beq.n	8009c76 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c5e:	2100      	movs	r1, #0
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fe5d 	bl	8009920 <dir_next>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c6a:	7dfb      	ldrb	r3, [r7, #23]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d0c5      	beq.n	8009bfc <dir_find+0x24>
 8009c70:	e002      	b.n	8009c78 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009c72:	bf00      	nop
 8009c74:	e000      	b.n	8009c78 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c76:	bf00      	nop

	return res;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3718      	adds	r7, #24
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009c90:	2101      	movs	r1, #1
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff ff1a 	bl	8009acc <dir_alloc>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c9c:	7bfb      	ldrb	r3, [r7, #15]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d11c      	bne.n	8009cdc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	68b8      	ldr	r0, [r7, #8]
 8009caa:	f7ff f9d1 	bl	8009050 <move_window>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d111      	bne.n	8009cdc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a1b      	ldr	r3, [r3, #32]
 8009cbc:	2220      	movs	r2, #32
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe ffb8 	bl	8008c36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a18      	ldr	r0, [r3, #32]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3324      	adds	r3, #36	@ 0x24
 8009cce:	220b      	movs	r2, #11
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	f7fe ff8f 	bl	8008bf4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3324      	adds	r3, #36	@ 0x24
 8009cfc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009cfe:	220b      	movs	r2, #11
 8009d00:	2120      	movs	r1, #32
 8009d02:	68b8      	ldr	r0, [r7, #8]
 8009d04:	f7fe ff97 	bl	8008c36 <mem_set>
	si = i = 0; ni = 8;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	61fb      	str	r3, [r7, #28]
 8009d10:	2308      	movs	r3, #8
 8009d12:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	61fa      	str	r2, [r7, #28]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d22:	7efb      	ldrb	r3, [r7, #27]
 8009d24:	2b20      	cmp	r3, #32
 8009d26:	d94e      	bls.n	8009dc6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009d28:	7efb      	ldrb	r3, [r7, #27]
 8009d2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d2c:	d006      	beq.n	8009d3c <create_name+0x54>
 8009d2e:	7efb      	ldrb	r3, [r7, #27]
 8009d30:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d32:	d110      	bne.n	8009d56 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d34:	e002      	b.n	8009d3c <create_name+0x54>
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	4413      	add	r3, r2
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d46:	d0f6      	beq.n	8009d36 <create_name+0x4e>
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d52:	d0f0      	beq.n	8009d36 <create_name+0x4e>
			break;
 8009d54:	e038      	b.n	8009dc8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009d56:	7efb      	ldrb	r3, [r7, #27]
 8009d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d5a:	d003      	beq.n	8009d64 <create_name+0x7c>
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d30c      	bcc.n	8009d7e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	2b0b      	cmp	r3, #11
 8009d68:	d002      	beq.n	8009d70 <create_name+0x88>
 8009d6a:	7efb      	ldrb	r3, [r7, #27]
 8009d6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d6e:	d001      	beq.n	8009d74 <create_name+0x8c>
 8009d70:	2306      	movs	r3, #6
 8009d72:	e044      	b.n	8009dfe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009d74:	2308      	movs	r3, #8
 8009d76:	613b      	str	r3, [r7, #16]
 8009d78:	230b      	movs	r3, #11
 8009d7a:	617b      	str	r3, [r7, #20]
			continue;
 8009d7c:	e022      	b.n	8009dc4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009d7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	da04      	bge.n	8009d90 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009d86:	7efb      	ldrb	r3, [r7, #27]
 8009d88:	3b80      	subs	r3, #128	@ 0x80
 8009d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009e08 <create_name+0x120>)
 8009d8c:	5cd3      	ldrb	r3, [r2, r3]
 8009d8e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009d90:	7efb      	ldrb	r3, [r7, #27]
 8009d92:	4619      	mov	r1, r3
 8009d94:	481d      	ldr	r0, [pc, #116]	@ (8009e0c <create_name+0x124>)
 8009d96:	f7fe ff90 	bl	8008cba <chk_chr>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <create_name+0xbc>
 8009da0:	2306      	movs	r3, #6
 8009da2:	e02c      	b.n	8009dfe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009da4:	7efb      	ldrb	r3, [r7, #27]
 8009da6:	2b60      	cmp	r3, #96	@ 0x60
 8009da8:	d905      	bls.n	8009db6 <create_name+0xce>
 8009daa:	7efb      	ldrb	r3, [r7, #27]
 8009dac:	2b7a      	cmp	r3, #122	@ 0x7a
 8009dae:	d802      	bhi.n	8009db6 <create_name+0xce>
 8009db0:	7efb      	ldrb	r3, [r7, #27]
 8009db2:	3b20      	subs	r3, #32
 8009db4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	613a      	str	r2, [r7, #16]
 8009dbc:	68ba      	ldr	r2, [r7, #8]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	7efa      	ldrb	r2, [r7, #27]
 8009dc2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009dc4:	e7a6      	b.n	8009d14 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009dc6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	441a      	add	r2, r3
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <create_name+0xf4>
 8009dd8:	2306      	movs	r3, #6
 8009dda:	e010      	b.n	8009dfe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	2be5      	cmp	r3, #229	@ 0xe5
 8009de2:	d102      	bne.n	8009dea <create_name+0x102>
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2205      	movs	r2, #5
 8009de8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009dea:	7efb      	ldrb	r3, [r7, #27]
 8009dec:	2b20      	cmp	r3, #32
 8009dee:	d801      	bhi.n	8009df4 <create_name+0x10c>
 8009df0:	2204      	movs	r2, #4
 8009df2:	e000      	b.n	8009df6 <create_name+0x10e>
 8009df4:	2200      	movs	r2, #0
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	330b      	adds	r3, #11
 8009dfa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009dfc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	0800d3b0 	.word	0x0800d3b0
 8009e0c:	0800d304 	.word	0x0800d304

08009e10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e24:	e002      	b.n	8009e2c <follow_path+0x1c>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e32:	d0f8      	beq.n	8009e26 <follow_path+0x16>
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e3a:	d0f4      	beq.n	8009e26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b1f      	cmp	r3, #31
 8009e48:	d80a      	bhi.n	8009e60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2280      	movs	r2, #128	@ 0x80
 8009e4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009e52:	2100      	movs	r1, #0
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7ff fcda 	bl	800980e <dir_sdi>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75fb      	strb	r3, [r7, #23]
 8009e5e:	e048      	b.n	8009ef2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e60:	463b      	mov	r3, r7
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff ff3f 	bl	8009ce8 <create_name>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d139      	bne.n	8009ee8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f7ff feaf 	bl	8009bd8 <dir_find>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009e8c:	7dfb      	ldrb	r3, [r7, #23]
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	d12c      	bne.n	8009eec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009e92:	7afb      	ldrb	r3, [r7, #11]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d127      	bne.n	8009eec <follow_path+0xdc>
 8009e9c:	2305      	movs	r3, #5
 8009e9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ea0:	e024      	b.n	8009eec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	f003 0304 	and.w	r3, r3, #4
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d121      	bne.n	8009ef0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	799b      	ldrb	r3, [r3, #6]
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009eb8:	2305      	movs	r3, #5
 8009eba:	75fb      	strb	r3, [r7, #23]
 8009ebc:	e019      	b.n	8009ef2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	8992      	ldrh	r2, [r2, #12]
 8009ecc:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ed0:	fb00 f202 	mul.w	r2, r0, r2
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	440b      	add	r3, r1
 8009ed8:	4619      	mov	r1, r3
 8009eda:	68f8      	ldr	r0, [r7, #12]
 8009edc:	f7ff fe3d 	bl	8009b5a <ld_clust>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009ee6:	e7bb      	b.n	8009e60 <follow_path+0x50>
			if (res != FR_OK) break;
 8009ee8:	bf00      	nop
 8009eea:	e002      	b.n	8009ef2 <follow_path+0xe2>
				break;
 8009eec:	bf00      	nop
 8009eee:	e000      	b.n	8009ef2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ef0:	bf00      	nop
			}
		}
	}

	return res;
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f08:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d031      	beq.n	8009f76 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e002      	b.n	8009f20 <get_ldnumber+0x24>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	617b      	str	r3, [r7, #20]
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b20      	cmp	r3, #32
 8009f26:	d903      	bls.n	8009f30 <get_ldnumber+0x34>
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f2e:	d1f4      	bne.n	8009f1a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f36:	d11c      	bne.n	8009f72 <get_ldnumber+0x76>
			tp = *path;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	60fa      	str	r2, [r7, #12]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	3b30      	subs	r3, #48	@ 0x30
 8009f48:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b09      	cmp	r3, #9
 8009f4e:	d80e      	bhi.n	8009f6e <get_ldnumber+0x72>
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d10a      	bne.n	8009f6e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <get_ldnumber+0x72>
					vol = (int)i;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	3301      	adds	r3, #1
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	697a      	ldr	r2, [r7, #20]
 8009f6c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	e002      	b.n	8009f78 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f76:	693b      	ldr	r3, [r7, #16]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	371c      	adds	r7, #28
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	70da      	strb	r2, [r3, #3]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f9a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff f856 	bl	8009050 <move_window>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d001      	beq.n	8009fae <check_fs+0x2a>
 8009faa:	2304      	movs	r3, #4
 8009fac:	e038      	b.n	800a020 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3334      	adds	r3, #52	@ 0x34
 8009fb2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7fe fd9a 	bl	8008af0 <ld_word>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d001      	beq.n	8009fcc <check_fs+0x48>
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e029      	b.n	800a020 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009fd2:	2be9      	cmp	r3, #233	@ 0xe9
 8009fd4:	d009      	beq.n	8009fea <check_fs+0x66>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009fdc:	2beb      	cmp	r3, #235	@ 0xeb
 8009fde:	d11e      	bne.n	800a01e <check_fs+0x9a>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009fe6:	2b90      	cmp	r3, #144	@ 0x90
 8009fe8:	d119      	bne.n	800a01e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3334      	adds	r3, #52	@ 0x34
 8009fee:	3336      	adds	r3, #54	@ 0x36
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe fd95 	bl	8008b20 <ld_dword>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009ffc:	4a0a      	ldr	r2, [pc, #40]	@ (800a028 <check_fs+0xa4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d101      	bne.n	800a006 <check_fs+0x82>
 800a002:	2300      	movs	r3, #0
 800a004:	e00c      	b.n	800a020 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3334      	adds	r3, #52	@ 0x34
 800a00a:	3352      	adds	r3, #82	@ 0x52
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fe fd87 	bl	8008b20 <ld_dword>
 800a012:	4603      	mov	r3, r0
 800a014:	4a05      	ldr	r2, [pc, #20]	@ (800a02c <check_fs+0xa8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d101      	bne.n	800a01e <check_fs+0x9a>
 800a01a:	2300      	movs	r3, #0
 800a01c:	e000      	b.n	800a020 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a01e:	2302      	movs	r3, #2
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	00544146 	.word	0x00544146
 800a02c:	33544146 	.word	0x33544146

0800a030 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b096      	sub	sp, #88	@ 0x58
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7ff ff59 	bl	8009efc <get_ldnumber>
 800a04a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	da01      	bge.n	800a056 <find_volume+0x26>
 800a052:	230b      	movs	r3, #11
 800a054:	e262      	b.n	800a51c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a056:	4a9f      	ldr	r2, [pc, #636]	@ (800a2d4 <find_volume+0x2a4>)
 800a058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a05e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	2b00      	cmp	r3, #0
 800a064:	d101      	bne.n	800a06a <find_volume+0x3a>
 800a066:	230c      	movs	r3, #12
 800a068:	e258      	b.n	800a51c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a06e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a070:	79fb      	ldrb	r3, [r7, #7]
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01a      	beq.n	800a0b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a082:	785b      	ldrb	r3, [r3, #1]
 800a084:	4618      	mov	r0, r3
 800a086:	f7fe fc95 	bl	80089b4 <disk_status>
 800a08a:	4603      	mov	r3, r0
 800a08c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a090:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10c      	bne.n	800a0b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d007      	beq.n	800a0b2 <find_volume+0x82>
 800a0a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0a6:	f003 0304 	and.w	r3, r3, #4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0ae:	230a      	movs	r3, #10
 800a0b0:	e234      	b.n	800a51c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	e232      	b.n	800a51c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe fc8d 	bl	80089e8 <disk_initialize>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a0d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0d8:	f003 0301 	and.w	r3, r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d001      	beq.n	800a0e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e21b      	b.n	800a51c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d007      	beq.n	800a0fa <find_volume+0xca>
 800a0ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d001      	beq.n	800a0fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a0f6:	230a      	movs	r3, #10
 800a0f8:	e210      	b.n	800a51c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a0fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fc:	7858      	ldrb	r0, [r3, #1]
 800a0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a100:	330c      	adds	r3, #12
 800a102:	461a      	mov	r2, r3
 800a104:	2102      	movs	r1, #2
 800a106:	f7fe fcd5 	bl	8008ab4 <disk_ioctl>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <find_volume+0xe4>
 800a110:	2301      	movs	r3, #1
 800a112:	e203      	b.n	800a51c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	899b      	ldrh	r3, [r3, #12]
 800a118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a11c:	d80d      	bhi.n	800a13a <find_volume+0x10a>
 800a11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a120:	899b      	ldrh	r3, [r3, #12]
 800a122:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a126:	d308      	bcc.n	800a13a <find_volume+0x10a>
 800a128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12a:	899b      	ldrh	r3, [r3, #12]
 800a12c:	461a      	mov	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	899b      	ldrh	r3, [r3, #12]
 800a132:	3b01      	subs	r3, #1
 800a134:	4013      	ands	r3, r2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <find_volume+0x10e>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e1ee      	b.n	800a51c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a142:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a144:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a146:	f7ff ff1d 	bl	8009f84 <check_fs>
 800a14a:	4603      	mov	r3, r0
 800a14c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a150:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a154:	2b02      	cmp	r3, #2
 800a156:	d149      	bne.n	800a1ec <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a158:	2300      	movs	r3, #0
 800a15a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a15c:	e01e      	b.n	800a19c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a160:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a166:	011b      	lsls	r3, r3, #4
 800a168:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a16c:	4413      	add	r3, r2
 800a16e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a172:	3304      	adds	r3, #4
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d006      	beq.n	800a188 <find_volume+0x158>
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	3308      	adds	r3, #8
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fcce 	bl	8008b20 <ld_dword>
 800a184:	4602      	mov	r2, r0
 800a186:	e000      	b.n	800a18a <find_volume+0x15a>
 800a188:	2200      	movs	r2, #0
 800a18a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	3358      	adds	r3, #88	@ 0x58
 800a190:	443b      	add	r3, r7
 800a192:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a198:	3301      	adds	r3, #1
 800a19a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a19c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d9dd      	bls.n	800a15e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a1a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <find_volume+0x182>
 800a1ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	3358      	adds	r3, #88	@ 0x58
 800a1b8:	443b      	add	r3, r7
 800a1ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1be:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <find_volume+0x1a2>
 800a1c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1ca:	f7ff fedb 	bl	8009f84 <check_fs>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	e000      	b.n	800a1d4 <find_volume+0x1a4>
 800a1d2:	2303      	movs	r3, #3
 800a1d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a1d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d905      	bls.n	800a1ec <find_volume+0x1bc>
 800a1e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d9e2      	bls.n	800a1b2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a1ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d101      	bne.n	800a1f8 <find_volume+0x1c8>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e191      	b.n	800a51c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a1f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d901      	bls.n	800a204 <find_volume+0x1d4>
 800a200:	230d      	movs	r3, #13
 800a202:	e18b      	b.n	800a51c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a206:	3334      	adds	r3, #52	@ 0x34
 800a208:	330b      	adds	r3, #11
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7fe fc70 	bl	8008af0 <ld_word>
 800a210:	4603      	mov	r3, r0
 800a212:	461a      	mov	r2, r3
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	899b      	ldrh	r3, [r3, #12]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d001      	beq.n	800a220 <find_volume+0x1f0>
 800a21c:	230d      	movs	r3, #13
 800a21e:	e17d      	b.n	800a51c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a222:	3334      	adds	r3, #52	@ 0x34
 800a224:	3316      	adds	r3, #22
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fc62 	bl	8008af0 <ld_word>
 800a22c:	4603      	mov	r3, r0
 800a22e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a230:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <find_volume+0x214>
 800a236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a238:	3334      	adds	r3, #52	@ 0x34
 800a23a:	3324      	adds	r3, #36	@ 0x24
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fc6f 	bl	8008b20 <ld_dword>
 800a242:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a248:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a252:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a256:	789b      	ldrb	r3, [r3, #2]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d005      	beq.n	800a268 <find_volume+0x238>
 800a25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	2b02      	cmp	r3, #2
 800a262:	d001      	beq.n	800a268 <find_volume+0x238>
 800a264:	230d      	movs	r3, #13
 800a266:	e159      	b.n	800a51c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26a:	789b      	ldrb	r3, [r3, #2]
 800a26c:	461a      	mov	r2, r3
 800a26e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a270:	fb02 f303 	mul.w	r3, r2, r3
 800a274:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a27c:	461a      	mov	r2, r3
 800a27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a280:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	895b      	ldrh	r3, [r3, #10]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d008      	beq.n	800a29c <find_volume+0x26c>
 800a28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28c:	895b      	ldrh	r3, [r3, #10]
 800a28e:	461a      	mov	r2, r3
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	895b      	ldrh	r3, [r3, #10]
 800a294:	3b01      	subs	r3, #1
 800a296:	4013      	ands	r3, r2
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <find_volume+0x270>
 800a29c:	230d      	movs	r3, #13
 800a29e:	e13d      	b.n	800a51c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	3334      	adds	r3, #52	@ 0x34
 800a2a4:	3311      	adds	r3, #17
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fc22 	bl	8008af0 <ld_word>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b6:	891b      	ldrh	r3, [r3, #8]
 800a2b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2ba:	8992      	ldrh	r2, [r2, #12]
 800a2bc:	0952      	lsrs	r2, r2, #5
 800a2be:	b292      	uxth	r2, r2
 800a2c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2c4:	fb01 f202 	mul.w	r2, r1, r2
 800a2c8:	1a9b      	subs	r3, r3, r2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <find_volume+0x2a8>
 800a2d0:	230d      	movs	r3, #13
 800a2d2:	e123      	b.n	800a51c <find_volume+0x4ec>
 800a2d4:	200032a0 	.word	0x200032a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	3334      	adds	r3, #52	@ 0x34
 800a2dc:	3313      	adds	r3, #19
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f7fe fc06 	bl	8008af0 <ld_word>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a2e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d106      	bne.n	800a2fc <find_volume+0x2cc>
 800a2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f0:	3334      	adds	r3, #52	@ 0x34
 800a2f2:	3320      	adds	r3, #32
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f7fe fc13 	bl	8008b20 <ld_dword>
 800a2fa:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	3334      	adds	r3, #52	@ 0x34
 800a300:	330e      	adds	r3, #14
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fbf4 	bl	8008af0 <ld_word>
 800a308:	4603      	mov	r3, r0
 800a30a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a30c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d101      	bne.n	800a316 <find_volume+0x2e6>
 800a312:	230d      	movs	r3, #13
 800a314:	e102      	b.n	800a51c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a316:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a31a:	4413      	add	r3, r2
 800a31c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a31e:	8911      	ldrh	r1, [r2, #8]
 800a320:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a322:	8992      	ldrh	r2, [r2, #12]
 800a324:	0952      	lsrs	r2, r2, #5
 800a326:	b292      	uxth	r2, r2
 800a328:	fbb1 f2f2 	udiv	r2, r1, r2
 800a32c:	b292      	uxth	r2, r2
 800a32e:	4413      	add	r3, r2
 800a330:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	429a      	cmp	r2, r3
 800a338:	d201      	bcs.n	800a33e <find_volume+0x30e>
 800a33a:	230d      	movs	r3, #13
 800a33c:	e0ee      	b.n	800a51c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a33e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a346:	8952      	ldrh	r2, [r2, #10]
 800a348:	fbb3 f3f2 	udiv	r3, r3, r2
 800a34c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a34e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <find_volume+0x328>
 800a354:	230d      	movs	r3, #13
 800a356:	e0e1      	b.n	800a51c <find_volume+0x4ec>
		fmt = FS_FAT32;
 800a358:	2303      	movs	r3, #3
 800a35a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a360:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a364:	4293      	cmp	r3, r2
 800a366:	d802      	bhi.n	800a36e <find_volume+0x33e>
 800a368:	2302      	movs	r3, #2
 800a36a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a370:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a374:	4293      	cmp	r3, r2
 800a376:	d802      	bhi.n	800a37e <find_volume+0x34e>
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a380:	1c9a      	adds	r2, r3, #2
 800a382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a384:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a38a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a38c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a38e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a390:	441a      	add	r2, r3
 800a392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a394:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39a:	441a      	add	r2, r3
 800a39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39e:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a3a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3a4:	2b03      	cmp	r3, #3
 800a3a6:	d11e      	bne.n	800a3e6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	3334      	adds	r3, #52	@ 0x34
 800a3ac:	332a      	adds	r3, #42	@ 0x2a
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fb9e 	bl	8008af0 <ld_word>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <find_volume+0x38e>
 800a3ba:	230d      	movs	r3, #13
 800a3bc:	e0ae      	b.n	800a51c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	891b      	ldrh	r3, [r3, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d001      	beq.n	800a3ca <find_volume+0x39a>
 800a3c6:	230d      	movs	r3, #13
 800a3c8:	e0a8      	b.n	800a51c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3cc:	3334      	adds	r3, #52	@ 0x34
 800a3ce:	332c      	adds	r3, #44	@ 0x2c
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f7fe fba5 	bl	8008b20 <ld_dword>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3de:	699b      	ldr	r3, [r3, #24]
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800a3e4:	e01f      	b.n	800a426 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e8:	891b      	ldrh	r3, [r3, #8]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <find_volume+0x3c2>
 800a3ee:	230d      	movs	r3, #13
 800a3f0:	e094      	b.n	800a51c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a3f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3f8:	441a      	add	r2, r3
 800a3fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fc:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a3fe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a402:	2b02      	cmp	r3, #2
 800a404:	d103      	bne.n	800a40e <find_volume+0x3de>
 800a406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	e00a      	b.n	800a424 <find_volume+0x3f4>
 800a40e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a410:	699a      	ldr	r2, [r3, #24]
 800a412:	4613      	mov	r3, r2
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	4413      	add	r3, r2
 800a418:	085a      	lsrs	r2, r3, #1
 800a41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41c:	699b      	ldr	r3, [r3, #24]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a424:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a428:	69da      	ldr	r2, [r3, #28]
 800a42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42c:	899b      	ldrh	r3, [r3, #12]
 800a42e:	4619      	mov	r1, r3
 800a430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a432:	440b      	add	r3, r1
 800a434:	3b01      	subs	r3, #1
 800a436:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a438:	8989      	ldrh	r1, [r1, #12]
 800a43a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a43e:	429a      	cmp	r2, r3
 800a440:	d201      	bcs.n	800a446 <find_volume+0x416>
 800a442:	230d      	movs	r3, #13
 800a444:	e06a      	b.n	800a51c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a448:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a44c:	615a      	str	r2, [r3, #20]
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	695a      	ldr	r2, [r3, #20]
 800a452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a454:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	2280      	movs	r2, #128	@ 0x80
 800a45a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a45c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a460:	2b03      	cmp	r3, #3
 800a462:	d149      	bne.n	800a4f8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a466:	3334      	adds	r3, #52	@ 0x34
 800a468:	3330      	adds	r3, #48	@ 0x30
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fb40 	bl	8008af0 <ld_word>
 800a470:	4603      	mov	r3, r0
 800a472:	2b01      	cmp	r3, #1
 800a474:	d140      	bne.n	800a4f8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a476:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a478:	3301      	adds	r3, #1
 800a47a:	4619      	mov	r1, r3
 800a47c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a47e:	f7fe fde7 	bl	8009050 <move_window>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d137      	bne.n	800a4f8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	2200      	movs	r2, #0
 800a48c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a490:	3334      	adds	r3, #52	@ 0x34
 800a492:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fb2a 	bl	8008af0 <ld_word>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d127      	bne.n	800a4f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4aa:	3334      	adds	r3, #52	@ 0x34
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe fb37 	bl	8008b20 <ld_dword>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4a1b      	ldr	r2, [pc, #108]	@ (800a524 <find_volume+0x4f4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d11e      	bne.n	800a4f8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4bc:	3334      	adds	r3, #52	@ 0x34
 800a4be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fb2c 	bl	8008b20 <ld_dword>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	4a17      	ldr	r2, [pc, #92]	@ (800a528 <find_volume+0x4f8>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d113      	bne.n	800a4f8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	3334      	adds	r3, #52	@ 0x34
 800a4d4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe fb21 	bl	8008b20 <ld_dword>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e6:	3334      	adds	r3, #52	@ 0x34
 800a4e8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7fe fb17 	bl	8008b20 <ld_dword>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a4fe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a500:	4b0a      	ldr	r3, [pc, #40]	@ (800a52c <find_volume+0x4fc>)
 800a502:	881b      	ldrh	r3, [r3, #0]
 800a504:	3301      	adds	r3, #1
 800a506:	b29a      	uxth	r2, r3
 800a508:	4b08      	ldr	r3, [pc, #32]	@ (800a52c <find_volume+0x4fc>)
 800a50a:	801a      	strh	r2, [r3, #0]
 800a50c:	4b07      	ldr	r3, [pc, #28]	@ (800a52c <find_volume+0x4fc>)
 800a50e:	881a      	ldrh	r2, [r3, #0]
 800a510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a512:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a514:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a516:	f7fe fd33 	bl	8008f80 <clear_lock>
#endif
	return FR_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3758      	adds	r7, #88	@ 0x58
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	41615252 	.word	0x41615252
 800a528:	61417272 	.word	0x61417272
 800a52c:	200032a4 	.word	0x200032a4

0800a530 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a53a:	2309      	movs	r3, #9
 800a53c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01c      	beq.n	800a57e <validate+0x4e>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d018      	beq.n	800a57e <validate+0x4e>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d013      	beq.n	800a57e <validate+0x4e>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	889a      	ldrh	r2, [r3, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	88db      	ldrh	r3, [r3, #6]
 800a560:	429a      	cmp	r2, r3
 800a562:	d10c      	bne.n	800a57e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fa22 	bl	80089b4 <disk_status>
 800a570:	4603      	mov	r3, r0
 800a572:	f003 0301 	and.w	r3, r3, #1
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <validate+0x4e>
			res = FR_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a57e:	7bfb      	ldrb	r3, [r7, #15]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d102      	bne.n	800a58a <validate+0x5a>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	e000      	b.n	800a58c <validate+0x5c>
 800a58a:	2300      	movs	r3, #0
 800a58c:	683a      	ldr	r2, [r7, #0]
 800a58e:	6013      	str	r3, [r2, #0]
	return res;
 800a590:	7bfb      	ldrb	r3, [r7, #15]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a5ae:	f107 0310 	add.w	r3, r7, #16
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7ff fca2 	bl	8009efc <get_ldnumber>
 800a5b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da01      	bge.n	800a5c4 <f_mount+0x28>
 800a5c0:	230b      	movs	r3, #11
 800a5c2:	e02b      	b.n	800a61c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a5c4:	4a17      	ldr	r2, [pc, #92]	@ (800a624 <f_mount+0x88>)
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d005      	beq.n	800a5e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a5d4:	69b8      	ldr	r0, [r7, #24]
 800a5d6:	f7fe fcd3 	bl	8008f80 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	490d      	ldr	r1, [pc, #52]	@ (800a624 <f_mount+0x88>)
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <f_mount+0x66>
 800a5fc:	79fb      	ldrb	r3, [r7, #7]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d001      	beq.n	800a606 <f_mount+0x6a>
 800a602:	2300      	movs	r3, #0
 800a604:	e00a      	b.n	800a61c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a606:	f107 010c 	add.w	r1, r7, #12
 800a60a:	f107 0308 	add.w	r3, r7, #8
 800a60e:	2200      	movs	r2, #0
 800a610:	4618      	mov	r0, r3
 800a612:	f7ff fd0d 	bl	800a030 <find_volume>
 800a616:	4603      	mov	r3, r0
 800a618:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3720      	adds	r7, #32
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}
 800a624:	200032a0 	.word	0x200032a0

0800a628 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b098      	sub	sp, #96	@ 0x60
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <f_open+0x18>
 800a63c:	2309      	movs	r3, #9
 800a63e:	e1b7      	b.n	800a9b0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a646:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a648:	79fa      	ldrb	r2, [r7, #7]
 800a64a:	f107 0110 	add.w	r1, r7, #16
 800a64e:	f107 0308 	add.w	r3, r7, #8
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fcec 	bl	800a030 <find_volume>
 800a658:	4603      	mov	r3, r0
 800a65a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a65e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a662:	2b00      	cmp	r3, #0
 800a664:	f040 819b 	bne.w	800a99e <f_open+0x376>
		dj.obj.fs = fs;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	f107 0314 	add.w	r3, r7, #20
 800a672:	4611      	mov	r1, r2
 800a674:	4618      	mov	r0, r3
 800a676:	f7ff fbcb 	bl	8009e10 <follow_path>
 800a67a:	4603      	mov	r3, r0
 800a67c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a680:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a684:	2b00      	cmp	r3, #0
 800a686:	d118      	bne.n	800a6ba <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a688:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a68c:	b25b      	sxtb	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	da03      	bge.n	800a69a <f_open+0x72>
				res = FR_INVALID_NAME;
 800a692:	2306      	movs	r3, #6
 800a694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a698:	e00f      	b.n	800a6ba <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	bf8c      	ite	hi
 800a6a0:	2301      	movhi	r3, #1
 800a6a2:	2300      	movls	r3, #0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	f107 0314 	add.w	r3, r7, #20
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7fe fb1e 	bl	8008cf0 <chk_lock>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	f003 031c 	and.w	r3, r3, #28
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d07f      	beq.n	800a7c4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d017      	beq.n	800a6fc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6d0:	2b04      	cmp	r3, #4
 800a6d2:	d10e      	bne.n	800a6f2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a6d4:	f7fe fb68 	bl	8008da8 <enq_lock>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d006      	beq.n	800a6ec <f_open+0xc4>
 800a6de:	f107 0314 	add.w	r3, r7, #20
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff facd 	bl	8009c82 <dir_register>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	e000      	b.n	800a6ee <f_open+0xc6>
 800a6ec:	2312      	movs	r3, #18
 800a6ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a6f2:	79fb      	ldrb	r3, [r7, #7]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	71fb      	strb	r3, [r7, #7]
 800a6fa:	e010      	b.n	800a71e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a6fc:	7ebb      	ldrb	r3, [r7, #26]
 800a6fe:	f003 0311 	and.w	r3, r3, #17
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <f_open+0xe6>
					res = FR_DENIED;
 800a706:	2307      	movs	r3, #7
 800a708:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a70c:	e007      	b.n	800a71e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a70e:	79fb      	ldrb	r3, [r7, #7]
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <f_open+0xf6>
 800a718:	2308      	movs	r3, #8
 800a71a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a71e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a722:	2b00      	cmp	r3, #0
 800a724:	d168      	bne.n	800a7f8 <f_open+0x1d0>
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d063      	beq.n	800a7f8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a730:	f7fd ff86 	bl	8008640 <get_fattime>
 800a734:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a738:	330e      	adds	r3, #14
 800a73a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe fa2d 	bl	8008b9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a744:	3316      	adds	r3, #22
 800a746:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fe fa27 	bl	8008b9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a74e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a750:	330b      	adds	r3, #11
 800a752:	2220      	movs	r2, #32
 800a754:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a75a:	4611      	mov	r1, r2
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7ff f9fc 	bl	8009b5a <ld_clust>
 800a762:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a768:	2200      	movs	r2, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff fa14 	bl	8009b98 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a772:	331c      	adds	r3, #28
 800a774:	2100      	movs	r1, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fa10 	bl	8008b9c <st_dword>
					fs->wflag = 1;
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	2201      	movs	r2, #1
 800a780:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d037      	beq.n	800a7f8 <f_open+0x1d0>
						dw = fs->winsect;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a78c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a78e:	f107 0314 	add.w	r3, r7, #20
 800a792:	2200      	movs	r2, #0
 800a794:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe ff04 	bl	80095a4 <remove_chain>
 800a79c:	4603      	mov	r3, r0
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d126      	bne.n	800a7f8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fc4e 	bl	8009050 <move_window>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7be:	3a01      	subs	r2, #1
 800a7c0:	611a      	str	r2, [r3, #16]
 800a7c2:	e019      	b.n	800a7f8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a7c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d115      	bne.n	800a7f8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a7cc:	7ebb      	ldrb	r3, [r7, #26]
 800a7ce:	f003 0310 	and.w	r3, r3, #16
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <f_open+0x1b6>
					res = FR_NO_FILE;
 800a7d6:	2304      	movs	r3, #4
 800a7d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a7dc:	e00c      	b.n	800a7f8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a7de:	79fb      	ldrb	r3, [r7, #7]
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d007      	beq.n	800a7f8 <f_open+0x1d0>
 800a7e8:	7ebb      	ldrb	r3, [r7, #26]
 800a7ea:	f003 0301 	and.w	r3, r3, #1
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <f_open+0x1d0>
						res = FR_DENIED;
 800a7f2:	2307      	movs	r3, #7
 800a7f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a7f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d126      	bne.n	800a84e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a800:	79fb      	ldrb	r3, [r7, #7]
 800a802:	f003 0308 	and.w	r3, r3, #8
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a80a:	79fb      	ldrb	r3, [r7, #7]
 800a80c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a810:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a81a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a820:	79fb      	ldrb	r3, [r7, #7]
 800a822:	2b01      	cmp	r3, #1
 800a824:	bf8c      	ite	hi
 800a826:	2301      	movhi	r3, #1
 800a828:	2300      	movls	r3, #0
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	461a      	mov	r2, r3
 800a82e:	f107 0314 	add.w	r3, r7, #20
 800a832:	4611      	mov	r1, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7fe fad9 	bl	8008dec <inc_lock>
 800a83a:	4602      	mov	r2, r0
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d102      	bne.n	800a84e <f_open+0x226>
 800a848:	2302      	movs	r3, #2
 800a84a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a84e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a852:	2b00      	cmp	r3, #0
 800a854:	f040 80a3 	bne.w	800a99e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a85c:	4611      	mov	r1, r2
 800a85e:	4618      	mov	r0, r3
 800a860:	f7ff f97b 	bl	8009b5a <ld_clust>
 800a864:	4602      	mov	r2, r0
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86c:	331c      	adds	r3, #28
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fe f956 	bl	8008b20 <ld_dword>
 800a874:	4602      	mov	r2, r0
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a880:	693a      	ldr	r2, [r7, #16]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	88da      	ldrh	r2, [r3, #6]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	79fa      	ldrb	r2, [r7, #7]
 800a892:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3330      	adds	r3, #48	@ 0x30
 800a8aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe f9c0 	bl	8008c36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	f003 0320 	and.w	r3, r3, #32
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d06e      	beq.n	800a99e <f_open+0x376>
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d06a      	beq.n	800a99e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68da      	ldr	r2, [r3, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	895b      	ldrh	r3, [r3, #10]
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	899b      	ldrh	r3, [r3, #12]
 800a8da:	fb02 f303 	mul.w	r3, r2, r3
 800a8de:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8ec:	e016      	b.n	800a91c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fe fc69 	bl	80091ca <get_fat>
 800a8f8:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a8fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d802      	bhi.n	800a906 <f_open+0x2de>
 800a900:	2302      	movs	r3, #2
 800a902:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a906:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a90c:	d102      	bne.n	800a914 <f_open+0x2ec>
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a914:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a918:	1ad3      	subs	r3, r2, r3
 800a91a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a91c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a920:	2b00      	cmp	r3, #0
 800a922:	d103      	bne.n	800a92c <f_open+0x304>
 800a924:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a928:	429a      	cmp	r2, r3
 800a92a:	d8e0      	bhi.n	800a8ee <f_open+0x2c6>
				}
				fp->clust = clst;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a930:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a932:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a936:	2b00      	cmp	r3, #0
 800a938:	d131      	bne.n	800a99e <f_open+0x376>
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	899b      	ldrh	r3, [r3, #12]
 800a93e:	461a      	mov	r2, r3
 800a940:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a942:	fbb3 f1f2 	udiv	r1, r3, r2
 800a946:	fb01 f202 	mul.w	r2, r1, r2
 800a94a:	1a9b      	subs	r3, r3, r2
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d026      	beq.n	800a99e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a954:	4618      	mov	r0, r3
 800a956:	f7fe fc19 	bl	800918c <clust2sect>
 800a95a:	6478      	str	r0, [r7, #68]	@ 0x44
 800a95c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <f_open+0x342>
						res = FR_INT_ERR;
 800a962:	2302      	movs	r3, #2
 800a964:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a968:	e019      	b.n	800a99e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	899b      	ldrh	r3, [r3, #12]
 800a96e:	461a      	mov	r2, r3
 800a970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a972:	fbb3 f2f2 	udiv	r2, r3, r2
 800a976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a978:	441a      	add	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	7858      	ldrb	r0, [r3, #1]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6a1a      	ldr	r2, [r3, #32]
 800a98c:	2301      	movs	r3, #1
 800a98e:	f7fe f851 	bl	8008a34 <disk_read>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <f_open+0x376>
 800a998:	2301      	movs	r3, #1
 800a99a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a99e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <f_open+0x384>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a9ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3760      	adds	r7, #96	@ 0x60
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b08c      	sub	sp, #48	@ 0x30
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	60b9      	str	r1, [r7, #8]
 800a9c2:	607a      	str	r2, [r7, #4]
 800a9c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f107 0210 	add.w	r2, r7, #16
 800a9d6:	4611      	mov	r1, r2
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff fda9 	bl	800a530 <validate>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a9e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <f_write+0x44>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	7d5b      	ldrb	r3, [r3, #21]
 800a9f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a9f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <f_write+0x4a>
 800a9fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa00:	e16a      	b.n	800acd8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	7d1b      	ldrb	r3, [r3, #20]
 800aa06:	f003 0302 	and.w	r3, r3, #2
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d101      	bne.n	800aa12 <f_write+0x5a>
 800aa0e:	2307      	movs	r3, #7
 800aa10:	e162      	b.n	800acd8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699a      	ldr	r2, [r3, #24]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	441a      	add	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	699b      	ldr	r3, [r3, #24]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	f080 814c 	bcs.w	800acbc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	699b      	ldr	r3, [r3, #24]
 800aa28:	43db      	mvns	r3, r3
 800aa2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aa2c:	e146      	b.n	800acbc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	8992      	ldrh	r2, [r2, #12]
 800aa36:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa3a:	fb01 f202 	mul.w	r2, r1, r2
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	f040 80f1 	bne.w	800ac28 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	699b      	ldr	r3, [r3, #24]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	8992      	ldrh	r2, [r2, #12]
 800aa4e:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	8952      	ldrh	r2, [r2, #10]
 800aa56:	3a01      	subs	r2, #1
 800aa58:	4013      	ands	r3, r2
 800aa5a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d143      	bne.n	800aaea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10c      	bne.n	800aa84 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d11a      	bne.n	800aaac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2100      	movs	r1, #0
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fdf7 	bl	800966e <create_chain>
 800aa80:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa82:	e013      	b.n	800aaac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d007      	beq.n	800aa9c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	4619      	mov	r1, r3
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7fe fe83 	bl	800979e <clmt_clust>
 800aa98:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa9a:	e007      	b.n	800aaac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	f7fe fde2 	bl	800966e <create_chain>
 800aaaa:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f000 8109 	beq.w	800acc6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d104      	bne.n	800aac4 <f_write+0x10c>
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2202      	movs	r2, #2
 800aabe:	755a      	strb	r2, [r3, #21]
 800aac0:	2302      	movs	r3, #2
 800aac2:	e109      	b.n	800acd8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaca:	d104      	bne.n	800aad6 <f_write+0x11e>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2201      	movs	r2, #1
 800aad0:	755a      	strb	r2, [r3, #21]
 800aad2:	2301      	movs	r3, #1
 800aad4:	e100      	b.n	800acd8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aada:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d102      	bne.n	800aaea <f_write+0x132>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aae8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	7d1b      	ldrb	r3, [r3, #20]
 800aaee:	b25b      	sxtb	r3, r3
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	da18      	bge.n	800ab26 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	7858      	ldrb	r0, [r3, #1]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6a1a      	ldr	r2, [r3, #32]
 800ab02:	2301      	movs	r3, #1
 800ab04:	f7fd ffb6 	bl	8008a74 <disk_write>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d004      	beq.n	800ab18 <f_write+0x160>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2201      	movs	r2, #1
 800ab12:	755a      	strb	r2, [r3, #21]
 800ab14:	2301      	movs	r3, #1
 800ab16:	e0df      	b.n	800acd8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
 800ab1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab20:	b2da      	uxtb	r2, r3
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe fb2c 	bl	800918c <clust2sect>
 800ab34:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <f_write+0x18e>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	755a      	strb	r2, [r3, #21]
 800ab42:	2302      	movs	r3, #2
 800ab44:	e0c8      	b.n	800acd8 <f_write+0x320>
			sect += csect;
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	69bb      	ldr	r3, [r7, #24]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	899b      	ldrh	r3, [r3, #12]
 800ab52:	461a      	mov	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab5a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d043      	beq.n	800abea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab62:	69ba      	ldr	r2, [r7, #24]
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	4413      	add	r3, r2
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	8952      	ldrh	r2, [r2, #10]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d905      	bls.n	800ab7c <f_write+0x1c4>
					cc = fs->csize - csect;
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	895b      	ldrh	r3, [r3, #10]
 800ab74:	461a      	mov	r2, r3
 800ab76:	69bb      	ldr	r3, [r7, #24]
 800ab78:	1ad3      	subs	r3, r2, r3
 800ab7a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	7858      	ldrb	r0, [r3, #1]
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	69f9      	ldr	r1, [r7, #28]
 800ab86:	f7fd ff75 	bl	8008a74 <disk_write>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d004      	beq.n	800ab9a <f_write+0x1e2>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2201      	movs	r2, #1
 800ab94:	755a      	strb	r2, [r3, #21]
 800ab96:	2301      	movs	r3, #1
 800ab98:	e09e      	b.n	800acd8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6a1a      	ldr	r2, [r3, #32]
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	6a3a      	ldr	r2, [r7, #32]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d918      	bls.n	800abda <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	6a1a      	ldr	r2, [r3, #32]
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	8992      	ldrh	r2, [r2, #12]
 800abba:	fb02 f303 	mul.w	r3, r2, r3
 800abbe:	69fa      	ldr	r2, [r7, #28]
 800abc0:	18d1      	adds	r1, r2, r3
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	899b      	ldrh	r3, [r3, #12]
 800abc6:	461a      	mov	r2, r3
 800abc8:	f7fe f814 	bl	8008bf4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	7d1b      	ldrb	r3, [r3, #20]
 800abd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	899b      	ldrh	r3, [r3, #12]
 800abde:	461a      	mov	r2, r3
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	fb02 f303 	mul.w	r3, r2, r3
 800abe6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800abe8:	e04b      	b.n	800ac82 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6a1b      	ldr	r3, [r3, #32]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d016      	beq.n	800ac22 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	699a      	ldr	r2, [r3, #24]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d210      	bcs.n	800ac22 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	7858      	ldrb	r0, [r3, #1]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	697a      	ldr	r2, [r7, #20]
 800ac0e:	f7fd ff11 	bl	8008a34 <disk_read>
 800ac12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d004      	beq.n	800ac22 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	755a      	strb	r2, [r3, #21]
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e05a      	b.n	800acd8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	8992      	ldrh	r2, [r2, #12]
 800ac36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac3a:	fb01 f202 	mul.w	r2, r1, r2
 800ac3e:	1a9b      	subs	r3, r3, r2
 800ac40:	1ac3      	subs	r3, r0, r3
 800ac42:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ac44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d901      	bls.n	800ac50 <f_write+0x298>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	699b      	ldr	r3, [r3, #24]
 800ac5a:	693a      	ldr	r2, [r7, #16]
 800ac5c:	8992      	ldrh	r2, [r2, #12]
 800ac5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac62:	fb00 f202 	mul.w	r2, r0, r2
 800ac66:	1a9b      	subs	r3, r3, r2
 800ac68:	440b      	add	r3, r1
 800ac6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac6c:	69f9      	ldr	r1, [r7, #28]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd ffc0 	bl	8008bf4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	7d1b      	ldrb	r3, [r3, #20]
 800ac78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac7c:	b2da      	uxtb	r2, r3
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ac82:	69fa      	ldr	r2, [r7, #28]
 800ac84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac86:	4413      	add	r3, r2
 800ac88:	61fb      	str	r3, [r7, #28]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	699a      	ldr	r2, [r3, #24]
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	441a      	add	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	619a      	str	r2, [r3, #24]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	bf38      	it	cc
 800aca2:	461a      	movcc	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	60da      	str	r2, [r3, #12]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acae:	441a      	add	r2, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb8:	1ad3      	subs	r3, r2, r3
 800acba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f47f aeb5 	bne.w	800aa2e <f_write+0x76>
 800acc4:	e000      	b.n	800acc8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acc6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	7d1b      	ldrb	r3, [r3, #20]
 800accc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3730      	adds	r7, #48	@ 0x30
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f107 0208 	add.w	r2, r7, #8
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff fc1d 	bl	800a530 <validate>
 800acf6:	4603      	mov	r3, r0
 800acf8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800acfa:	7dfb      	ldrb	r3, [r7, #23]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d168      	bne.n	800add2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	7d1b      	ldrb	r3, [r3, #20]
 800ad04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d062      	beq.n	800add2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	7d1b      	ldrb	r3, [r3, #20]
 800ad10:	b25b      	sxtb	r3, r3
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	da15      	bge.n	800ad42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	7858      	ldrb	r0, [r3, #1]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a1a      	ldr	r2, [r3, #32]
 800ad24:	2301      	movs	r3, #1
 800ad26:	f7fd fea5 	bl	8008a74 <disk_write>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <f_sync+0x54>
 800ad30:	2301      	movs	r3, #1
 800ad32:	e04f      	b.n	800add4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	7d1b      	ldrb	r3, [r3, #20]
 800ad38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ad42:	f7fd fc7d 	bl	8008640 <get_fattime>
 800ad46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4610      	mov	r0, r2
 800ad52:	f7fe f97d 	bl	8009050 <move_window>
 800ad56:	4603      	mov	r3, r0
 800ad58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d138      	bne.n	800add2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	330b      	adds	r3, #11
 800ad6a:	781a      	ldrb	r2, [r3, #0]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	330b      	adds	r3, #11
 800ad70:	f042 0220 	orr.w	r2, r2, #32
 800ad74:	b2d2      	uxtb	r2, r2
 800ad76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6818      	ldr	r0, [r3, #0]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	461a      	mov	r2, r3
 800ad82:	68f9      	ldr	r1, [r7, #12]
 800ad84:	f7fe ff08 	bl	8009b98 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f103 021c 	add.w	r2, r3, #28
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	4619      	mov	r1, r3
 800ad94:	4610      	mov	r0, r2
 800ad96:	f7fd ff01 	bl	8008b9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3316      	adds	r3, #22
 800ad9e:	6939      	ldr	r1, [r7, #16]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fd fefb 	bl	8008b9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3312      	adds	r3, #18
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f7fd feda 	bl	8008b66 <st_word>
					fs->wflag = 1;
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	2201      	movs	r2, #1
 800adb6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe f976 	bl	80090ac <sync_fs>
 800adc0:	4603      	mov	r3, r0
 800adc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	7d1b      	ldrb	r3, [r3, #20]
 800adc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adcc:	b2da      	uxtb	r2, r3
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800add2:	7dfb      	ldrb	r3, [r7, #23]
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7ff ff7b 	bl	800ace0 <f_sync>
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800adee:	7bfb      	ldrb	r3, [r7, #15]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d118      	bne.n	800ae26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f107 0208 	add.w	r2, r7, #8
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fb97 	bl	800a530 <validate>
 800ae02:	4603      	mov	r3, r0
 800ae04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10c      	bne.n	800ae26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe f879 	bl	8008f08 <dec_lock>
 800ae16:	4603      	mov	r3, r0
 800ae18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ae26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3710      	adds	r7, #16
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b090      	sub	sp, #64	@ 0x40
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f107 0208 	add.w	r2, r7, #8
 800ae40:	4611      	mov	r1, r2
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff fb74 	bl	800a530 <validate>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ae4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <f_lseek+0x2e>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	7d5b      	ldrb	r3, [r3, #21]
 800ae5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ae5e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d002      	beq.n	800ae6c <f_lseek+0x3c>
 800ae66:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae6a:	e201      	b.n	800b270 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 80d9 	beq.w	800b028 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae7c:	d15a      	bne.n	800af34 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	1d1a      	adds	r2, r3, #4
 800ae88:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	2302      	movs	r3, #2
 800ae90:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ae98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d03a      	beq.n	800af14 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea0:	613b      	str	r3, [r7, #16]
 800aea2:	2300      	movs	r3, #0
 800aea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea8:	3302      	adds	r3, #2
 800aeaa:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800aeac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeae:	60fb      	str	r3, [r7, #12]
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe f985 	bl	80091ca <get_fat>
 800aec0:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d804      	bhi.n	800aed2 <f_lseek+0xa2>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2202      	movs	r2, #2
 800aecc:	755a      	strb	r2, [r3, #21]
 800aece:	2302      	movs	r3, #2
 800aed0:	e1ce      	b.n	800b270 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aed8:	d104      	bne.n	800aee4 <f_lseek+0xb4>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	755a      	strb	r2, [r3, #21]
 800aee0:	2301      	movs	r3, #1
 800aee2:	e1c5      	b.n	800b270 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3301      	adds	r3, #1
 800aee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d0de      	beq.n	800aeac <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800aeee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d809      	bhi.n	800af0a <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800aef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef8:	1d1a      	adds	r2, r3, #4
 800aefa:	627a      	str	r2, [r7, #36]	@ 0x24
 800aefc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aefe:	601a      	str	r2, [r3, #0]
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	1d1a      	adds	r2, r3, #4
 800af04:	627a      	str	r2, [r7, #36]	@ 0x24
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af10:	429a      	cmp	r2, r3
 800af12:	d3c4      	bcc.n	800ae9e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af1a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800af1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	429a      	cmp	r2, r3
 800af22:	d803      	bhi.n	800af2c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	e19f      	b.n	800b26c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800af2c:	2311      	movs	r3, #17
 800af2e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800af32:	e19b      	b.n	800b26c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d902      	bls.n	800af44 <f_lseek+0x114>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f000 818d 	beq.w	800b26c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	3b01      	subs	r3, #1
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7fe fc20 	bl	800979e <clmt_clust>
 800af5e:	4602      	mov	r2, r0
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	4619      	mov	r1, r3
 800af6c:	4610      	mov	r0, r2
 800af6e:	f7fe f90d 	bl	800918c <clust2sect>
 800af72:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d104      	bne.n	800af84 <f_lseek+0x154>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2202      	movs	r2, #2
 800af7e:	755a      	strb	r2, [r3, #21]
 800af80:	2302      	movs	r3, #2
 800af82:	e175      	b.n	800b270 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	3b01      	subs	r3, #1
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	8992      	ldrh	r2, [r2, #12]
 800af8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800af90:	68ba      	ldr	r2, [r7, #8]
 800af92:	8952      	ldrh	r2, [r2, #10]
 800af94:	3a01      	subs	r2, #1
 800af96:	4013      	ands	r3, r2
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	4413      	add	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	68ba      	ldr	r2, [r7, #8]
 800afa4:	8992      	ldrh	r2, [r2, #12]
 800afa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800afaa:	fb01 f202 	mul.w	r2, r1, r2
 800afae:	1a9b      	subs	r3, r3, r2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 815b 	beq.w	800b26c <f_lseek+0x43c>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	f000 8155 	beq.w	800b26c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	7d1b      	ldrb	r3, [r3, #20]
 800afc6:	b25b      	sxtb	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	da18      	bge.n	800affe <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	7858      	ldrb	r0, [r3, #1]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a1a      	ldr	r2, [r3, #32]
 800afda:	2301      	movs	r3, #1
 800afdc:	f7fd fd4a 	bl	8008a74 <disk_write>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d004      	beq.n	800aff0 <f_lseek+0x1c0>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2201      	movs	r2, #1
 800afea:	755a      	strb	r2, [r3, #21]
 800afec:	2301      	movs	r3, #1
 800afee:	e13f      	b.n	800b270 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	7d1b      	ldrb	r3, [r3, #20]
 800aff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	7858      	ldrb	r0, [r3, #1]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b008:	2301      	movs	r3, #1
 800b00a:	69ba      	ldr	r2, [r7, #24]
 800b00c:	f7fd fd12 	bl	8008a34 <disk_read>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d004      	beq.n	800b020 <f_lseek+0x1f0>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	755a      	strb	r2, [r3, #21]
 800b01c:	2301      	movs	r3, #1
 800b01e:	e127      	b.n	800b270 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	621a      	str	r2, [r3, #32]
 800b026:	e121      	b.n	800b26c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	429a      	cmp	r2, r3
 800b030:	d908      	bls.n	800b044 <f_lseek+0x214>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	7d1b      	ldrb	r3, [r3, #20]
 800b036:	f003 0302 	and.w	r3, r3, #2
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b052:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80b5 	beq.w	800b1c6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	895b      	ldrh	r3, [r3, #10]
 800b060:	461a      	mov	r2, r3
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	899b      	ldrh	r3, [r3, #12]
 800b066:	fb02 f303 	mul.w	r3, r2, r3
 800b06a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b06c:	6a3b      	ldr	r3, [r7, #32]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d01b      	beq.n	800b0aa <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	fbb2 f2f3 	udiv	r2, r2, r3
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	1e59      	subs	r1, r3, #1
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b086:	429a      	cmp	r2, r3
 800b088:	d30f      	bcc.n	800b0aa <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	1e5a      	subs	r2, r3, #1
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	425b      	negs	r3, r3
 800b092:	401a      	ands	r2, r3
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	683a      	ldr	r2, [r7, #0]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0a8:	e022      	b.n	800b0f0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d119      	bne.n	800b0ea <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7fe fad7 	bl	800966e <create_chain>
 800b0c0:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d104      	bne.n	800b0d2 <f_lseek+0x2a2>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	755a      	strb	r2, [r3, #21]
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e0ce      	b.n	800b270 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0d8:	d104      	bne.n	800b0e4 <f_lseek+0x2b4>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	755a      	strb	r2, [r3, #21]
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e0c5      	b.n	800b270 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0e8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ee:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d067      	beq.n	800b1c6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b0f6:	e03a      	b.n	800b16e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b0f8:	683a      	ldr	r2, [r7, #0]
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	699a      	ldr	r2, [r3, #24]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	441a      	add	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	7d1b      	ldrb	r3, [r3, #20]
 800b110:	f003 0302 	and.w	r3, r3, #2
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe faa6 	bl	800966e <create_chain>
 800b122:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b126:	2b00      	cmp	r3, #0
 800b128:	d108      	bne.n	800b13c <f_lseek+0x30c>
							ofs = 0; break;
 800b12a:	2300      	movs	r3, #0
 800b12c:	603b      	str	r3, [r7, #0]
 800b12e:	e022      	b.n	800b176 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b134:	4618      	mov	r0, r3
 800b136:	f7fe f848 	bl	80091ca <get_fat>
 800b13a:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b142:	d104      	bne.n	800b14e <f_lseek+0x31e>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2201      	movs	r2, #1
 800b148:	755a      	strb	r2, [r3, #21]
 800b14a:	2301      	movs	r3, #1
 800b14c:	e090      	b.n	800b270 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b150:	2b01      	cmp	r3, #1
 800b152:	d904      	bls.n	800b15e <f_lseek+0x32e>
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d304      	bcc.n	800b168 <f_lseek+0x338>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2202      	movs	r2, #2
 800b162:	755a      	strb	r2, [r3, #21]
 800b164:	2302      	movs	r3, #2
 800b166:	e083      	b.n	800b270 <f_lseek+0x440>
					fp->clust = clst;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b16c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	429a      	cmp	r2, r3
 800b174:	d8c0      	bhi.n	800b0f8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	441a      	add	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	899b      	ldrh	r3, [r3, #12]
 800b186:	461a      	mov	r2, r3
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b18e:	fb01 f202 	mul.w	r2, r1, r2
 800b192:	1a9b      	subs	r3, r3, r2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d016      	beq.n	800b1c6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7fd fff5 	bl	800918c <clust2sect>
 800b1a2:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d104      	bne.n	800b1b4 <f_lseek+0x384>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	755a      	strb	r2, [r3, #21]
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e05d      	b.n	800b270 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	899b      	ldrh	r3, [r3, #12]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1c2:	4413      	add	r3, r2
 800b1c4:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	699a      	ldr	r2, [r3, #24]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d90a      	bls.n	800b1e8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	699a      	ldr	r2, [r3, #24]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7d1b      	ldrb	r3, [r3, #20]
 800b1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1e2:	b2da      	uxtb	r2, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	8992      	ldrh	r2, [r2, #12]
 800b1f0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1f4:	fb01 f202 	mul.w	r2, r1, r2
 800b1f8:	1a9b      	subs	r3, r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d036      	beq.n	800b26c <f_lseek+0x43c>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b204:	429a      	cmp	r2, r3
 800b206:	d031      	beq.n	800b26c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	7d1b      	ldrb	r3, [r3, #20]
 800b20c:	b25b      	sxtb	r3, r3
 800b20e:	2b00      	cmp	r3, #0
 800b210:	da18      	bge.n	800b244 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	7858      	ldrb	r0, [r3, #1]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a1a      	ldr	r2, [r3, #32]
 800b220:	2301      	movs	r3, #1
 800b222:	f7fd fc27 	bl	8008a74 <disk_write>
 800b226:	4603      	mov	r3, r0
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d004      	beq.n	800b236 <f_lseek+0x406>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	755a      	strb	r2, [r3, #21]
 800b232:	2301      	movs	r3, #1
 800b234:	e01c      	b.n	800b270 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	7d1b      	ldrb	r3, [r3, #20]
 800b23a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	7858      	ldrb	r0, [r3, #1]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b24e:	2301      	movs	r3, #1
 800b250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b252:	f7fd fbef 	bl	8008a34 <disk_read>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d004      	beq.n	800b266 <f_lseek+0x436>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2201      	movs	r2, #1
 800b260:	755a      	strb	r2, [r3, #21]
 800b262:	2301      	movs	r3, #1
 800b264:	e004      	b.n	800b270 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b26a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b26c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b270:	4618      	mov	r0, r3
 800b272:	3740      	adds	r7, #64	@ 0x40
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	4613      	mov	r3, r2
 800b284:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b286:	2301      	movs	r3, #1
 800b288:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b28e:	4b1f      	ldr	r3, [pc, #124]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b290:	7a5b      	ldrb	r3, [r3, #9]
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b00      	cmp	r3, #0
 800b296:	d131      	bne.n	800b2fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b298:	4b1c      	ldr	r3, [pc, #112]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b29a:	7a5b      	ldrb	r3, [r3, #9]
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	461a      	mov	r2, r3
 800b2a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2a6:	4b19      	ldr	r3, [pc, #100]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2a8:	7a5b      	ldrb	r3, [r3, #9]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	4a17      	ldr	r2, [pc, #92]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2b6:	4b15      	ldr	r3, [pc, #84]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2b8:	7a5b      	ldrb	r3, [r3, #9]
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4b13      	ldr	r3, [pc, #76]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2c0:	4413      	add	r3, r2
 800b2c2:	79fa      	ldrb	r2, [r7, #7]
 800b2c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2c6:	4b11      	ldr	r3, [pc, #68]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2c8:	7a5b      	ldrb	r3, [r3, #9]
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	b2d1      	uxtb	r1, r2
 800b2d0:	4a0e      	ldr	r2, [pc, #56]	@ (800b30c <FATFS_LinkDriverEx+0x94>)
 800b2d2:	7251      	strb	r1, [r2, #9]
 800b2d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2d6:	7dbb      	ldrb	r3, [r7, #22]
 800b2d8:	3330      	adds	r3, #48	@ 0x30
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	223a      	movs	r2, #58	@ 0x3a
 800b2e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	3302      	adds	r3, #2
 800b2ec:	222f      	movs	r2, #47	@ 0x2f
 800b2ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	3303      	adds	r3, #3
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop
 800b30c:	200032c8 	.word	0x200032c8

0800b310 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b31a:	2200      	movs	r2, #0
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f7ff ffaa 	bl	800b278 <FATFS_LinkDriverEx>
 800b324:	4603      	mov	r3, r0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3708      	adds	r7, #8
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <setbuf>:
 800b32e:	fab1 f281 	clz	r2, r1
 800b332:	0952      	lsrs	r2, r2, #5
 800b334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b338:	0052      	lsls	r2, r2, #1
 800b33a:	f000 b801 	b.w	800b340 <setvbuf>
	...

0800b340 <setvbuf>:
 800b340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b344:	461d      	mov	r5, r3
 800b346:	4b57      	ldr	r3, [pc, #348]	@ (800b4a4 <setvbuf+0x164>)
 800b348:	681f      	ldr	r7, [r3, #0]
 800b34a:	4604      	mov	r4, r0
 800b34c:	460e      	mov	r6, r1
 800b34e:	4690      	mov	r8, r2
 800b350:	b127      	cbz	r7, 800b35c <setvbuf+0x1c>
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	b913      	cbnz	r3, 800b35c <setvbuf+0x1c>
 800b356:	4638      	mov	r0, r7
 800b358:	f000 f9d6 	bl	800b708 <__sinit>
 800b35c:	f1b8 0f02 	cmp.w	r8, #2
 800b360:	d006      	beq.n	800b370 <setvbuf+0x30>
 800b362:	f1b8 0f01 	cmp.w	r8, #1
 800b366:	f200 809a 	bhi.w	800b49e <setvbuf+0x15e>
 800b36a:	2d00      	cmp	r5, #0
 800b36c:	f2c0 8097 	blt.w	800b49e <setvbuf+0x15e>
 800b370:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b372:	07d9      	lsls	r1, r3, #31
 800b374:	d405      	bmi.n	800b382 <setvbuf+0x42>
 800b376:	89a3      	ldrh	r3, [r4, #12]
 800b378:	059a      	lsls	r2, r3, #22
 800b37a:	d402      	bmi.n	800b382 <setvbuf+0x42>
 800b37c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b37e:	f000 fb66 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800b382:	4621      	mov	r1, r4
 800b384:	4638      	mov	r0, r7
 800b386:	f001 fc59 	bl	800cc3c <_fflush_r>
 800b38a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b38c:	b141      	cbz	r1, 800b3a0 <setvbuf+0x60>
 800b38e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b392:	4299      	cmp	r1, r3
 800b394:	d002      	beq.n	800b39c <setvbuf+0x5c>
 800b396:	4638      	mov	r0, r7
 800b398:	f000 fb5c 	bl	800ba54 <_free_r>
 800b39c:	2300      	movs	r3, #0
 800b39e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	61a3      	str	r3, [r4, #24]
 800b3a4:	6063      	str	r3, [r4, #4]
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	061b      	lsls	r3, r3, #24
 800b3aa:	d503      	bpl.n	800b3b4 <setvbuf+0x74>
 800b3ac:	6921      	ldr	r1, [r4, #16]
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	f000 fb50 	bl	800ba54 <_free_r>
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	f1b8 0f02 	cmp.w	r8, #2
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	d061      	beq.n	800b48a <setvbuf+0x14a>
 800b3c6:	ab01      	add	r3, sp, #4
 800b3c8:	466a      	mov	r2, sp
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4638      	mov	r0, r7
 800b3ce:	f000 f9d1 	bl	800b774 <__swhatbuf_r>
 800b3d2:	89a3      	ldrh	r3, [r4, #12]
 800b3d4:	4318      	orrs	r0, r3
 800b3d6:	81a0      	strh	r0, [r4, #12]
 800b3d8:	bb2d      	cbnz	r5, 800b426 <setvbuf+0xe6>
 800b3da:	9d00      	ldr	r5, [sp, #0]
 800b3dc:	4628      	mov	r0, r5
 800b3de:	f000 ffe9 	bl	800c3b4 <malloc>
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	d152      	bne.n	800b48e <setvbuf+0x14e>
 800b3e8:	f8dd 9000 	ldr.w	r9, [sp]
 800b3ec:	45a9      	cmp	r9, r5
 800b3ee:	d140      	bne.n	800b472 <setvbuf+0x132>
 800b3f0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b3f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3f8:	f043 0202 	orr.w	r2, r3, #2
 800b3fc:	81a2      	strh	r2, [r4, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	60a2      	str	r2, [r4, #8]
 800b402:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b406:	6022      	str	r2, [r4, #0]
 800b408:	6122      	str	r2, [r4, #16]
 800b40a:	2201      	movs	r2, #1
 800b40c:	6162      	str	r2, [r4, #20]
 800b40e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b410:	07d6      	lsls	r6, r2, #31
 800b412:	d404      	bmi.n	800b41e <setvbuf+0xde>
 800b414:	0598      	lsls	r0, r3, #22
 800b416:	d402      	bmi.n	800b41e <setvbuf+0xde>
 800b418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b41a:	f000 fb19 	bl	800ba50 <__retarget_lock_release_recursive>
 800b41e:	4628      	mov	r0, r5
 800b420:	b003      	add	sp, #12
 800b422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b426:	2e00      	cmp	r6, #0
 800b428:	d0d8      	beq.n	800b3dc <setvbuf+0x9c>
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	b913      	cbnz	r3, 800b434 <setvbuf+0xf4>
 800b42e:	4638      	mov	r0, r7
 800b430:	f000 f96a 	bl	800b708 <__sinit>
 800b434:	f1b8 0f01 	cmp.w	r8, #1
 800b438:	bf08      	it	eq
 800b43a:	89a3      	ldrheq	r3, [r4, #12]
 800b43c:	6026      	str	r6, [r4, #0]
 800b43e:	bf04      	itt	eq
 800b440:	f043 0301 	orreq.w	r3, r3, #1
 800b444:	81a3      	strheq	r3, [r4, #12]
 800b446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44a:	f013 0208 	ands.w	r2, r3, #8
 800b44e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b452:	d01e      	beq.n	800b492 <setvbuf+0x152>
 800b454:	07d9      	lsls	r1, r3, #31
 800b456:	bf41      	itttt	mi
 800b458:	2200      	movmi	r2, #0
 800b45a:	426d      	negmi	r5, r5
 800b45c:	60a2      	strmi	r2, [r4, #8]
 800b45e:	61a5      	strmi	r5, [r4, #24]
 800b460:	bf58      	it	pl
 800b462:	60a5      	strpl	r5, [r4, #8]
 800b464:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b466:	07d2      	lsls	r2, r2, #31
 800b468:	d401      	bmi.n	800b46e <setvbuf+0x12e>
 800b46a:	059b      	lsls	r3, r3, #22
 800b46c:	d513      	bpl.n	800b496 <setvbuf+0x156>
 800b46e:	2500      	movs	r5, #0
 800b470:	e7d5      	b.n	800b41e <setvbuf+0xde>
 800b472:	4648      	mov	r0, r9
 800b474:	f000 ff9e 	bl	800c3b4 <malloc>
 800b478:	4606      	mov	r6, r0
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d0b8      	beq.n	800b3f0 <setvbuf+0xb0>
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b484:	81a3      	strh	r3, [r4, #12]
 800b486:	464d      	mov	r5, r9
 800b488:	e7cf      	b.n	800b42a <setvbuf+0xea>
 800b48a:	2500      	movs	r5, #0
 800b48c:	e7b2      	b.n	800b3f4 <setvbuf+0xb4>
 800b48e:	46a9      	mov	r9, r5
 800b490:	e7f5      	b.n	800b47e <setvbuf+0x13e>
 800b492:	60a2      	str	r2, [r4, #8]
 800b494:	e7e6      	b.n	800b464 <setvbuf+0x124>
 800b496:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b498:	f000 fada 	bl	800ba50 <__retarget_lock_release_recursive>
 800b49c:	e7e7      	b.n	800b46e <setvbuf+0x12e>
 800b49e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b4a2:	e7bc      	b.n	800b41e <setvbuf+0xde>
 800b4a4:	20000044 	.word	0x20000044

0800b4a8 <sniprintf>:
 800b4a8:	b40c      	push	{r2, r3}
 800b4aa:	b530      	push	{r4, r5, lr}
 800b4ac:	4b17      	ldr	r3, [pc, #92]	@ (800b50c <sniprintf+0x64>)
 800b4ae:	1e0c      	subs	r4, r1, #0
 800b4b0:	681d      	ldr	r5, [r3, #0]
 800b4b2:	b09d      	sub	sp, #116	@ 0x74
 800b4b4:	da08      	bge.n	800b4c8 <sniprintf+0x20>
 800b4b6:	238b      	movs	r3, #139	@ 0x8b
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4be:	b01d      	add	sp, #116	@ 0x74
 800b4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4c4:	b002      	add	sp, #8
 800b4c6:	4770      	bx	lr
 800b4c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b4cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4d0:	bf14      	ite	ne
 800b4d2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b4d6:	4623      	moveq	r3, r4
 800b4d8:	9304      	str	r3, [sp, #16]
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4e0:	9002      	str	r0, [sp, #8]
 800b4e2:	9006      	str	r0, [sp, #24]
 800b4e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4e8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b4ea:	ab21      	add	r3, sp, #132	@ 0x84
 800b4ec:	a902      	add	r1, sp, #8
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	f000 fb55 	bl	800bba0 <_svfiprintf_r>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	bfbc      	itt	lt
 800b4fa:	238b      	movlt	r3, #139	@ 0x8b
 800b4fc:	602b      	strlt	r3, [r5, #0]
 800b4fe:	2c00      	cmp	r4, #0
 800b500:	d0dd      	beq.n	800b4be <sniprintf+0x16>
 800b502:	9b02      	ldr	r3, [sp, #8]
 800b504:	2200      	movs	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]
 800b508:	e7d9      	b.n	800b4be <sniprintf+0x16>
 800b50a:	bf00      	nop
 800b50c:	20000044 	.word	0x20000044

0800b510 <siscanf>:
 800b510:	b40e      	push	{r1, r2, r3}
 800b512:	b530      	push	{r4, r5, lr}
 800b514:	b09c      	sub	sp, #112	@ 0x70
 800b516:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b518:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b51c:	f854 5b04 	ldr.w	r5, [r4], #4
 800b520:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b524:	9002      	str	r0, [sp, #8]
 800b526:	9006      	str	r0, [sp, #24]
 800b528:	f7f4 fe52 	bl	80001d0 <strlen>
 800b52c:	4b0b      	ldr	r3, [pc, #44]	@ (800b55c <siscanf+0x4c>)
 800b52e:	9003      	str	r0, [sp, #12]
 800b530:	9007      	str	r0, [sp, #28]
 800b532:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b534:	480a      	ldr	r0, [pc, #40]	@ (800b560 <siscanf+0x50>)
 800b536:	9401      	str	r4, [sp, #4]
 800b538:	2300      	movs	r3, #0
 800b53a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b53c:	9314      	str	r3, [sp, #80]	@ 0x50
 800b53e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b542:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b546:	462a      	mov	r2, r5
 800b548:	4623      	mov	r3, r4
 800b54a:	a902      	add	r1, sp, #8
 800b54c:	6800      	ldr	r0, [r0, #0]
 800b54e:	f000 fc7b 	bl	800be48 <__ssvfiscanf_r>
 800b552:	b01c      	add	sp, #112	@ 0x70
 800b554:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b558:	b003      	add	sp, #12
 800b55a:	4770      	bx	lr
 800b55c:	0800b587 	.word	0x0800b587
 800b560:	20000044 	.word	0x20000044

0800b564 <__sread>:
 800b564:	b510      	push	{r4, lr}
 800b566:	460c      	mov	r4, r1
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	f000 fa20 	bl	800b9b0 <_read_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	bfab      	itete	ge
 800b574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b576:	89a3      	ldrhlt	r3, [r4, #12]
 800b578:	181b      	addge	r3, r3, r0
 800b57a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b57e:	bfac      	ite	ge
 800b580:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b582:	81a3      	strhlt	r3, [r4, #12]
 800b584:	bd10      	pop	{r4, pc}

0800b586 <__seofread>:
 800b586:	2000      	movs	r0, #0
 800b588:	4770      	bx	lr

0800b58a <__swrite>:
 800b58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	461f      	mov	r7, r3
 800b590:	898b      	ldrh	r3, [r1, #12]
 800b592:	05db      	lsls	r3, r3, #23
 800b594:	4605      	mov	r5, r0
 800b596:	460c      	mov	r4, r1
 800b598:	4616      	mov	r6, r2
 800b59a:	d505      	bpl.n	800b5a8 <__swrite+0x1e>
 800b59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a0:	2302      	movs	r3, #2
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f000 f9f2 	bl	800b98c <_lseek_r>
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5be:	f000 ba09 	b.w	800b9d4 <_write_r>

0800b5c2 <__sseek>:
 800b5c2:	b510      	push	{r4, lr}
 800b5c4:	460c      	mov	r4, r1
 800b5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ca:	f000 f9df 	bl	800b98c <_lseek_r>
 800b5ce:	1c43      	adds	r3, r0, #1
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	bf15      	itete	ne
 800b5d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5de:	81a3      	strheq	r3, [r4, #12]
 800b5e0:	bf18      	it	ne
 800b5e2:	81a3      	strhne	r3, [r4, #12]
 800b5e4:	bd10      	pop	{r4, pc}

0800b5e6 <__sclose>:
 800b5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ea:	f000 b99d 	b.w	800b928 <_close_r>
	...

0800b5f0 <std>:
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	b510      	push	{r4, lr}
 800b5f4:	4604      	mov	r4, r0
 800b5f6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5fe:	6083      	str	r3, [r0, #8]
 800b600:	8181      	strh	r1, [r0, #12]
 800b602:	6643      	str	r3, [r0, #100]	@ 0x64
 800b604:	81c2      	strh	r2, [r0, #14]
 800b606:	6183      	str	r3, [r0, #24]
 800b608:	4619      	mov	r1, r3
 800b60a:	2208      	movs	r2, #8
 800b60c:	305c      	adds	r0, #92	@ 0x5c
 800b60e:	f000 f983 	bl	800b918 <memset>
 800b612:	4b0d      	ldr	r3, [pc, #52]	@ (800b648 <std+0x58>)
 800b614:	6263      	str	r3, [r4, #36]	@ 0x24
 800b616:	4b0d      	ldr	r3, [pc, #52]	@ (800b64c <std+0x5c>)
 800b618:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b61a:	4b0d      	ldr	r3, [pc, #52]	@ (800b650 <std+0x60>)
 800b61c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b61e:	4b0d      	ldr	r3, [pc, #52]	@ (800b654 <std+0x64>)
 800b620:	6323      	str	r3, [r4, #48]	@ 0x30
 800b622:	4b0d      	ldr	r3, [pc, #52]	@ (800b658 <std+0x68>)
 800b624:	6224      	str	r4, [r4, #32]
 800b626:	429c      	cmp	r4, r3
 800b628:	d006      	beq.n	800b638 <std+0x48>
 800b62a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b62e:	4294      	cmp	r4, r2
 800b630:	d002      	beq.n	800b638 <std+0x48>
 800b632:	33d0      	adds	r3, #208	@ 0xd0
 800b634:	429c      	cmp	r4, r3
 800b636:	d105      	bne.n	800b644 <std+0x54>
 800b638:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b640:	f000 ba04 	b.w	800ba4c <__retarget_lock_init_recursive>
 800b644:	bd10      	pop	{r4, pc}
 800b646:	bf00      	nop
 800b648:	0800b565 	.word	0x0800b565
 800b64c:	0800b58b 	.word	0x0800b58b
 800b650:	0800b5c3 	.word	0x0800b5c3
 800b654:	0800b5e7 	.word	0x0800b5e7
 800b658:	200032d4 	.word	0x200032d4

0800b65c <stdio_exit_handler>:
 800b65c:	4a02      	ldr	r2, [pc, #8]	@ (800b668 <stdio_exit_handler+0xc>)
 800b65e:	4903      	ldr	r1, [pc, #12]	@ (800b66c <stdio_exit_handler+0x10>)
 800b660:	4803      	ldr	r0, [pc, #12]	@ (800b670 <stdio_exit_handler+0x14>)
 800b662:	f000 b869 	b.w	800b738 <_fwalk_sglue>
 800b666:	bf00      	nop
 800b668:	20000038 	.word	0x20000038
 800b66c:	0800cc3d 	.word	0x0800cc3d
 800b670:	20000048 	.word	0x20000048

0800b674 <cleanup_stdio>:
 800b674:	6841      	ldr	r1, [r0, #4]
 800b676:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a8 <cleanup_stdio+0x34>)
 800b678:	4299      	cmp	r1, r3
 800b67a:	b510      	push	{r4, lr}
 800b67c:	4604      	mov	r4, r0
 800b67e:	d001      	beq.n	800b684 <cleanup_stdio+0x10>
 800b680:	f001 fadc 	bl	800cc3c <_fflush_r>
 800b684:	68a1      	ldr	r1, [r4, #8]
 800b686:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <cleanup_stdio+0x38>)
 800b688:	4299      	cmp	r1, r3
 800b68a:	d002      	beq.n	800b692 <cleanup_stdio+0x1e>
 800b68c:	4620      	mov	r0, r4
 800b68e:	f001 fad5 	bl	800cc3c <_fflush_r>
 800b692:	68e1      	ldr	r1, [r4, #12]
 800b694:	4b06      	ldr	r3, [pc, #24]	@ (800b6b0 <cleanup_stdio+0x3c>)
 800b696:	4299      	cmp	r1, r3
 800b698:	d004      	beq.n	800b6a4 <cleanup_stdio+0x30>
 800b69a:	4620      	mov	r0, r4
 800b69c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a0:	f001 bacc 	b.w	800cc3c <_fflush_r>
 800b6a4:	bd10      	pop	{r4, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200032d4 	.word	0x200032d4
 800b6ac:	2000333c 	.word	0x2000333c
 800b6b0:	200033a4 	.word	0x200033a4

0800b6b4 <global_stdio_init.part.0>:
 800b6b4:	b510      	push	{r4, lr}
 800b6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b6e4 <global_stdio_init.part.0+0x30>)
 800b6b8:	4c0b      	ldr	r4, [pc, #44]	@ (800b6e8 <global_stdio_init.part.0+0x34>)
 800b6ba:	4a0c      	ldr	r2, [pc, #48]	@ (800b6ec <global_stdio_init.part.0+0x38>)
 800b6bc:	601a      	str	r2, [r3, #0]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	2104      	movs	r1, #4
 800b6c4:	f7ff ff94 	bl	800b5f0 <std>
 800b6c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	2109      	movs	r1, #9
 800b6d0:	f7ff ff8e 	bl	800b5f0 <std>
 800b6d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6d8:	2202      	movs	r2, #2
 800b6da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6de:	2112      	movs	r1, #18
 800b6e0:	f7ff bf86 	b.w	800b5f0 <std>
 800b6e4:	2000340c 	.word	0x2000340c
 800b6e8:	200032d4 	.word	0x200032d4
 800b6ec:	0800b65d 	.word	0x0800b65d

0800b6f0 <__sfp_lock_acquire>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	@ (800b6f8 <__sfp_lock_acquire+0x8>)
 800b6f2:	f000 b9ac 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20003415 	.word	0x20003415

0800b6fc <__sfp_lock_release>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	@ (800b704 <__sfp_lock_release+0x8>)
 800b6fe:	f000 b9a7 	b.w	800ba50 <__retarget_lock_release_recursive>
 800b702:	bf00      	nop
 800b704:	20003415 	.word	0x20003415

0800b708 <__sinit>:
 800b708:	b510      	push	{r4, lr}
 800b70a:	4604      	mov	r4, r0
 800b70c:	f7ff fff0 	bl	800b6f0 <__sfp_lock_acquire>
 800b710:	6a23      	ldr	r3, [r4, #32]
 800b712:	b11b      	cbz	r3, 800b71c <__sinit+0x14>
 800b714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b718:	f7ff bff0 	b.w	800b6fc <__sfp_lock_release>
 800b71c:	4b04      	ldr	r3, [pc, #16]	@ (800b730 <__sinit+0x28>)
 800b71e:	6223      	str	r3, [r4, #32]
 800b720:	4b04      	ldr	r3, [pc, #16]	@ (800b734 <__sinit+0x2c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f5      	bne.n	800b714 <__sinit+0xc>
 800b728:	f7ff ffc4 	bl	800b6b4 <global_stdio_init.part.0>
 800b72c:	e7f2      	b.n	800b714 <__sinit+0xc>
 800b72e:	bf00      	nop
 800b730:	0800b675 	.word	0x0800b675
 800b734:	2000340c 	.word	0x2000340c

0800b738 <_fwalk_sglue>:
 800b738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b73c:	4607      	mov	r7, r0
 800b73e:	4688      	mov	r8, r1
 800b740:	4614      	mov	r4, r2
 800b742:	2600      	movs	r6, #0
 800b744:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b748:	f1b9 0901 	subs.w	r9, r9, #1
 800b74c:	d505      	bpl.n	800b75a <_fwalk_sglue+0x22>
 800b74e:	6824      	ldr	r4, [r4, #0]
 800b750:	2c00      	cmp	r4, #0
 800b752:	d1f7      	bne.n	800b744 <_fwalk_sglue+0xc>
 800b754:	4630      	mov	r0, r6
 800b756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75a:	89ab      	ldrh	r3, [r5, #12]
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d907      	bls.n	800b770 <_fwalk_sglue+0x38>
 800b760:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b764:	3301      	adds	r3, #1
 800b766:	d003      	beq.n	800b770 <_fwalk_sglue+0x38>
 800b768:	4629      	mov	r1, r5
 800b76a:	4638      	mov	r0, r7
 800b76c:	47c0      	blx	r8
 800b76e:	4306      	orrs	r6, r0
 800b770:	3568      	adds	r5, #104	@ 0x68
 800b772:	e7e9      	b.n	800b748 <_fwalk_sglue+0x10>

0800b774 <__swhatbuf_r>:
 800b774:	b570      	push	{r4, r5, r6, lr}
 800b776:	460c      	mov	r4, r1
 800b778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b77c:	2900      	cmp	r1, #0
 800b77e:	b096      	sub	sp, #88	@ 0x58
 800b780:	4615      	mov	r5, r2
 800b782:	461e      	mov	r6, r3
 800b784:	da0d      	bge.n	800b7a2 <__swhatbuf_r+0x2e>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b78c:	f04f 0100 	mov.w	r1, #0
 800b790:	bf14      	ite	ne
 800b792:	2340      	movne	r3, #64	@ 0x40
 800b794:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b798:	2000      	movs	r0, #0
 800b79a:	6031      	str	r1, [r6, #0]
 800b79c:	602b      	str	r3, [r5, #0]
 800b79e:	b016      	add	sp, #88	@ 0x58
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
 800b7a2:	466a      	mov	r2, sp
 800b7a4:	f000 f8d0 	bl	800b948 <_fstat_r>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	dbec      	blt.n	800b786 <__swhatbuf_r+0x12>
 800b7ac:	9901      	ldr	r1, [sp, #4]
 800b7ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7b6:	4259      	negs	r1, r3
 800b7b8:	4159      	adcs	r1, r3
 800b7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7be:	e7eb      	b.n	800b798 <__swhatbuf_r+0x24>

0800b7c0 <__smakebuf_r>:
 800b7c0:	898b      	ldrh	r3, [r1, #12]
 800b7c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7c4:	079d      	lsls	r5, r3, #30
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	460c      	mov	r4, r1
 800b7ca:	d507      	bpl.n	800b7dc <__smakebuf_r+0x1c>
 800b7cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	6123      	str	r3, [r4, #16]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	6163      	str	r3, [r4, #20]
 800b7d8:	b003      	add	sp, #12
 800b7da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7dc:	ab01      	add	r3, sp, #4
 800b7de:	466a      	mov	r2, sp
 800b7e0:	f7ff ffc8 	bl	800b774 <__swhatbuf_r>
 800b7e4:	9f00      	ldr	r7, [sp, #0]
 800b7e6:	4605      	mov	r5, r0
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	f000 fe0c 	bl	800c408 <_malloc_r>
 800b7f0:	b948      	cbnz	r0, 800b806 <__smakebuf_r+0x46>
 800b7f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7f6:	059a      	lsls	r2, r3, #22
 800b7f8:	d4ee      	bmi.n	800b7d8 <__smakebuf_r+0x18>
 800b7fa:	f023 0303 	bic.w	r3, r3, #3
 800b7fe:	f043 0302 	orr.w	r3, r3, #2
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	e7e2      	b.n	800b7cc <__smakebuf_r+0xc>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	6020      	str	r0, [r4, #0]
 800b80a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b80e:	81a3      	strh	r3, [r4, #12]
 800b810:	9b01      	ldr	r3, [sp, #4]
 800b812:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b816:	b15b      	cbz	r3, 800b830 <__smakebuf_r+0x70>
 800b818:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b81c:	4630      	mov	r0, r6
 800b81e:	f000 f8a5 	bl	800b96c <_isatty_r>
 800b822:	b128      	cbz	r0, 800b830 <__smakebuf_r+0x70>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f023 0303 	bic.w	r3, r3, #3
 800b82a:	f043 0301 	orr.w	r3, r3, #1
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	431d      	orrs	r5, r3
 800b834:	81a5      	strh	r5, [r4, #12]
 800b836:	e7cf      	b.n	800b7d8 <__smakebuf_r+0x18>

0800b838 <iprintf>:
 800b838:	b40f      	push	{r0, r1, r2, r3}
 800b83a:	b507      	push	{r0, r1, r2, lr}
 800b83c:	4906      	ldr	r1, [pc, #24]	@ (800b858 <iprintf+0x20>)
 800b83e:	ab04      	add	r3, sp, #16
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	f853 2b04 	ldr.w	r2, [r3], #4
 800b846:	6881      	ldr	r1, [r0, #8]
 800b848:	9301      	str	r3, [sp, #4]
 800b84a:	f000 fc9b 	bl	800c184 <_vfiprintf_r>
 800b84e:	b003      	add	sp, #12
 800b850:	f85d eb04 	ldr.w	lr, [sp], #4
 800b854:	b004      	add	sp, #16
 800b856:	4770      	bx	lr
 800b858:	20000044 	.word	0x20000044

0800b85c <_puts_r>:
 800b85c:	6a03      	ldr	r3, [r0, #32]
 800b85e:	b570      	push	{r4, r5, r6, lr}
 800b860:	6884      	ldr	r4, [r0, #8]
 800b862:	4605      	mov	r5, r0
 800b864:	460e      	mov	r6, r1
 800b866:	b90b      	cbnz	r3, 800b86c <_puts_r+0x10>
 800b868:	f7ff ff4e 	bl	800b708 <__sinit>
 800b86c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b86e:	07db      	lsls	r3, r3, #31
 800b870:	d405      	bmi.n	800b87e <_puts_r+0x22>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	0598      	lsls	r0, r3, #22
 800b876:	d402      	bmi.n	800b87e <_puts_r+0x22>
 800b878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b87a:	f000 f8e8 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800b87e:	89a3      	ldrh	r3, [r4, #12]
 800b880:	0719      	lsls	r1, r3, #28
 800b882:	d502      	bpl.n	800b88a <_puts_r+0x2e>
 800b884:	6923      	ldr	r3, [r4, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d135      	bne.n	800b8f6 <_puts_r+0x9a>
 800b88a:	4621      	mov	r1, r4
 800b88c:	4628      	mov	r0, r5
 800b88e:	f001 fb9b 	bl	800cfc8 <__swsetup_r>
 800b892:	b380      	cbz	r0, 800b8f6 <_puts_r+0x9a>
 800b894:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b898:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b89a:	07da      	lsls	r2, r3, #31
 800b89c:	d405      	bmi.n	800b8aa <_puts_r+0x4e>
 800b89e:	89a3      	ldrh	r3, [r4, #12]
 800b8a0:	059b      	lsls	r3, r3, #22
 800b8a2:	d402      	bmi.n	800b8aa <_puts_r+0x4e>
 800b8a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8a6:	f000 f8d3 	bl	800ba50 <__retarget_lock_release_recursive>
 800b8aa:	4628      	mov	r0, r5
 800b8ac:	bd70      	pop	{r4, r5, r6, pc}
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	da04      	bge.n	800b8bc <_puts_r+0x60>
 800b8b2:	69a2      	ldr	r2, [r4, #24]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	dc17      	bgt.n	800b8e8 <_puts_r+0x8c>
 800b8b8:	290a      	cmp	r1, #10
 800b8ba:	d015      	beq.n	800b8e8 <_puts_r+0x8c>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	1c5a      	adds	r2, r3, #1
 800b8c0:	6022      	str	r2, [r4, #0]
 800b8c2:	7019      	strb	r1, [r3, #0]
 800b8c4:	68a3      	ldr	r3, [r4, #8]
 800b8c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	60a3      	str	r3, [r4, #8]
 800b8ce:	2900      	cmp	r1, #0
 800b8d0:	d1ed      	bne.n	800b8ae <_puts_r+0x52>
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da11      	bge.n	800b8fa <_puts_r+0x9e>
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	210a      	movs	r1, #10
 800b8da:	4628      	mov	r0, r5
 800b8dc:	f001 fb36 	bl	800cf4c <__swbuf_r>
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	d0d7      	beq.n	800b894 <_puts_r+0x38>
 800b8e4:	250a      	movs	r5, #10
 800b8e6:	e7d7      	b.n	800b898 <_puts_r+0x3c>
 800b8e8:	4622      	mov	r2, r4
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f001 fb2e 	bl	800cf4c <__swbuf_r>
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d1e7      	bne.n	800b8c4 <_puts_r+0x68>
 800b8f4:	e7ce      	b.n	800b894 <_puts_r+0x38>
 800b8f6:	3e01      	subs	r6, #1
 800b8f8:	e7e4      	b.n	800b8c4 <_puts_r+0x68>
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	1c5a      	adds	r2, r3, #1
 800b8fe:	6022      	str	r2, [r4, #0]
 800b900:	220a      	movs	r2, #10
 800b902:	701a      	strb	r2, [r3, #0]
 800b904:	e7ee      	b.n	800b8e4 <_puts_r+0x88>
	...

0800b908 <puts>:
 800b908:	4b02      	ldr	r3, [pc, #8]	@ (800b914 <puts+0xc>)
 800b90a:	4601      	mov	r1, r0
 800b90c:	6818      	ldr	r0, [r3, #0]
 800b90e:	f7ff bfa5 	b.w	800b85c <_puts_r>
 800b912:	bf00      	nop
 800b914:	20000044 	.word	0x20000044

0800b918 <memset>:
 800b918:	4402      	add	r2, r0
 800b91a:	4603      	mov	r3, r0
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d100      	bne.n	800b922 <memset+0xa>
 800b920:	4770      	bx	lr
 800b922:	f803 1b01 	strb.w	r1, [r3], #1
 800b926:	e7f9      	b.n	800b91c <memset+0x4>

0800b928 <_close_r>:
 800b928:	b538      	push	{r3, r4, r5, lr}
 800b92a:	4d06      	ldr	r5, [pc, #24]	@ (800b944 <_close_r+0x1c>)
 800b92c:	2300      	movs	r3, #0
 800b92e:	4604      	mov	r4, r0
 800b930:	4608      	mov	r0, r1
 800b932:	602b      	str	r3, [r5, #0]
 800b934:	f7f5 fd59 	bl	80013ea <_close>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_close_r+0x1a>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_close_r+0x1a>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	20003410 	.word	0x20003410

0800b948 <_fstat_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d07      	ldr	r5, [pc, #28]	@ (800b968 <_fstat_r+0x20>)
 800b94c:	2300      	movs	r3, #0
 800b94e:	4604      	mov	r4, r0
 800b950:	4608      	mov	r0, r1
 800b952:	4611      	mov	r1, r2
 800b954:	602b      	str	r3, [r5, #0]
 800b956:	f7f5 fd54 	bl	8001402 <_fstat>
 800b95a:	1c43      	adds	r3, r0, #1
 800b95c:	d102      	bne.n	800b964 <_fstat_r+0x1c>
 800b95e:	682b      	ldr	r3, [r5, #0]
 800b960:	b103      	cbz	r3, 800b964 <_fstat_r+0x1c>
 800b962:	6023      	str	r3, [r4, #0]
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	bf00      	nop
 800b968:	20003410 	.word	0x20003410

0800b96c <_isatty_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	@ (800b988 <_isatty_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f5 fd53 	bl	8001422 <_isatty>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_isatty_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_isatty_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20003410 	.word	0x20003410

0800b98c <_lseek_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	@ (800b9ac <_lseek_r+0x20>)
 800b990:	4604      	mov	r4, r0
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f5 fd4c 	bl	8001438 <_lseek>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_lseek_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_lseek_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20003410 	.word	0x20003410

0800b9b0 <_read_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	@ (800b9d0 <_read_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f5 fcf6 	bl	80013b0 <_read>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_read_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_read_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	20003410 	.word	0x20003410

0800b9d4 <_write_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	@ (800b9f4 <_write_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f5 faca 	bl	8000f7c <_write>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_write_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_write_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	20003410 	.word	0x20003410

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	@ (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20000044 	.word	0x20000044

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4d0d      	ldr	r5, [pc, #52]	@ (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	@ (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1b64      	subs	r4, r4, r5
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2600      	movs	r6, #0
 800ba10:	42a6      	cmp	r6, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4d0b      	ldr	r5, [pc, #44]	@ (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	@ (800ba48 <__libc_init_array+0x44>)
 800ba18:	f001 fb6c 	bl	800d0f4 <_init>
 800ba1c:	1b64      	subs	r4, r4, r5
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2600      	movs	r6, #0
 800ba22:	42a6      	cmp	r6, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba2c:	4798      	blx	r3
 800ba2e:	3601      	adds	r6, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba36:	4798      	blx	r3
 800ba38:	3601      	adds	r6, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800d588 	.word	0x0800d588
 800ba40:	0800d588 	.word	0x0800d588
 800ba44:	0800d588 	.word	0x0800d588
 800ba48:	0800d58c 	.word	0x0800d58c

0800ba4c <__retarget_lock_init_recursive>:
 800ba4c:	4770      	bx	lr

0800ba4e <__retarget_lock_acquire_recursive>:
 800ba4e:	4770      	bx	lr

0800ba50 <__retarget_lock_release_recursive>:
 800ba50:	4770      	bx	lr
	...

0800ba54 <_free_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4605      	mov	r5, r0
 800ba58:	2900      	cmp	r1, #0
 800ba5a:	d041      	beq.n	800bae0 <_free_r+0x8c>
 800ba5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba60:	1f0c      	subs	r4, r1, #4
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	bfb8      	it	lt
 800ba66:	18e4      	addlt	r4, r4, r3
 800ba68:	f001 f910 	bl	800cc8c <__malloc_lock>
 800ba6c:	4a1d      	ldr	r2, [pc, #116]	@ (800bae4 <_free_r+0x90>)
 800ba6e:	6813      	ldr	r3, [r2, #0]
 800ba70:	b933      	cbnz	r3, 800ba80 <_free_r+0x2c>
 800ba72:	6063      	str	r3, [r4, #4]
 800ba74:	6014      	str	r4, [r2, #0]
 800ba76:	4628      	mov	r0, r5
 800ba78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba7c:	f001 b90c 	b.w	800cc98 <__malloc_unlock>
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	d908      	bls.n	800ba96 <_free_r+0x42>
 800ba84:	6820      	ldr	r0, [r4, #0]
 800ba86:	1821      	adds	r1, r4, r0
 800ba88:	428b      	cmp	r3, r1
 800ba8a:	bf01      	itttt	eq
 800ba8c:	6819      	ldreq	r1, [r3, #0]
 800ba8e:	685b      	ldreq	r3, [r3, #4]
 800ba90:	1809      	addeq	r1, r1, r0
 800ba92:	6021      	streq	r1, [r4, #0]
 800ba94:	e7ed      	b.n	800ba72 <_free_r+0x1e>
 800ba96:	461a      	mov	r2, r3
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	b10b      	cbz	r3, 800baa0 <_free_r+0x4c>
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	d9fa      	bls.n	800ba96 <_free_r+0x42>
 800baa0:	6811      	ldr	r1, [r2, #0]
 800baa2:	1850      	adds	r0, r2, r1
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d10b      	bne.n	800bac0 <_free_r+0x6c>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	4401      	add	r1, r0
 800baac:	1850      	adds	r0, r2, r1
 800baae:	4283      	cmp	r3, r0
 800bab0:	6011      	str	r1, [r2, #0]
 800bab2:	d1e0      	bne.n	800ba76 <_free_r+0x22>
 800bab4:	6818      	ldr	r0, [r3, #0]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	6053      	str	r3, [r2, #4]
 800baba:	4408      	add	r0, r1
 800babc:	6010      	str	r0, [r2, #0]
 800babe:	e7da      	b.n	800ba76 <_free_r+0x22>
 800bac0:	d902      	bls.n	800bac8 <_free_r+0x74>
 800bac2:	230c      	movs	r3, #12
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	e7d6      	b.n	800ba76 <_free_r+0x22>
 800bac8:	6820      	ldr	r0, [r4, #0]
 800baca:	1821      	adds	r1, r4, r0
 800bacc:	428b      	cmp	r3, r1
 800bace:	bf04      	itt	eq
 800bad0:	6819      	ldreq	r1, [r3, #0]
 800bad2:	685b      	ldreq	r3, [r3, #4]
 800bad4:	6063      	str	r3, [r4, #4]
 800bad6:	bf04      	itt	eq
 800bad8:	1809      	addeq	r1, r1, r0
 800bada:	6021      	streq	r1, [r4, #0]
 800badc:	6054      	str	r4, [r2, #4]
 800bade:	e7ca      	b.n	800ba76 <_free_r+0x22>
 800bae0:	bd38      	pop	{r3, r4, r5, pc}
 800bae2:	bf00      	nop
 800bae4:	2000341c 	.word	0x2000341c

0800bae8 <__ssputs_r>:
 800bae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baec:	688e      	ldr	r6, [r1, #8]
 800baee:	461f      	mov	r7, r3
 800baf0:	42be      	cmp	r6, r7
 800baf2:	680b      	ldr	r3, [r1, #0]
 800baf4:	4682      	mov	sl, r0
 800baf6:	460c      	mov	r4, r1
 800baf8:	4690      	mov	r8, r2
 800bafa:	d82d      	bhi.n	800bb58 <__ssputs_r+0x70>
 800bafc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb04:	d026      	beq.n	800bb54 <__ssputs_r+0x6c>
 800bb06:	6965      	ldr	r5, [r4, #20]
 800bb08:	6909      	ldr	r1, [r1, #16]
 800bb0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb0e:	eba3 0901 	sub.w	r9, r3, r1
 800bb12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb16:	1c7b      	adds	r3, r7, #1
 800bb18:	444b      	add	r3, r9
 800bb1a:	106d      	asrs	r5, r5, #1
 800bb1c:	429d      	cmp	r5, r3
 800bb1e:	bf38      	it	cc
 800bb20:	461d      	movcc	r5, r3
 800bb22:	0553      	lsls	r3, r2, #21
 800bb24:	d527      	bpl.n	800bb76 <__ssputs_r+0x8e>
 800bb26:	4629      	mov	r1, r5
 800bb28:	f000 fc6e 	bl	800c408 <_malloc_r>
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	b360      	cbz	r0, 800bb8a <__ssputs_r+0xa2>
 800bb30:	6921      	ldr	r1, [r4, #16]
 800bb32:	464a      	mov	r2, r9
 800bb34:	f001 fac8 	bl	800d0c8 <memcpy>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	6126      	str	r6, [r4, #16]
 800bb46:	6165      	str	r5, [r4, #20]
 800bb48:	444e      	add	r6, r9
 800bb4a:	eba5 0509 	sub.w	r5, r5, r9
 800bb4e:	6026      	str	r6, [r4, #0]
 800bb50:	60a5      	str	r5, [r4, #8]
 800bb52:	463e      	mov	r6, r7
 800bb54:	42be      	cmp	r6, r7
 800bb56:	d900      	bls.n	800bb5a <__ssputs_r+0x72>
 800bb58:	463e      	mov	r6, r7
 800bb5a:	6820      	ldr	r0, [r4, #0]
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	4641      	mov	r1, r8
 800bb60:	f001 fa88 	bl	800d074 <memmove>
 800bb64:	68a3      	ldr	r3, [r4, #8]
 800bb66:	1b9b      	subs	r3, r3, r6
 800bb68:	60a3      	str	r3, [r4, #8]
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	4433      	add	r3, r6
 800bb6e:	6023      	str	r3, [r4, #0]
 800bb70:	2000      	movs	r0, #0
 800bb72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb76:	462a      	mov	r2, r5
 800bb78:	f001 f8ce 	bl	800cd18 <_realloc_r>
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	d1e0      	bne.n	800bb44 <__ssputs_r+0x5c>
 800bb82:	6921      	ldr	r1, [r4, #16]
 800bb84:	4650      	mov	r0, sl
 800bb86:	f7ff ff65 	bl	800ba54 <_free_r>
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	f8ca 3000 	str.w	r3, [sl]
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb9c:	e7e9      	b.n	800bb72 <__ssputs_r+0x8a>
	...

0800bba0 <_svfiprintf_r>:
 800bba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	4698      	mov	r8, r3
 800bba6:	898b      	ldrh	r3, [r1, #12]
 800bba8:	061b      	lsls	r3, r3, #24
 800bbaa:	b09d      	sub	sp, #116	@ 0x74
 800bbac:	4607      	mov	r7, r0
 800bbae:	460d      	mov	r5, r1
 800bbb0:	4614      	mov	r4, r2
 800bbb2:	d510      	bpl.n	800bbd6 <_svfiprintf_r+0x36>
 800bbb4:	690b      	ldr	r3, [r1, #16]
 800bbb6:	b973      	cbnz	r3, 800bbd6 <_svfiprintf_r+0x36>
 800bbb8:	2140      	movs	r1, #64	@ 0x40
 800bbba:	f000 fc25 	bl	800c408 <_malloc_r>
 800bbbe:	6028      	str	r0, [r5, #0]
 800bbc0:	6128      	str	r0, [r5, #16]
 800bbc2:	b930      	cbnz	r0, 800bbd2 <_svfiprintf_r+0x32>
 800bbc4:	230c      	movs	r3, #12
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbcc:	b01d      	add	sp, #116	@ 0x74
 800bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd2:	2340      	movs	r3, #64	@ 0x40
 800bbd4:	616b      	str	r3, [r5, #20]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbda:	2320      	movs	r3, #32
 800bbdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe4:	2330      	movs	r3, #48	@ 0x30
 800bbe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd84 <_svfiprintf_r+0x1e4>
 800bbea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbee:	f04f 0901 	mov.w	r9, #1
 800bbf2:	4623      	mov	r3, r4
 800bbf4:	469a      	mov	sl, r3
 800bbf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbfa:	b10a      	cbz	r2, 800bc00 <_svfiprintf_r+0x60>
 800bbfc:	2a25      	cmp	r2, #37	@ 0x25
 800bbfe:	d1f9      	bne.n	800bbf4 <_svfiprintf_r+0x54>
 800bc00:	ebba 0b04 	subs.w	fp, sl, r4
 800bc04:	d00b      	beq.n	800bc1e <_svfiprintf_r+0x7e>
 800bc06:	465b      	mov	r3, fp
 800bc08:	4622      	mov	r2, r4
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	4638      	mov	r0, r7
 800bc0e:	f7ff ff6b 	bl	800bae8 <__ssputs_r>
 800bc12:	3001      	adds	r0, #1
 800bc14:	f000 80a7 	beq.w	800bd66 <_svfiprintf_r+0x1c6>
 800bc18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc1a:	445a      	add	r2, fp
 800bc1c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc1e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 809f 	beq.w	800bd66 <_svfiprintf_r+0x1c6>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc32:	f10a 0a01 	add.w	sl, sl, #1
 800bc36:	9304      	str	r3, [sp, #16]
 800bc38:	9307      	str	r3, [sp, #28]
 800bc3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc3e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc40:	4654      	mov	r4, sl
 800bc42:	2205      	movs	r2, #5
 800bc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc48:	484e      	ldr	r0, [pc, #312]	@ (800bd84 <_svfiprintf_r+0x1e4>)
 800bc4a:	f7f4 fad9 	bl	8000200 <memchr>
 800bc4e:	9a04      	ldr	r2, [sp, #16]
 800bc50:	b9d8      	cbnz	r0, 800bc8a <_svfiprintf_r+0xea>
 800bc52:	06d0      	lsls	r0, r2, #27
 800bc54:	bf44      	itt	mi
 800bc56:	2320      	movmi	r3, #32
 800bc58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5c:	0711      	lsls	r1, r2, #28
 800bc5e:	bf44      	itt	mi
 800bc60:	232b      	movmi	r3, #43	@ 0x2b
 800bc62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc66:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc6c:	d015      	beq.n	800bc9a <_svfiprintf_r+0xfa>
 800bc6e:	9a07      	ldr	r2, [sp, #28]
 800bc70:	4654      	mov	r4, sl
 800bc72:	2000      	movs	r0, #0
 800bc74:	f04f 0c0a 	mov.w	ip, #10
 800bc78:	4621      	mov	r1, r4
 800bc7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc7e:	3b30      	subs	r3, #48	@ 0x30
 800bc80:	2b09      	cmp	r3, #9
 800bc82:	d94b      	bls.n	800bd1c <_svfiprintf_r+0x17c>
 800bc84:	b1b0      	cbz	r0, 800bcb4 <_svfiprintf_r+0x114>
 800bc86:	9207      	str	r2, [sp, #28]
 800bc88:	e014      	b.n	800bcb4 <_svfiprintf_r+0x114>
 800bc8a:	eba0 0308 	sub.w	r3, r0, r8
 800bc8e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc92:	4313      	orrs	r3, r2
 800bc94:	9304      	str	r3, [sp, #16]
 800bc96:	46a2      	mov	sl, r4
 800bc98:	e7d2      	b.n	800bc40 <_svfiprintf_r+0xa0>
 800bc9a:	9b03      	ldr	r3, [sp, #12]
 800bc9c:	1d19      	adds	r1, r3, #4
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	9103      	str	r1, [sp, #12]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	bfbb      	ittet	lt
 800bca6:	425b      	neglt	r3, r3
 800bca8:	f042 0202 	orrlt.w	r2, r2, #2
 800bcac:	9307      	strge	r3, [sp, #28]
 800bcae:	9307      	strlt	r3, [sp, #28]
 800bcb0:	bfb8      	it	lt
 800bcb2:	9204      	strlt	r2, [sp, #16]
 800bcb4:	7823      	ldrb	r3, [r4, #0]
 800bcb6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcb8:	d10a      	bne.n	800bcd0 <_svfiprintf_r+0x130>
 800bcba:	7863      	ldrb	r3, [r4, #1]
 800bcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcbe:	d132      	bne.n	800bd26 <_svfiprintf_r+0x186>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d1a      	adds	r2, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	9203      	str	r2, [sp, #12]
 800bcc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bccc:	3402      	adds	r4, #2
 800bcce:	9305      	str	r3, [sp, #20]
 800bcd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd94 <_svfiprintf_r+0x1f4>
 800bcd4:	7821      	ldrb	r1, [r4, #0]
 800bcd6:	2203      	movs	r2, #3
 800bcd8:	4650      	mov	r0, sl
 800bcda:	f7f4 fa91 	bl	8000200 <memchr>
 800bcde:	b138      	cbz	r0, 800bcf0 <_svfiprintf_r+0x150>
 800bce0:	9b04      	ldr	r3, [sp, #16]
 800bce2:	eba0 000a 	sub.w	r0, r0, sl
 800bce6:	2240      	movs	r2, #64	@ 0x40
 800bce8:	4082      	lsls	r2, r0
 800bcea:	4313      	orrs	r3, r2
 800bcec:	3401      	adds	r4, #1
 800bcee:	9304      	str	r3, [sp, #16]
 800bcf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf4:	4824      	ldr	r0, [pc, #144]	@ (800bd88 <_svfiprintf_r+0x1e8>)
 800bcf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcfa:	2206      	movs	r2, #6
 800bcfc:	f7f4 fa80 	bl	8000200 <memchr>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	d036      	beq.n	800bd72 <_svfiprintf_r+0x1d2>
 800bd04:	4b21      	ldr	r3, [pc, #132]	@ (800bd8c <_svfiprintf_r+0x1ec>)
 800bd06:	bb1b      	cbnz	r3, 800bd50 <_svfiprintf_r+0x1b0>
 800bd08:	9b03      	ldr	r3, [sp, #12]
 800bd0a:	3307      	adds	r3, #7
 800bd0c:	f023 0307 	bic.w	r3, r3, #7
 800bd10:	3308      	adds	r3, #8
 800bd12:	9303      	str	r3, [sp, #12]
 800bd14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd16:	4433      	add	r3, r6
 800bd18:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd1a:	e76a      	b.n	800bbf2 <_svfiprintf_r+0x52>
 800bd1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd20:	460c      	mov	r4, r1
 800bd22:	2001      	movs	r0, #1
 800bd24:	e7a8      	b.n	800bc78 <_svfiprintf_r+0xd8>
 800bd26:	2300      	movs	r3, #0
 800bd28:	3401      	adds	r4, #1
 800bd2a:	9305      	str	r3, [sp, #20]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	f04f 0c0a 	mov.w	ip, #10
 800bd32:	4620      	mov	r0, r4
 800bd34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd38:	3a30      	subs	r2, #48	@ 0x30
 800bd3a:	2a09      	cmp	r2, #9
 800bd3c:	d903      	bls.n	800bd46 <_svfiprintf_r+0x1a6>
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d0c6      	beq.n	800bcd0 <_svfiprintf_r+0x130>
 800bd42:	9105      	str	r1, [sp, #20]
 800bd44:	e7c4      	b.n	800bcd0 <_svfiprintf_r+0x130>
 800bd46:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e7f0      	b.n	800bd32 <_svfiprintf_r+0x192>
 800bd50:	ab03      	add	r3, sp, #12
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	462a      	mov	r2, r5
 800bd56:	4b0e      	ldr	r3, [pc, #56]	@ (800bd90 <_svfiprintf_r+0x1f0>)
 800bd58:	a904      	add	r1, sp, #16
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	f3af 8000 	nop.w
 800bd60:	1c42      	adds	r2, r0, #1
 800bd62:	4606      	mov	r6, r0
 800bd64:	d1d6      	bne.n	800bd14 <_svfiprintf_r+0x174>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	065b      	lsls	r3, r3, #25
 800bd6a:	f53f af2d 	bmi.w	800bbc8 <_svfiprintf_r+0x28>
 800bd6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd70:	e72c      	b.n	800bbcc <_svfiprintf_r+0x2c>
 800bd72:	ab03      	add	r3, sp, #12
 800bd74:	9300      	str	r3, [sp, #0]
 800bd76:	462a      	mov	r2, r5
 800bd78:	4b05      	ldr	r3, [pc, #20]	@ (800bd90 <_svfiprintf_r+0x1f0>)
 800bd7a:	a904      	add	r1, sp, #16
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	f000 fc31 	bl	800c5e4 <_printf_i>
 800bd82:	e7ed      	b.n	800bd60 <_svfiprintf_r+0x1c0>
 800bd84:	0800d430 	.word	0x0800d430
 800bd88:	0800d43a 	.word	0x0800d43a
 800bd8c:	00000000 	.word	0x00000000
 800bd90:	0800bae9 	.word	0x0800bae9
 800bd94:	0800d436 	.word	0x0800d436

0800bd98 <_sungetc_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	1c4b      	adds	r3, r1, #1
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	d103      	bne.n	800bda8 <_sungetc_r+0x10>
 800bda0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bda4:	4628      	mov	r0, r5
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	8993      	ldrh	r3, [r2, #12]
 800bdaa:	f023 0320 	bic.w	r3, r3, #32
 800bdae:	8193      	strh	r3, [r2, #12]
 800bdb0:	6853      	ldr	r3, [r2, #4]
 800bdb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bdb4:	b2cd      	uxtb	r5, r1
 800bdb6:	b18a      	cbz	r2, 800bddc <_sungetc_r+0x44>
 800bdb8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	dd08      	ble.n	800bdd0 <_sungetc_r+0x38>
 800bdbe:	6823      	ldr	r3, [r4, #0]
 800bdc0:	1e5a      	subs	r2, r3, #1
 800bdc2:	6022      	str	r2, [r4, #0]
 800bdc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bdc8:	6863      	ldr	r3, [r4, #4]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	e7e9      	b.n	800bda4 <_sungetc_r+0xc>
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	f000 ff67 	bl	800cca4 <__submore>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d0f1      	beq.n	800bdbe <_sungetc_r+0x26>
 800bdda:	e7e1      	b.n	800bda0 <_sungetc_r+0x8>
 800bddc:	6921      	ldr	r1, [r4, #16]
 800bdde:	6822      	ldr	r2, [r4, #0]
 800bde0:	b141      	cbz	r1, 800bdf4 <_sungetc_r+0x5c>
 800bde2:	4291      	cmp	r1, r2
 800bde4:	d206      	bcs.n	800bdf4 <_sungetc_r+0x5c>
 800bde6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bdea:	42a9      	cmp	r1, r5
 800bdec:	d102      	bne.n	800bdf4 <_sungetc_r+0x5c>
 800bdee:	3a01      	subs	r2, #1
 800bdf0:	6022      	str	r2, [r4, #0]
 800bdf2:	e7ea      	b.n	800bdca <_sungetc_r+0x32>
 800bdf4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800bdf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdfc:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdfe:	2303      	movs	r3, #3
 800be00:	63a3      	str	r3, [r4, #56]	@ 0x38
 800be02:	4623      	mov	r3, r4
 800be04:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be08:	6023      	str	r3, [r4, #0]
 800be0a:	2301      	movs	r3, #1
 800be0c:	e7de      	b.n	800bdcc <_sungetc_r+0x34>

0800be0e <__ssrefill_r>:
 800be0e:	b510      	push	{r4, lr}
 800be10:	460c      	mov	r4, r1
 800be12:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800be14:	b169      	cbz	r1, 800be32 <__ssrefill_r+0x24>
 800be16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be1a:	4299      	cmp	r1, r3
 800be1c:	d001      	beq.n	800be22 <__ssrefill_r+0x14>
 800be1e:	f7ff fe19 	bl	800ba54 <_free_r>
 800be22:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be24:	6063      	str	r3, [r4, #4]
 800be26:	2000      	movs	r0, #0
 800be28:	6360      	str	r0, [r4, #52]	@ 0x34
 800be2a:	b113      	cbz	r3, 800be32 <__ssrefill_r+0x24>
 800be2c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	bd10      	pop	{r4, pc}
 800be32:	6923      	ldr	r3, [r4, #16]
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	2300      	movs	r3, #0
 800be38:	6063      	str	r3, [r4, #4]
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	f043 0320 	orr.w	r3, r3, #32
 800be40:	81a3      	strh	r3, [r4, #12]
 800be42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be46:	e7f3      	b.n	800be30 <__ssrefill_r+0x22>

0800be48 <__ssvfiscanf_r>:
 800be48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be4c:	460c      	mov	r4, r1
 800be4e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800be52:	2100      	movs	r1, #0
 800be54:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800be58:	49a5      	ldr	r1, [pc, #660]	@ (800c0f0 <__ssvfiscanf_r+0x2a8>)
 800be5a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800be5c:	f10d 0804 	add.w	r8, sp, #4
 800be60:	49a4      	ldr	r1, [pc, #656]	@ (800c0f4 <__ssvfiscanf_r+0x2ac>)
 800be62:	4fa5      	ldr	r7, [pc, #660]	@ (800c0f8 <__ssvfiscanf_r+0x2b0>)
 800be64:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800be68:	4606      	mov	r6, r0
 800be6a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	7813      	ldrb	r3, [r2, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	f000 8158 	beq.w	800c126 <__ssvfiscanf_r+0x2de>
 800be76:	5cf9      	ldrb	r1, [r7, r3]
 800be78:	f011 0108 	ands.w	r1, r1, #8
 800be7c:	f102 0501 	add.w	r5, r2, #1
 800be80:	d019      	beq.n	800beb6 <__ssvfiscanf_r+0x6e>
 800be82:	6863      	ldr	r3, [r4, #4]
 800be84:	2b00      	cmp	r3, #0
 800be86:	dd0f      	ble.n	800bea8 <__ssvfiscanf_r+0x60>
 800be88:	6823      	ldr	r3, [r4, #0]
 800be8a:	781a      	ldrb	r2, [r3, #0]
 800be8c:	5cba      	ldrb	r2, [r7, r2]
 800be8e:	0712      	lsls	r2, r2, #28
 800be90:	d401      	bmi.n	800be96 <__ssvfiscanf_r+0x4e>
 800be92:	462a      	mov	r2, r5
 800be94:	e7eb      	b.n	800be6e <__ssvfiscanf_r+0x26>
 800be96:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be98:	3201      	adds	r2, #1
 800be9a:	9245      	str	r2, [sp, #276]	@ 0x114
 800be9c:	6862      	ldr	r2, [r4, #4]
 800be9e:	3301      	adds	r3, #1
 800bea0:	3a01      	subs	r2, #1
 800bea2:	6062      	str	r2, [r4, #4]
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	e7ec      	b.n	800be82 <__ssvfiscanf_r+0x3a>
 800bea8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800beaa:	4621      	mov	r1, r4
 800beac:	4630      	mov	r0, r6
 800beae:	4798      	blx	r3
 800beb0:	2800      	cmp	r0, #0
 800beb2:	d0e9      	beq.n	800be88 <__ssvfiscanf_r+0x40>
 800beb4:	e7ed      	b.n	800be92 <__ssvfiscanf_r+0x4a>
 800beb6:	2b25      	cmp	r3, #37	@ 0x25
 800beb8:	d012      	beq.n	800bee0 <__ssvfiscanf_r+0x98>
 800beba:	4699      	mov	r9, r3
 800bebc:	6863      	ldr	r3, [r4, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f340 8093 	ble.w	800bfea <__ssvfiscanf_r+0x1a2>
 800bec4:	6822      	ldr	r2, [r4, #0]
 800bec6:	7813      	ldrb	r3, [r2, #0]
 800bec8:	454b      	cmp	r3, r9
 800beca:	f040 812c 	bne.w	800c126 <__ssvfiscanf_r+0x2de>
 800bece:	6863      	ldr	r3, [r4, #4]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	6063      	str	r3, [r4, #4]
 800bed4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800bed6:	3201      	adds	r2, #1
 800bed8:	3301      	adds	r3, #1
 800beda:	6022      	str	r2, [r4, #0]
 800bedc:	9345      	str	r3, [sp, #276]	@ 0x114
 800bede:	e7d8      	b.n	800be92 <__ssvfiscanf_r+0x4a>
 800bee0:	9141      	str	r1, [sp, #260]	@ 0x104
 800bee2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bee4:	7853      	ldrb	r3, [r2, #1]
 800bee6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bee8:	bf02      	ittt	eq
 800beea:	2310      	moveq	r3, #16
 800beec:	1c95      	addeq	r5, r2, #2
 800beee:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bef0:	220a      	movs	r2, #10
 800bef2:	46a9      	mov	r9, r5
 800bef4:	f819 1b01 	ldrb.w	r1, [r9], #1
 800bef8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800befc:	2b09      	cmp	r3, #9
 800befe:	d91e      	bls.n	800bf3e <__ssvfiscanf_r+0xf6>
 800bf00:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c0fc <__ssvfiscanf_r+0x2b4>
 800bf04:	2203      	movs	r2, #3
 800bf06:	4650      	mov	r0, sl
 800bf08:	f7f4 f97a 	bl	8000200 <memchr>
 800bf0c:	b138      	cbz	r0, 800bf1e <__ssvfiscanf_r+0xd6>
 800bf0e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf10:	eba0 000a 	sub.w	r0, r0, sl
 800bf14:	2301      	movs	r3, #1
 800bf16:	4083      	lsls	r3, r0
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	9341      	str	r3, [sp, #260]	@ 0x104
 800bf1c:	464d      	mov	r5, r9
 800bf1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf22:	2b78      	cmp	r3, #120	@ 0x78
 800bf24:	d806      	bhi.n	800bf34 <__ssvfiscanf_r+0xec>
 800bf26:	2b57      	cmp	r3, #87	@ 0x57
 800bf28:	d810      	bhi.n	800bf4c <__ssvfiscanf_r+0x104>
 800bf2a:	2b25      	cmp	r3, #37	@ 0x25
 800bf2c:	d0c5      	beq.n	800beba <__ssvfiscanf_r+0x72>
 800bf2e:	d857      	bhi.n	800bfe0 <__ssvfiscanf_r+0x198>
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d065      	beq.n	800c000 <__ssvfiscanf_r+0x1b8>
 800bf34:	2303      	movs	r3, #3
 800bf36:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bf38:	230a      	movs	r3, #10
 800bf3a:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf3c:	e078      	b.n	800c030 <__ssvfiscanf_r+0x1e8>
 800bf3e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bf40:	fb02 1103 	mla	r1, r2, r3, r1
 800bf44:	3930      	subs	r1, #48	@ 0x30
 800bf46:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bf48:	464d      	mov	r5, r9
 800bf4a:	e7d2      	b.n	800bef2 <__ssvfiscanf_r+0xaa>
 800bf4c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bf50:	2a20      	cmp	r2, #32
 800bf52:	d8ef      	bhi.n	800bf34 <__ssvfiscanf_r+0xec>
 800bf54:	a101      	add	r1, pc, #4	@ (adr r1, 800bf5c <__ssvfiscanf_r+0x114>)
 800bf56:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800c00f 	.word	0x0800c00f
 800bf60:	0800bf35 	.word	0x0800bf35
 800bf64:	0800bf35 	.word	0x0800bf35
 800bf68:	0800c069 	.word	0x0800c069
 800bf6c:	0800bf35 	.word	0x0800bf35
 800bf70:	0800bf35 	.word	0x0800bf35
 800bf74:	0800bf35 	.word	0x0800bf35
 800bf78:	0800bf35 	.word	0x0800bf35
 800bf7c:	0800bf35 	.word	0x0800bf35
 800bf80:	0800bf35 	.word	0x0800bf35
 800bf84:	0800bf35 	.word	0x0800bf35
 800bf88:	0800c07f 	.word	0x0800c07f
 800bf8c:	0800c065 	.word	0x0800c065
 800bf90:	0800bfe7 	.word	0x0800bfe7
 800bf94:	0800bfe7 	.word	0x0800bfe7
 800bf98:	0800bfe7 	.word	0x0800bfe7
 800bf9c:	0800bf35 	.word	0x0800bf35
 800bfa0:	0800c021 	.word	0x0800c021
 800bfa4:	0800bf35 	.word	0x0800bf35
 800bfa8:	0800bf35 	.word	0x0800bf35
 800bfac:	0800bf35 	.word	0x0800bf35
 800bfb0:	0800bf35 	.word	0x0800bf35
 800bfb4:	0800c08f 	.word	0x0800c08f
 800bfb8:	0800c029 	.word	0x0800c029
 800bfbc:	0800c007 	.word	0x0800c007
 800bfc0:	0800bf35 	.word	0x0800bf35
 800bfc4:	0800bf35 	.word	0x0800bf35
 800bfc8:	0800c08b 	.word	0x0800c08b
 800bfcc:	0800bf35 	.word	0x0800bf35
 800bfd0:	0800c065 	.word	0x0800c065
 800bfd4:	0800bf35 	.word	0x0800bf35
 800bfd8:	0800bf35 	.word	0x0800bf35
 800bfdc:	0800c00f 	.word	0x0800c00f
 800bfe0:	3b45      	subs	r3, #69	@ 0x45
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d8a6      	bhi.n	800bf34 <__ssvfiscanf_r+0xec>
 800bfe6:	2305      	movs	r3, #5
 800bfe8:	e021      	b.n	800c02e <__ssvfiscanf_r+0x1e6>
 800bfea:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bfec:	4621      	mov	r1, r4
 800bfee:	4630      	mov	r0, r6
 800bff0:	4798      	blx	r3
 800bff2:	2800      	cmp	r0, #0
 800bff4:	f43f af66 	beq.w	800bec4 <__ssvfiscanf_r+0x7c>
 800bff8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bffa:	2800      	cmp	r0, #0
 800bffc:	f040 808b 	bne.w	800c116 <__ssvfiscanf_r+0x2ce>
 800c000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c004:	e08b      	b.n	800c11e <__ssvfiscanf_r+0x2d6>
 800c006:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c008:	f042 0220 	orr.w	r2, r2, #32
 800c00c:	9241      	str	r2, [sp, #260]	@ 0x104
 800c00e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c014:	9241      	str	r2, [sp, #260]	@ 0x104
 800c016:	2210      	movs	r2, #16
 800c018:	2b6e      	cmp	r3, #110	@ 0x6e
 800c01a:	9242      	str	r2, [sp, #264]	@ 0x108
 800c01c:	d902      	bls.n	800c024 <__ssvfiscanf_r+0x1dc>
 800c01e:	e005      	b.n	800c02c <__ssvfiscanf_r+0x1e4>
 800c020:	2300      	movs	r3, #0
 800c022:	9342      	str	r3, [sp, #264]	@ 0x108
 800c024:	2303      	movs	r3, #3
 800c026:	e002      	b.n	800c02e <__ssvfiscanf_r+0x1e6>
 800c028:	2308      	movs	r3, #8
 800c02a:	9342      	str	r3, [sp, #264]	@ 0x108
 800c02c:	2304      	movs	r3, #4
 800c02e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c030:	6863      	ldr	r3, [r4, #4]
 800c032:	2b00      	cmp	r3, #0
 800c034:	dd39      	ble.n	800c0aa <__ssvfiscanf_r+0x262>
 800c036:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c038:	0659      	lsls	r1, r3, #25
 800c03a:	d404      	bmi.n	800c046 <__ssvfiscanf_r+0x1fe>
 800c03c:	6823      	ldr	r3, [r4, #0]
 800c03e:	781a      	ldrb	r2, [r3, #0]
 800c040:	5cba      	ldrb	r2, [r7, r2]
 800c042:	0712      	lsls	r2, r2, #28
 800c044:	d438      	bmi.n	800c0b8 <__ssvfiscanf_r+0x270>
 800c046:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c048:	2b02      	cmp	r3, #2
 800c04a:	dc47      	bgt.n	800c0dc <__ssvfiscanf_r+0x294>
 800c04c:	466b      	mov	r3, sp
 800c04e:	4622      	mov	r2, r4
 800c050:	a941      	add	r1, sp, #260	@ 0x104
 800c052:	4630      	mov	r0, r6
 800c054:	f000 fbe6 	bl	800c824 <_scanf_chars>
 800c058:	2801      	cmp	r0, #1
 800c05a:	d064      	beq.n	800c126 <__ssvfiscanf_r+0x2de>
 800c05c:	2802      	cmp	r0, #2
 800c05e:	f47f af18 	bne.w	800be92 <__ssvfiscanf_r+0x4a>
 800c062:	e7c9      	b.n	800bff8 <__ssvfiscanf_r+0x1b0>
 800c064:	220a      	movs	r2, #10
 800c066:	e7d7      	b.n	800c018 <__ssvfiscanf_r+0x1d0>
 800c068:	4629      	mov	r1, r5
 800c06a:	4640      	mov	r0, r8
 800c06c:	f000 fd28 	bl	800cac0 <__sccl>
 800c070:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c076:	9341      	str	r3, [sp, #260]	@ 0x104
 800c078:	4605      	mov	r5, r0
 800c07a:	2301      	movs	r3, #1
 800c07c:	e7d7      	b.n	800c02e <__ssvfiscanf_r+0x1e6>
 800c07e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c084:	9341      	str	r3, [sp, #260]	@ 0x104
 800c086:	2300      	movs	r3, #0
 800c088:	e7d1      	b.n	800c02e <__ssvfiscanf_r+0x1e6>
 800c08a:	2302      	movs	r3, #2
 800c08c:	e7cf      	b.n	800c02e <__ssvfiscanf_r+0x1e6>
 800c08e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c090:	06c3      	lsls	r3, r0, #27
 800c092:	f53f aefe 	bmi.w	800be92 <__ssvfiscanf_r+0x4a>
 800c096:	9b00      	ldr	r3, [sp, #0]
 800c098:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c09a:	1d19      	adds	r1, r3, #4
 800c09c:	9100      	str	r1, [sp, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	07c0      	lsls	r0, r0, #31
 800c0a2:	bf4c      	ite	mi
 800c0a4:	801a      	strhmi	r2, [r3, #0]
 800c0a6:	601a      	strpl	r2, [r3, #0]
 800c0a8:	e6f3      	b.n	800be92 <__ssvfiscanf_r+0x4a>
 800c0aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0ac:	4621      	mov	r1, r4
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	4798      	blx	r3
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	d0bf      	beq.n	800c036 <__ssvfiscanf_r+0x1ee>
 800c0b6:	e79f      	b.n	800bff8 <__ssvfiscanf_r+0x1b0>
 800c0b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c0ba:	3201      	adds	r2, #1
 800c0bc:	9245      	str	r2, [sp, #276]	@ 0x114
 800c0be:	6862      	ldr	r2, [r4, #4]
 800c0c0:	3a01      	subs	r2, #1
 800c0c2:	2a00      	cmp	r2, #0
 800c0c4:	6062      	str	r2, [r4, #4]
 800c0c6:	dd02      	ble.n	800c0ce <__ssvfiscanf_r+0x286>
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	6023      	str	r3, [r4, #0]
 800c0cc:	e7b6      	b.n	800c03c <__ssvfiscanf_r+0x1f4>
 800c0ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4798      	blx	r3
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d0b0      	beq.n	800c03c <__ssvfiscanf_r+0x1f4>
 800c0da:	e78d      	b.n	800bff8 <__ssvfiscanf_r+0x1b0>
 800c0dc:	2b04      	cmp	r3, #4
 800c0de:	dc0f      	bgt.n	800c100 <__ssvfiscanf_r+0x2b8>
 800c0e0:	466b      	mov	r3, sp
 800c0e2:	4622      	mov	r2, r4
 800c0e4:	a941      	add	r1, sp, #260	@ 0x104
 800c0e6:	4630      	mov	r0, r6
 800c0e8:	f000 fbf6 	bl	800c8d8 <_scanf_i>
 800c0ec:	e7b4      	b.n	800c058 <__ssvfiscanf_r+0x210>
 800c0ee:	bf00      	nop
 800c0f0:	0800bd99 	.word	0x0800bd99
 800c0f4:	0800be0f 	.word	0x0800be0f
 800c0f8:	0800d47f 	.word	0x0800d47f
 800c0fc:	0800d436 	.word	0x0800d436
 800c100:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <__ssvfiscanf_r+0x2e4>)
 800c102:	2b00      	cmp	r3, #0
 800c104:	f43f aec5 	beq.w	800be92 <__ssvfiscanf_r+0x4a>
 800c108:	466b      	mov	r3, sp
 800c10a:	4622      	mov	r2, r4
 800c10c:	a941      	add	r1, sp, #260	@ 0x104
 800c10e:	4630      	mov	r0, r6
 800c110:	f3af 8000 	nop.w
 800c114:	e7a0      	b.n	800c058 <__ssvfiscanf_r+0x210>
 800c116:	89a3      	ldrh	r3, [r4, #12]
 800c118:	065b      	lsls	r3, r3, #25
 800c11a:	f53f af71 	bmi.w	800c000 <__ssvfiscanf_r+0x1b8>
 800c11e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c126:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c128:	e7f9      	b.n	800c11e <__ssvfiscanf_r+0x2d6>
 800c12a:	bf00      	nop
 800c12c:	00000000 	.word	0x00000000

0800c130 <__sfputc_r>:
 800c130:	6893      	ldr	r3, [r2, #8]
 800c132:	3b01      	subs	r3, #1
 800c134:	2b00      	cmp	r3, #0
 800c136:	b410      	push	{r4}
 800c138:	6093      	str	r3, [r2, #8]
 800c13a:	da08      	bge.n	800c14e <__sfputc_r+0x1e>
 800c13c:	6994      	ldr	r4, [r2, #24]
 800c13e:	42a3      	cmp	r3, r4
 800c140:	db01      	blt.n	800c146 <__sfputc_r+0x16>
 800c142:	290a      	cmp	r1, #10
 800c144:	d103      	bne.n	800c14e <__sfputc_r+0x1e>
 800c146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c14a:	f000 beff 	b.w	800cf4c <__swbuf_r>
 800c14e:	6813      	ldr	r3, [r2, #0]
 800c150:	1c58      	adds	r0, r3, #1
 800c152:	6010      	str	r0, [r2, #0]
 800c154:	7019      	strb	r1, [r3, #0]
 800c156:	4608      	mov	r0, r1
 800c158:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <__sfputs_r>:
 800c15e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c160:	4606      	mov	r6, r0
 800c162:	460f      	mov	r7, r1
 800c164:	4614      	mov	r4, r2
 800c166:	18d5      	adds	r5, r2, r3
 800c168:	42ac      	cmp	r4, r5
 800c16a:	d101      	bne.n	800c170 <__sfputs_r+0x12>
 800c16c:	2000      	movs	r0, #0
 800c16e:	e007      	b.n	800c180 <__sfputs_r+0x22>
 800c170:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c174:	463a      	mov	r2, r7
 800c176:	4630      	mov	r0, r6
 800c178:	f7ff ffda 	bl	800c130 <__sfputc_r>
 800c17c:	1c43      	adds	r3, r0, #1
 800c17e:	d1f3      	bne.n	800c168 <__sfputs_r+0xa>
 800c180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c184 <_vfiprintf_r>:
 800c184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c188:	460d      	mov	r5, r1
 800c18a:	b09d      	sub	sp, #116	@ 0x74
 800c18c:	4614      	mov	r4, r2
 800c18e:	4698      	mov	r8, r3
 800c190:	4606      	mov	r6, r0
 800c192:	b118      	cbz	r0, 800c19c <_vfiprintf_r+0x18>
 800c194:	6a03      	ldr	r3, [r0, #32]
 800c196:	b90b      	cbnz	r3, 800c19c <_vfiprintf_r+0x18>
 800c198:	f7ff fab6 	bl	800b708 <__sinit>
 800c19c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c19e:	07d9      	lsls	r1, r3, #31
 800c1a0:	d405      	bmi.n	800c1ae <_vfiprintf_r+0x2a>
 800c1a2:	89ab      	ldrh	r3, [r5, #12]
 800c1a4:	059a      	lsls	r2, r3, #22
 800c1a6:	d402      	bmi.n	800c1ae <_vfiprintf_r+0x2a>
 800c1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1aa:	f7ff fc50 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	071b      	lsls	r3, r3, #28
 800c1b2:	d501      	bpl.n	800c1b8 <_vfiprintf_r+0x34>
 800c1b4:	692b      	ldr	r3, [r5, #16]
 800c1b6:	b99b      	cbnz	r3, 800c1e0 <_vfiprintf_r+0x5c>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	4630      	mov	r0, r6
 800c1bc:	f000 ff04 	bl	800cfc8 <__swsetup_r>
 800c1c0:	b170      	cbz	r0, 800c1e0 <_vfiprintf_r+0x5c>
 800c1c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1c4:	07dc      	lsls	r4, r3, #31
 800c1c6:	d504      	bpl.n	800c1d2 <_vfiprintf_r+0x4e>
 800c1c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1cc:	b01d      	add	sp, #116	@ 0x74
 800c1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d2:	89ab      	ldrh	r3, [r5, #12]
 800c1d4:	0598      	lsls	r0, r3, #22
 800c1d6:	d4f7      	bmi.n	800c1c8 <_vfiprintf_r+0x44>
 800c1d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1da:	f7ff fc39 	bl	800ba50 <__retarget_lock_release_recursive>
 800c1de:	e7f3      	b.n	800c1c8 <_vfiprintf_r+0x44>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c1e4:	2320      	movs	r3, #32
 800c1e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ee:	2330      	movs	r3, #48	@ 0x30
 800c1f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3a0 <_vfiprintf_r+0x21c>
 800c1f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1f8:	f04f 0901 	mov.w	r9, #1
 800c1fc:	4623      	mov	r3, r4
 800c1fe:	469a      	mov	sl, r3
 800c200:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c204:	b10a      	cbz	r2, 800c20a <_vfiprintf_r+0x86>
 800c206:	2a25      	cmp	r2, #37	@ 0x25
 800c208:	d1f9      	bne.n	800c1fe <_vfiprintf_r+0x7a>
 800c20a:	ebba 0b04 	subs.w	fp, sl, r4
 800c20e:	d00b      	beq.n	800c228 <_vfiprintf_r+0xa4>
 800c210:	465b      	mov	r3, fp
 800c212:	4622      	mov	r2, r4
 800c214:	4629      	mov	r1, r5
 800c216:	4630      	mov	r0, r6
 800c218:	f7ff ffa1 	bl	800c15e <__sfputs_r>
 800c21c:	3001      	adds	r0, #1
 800c21e:	f000 80a7 	beq.w	800c370 <_vfiprintf_r+0x1ec>
 800c222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c224:	445a      	add	r2, fp
 800c226:	9209      	str	r2, [sp, #36]	@ 0x24
 800c228:	f89a 3000 	ldrb.w	r3, [sl]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 809f 	beq.w	800c370 <_vfiprintf_r+0x1ec>
 800c232:	2300      	movs	r3, #0
 800c234:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c23c:	f10a 0a01 	add.w	sl, sl, #1
 800c240:	9304      	str	r3, [sp, #16]
 800c242:	9307      	str	r3, [sp, #28]
 800c244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c248:	931a      	str	r3, [sp, #104]	@ 0x68
 800c24a:	4654      	mov	r4, sl
 800c24c:	2205      	movs	r2, #5
 800c24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c252:	4853      	ldr	r0, [pc, #332]	@ (800c3a0 <_vfiprintf_r+0x21c>)
 800c254:	f7f3 ffd4 	bl	8000200 <memchr>
 800c258:	9a04      	ldr	r2, [sp, #16]
 800c25a:	b9d8      	cbnz	r0, 800c294 <_vfiprintf_r+0x110>
 800c25c:	06d1      	lsls	r1, r2, #27
 800c25e:	bf44      	itt	mi
 800c260:	2320      	movmi	r3, #32
 800c262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c266:	0713      	lsls	r3, r2, #28
 800c268:	bf44      	itt	mi
 800c26a:	232b      	movmi	r3, #43	@ 0x2b
 800c26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c270:	f89a 3000 	ldrb.w	r3, [sl]
 800c274:	2b2a      	cmp	r3, #42	@ 0x2a
 800c276:	d015      	beq.n	800c2a4 <_vfiprintf_r+0x120>
 800c278:	9a07      	ldr	r2, [sp, #28]
 800c27a:	4654      	mov	r4, sl
 800c27c:	2000      	movs	r0, #0
 800c27e:	f04f 0c0a 	mov.w	ip, #10
 800c282:	4621      	mov	r1, r4
 800c284:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c288:	3b30      	subs	r3, #48	@ 0x30
 800c28a:	2b09      	cmp	r3, #9
 800c28c:	d94b      	bls.n	800c326 <_vfiprintf_r+0x1a2>
 800c28e:	b1b0      	cbz	r0, 800c2be <_vfiprintf_r+0x13a>
 800c290:	9207      	str	r2, [sp, #28]
 800c292:	e014      	b.n	800c2be <_vfiprintf_r+0x13a>
 800c294:	eba0 0308 	sub.w	r3, r0, r8
 800c298:	fa09 f303 	lsl.w	r3, r9, r3
 800c29c:	4313      	orrs	r3, r2
 800c29e:	9304      	str	r3, [sp, #16]
 800c2a0:	46a2      	mov	sl, r4
 800c2a2:	e7d2      	b.n	800c24a <_vfiprintf_r+0xc6>
 800c2a4:	9b03      	ldr	r3, [sp, #12]
 800c2a6:	1d19      	adds	r1, r3, #4
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	9103      	str	r1, [sp, #12]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	bfbb      	ittet	lt
 800c2b0:	425b      	neglt	r3, r3
 800c2b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c2b6:	9307      	strge	r3, [sp, #28]
 800c2b8:	9307      	strlt	r3, [sp, #28]
 800c2ba:	bfb8      	it	lt
 800c2bc:	9204      	strlt	r2, [sp, #16]
 800c2be:	7823      	ldrb	r3, [r4, #0]
 800c2c0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2c2:	d10a      	bne.n	800c2da <_vfiprintf_r+0x156>
 800c2c4:	7863      	ldrb	r3, [r4, #1]
 800c2c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2c8:	d132      	bne.n	800c330 <_vfiprintf_r+0x1ac>
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	1d1a      	adds	r2, r3, #4
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	9203      	str	r2, [sp, #12]
 800c2d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2d6:	3402      	adds	r4, #2
 800c2d8:	9305      	str	r3, [sp, #20]
 800c2da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3b0 <_vfiprintf_r+0x22c>
 800c2de:	7821      	ldrb	r1, [r4, #0]
 800c2e0:	2203      	movs	r2, #3
 800c2e2:	4650      	mov	r0, sl
 800c2e4:	f7f3 ff8c 	bl	8000200 <memchr>
 800c2e8:	b138      	cbz	r0, 800c2fa <_vfiprintf_r+0x176>
 800c2ea:	9b04      	ldr	r3, [sp, #16]
 800c2ec:	eba0 000a 	sub.w	r0, r0, sl
 800c2f0:	2240      	movs	r2, #64	@ 0x40
 800c2f2:	4082      	lsls	r2, r0
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	3401      	adds	r4, #1
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2fe:	4829      	ldr	r0, [pc, #164]	@ (800c3a4 <_vfiprintf_r+0x220>)
 800c300:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c304:	2206      	movs	r2, #6
 800c306:	f7f3 ff7b 	bl	8000200 <memchr>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d03f      	beq.n	800c38e <_vfiprintf_r+0x20a>
 800c30e:	4b26      	ldr	r3, [pc, #152]	@ (800c3a8 <_vfiprintf_r+0x224>)
 800c310:	bb1b      	cbnz	r3, 800c35a <_vfiprintf_r+0x1d6>
 800c312:	9b03      	ldr	r3, [sp, #12]
 800c314:	3307      	adds	r3, #7
 800c316:	f023 0307 	bic.w	r3, r3, #7
 800c31a:	3308      	adds	r3, #8
 800c31c:	9303      	str	r3, [sp, #12]
 800c31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c320:	443b      	add	r3, r7
 800c322:	9309      	str	r3, [sp, #36]	@ 0x24
 800c324:	e76a      	b.n	800c1fc <_vfiprintf_r+0x78>
 800c326:	fb0c 3202 	mla	r2, ip, r2, r3
 800c32a:	460c      	mov	r4, r1
 800c32c:	2001      	movs	r0, #1
 800c32e:	e7a8      	b.n	800c282 <_vfiprintf_r+0xfe>
 800c330:	2300      	movs	r3, #0
 800c332:	3401      	adds	r4, #1
 800c334:	9305      	str	r3, [sp, #20]
 800c336:	4619      	mov	r1, r3
 800c338:	f04f 0c0a 	mov.w	ip, #10
 800c33c:	4620      	mov	r0, r4
 800c33e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c342:	3a30      	subs	r2, #48	@ 0x30
 800c344:	2a09      	cmp	r2, #9
 800c346:	d903      	bls.n	800c350 <_vfiprintf_r+0x1cc>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d0c6      	beq.n	800c2da <_vfiprintf_r+0x156>
 800c34c:	9105      	str	r1, [sp, #20]
 800c34e:	e7c4      	b.n	800c2da <_vfiprintf_r+0x156>
 800c350:	fb0c 2101 	mla	r1, ip, r1, r2
 800c354:	4604      	mov	r4, r0
 800c356:	2301      	movs	r3, #1
 800c358:	e7f0      	b.n	800c33c <_vfiprintf_r+0x1b8>
 800c35a:	ab03      	add	r3, sp, #12
 800c35c:	9300      	str	r3, [sp, #0]
 800c35e:	462a      	mov	r2, r5
 800c360:	4b12      	ldr	r3, [pc, #72]	@ (800c3ac <_vfiprintf_r+0x228>)
 800c362:	a904      	add	r1, sp, #16
 800c364:	4630      	mov	r0, r6
 800c366:	f3af 8000 	nop.w
 800c36a:	4607      	mov	r7, r0
 800c36c:	1c78      	adds	r0, r7, #1
 800c36e:	d1d6      	bne.n	800c31e <_vfiprintf_r+0x19a>
 800c370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c372:	07d9      	lsls	r1, r3, #31
 800c374:	d405      	bmi.n	800c382 <_vfiprintf_r+0x1fe>
 800c376:	89ab      	ldrh	r3, [r5, #12]
 800c378:	059a      	lsls	r2, r3, #22
 800c37a:	d402      	bmi.n	800c382 <_vfiprintf_r+0x1fe>
 800c37c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c37e:	f7ff fb67 	bl	800ba50 <__retarget_lock_release_recursive>
 800c382:	89ab      	ldrh	r3, [r5, #12]
 800c384:	065b      	lsls	r3, r3, #25
 800c386:	f53f af1f 	bmi.w	800c1c8 <_vfiprintf_r+0x44>
 800c38a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c38c:	e71e      	b.n	800c1cc <_vfiprintf_r+0x48>
 800c38e:	ab03      	add	r3, sp, #12
 800c390:	9300      	str	r3, [sp, #0]
 800c392:	462a      	mov	r2, r5
 800c394:	4b05      	ldr	r3, [pc, #20]	@ (800c3ac <_vfiprintf_r+0x228>)
 800c396:	a904      	add	r1, sp, #16
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f923 	bl	800c5e4 <_printf_i>
 800c39e:	e7e4      	b.n	800c36a <_vfiprintf_r+0x1e6>
 800c3a0:	0800d430 	.word	0x0800d430
 800c3a4:	0800d43a 	.word	0x0800d43a
 800c3a8:	00000000 	.word	0x00000000
 800c3ac:	0800c15f 	.word	0x0800c15f
 800c3b0:	0800d436 	.word	0x0800d436

0800c3b4 <malloc>:
 800c3b4:	4b02      	ldr	r3, [pc, #8]	@ (800c3c0 <malloc+0xc>)
 800c3b6:	4601      	mov	r1, r0
 800c3b8:	6818      	ldr	r0, [r3, #0]
 800c3ba:	f000 b825 	b.w	800c408 <_malloc_r>
 800c3be:	bf00      	nop
 800c3c0:	20000044 	.word	0x20000044

0800c3c4 <sbrk_aligned>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	4e0f      	ldr	r6, [pc, #60]	@ (800c404 <sbrk_aligned+0x40>)
 800c3c8:	460c      	mov	r4, r1
 800c3ca:	6831      	ldr	r1, [r6, #0]
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	b911      	cbnz	r1, 800c3d6 <sbrk_aligned+0x12>
 800c3d0:	f000 fe6a 	bl	800d0a8 <_sbrk_r>
 800c3d4:	6030      	str	r0, [r6, #0]
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f000 fe65 	bl	800d0a8 <_sbrk_r>
 800c3de:	1c43      	adds	r3, r0, #1
 800c3e0:	d103      	bne.n	800c3ea <sbrk_aligned+0x26>
 800c3e2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ea:	1cc4      	adds	r4, r0, #3
 800c3ec:	f024 0403 	bic.w	r4, r4, #3
 800c3f0:	42a0      	cmp	r0, r4
 800c3f2:	d0f8      	beq.n	800c3e6 <sbrk_aligned+0x22>
 800c3f4:	1a21      	subs	r1, r4, r0
 800c3f6:	4628      	mov	r0, r5
 800c3f8:	f000 fe56 	bl	800d0a8 <_sbrk_r>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	d1f2      	bne.n	800c3e6 <sbrk_aligned+0x22>
 800c400:	e7ef      	b.n	800c3e2 <sbrk_aligned+0x1e>
 800c402:	bf00      	nop
 800c404:	20003418 	.word	0x20003418

0800c408 <_malloc_r>:
 800c408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c40c:	1ccd      	adds	r5, r1, #3
 800c40e:	f025 0503 	bic.w	r5, r5, #3
 800c412:	3508      	adds	r5, #8
 800c414:	2d0c      	cmp	r5, #12
 800c416:	bf38      	it	cc
 800c418:	250c      	movcc	r5, #12
 800c41a:	2d00      	cmp	r5, #0
 800c41c:	4606      	mov	r6, r0
 800c41e:	db01      	blt.n	800c424 <_malloc_r+0x1c>
 800c420:	42a9      	cmp	r1, r5
 800c422:	d904      	bls.n	800c42e <_malloc_r+0x26>
 800c424:	230c      	movs	r3, #12
 800c426:	6033      	str	r3, [r6, #0]
 800c428:	2000      	movs	r0, #0
 800c42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c42e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c504 <_malloc_r+0xfc>
 800c432:	f000 fc2b 	bl	800cc8c <__malloc_lock>
 800c436:	f8d8 3000 	ldr.w	r3, [r8]
 800c43a:	461c      	mov	r4, r3
 800c43c:	bb44      	cbnz	r4, 800c490 <_malloc_r+0x88>
 800c43e:	4629      	mov	r1, r5
 800c440:	4630      	mov	r0, r6
 800c442:	f7ff ffbf 	bl	800c3c4 <sbrk_aligned>
 800c446:	1c43      	adds	r3, r0, #1
 800c448:	4604      	mov	r4, r0
 800c44a:	d158      	bne.n	800c4fe <_malloc_r+0xf6>
 800c44c:	f8d8 4000 	ldr.w	r4, [r8]
 800c450:	4627      	mov	r7, r4
 800c452:	2f00      	cmp	r7, #0
 800c454:	d143      	bne.n	800c4de <_malloc_r+0xd6>
 800c456:	2c00      	cmp	r4, #0
 800c458:	d04b      	beq.n	800c4f2 <_malloc_r+0xea>
 800c45a:	6823      	ldr	r3, [r4, #0]
 800c45c:	4639      	mov	r1, r7
 800c45e:	4630      	mov	r0, r6
 800c460:	eb04 0903 	add.w	r9, r4, r3
 800c464:	f000 fe20 	bl	800d0a8 <_sbrk_r>
 800c468:	4581      	cmp	r9, r0
 800c46a:	d142      	bne.n	800c4f2 <_malloc_r+0xea>
 800c46c:	6821      	ldr	r1, [r4, #0]
 800c46e:	1a6d      	subs	r5, r5, r1
 800c470:	4629      	mov	r1, r5
 800c472:	4630      	mov	r0, r6
 800c474:	f7ff ffa6 	bl	800c3c4 <sbrk_aligned>
 800c478:	3001      	adds	r0, #1
 800c47a:	d03a      	beq.n	800c4f2 <_malloc_r+0xea>
 800c47c:	6823      	ldr	r3, [r4, #0]
 800c47e:	442b      	add	r3, r5
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	f8d8 3000 	ldr.w	r3, [r8]
 800c486:	685a      	ldr	r2, [r3, #4]
 800c488:	bb62      	cbnz	r2, 800c4e4 <_malloc_r+0xdc>
 800c48a:	f8c8 7000 	str.w	r7, [r8]
 800c48e:	e00f      	b.n	800c4b0 <_malloc_r+0xa8>
 800c490:	6822      	ldr	r2, [r4, #0]
 800c492:	1b52      	subs	r2, r2, r5
 800c494:	d420      	bmi.n	800c4d8 <_malloc_r+0xd0>
 800c496:	2a0b      	cmp	r2, #11
 800c498:	d917      	bls.n	800c4ca <_malloc_r+0xc2>
 800c49a:	1961      	adds	r1, r4, r5
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	6025      	str	r5, [r4, #0]
 800c4a0:	bf18      	it	ne
 800c4a2:	6059      	strne	r1, [r3, #4]
 800c4a4:	6863      	ldr	r3, [r4, #4]
 800c4a6:	bf08      	it	eq
 800c4a8:	f8c8 1000 	streq.w	r1, [r8]
 800c4ac:	5162      	str	r2, [r4, r5]
 800c4ae:	604b      	str	r3, [r1, #4]
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f000 fbf1 	bl	800cc98 <__malloc_unlock>
 800c4b6:	f104 000b 	add.w	r0, r4, #11
 800c4ba:	1d23      	adds	r3, r4, #4
 800c4bc:	f020 0007 	bic.w	r0, r0, #7
 800c4c0:	1ac2      	subs	r2, r0, r3
 800c4c2:	bf1c      	itt	ne
 800c4c4:	1a1b      	subne	r3, r3, r0
 800c4c6:	50a3      	strne	r3, [r4, r2]
 800c4c8:	e7af      	b.n	800c42a <_malloc_r+0x22>
 800c4ca:	6862      	ldr	r2, [r4, #4]
 800c4cc:	42a3      	cmp	r3, r4
 800c4ce:	bf0c      	ite	eq
 800c4d0:	f8c8 2000 	streq.w	r2, [r8]
 800c4d4:	605a      	strne	r2, [r3, #4]
 800c4d6:	e7eb      	b.n	800c4b0 <_malloc_r+0xa8>
 800c4d8:	4623      	mov	r3, r4
 800c4da:	6864      	ldr	r4, [r4, #4]
 800c4dc:	e7ae      	b.n	800c43c <_malloc_r+0x34>
 800c4de:	463c      	mov	r4, r7
 800c4e0:	687f      	ldr	r7, [r7, #4]
 800c4e2:	e7b6      	b.n	800c452 <_malloc_r+0x4a>
 800c4e4:	461a      	mov	r2, r3
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	42a3      	cmp	r3, r4
 800c4ea:	d1fb      	bne.n	800c4e4 <_malloc_r+0xdc>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	6053      	str	r3, [r2, #4]
 800c4f0:	e7de      	b.n	800c4b0 <_malloc_r+0xa8>
 800c4f2:	230c      	movs	r3, #12
 800c4f4:	6033      	str	r3, [r6, #0]
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f000 fbce 	bl	800cc98 <__malloc_unlock>
 800c4fc:	e794      	b.n	800c428 <_malloc_r+0x20>
 800c4fe:	6005      	str	r5, [r0, #0]
 800c500:	e7d6      	b.n	800c4b0 <_malloc_r+0xa8>
 800c502:	bf00      	nop
 800c504:	2000341c 	.word	0x2000341c

0800c508 <_printf_common>:
 800c508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c50c:	4616      	mov	r6, r2
 800c50e:	4698      	mov	r8, r3
 800c510:	688a      	ldr	r2, [r1, #8]
 800c512:	690b      	ldr	r3, [r1, #16]
 800c514:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c518:	4293      	cmp	r3, r2
 800c51a:	bfb8      	it	lt
 800c51c:	4613      	movlt	r3, r2
 800c51e:	6033      	str	r3, [r6, #0]
 800c520:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c524:	4607      	mov	r7, r0
 800c526:	460c      	mov	r4, r1
 800c528:	b10a      	cbz	r2, 800c52e <_printf_common+0x26>
 800c52a:	3301      	adds	r3, #1
 800c52c:	6033      	str	r3, [r6, #0]
 800c52e:	6823      	ldr	r3, [r4, #0]
 800c530:	0699      	lsls	r1, r3, #26
 800c532:	bf42      	ittt	mi
 800c534:	6833      	ldrmi	r3, [r6, #0]
 800c536:	3302      	addmi	r3, #2
 800c538:	6033      	strmi	r3, [r6, #0]
 800c53a:	6825      	ldr	r5, [r4, #0]
 800c53c:	f015 0506 	ands.w	r5, r5, #6
 800c540:	d106      	bne.n	800c550 <_printf_common+0x48>
 800c542:	f104 0a19 	add.w	sl, r4, #25
 800c546:	68e3      	ldr	r3, [r4, #12]
 800c548:	6832      	ldr	r2, [r6, #0]
 800c54a:	1a9b      	subs	r3, r3, r2
 800c54c:	42ab      	cmp	r3, r5
 800c54e:	dc26      	bgt.n	800c59e <_printf_common+0x96>
 800c550:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c554:	6822      	ldr	r2, [r4, #0]
 800c556:	3b00      	subs	r3, #0
 800c558:	bf18      	it	ne
 800c55a:	2301      	movne	r3, #1
 800c55c:	0692      	lsls	r2, r2, #26
 800c55e:	d42b      	bmi.n	800c5b8 <_printf_common+0xb0>
 800c560:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c564:	4641      	mov	r1, r8
 800c566:	4638      	mov	r0, r7
 800c568:	47c8      	blx	r9
 800c56a:	3001      	adds	r0, #1
 800c56c:	d01e      	beq.n	800c5ac <_printf_common+0xa4>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	6922      	ldr	r2, [r4, #16]
 800c572:	f003 0306 	and.w	r3, r3, #6
 800c576:	2b04      	cmp	r3, #4
 800c578:	bf02      	ittt	eq
 800c57a:	68e5      	ldreq	r5, [r4, #12]
 800c57c:	6833      	ldreq	r3, [r6, #0]
 800c57e:	1aed      	subeq	r5, r5, r3
 800c580:	68a3      	ldr	r3, [r4, #8]
 800c582:	bf0c      	ite	eq
 800c584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c588:	2500      	movne	r5, #0
 800c58a:	4293      	cmp	r3, r2
 800c58c:	bfc4      	itt	gt
 800c58e:	1a9b      	subgt	r3, r3, r2
 800c590:	18ed      	addgt	r5, r5, r3
 800c592:	2600      	movs	r6, #0
 800c594:	341a      	adds	r4, #26
 800c596:	42b5      	cmp	r5, r6
 800c598:	d11a      	bne.n	800c5d0 <_printf_common+0xc8>
 800c59a:	2000      	movs	r0, #0
 800c59c:	e008      	b.n	800c5b0 <_printf_common+0xa8>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	4652      	mov	r2, sl
 800c5a2:	4641      	mov	r1, r8
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	47c8      	blx	r9
 800c5a8:	3001      	adds	r0, #1
 800c5aa:	d103      	bne.n	800c5b4 <_printf_common+0xac>
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b4:	3501      	adds	r5, #1
 800c5b6:	e7c6      	b.n	800c546 <_printf_common+0x3e>
 800c5b8:	18e1      	adds	r1, r4, r3
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	2030      	movs	r0, #48	@ 0x30
 800c5be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5c2:	4422      	add	r2, r4
 800c5c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5cc:	3302      	adds	r3, #2
 800c5ce:	e7c7      	b.n	800c560 <_printf_common+0x58>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	4622      	mov	r2, r4
 800c5d4:	4641      	mov	r1, r8
 800c5d6:	4638      	mov	r0, r7
 800c5d8:	47c8      	blx	r9
 800c5da:	3001      	adds	r0, #1
 800c5dc:	d0e6      	beq.n	800c5ac <_printf_common+0xa4>
 800c5de:	3601      	adds	r6, #1
 800c5e0:	e7d9      	b.n	800c596 <_printf_common+0x8e>
	...

0800c5e4 <_printf_i>:
 800c5e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e8:	7e0f      	ldrb	r7, [r1, #24]
 800c5ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c5ec:	2f78      	cmp	r7, #120	@ 0x78
 800c5ee:	4691      	mov	r9, r2
 800c5f0:	4680      	mov	r8, r0
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	469a      	mov	sl, r3
 800c5f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c5fa:	d807      	bhi.n	800c60c <_printf_i+0x28>
 800c5fc:	2f62      	cmp	r7, #98	@ 0x62
 800c5fe:	d80a      	bhi.n	800c616 <_printf_i+0x32>
 800c600:	2f00      	cmp	r7, #0
 800c602:	f000 80d2 	beq.w	800c7aa <_printf_i+0x1c6>
 800c606:	2f58      	cmp	r7, #88	@ 0x58
 800c608:	f000 80b9 	beq.w	800c77e <_printf_i+0x19a>
 800c60c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c614:	e03a      	b.n	800c68c <_printf_i+0xa8>
 800c616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c61a:	2b15      	cmp	r3, #21
 800c61c:	d8f6      	bhi.n	800c60c <_printf_i+0x28>
 800c61e:	a101      	add	r1, pc, #4	@ (adr r1, 800c624 <_printf_i+0x40>)
 800c620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c624:	0800c67d 	.word	0x0800c67d
 800c628:	0800c691 	.word	0x0800c691
 800c62c:	0800c60d 	.word	0x0800c60d
 800c630:	0800c60d 	.word	0x0800c60d
 800c634:	0800c60d 	.word	0x0800c60d
 800c638:	0800c60d 	.word	0x0800c60d
 800c63c:	0800c691 	.word	0x0800c691
 800c640:	0800c60d 	.word	0x0800c60d
 800c644:	0800c60d 	.word	0x0800c60d
 800c648:	0800c60d 	.word	0x0800c60d
 800c64c:	0800c60d 	.word	0x0800c60d
 800c650:	0800c791 	.word	0x0800c791
 800c654:	0800c6bb 	.word	0x0800c6bb
 800c658:	0800c74b 	.word	0x0800c74b
 800c65c:	0800c60d 	.word	0x0800c60d
 800c660:	0800c60d 	.word	0x0800c60d
 800c664:	0800c7b3 	.word	0x0800c7b3
 800c668:	0800c60d 	.word	0x0800c60d
 800c66c:	0800c6bb 	.word	0x0800c6bb
 800c670:	0800c60d 	.word	0x0800c60d
 800c674:	0800c60d 	.word	0x0800c60d
 800c678:	0800c753 	.word	0x0800c753
 800c67c:	6833      	ldr	r3, [r6, #0]
 800c67e:	1d1a      	adds	r2, r3, #4
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6032      	str	r2, [r6, #0]
 800c684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c68c:	2301      	movs	r3, #1
 800c68e:	e09d      	b.n	800c7cc <_printf_i+0x1e8>
 800c690:	6833      	ldr	r3, [r6, #0]
 800c692:	6820      	ldr	r0, [r4, #0]
 800c694:	1d19      	adds	r1, r3, #4
 800c696:	6031      	str	r1, [r6, #0]
 800c698:	0606      	lsls	r6, r0, #24
 800c69a:	d501      	bpl.n	800c6a0 <_printf_i+0xbc>
 800c69c:	681d      	ldr	r5, [r3, #0]
 800c69e:	e003      	b.n	800c6a8 <_printf_i+0xc4>
 800c6a0:	0645      	lsls	r5, r0, #25
 800c6a2:	d5fb      	bpl.n	800c69c <_printf_i+0xb8>
 800c6a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6a8:	2d00      	cmp	r5, #0
 800c6aa:	da03      	bge.n	800c6b4 <_printf_i+0xd0>
 800c6ac:	232d      	movs	r3, #45	@ 0x2d
 800c6ae:	426d      	negs	r5, r5
 800c6b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6b4:	4859      	ldr	r0, [pc, #356]	@ (800c81c <_printf_i+0x238>)
 800c6b6:	230a      	movs	r3, #10
 800c6b8:	e011      	b.n	800c6de <_printf_i+0xfa>
 800c6ba:	6821      	ldr	r1, [r4, #0]
 800c6bc:	6833      	ldr	r3, [r6, #0]
 800c6be:	0608      	lsls	r0, r1, #24
 800c6c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6c4:	d402      	bmi.n	800c6cc <_printf_i+0xe8>
 800c6c6:	0649      	lsls	r1, r1, #25
 800c6c8:	bf48      	it	mi
 800c6ca:	b2ad      	uxthmi	r5, r5
 800c6cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6ce:	4853      	ldr	r0, [pc, #332]	@ (800c81c <_printf_i+0x238>)
 800c6d0:	6033      	str	r3, [r6, #0]
 800c6d2:	bf14      	ite	ne
 800c6d4:	230a      	movne	r3, #10
 800c6d6:	2308      	moveq	r3, #8
 800c6d8:	2100      	movs	r1, #0
 800c6da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c6de:	6866      	ldr	r6, [r4, #4]
 800c6e0:	60a6      	str	r6, [r4, #8]
 800c6e2:	2e00      	cmp	r6, #0
 800c6e4:	bfa2      	ittt	ge
 800c6e6:	6821      	ldrge	r1, [r4, #0]
 800c6e8:	f021 0104 	bicge.w	r1, r1, #4
 800c6ec:	6021      	strge	r1, [r4, #0]
 800c6ee:	b90d      	cbnz	r5, 800c6f4 <_printf_i+0x110>
 800c6f0:	2e00      	cmp	r6, #0
 800c6f2:	d04b      	beq.n	800c78c <_printf_i+0x1a8>
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	fbb5 f1f3 	udiv	r1, r5, r3
 800c6fa:	fb03 5711 	mls	r7, r3, r1, r5
 800c6fe:	5dc7      	ldrb	r7, [r0, r7]
 800c700:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c704:	462f      	mov	r7, r5
 800c706:	42bb      	cmp	r3, r7
 800c708:	460d      	mov	r5, r1
 800c70a:	d9f4      	bls.n	800c6f6 <_printf_i+0x112>
 800c70c:	2b08      	cmp	r3, #8
 800c70e:	d10b      	bne.n	800c728 <_printf_i+0x144>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	07df      	lsls	r7, r3, #31
 800c714:	d508      	bpl.n	800c728 <_printf_i+0x144>
 800c716:	6923      	ldr	r3, [r4, #16]
 800c718:	6861      	ldr	r1, [r4, #4]
 800c71a:	4299      	cmp	r1, r3
 800c71c:	bfde      	ittt	le
 800c71e:	2330      	movle	r3, #48	@ 0x30
 800c720:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c724:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c728:	1b92      	subs	r2, r2, r6
 800c72a:	6122      	str	r2, [r4, #16]
 800c72c:	f8cd a000 	str.w	sl, [sp]
 800c730:	464b      	mov	r3, r9
 800c732:	aa03      	add	r2, sp, #12
 800c734:	4621      	mov	r1, r4
 800c736:	4640      	mov	r0, r8
 800c738:	f7ff fee6 	bl	800c508 <_printf_common>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d14a      	bne.n	800c7d6 <_printf_i+0x1f2>
 800c740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c744:	b004      	add	sp, #16
 800c746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	f043 0320 	orr.w	r3, r3, #32
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	4833      	ldr	r0, [pc, #204]	@ (800c820 <_printf_i+0x23c>)
 800c754:	2778      	movs	r7, #120	@ 0x78
 800c756:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c75a:	6823      	ldr	r3, [r4, #0]
 800c75c:	6831      	ldr	r1, [r6, #0]
 800c75e:	061f      	lsls	r7, r3, #24
 800c760:	f851 5b04 	ldr.w	r5, [r1], #4
 800c764:	d402      	bmi.n	800c76c <_printf_i+0x188>
 800c766:	065f      	lsls	r7, r3, #25
 800c768:	bf48      	it	mi
 800c76a:	b2ad      	uxthmi	r5, r5
 800c76c:	6031      	str	r1, [r6, #0]
 800c76e:	07d9      	lsls	r1, r3, #31
 800c770:	bf44      	itt	mi
 800c772:	f043 0320 	orrmi.w	r3, r3, #32
 800c776:	6023      	strmi	r3, [r4, #0]
 800c778:	b11d      	cbz	r5, 800c782 <_printf_i+0x19e>
 800c77a:	2310      	movs	r3, #16
 800c77c:	e7ac      	b.n	800c6d8 <_printf_i+0xf4>
 800c77e:	4827      	ldr	r0, [pc, #156]	@ (800c81c <_printf_i+0x238>)
 800c780:	e7e9      	b.n	800c756 <_printf_i+0x172>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	f023 0320 	bic.w	r3, r3, #32
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	e7f6      	b.n	800c77a <_printf_i+0x196>
 800c78c:	4616      	mov	r6, r2
 800c78e:	e7bd      	b.n	800c70c <_printf_i+0x128>
 800c790:	6833      	ldr	r3, [r6, #0]
 800c792:	6825      	ldr	r5, [r4, #0]
 800c794:	6961      	ldr	r1, [r4, #20]
 800c796:	1d18      	adds	r0, r3, #4
 800c798:	6030      	str	r0, [r6, #0]
 800c79a:	062e      	lsls	r6, r5, #24
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	d501      	bpl.n	800c7a4 <_printf_i+0x1c0>
 800c7a0:	6019      	str	r1, [r3, #0]
 800c7a2:	e002      	b.n	800c7aa <_printf_i+0x1c6>
 800c7a4:	0668      	lsls	r0, r5, #25
 800c7a6:	d5fb      	bpl.n	800c7a0 <_printf_i+0x1bc>
 800c7a8:	8019      	strh	r1, [r3, #0]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	6123      	str	r3, [r4, #16]
 800c7ae:	4616      	mov	r6, r2
 800c7b0:	e7bc      	b.n	800c72c <_printf_i+0x148>
 800c7b2:	6833      	ldr	r3, [r6, #0]
 800c7b4:	1d1a      	adds	r2, r3, #4
 800c7b6:	6032      	str	r2, [r6, #0]
 800c7b8:	681e      	ldr	r6, [r3, #0]
 800c7ba:	6862      	ldr	r2, [r4, #4]
 800c7bc:	2100      	movs	r1, #0
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7f3 fd1e 	bl	8000200 <memchr>
 800c7c4:	b108      	cbz	r0, 800c7ca <_printf_i+0x1e6>
 800c7c6:	1b80      	subs	r0, r0, r6
 800c7c8:	6060      	str	r0, [r4, #4]
 800c7ca:	6863      	ldr	r3, [r4, #4]
 800c7cc:	6123      	str	r3, [r4, #16]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7d4:	e7aa      	b.n	800c72c <_printf_i+0x148>
 800c7d6:	6923      	ldr	r3, [r4, #16]
 800c7d8:	4632      	mov	r2, r6
 800c7da:	4649      	mov	r1, r9
 800c7dc:	4640      	mov	r0, r8
 800c7de:	47d0      	blx	sl
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d0ad      	beq.n	800c740 <_printf_i+0x15c>
 800c7e4:	6823      	ldr	r3, [r4, #0]
 800c7e6:	079b      	lsls	r3, r3, #30
 800c7e8:	d413      	bmi.n	800c812 <_printf_i+0x22e>
 800c7ea:	68e0      	ldr	r0, [r4, #12]
 800c7ec:	9b03      	ldr	r3, [sp, #12]
 800c7ee:	4298      	cmp	r0, r3
 800c7f0:	bfb8      	it	lt
 800c7f2:	4618      	movlt	r0, r3
 800c7f4:	e7a6      	b.n	800c744 <_printf_i+0x160>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4632      	mov	r2, r6
 800c7fa:	4649      	mov	r1, r9
 800c7fc:	4640      	mov	r0, r8
 800c7fe:	47d0      	blx	sl
 800c800:	3001      	adds	r0, #1
 800c802:	d09d      	beq.n	800c740 <_printf_i+0x15c>
 800c804:	3501      	adds	r5, #1
 800c806:	68e3      	ldr	r3, [r4, #12]
 800c808:	9903      	ldr	r1, [sp, #12]
 800c80a:	1a5b      	subs	r3, r3, r1
 800c80c:	42ab      	cmp	r3, r5
 800c80e:	dcf2      	bgt.n	800c7f6 <_printf_i+0x212>
 800c810:	e7eb      	b.n	800c7ea <_printf_i+0x206>
 800c812:	2500      	movs	r5, #0
 800c814:	f104 0619 	add.w	r6, r4, #25
 800c818:	e7f5      	b.n	800c806 <_printf_i+0x222>
 800c81a:	bf00      	nop
 800c81c:	0800d441 	.word	0x0800d441
 800c820:	0800d452 	.word	0x0800d452

0800c824 <_scanf_chars>:
 800c824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c828:	4615      	mov	r5, r2
 800c82a:	688a      	ldr	r2, [r1, #8]
 800c82c:	4680      	mov	r8, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b932      	cbnz	r2, 800c840 <_scanf_chars+0x1c>
 800c832:	698a      	ldr	r2, [r1, #24]
 800c834:	2a00      	cmp	r2, #0
 800c836:	bf14      	ite	ne
 800c838:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800c83c:	2201      	moveq	r2, #1
 800c83e:	608a      	str	r2, [r1, #8]
 800c840:	6822      	ldr	r2, [r4, #0]
 800c842:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c8d4 <_scanf_chars+0xb0>
 800c846:	06d1      	lsls	r1, r2, #27
 800c848:	bf5f      	itttt	pl
 800c84a:	681a      	ldrpl	r2, [r3, #0]
 800c84c:	1d11      	addpl	r1, r2, #4
 800c84e:	6019      	strpl	r1, [r3, #0]
 800c850:	6816      	ldrpl	r6, [r2, #0]
 800c852:	2700      	movs	r7, #0
 800c854:	69a0      	ldr	r0, [r4, #24]
 800c856:	b188      	cbz	r0, 800c87c <_scanf_chars+0x58>
 800c858:	2801      	cmp	r0, #1
 800c85a:	d107      	bne.n	800c86c <_scanf_chars+0x48>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	781a      	ldrb	r2, [r3, #0]
 800c860:	6963      	ldr	r3, [r4, #20]
 800c862:	5c9b      	ldrb	r3, [r3, r2]
 800c864:	b953      	cbnz	r3, 800c87c <_scanf_chars+0x58>
 800c866:	2f00      	cmp	r7, #0
 800c868:	d031      	beq.n	800c8ce <_scanf_chars+0xaa>
 800c86a:	e022      	b.n	800c8b2 <_scanf_chars+0x8e>
 800c86c:	2802      	cmp	r0, #2
 800c86e:	d120      	bne.n	800c8b2 <_scanf_chars+0x8e>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c878:	071b      	lsls	r3, r3, #28
 800c87a:	d41a      	bmi.n	800c8b2 <_scanf_chars+0x8e>
 800c87c:	6823      	ldr	r3, [r4, #0]
 800c87e:	06da      	lsls	r2, r3, #27
 800c880:	bf5e      	ittt	pl
 800c882:	682b      	ldrpl	r3, [r5, #0]
 800c884:	781b      	ldrbpl	r3, [r3, #0]
 800c886:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c88a:	682a      	ldr	r2, [r5, #0]
 800c88c:	686b      	ldr	r3, [r5, #4]
 800c88e:	3201      	adds	r2, #1
 800c890:	602a      	str	r2, [r5, #0]
 800c892:	68a2      	ldr	r2, [r4, #8]
 800c894:	3b01      	subs	r3, #1
 800c896:	3a01      	subs	r2, #1
 800c898:	606b      	str	r3, [r5, #4]
 800c89a:	3701      	adds	r7, #1
 800c89c:	60a2      	str	r2, [r4, #8]
 800c89e:	b142      	cbz	r2, 800c8b2 <_scanf_chars+0x8e>
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dcd7      	bgt.n	800c854 <_scanf_chars+0x30>
 800c8a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4798      	blx	r3
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0d0      	beq.n	800c854 <_scanf_chars+0x30>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	f013 0310 	ands.w	r3, r3, #16
 800c8b8:	d105      	bne.n	800c8c6 <_scanf_chars+0xa2>
 800c8ba:	68e2      	ldr	r2, [r4, #12]
 800c8bc:	3201      	adds	r2, #1
 800c8be:	60e2      	str	r2, [r4, #12]
 800c8c0:	69a2      	ldr	r2, [r4, #24]
 800c8c2:	b102      	cbz	r2, 800c8c6 <_scanf_chars+0xa2>
 800c8c4:	7033      	strb	r3, [r6, #0]
 800c8c6:	6923      	ldr	r3, [r4, #16]
 800c8c8:	443b      	add	r3, r7
 800c8ca:	6123      	str	r3, [r4, #16]
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8d2:	bf00      	nop
 800c8d4:	0800d47f 	.word	0x0800d47f

0800c8d8 <_scanf_i>:
 800c8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8dc:	4698      	mov	r8, r3
 800c8de:	4b74      	ldr	r3, [pc, #464]	@ (800cab0 <_scanf_i+0x1d8>)
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	4682      	mov	sl, r0
 800c8e4:	4616      	mov	r6, r2
 800c8e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	ab03      	add	r3, sp, #12
 800c8ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c8f2:	4b70      	ldr	r3, [pc, #448]	@ (800cab4 <_scanf_i+0x1dc>)
 800c8f4:	69a1      	ldr	r1, [r4, #24]
 800c8f6:	4a70      	ldr	r2, [pc, #448]	@ (800cab8 <_scanf_i+0x1e0>)
 800c8f8:	2903      	cmp	r1, #3
 800c8fa:	bf08      	it	eq
 800c8fc:	461a      	moveq	r2, r3
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	9201      	str	r2, [sp, #4]
 800c902:	1e5a      	subs	r2, r3, #1
 800c904:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c908:	bf88      	it	hi
 800c90a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c90e:	4627      	mov	r7, r4
 800c910:	bf82      	ittt	hi
 800c912:	eb03 0905 	addhi.w	r9, r3, r5
 800c916:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c91a:	60a3      	strhi	r3, [r4, #8]
 800c91c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c920:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c924:	bf98      	it	ls
 800c926:	f04f 0900 	movls.w	r9, #0
 800c92a:	6023      	str	r3, [r4, #0]
 800c92c:	463d      	mov	r5, r7
 800c92e:	f04f 0b00 	mov.w	fp, #0
 800c932:	6831      	ldr	r1, [r6, #0]
 800c934:	ab03      	add	r3, sp, #12
 800c936:	7809      	ldrb	r1, [r1, #0]
 800c938:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c93c:	2202      	movs	r2, #2
 800c93e:	f7f3 fc5f 	bl	8000200 <memchr>
 800c942:	b328      	cbz	r0, 800c990 <_scanf_i+0xb8>
 800c944:	f1bb 0f01 	cmp.w	fp, #1
 800c948:	d159      	bne.n	800c9fe <_scanf_i+0x126>
 800c94a:	6862      	ldr	r2, [r4, #4]
 800c94c:	b92a      	cbnz	r2, 800c95a <_scanf_i+0x82>
 800c94e:	6822      	ldr	r2, [r4, #0]
 800c950:	2108      	movs	r1, #8
 800c952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c956:	6061      	str	r1, [r4, #4]
 800c958:	6022      	str	r2, [r4, #0]
 800c95a:	6822      	ldr	r2, [r4, #0]
 800c95c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c960:	6022      	str	r2, [r4, #0]
 800c962:	68a2      	ldr	r2, [r4, #8]
 800c964:	1e51      	subs	r1, r2, #1
 800c966:	60a1      	str	r1, [r4, #8]
 800c968:	b192      	cbz	r2, 800c990 <_scanf_i+0xb8>
 800c96a:	6832      	ldr	r2, [r6, #0]
 800c96c:	1c51      	adds	r1, r2, #1
 800c96e:	6031      	str	r1, [r6, #0]
 800c970:	7812      	ldrb	r2, [r2, #0]
 800c972:	f805 2b01 	strb.w	r2, [r5], #1
 800c976:	6872      	ldr	r2, [r6, #4]
 800c978:	3a01      	subs	r2, #1
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	6072      	str	r2, [r6, #4]
 800c97e:	dc07      	bgt.n	800c990 <_scanf_i+0xb8>
 800c980:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c984:	4631      	mov	r1, r6
 800c986:	4650      	mov	r0, sl
 800c988:	4790      	blx	r2
 800c98a:	2800      	cmp	r0, #0
 800c98c:	f040 8085 	bne.w	800ca9a <_scanf_i+0x1c2>
 800c990:	f10b 0b01 	add.w	fp, fp, #1
 800c994:	f1bb 0f03 	cmp.w	fp, #3
 800c998:	d1cb      	bne.n	800c932 <_scanf_i+0x5a>
 800c99a:	6863      	ldr	r3, [r4, #4]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <_scanf_i+0xca>
 800c99e:	230a      	movs	r3, #10
 800c9a0:	6063      	str	r3, [r4, #4]
 800c9a2:	6863      	ldr	r3, [r4, #4]
 800c9a4:	4945      	ldr	r1, [pc, #276]	@ (800cabc <_scanf_i+0x1e4>)
 800c9a6:	6960      	ldr	r0, [r4, #20]
 800c9a8:	1ac9      	subs	r1, r1, r3
 800c9aa:	f000 f889 	bl	800cac0 <__sccl>
 800c9ae:	f04f 0b00 	mov.w	fp, #0
 800c9b2:	68a3      	ldr	r3, [r4, #8]
 800c9b4:	6822      	ldr	r2, [r4, #0]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d03d      	beq.n	800ca36 <_scanf_i+0x15e>
 800c9ba:	6831      	ldr	r1, [r6, #0]
 800c9bc:	6960      	ldr	r0, [r4, #20]
 800c9be:	f891 c000 	ldrb.w	ip, [r1]
 800c9c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d035      	beq.n	800ca36 <_scanf_i+0x15e>
 800c9ca:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c9ce:	d124      	bne.n	800ca1a <_scanf_i+0x142>
 800c9d0:	0510      	lsls	r0, r2, #20
 800c9d2:	d522      	bpl.n	800ca1a <_scanf_i+0x142>
 800c9d4:	f10b 0b01 	add.w	fp, fp, #1
 800c9d8:	f1b9 0f00 	cmp.w	r9, #0
 800c9dc:	d003      	beq.n	800c9e6 <_scanf_i+0x10e>
 800c9de:	3301      	adds	r3, #1
 800c9e0:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800c9e4:	60a3      	str	r3, [r4, #8]
 800c9e6:	6873      	ldr	r3, [r6, #4]
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	6073      	str	r3, [r6, #4]
 800c9ee:	dd1b      	ble.n	800ca28 <_scanf_i+0x150>
 800c9f0:	6833      	ldr	r3, [r6, #0]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	6033      	str	r3, [r6, #0]
 800c9f6:	68a3      	ldr	r3, [r4, #8]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	60a3      	str	r3, [r4, #8]
 800c9fc:	e7d9      	b.n	800c9b2 <_scanf_i+0xda>
 800c9fe:	f1bb 0f02 	cmp.w	fp, #2
 800ca02:	d1ae      	bne.n	800c962 <_scanf_i+0x8a>
 800ca04:	6822      	ldr	r2, [r4, #0]
 800ca06:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ca0a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ca0e:	d1bf      	bne.n	800c990 <_scanf_i+0xb8>
 800ca10:	2110      	movs	r1, #16
 800ca12:	6061      	str	r1, [r4, #4]
 800ca14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca18:	e7a2      	b.n	800c960 <_scanf_i+0x88>
 800ca1a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ca1e:	6022      	str	r2, [r4, #0]
 800ca20:	780b      	ldrb	r3, [r1, #0]
 800ca22:	f805 3b01 	strb.w	r3, [r5], #1
 800ca26:	e7de      	b.n	800c9e6 <_scanf_i+0x10e>
 800ca28:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4650      	mov	r0, sl
 800ca30:	4798      	blx	r3
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d0df      	beq.n	800c9f6 <_scanf_i+0x11e>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	05d9      	lsls	r1, r3, #23
 800ca3a:	d50d      	bpl.n	800ca58 <_scanf_i+0x180>
 800ca3c:	42bd      	cmp	r5, r7
 800ca3e:	d909      	bls.n	800ca54 <_scanf_i+0x17c>
 800ca40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4650      	mov	r0, sl
 800ca4c:	4798      	blx	r3
 800ca4e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ca52:	464d      	mov	r5, r9
 800ca54:	42bd      	cmp	r5, r7
 800ca56:	d028      	beq.n	800caaa <_scanf_i+0x1d2>
 800ca58:	6822      	ldr	r2, [r4, #0]
 800ca5a:	f012 0210 	ands.w	r2, r2, #16
 800ca5e:	d113      	bne.n	800ca88 <_scanf_i+0x1b0>
 800ca60:	702a      	strb	r2, [r5, #0]
 800ca62:	6863      	ldr	r3, [r4, #4]
 800ca64:	9e01      	ldr	r6, [sp, #4]
 800ca66:	4639      	mov	r1, r7
 800ca68:	4650      	mov	r0, sl
 800ca6a:	47b0      	blx	r6
 800ca6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca70:	6821      	ldr	r1, [r4, #0]
 800ca72:	1d1a      	adds	r2, r3, #4
 800ca74:	f8c8 2000 	str.w	r2, [r8]
 800ca78:	f011 0f20 	tst.w	r1, #32
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	d00f      	beq.n	800caa0 <_scanf_i+0x1c8>
 800ca80:	6018      	str	r0, [r3, #0]
 800ca82:	68e3      	ldr	r3, [r4, #12]
 800ca84:	3301      	adds	r3, #1
 800ca86:	60e3      	str	r3, [r4, #12]
 800ca88:	6923      	ldr	r3, [r4, #16]
 800ca8a:	1bed      	subs	r5, r5, r7
 800ca8c:	445d      	add	r5, fp
 800ca8e:	442b      	add	r3, r5
 800ca90:	6123      	str	r3, [r4, #16]
 800ca92:	2000      	movs	r0, #0
 800ca94:	b007      	add	sp, #28
 800ca96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9a:	f04f 0b00 	mov.w	fp, #0
 800ca9e:	e7ca      	b.n	800ca36 <_scanf_i+0x15e>
 800caa0:	07ca      	lsls	r2, r1, #31
 800caa2:	bf4c      	ite	mi
 800caa4:	8018      	strhmi	r0, [r3, #0]
 800caa6:	6018      	strpl	r0, [r3, #0]
 800caa8:	e7eb      	b.n	800ca82 <_scanf_i+0x1aa>
 800caaa:	2001      	movs	r0, #1
 800caac:	e7f2      	b.n	800ca94 <_scanf_i+0x1bc>
 800caae:	bf00      	nop
 800cab0:	0800d348 	.word	0x0800d348
 800cab4:	0800ce69 	.word	0x0800ce69
 800cab8:	0800cf49 	.word	0x0800cf49
 800cabc:	0800d473 	.word	0x0800d473

0800cac0 <__sccl>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	780b      	ldrb	r3, [r1, #0]
 800cac4:	4604      	mov	r4, r0
 800cac6:	2b5e      	cmp	r3, #94	@ 0x5e
 800cac8:	bf0b      	itete	eq
 800caca:	784b      	ldrbeq	r3, [r1, #1]
 800cacc:	1c4a      	addne	r2, r1, #1
 800cace:	1c8a      	addeq	r2, r1, #2
 800cad0:	2100      	movne	r1, #0
 800cad2:	bf08      	it	eq
 800cad4:	2101      	moveq	r1, #1
 800cad6:	3801      	subs	r0, #1
 800cad8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800cadc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cae0:	42a8      	cmp	r0, r5
 800cae2:	d1fb      	bne.n	800cadc <__sccl+0x1c>
 800cae4:	b90b      	cbnz	r3, 800caea <__sccl+0x2a>
 800cae6:	1e50      	subs	r0, r2, #1
 800cae8:	bd70      	pop	{r4, r5, r6, pc}
 800caea:	f081 0101 	eor.w	r1, r1, #1
 800caee:	54e1      	strb	r1, [r4, r3]
 800caf0:	4610      	mov	r0, r2
 800caf2:	4602      	mov	r2, r0
 800caf4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800caf8:	2d2d      	cmp	r5, #45	@ 0x2d
 800cafa:	d005      	beq.n	800cb08 <__sccl+0x48>
 800cafc:	2d5d      	cmp	r5, #93	@ 0x5d
 800cafe:	d016      	beq.n	800cb2e <__sccl+0x6e>
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	d0f1      	beq.n	800cae8 <__sccl+0x28>
 800cb04:	462b      	mov	r3, r5
 800cb06:	e7f2      	b.n	800caee <__sccl+0x2e>
 800cb08:	7846      	ldrb	r6, [r0, #1]
 800cb0a:	2e5d      	cmp	r6, #93	@ 0x5d
 800cb0c:	d0fa      	beq.n	800cb04 <__sccl+0x44>
 800cb0e:	42b3      	cmp	r3, r6
 800cb10:	dcf8      	bgt.n	800cb04 <__sccl+0x44>
 800cb12:	3002      	adds	r0, #2
 800cb14:	461a      	mov	r2, r3
 800cb16:	3201      	adds	r2, #1
 800cb18:	4296      	cmp	r6, r2
 800cb1a:	54a1      	strb	r1, [r4, r2]
 800cb1c:	dcfb      	bgt.n	800cb16 <__sccl+0x56>
 800cb1e:	1af2      	subs	r2, r6, r3
 800cb20:	3a01      	subs	r2, #1
 800cb22:	1c5d      	adds	r5, r3, #1
 800cb24:	42b3      	cmp	r3, r6
 800cb26:	bfa8      	it	ge
 800cb28:	2200      	movge	r2, #0
 800cb2a:	18ab      	adds	r3, r5, r2
 800cb2c:	e7e1      	b.n	800caf2 <__sccl+0x32>
 800cb2e:	4610      	mov	r0, r2
 800cb30:	e7da      	b.n	800cae8 <__sccl+0x28>
	...

0800cb34 <__sflush_r>:
 800cb34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3c:	0716      	lsls	r6, r2, #28
 800cb3e:	4605      	mov	r5, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	d454      	bmi.n	800cbee <__sflush_r+0xba>
 800cb44:	684b      	ldr	r3, [r1, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	dc02      	bgt.n	800cb50 <__sflush_r+0x1c>
 800cb4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	dd48      	ble.n	800cbe2 <__sflush_r+0xae>
 800cb50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb52:	2e00      	cmp	r6, #0
 800cb54:	d045      	beq.n	800cbe2 <__sflush_r+0xae>
 800cb56:	2300      	movs	r3, #0
 800cb58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb5c:	682f      	ldr	r7, [r5, #0]
 800cb5e:	6a21      	ldr	r1, [r4, #32]
 800cb60:	602b      	str	r3, [r5, #0]
 800cb62:	d030      	beq.n	800cbc6 <__sflush_r+0x92>
 800cb64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	0759      	lsls	r1, r3, #29
 800cb6a:	d505      	bpl.n	800cb78 <__sflush_r+0x44>
 800cb6c:	6863      	ldr	r3, [r4, #4]
 800cb6e:	1ad2      	subs	r2, r2, r3
 800cb70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb72:	b10b      	cbz	r3, 800cb78 <__sflush_r+0x44>
 800cb74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	2300      	movs	r3, #0
 800cb7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb7c:	6a21      	ldr	r1, [r4, #32]
 800cb7e:	4628      	mov	r0, r5
 800cb80:	47b0      	blx	r6
 800cb82:	1c43      	adds	r3, r0, #1
 800cb84:	89a3      	ldrh	r3, [r4, #12]
 800cb86:	d106      	bne.n	800cb96 <__sflush_r+0x62>
 800cb88:	6829      	ldr	r1, [r5, #0]
 800cb8a:	291d      	cmp	r1, #29
 800cb8c:	d82b      	bhi.n	800cbe6 <__sflush_r+0xb2>
 800cb8e:	4a2a      	ldr	r2, [pc, #168]	@ (800cc38 <__sflush_r+0x104>)
 800cb90:	410a      	asrs	r2, r1
 800cb92:	07d6      	lsls	r6, r2, #31
 800cb94:	d427      	bmi.n	800cbe6 <__sflush_r+0xb2>
 800cb96:	2200      	movs	r2, #0
 800cb98:	6062      	str	r2, [r4, #4]
 800cb9a:	04d9      	lsls	r1, r3, #19
 800cb9c:	6922      	ldr	r2, [r4, #16]
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	d504      	bpl.n	800cbac <__sflush_r+0x78>
 800cba2:	1c42      	adds	r2, r0, #1
 800cba4:	d101      	bne.n	800cbaa <__sflush_r+0x76>
 800cba6:	682b      	ldr	r3, [r5, #0]
 800cba8:	b903      	cbnz	r3, 800cbac <__sflush_r+0x78>
 800cbaa:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbae:	602f      	str	r7, [r5, #0]
 800cbb0:	b1b9      	cbz	r1, 800cbe2 <__sflush_r+0xae>
 800cbb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbb6:	4299      	cmp	r1, r3
 800cbb8:	d002      	beq.n	800cbc0 <__sflush_r+0x8c>
 800cbba:	4628      	mov	r0, r5
 800cbbc:	f7fe ff4a 	bl	800ba54 <_free_r>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbc4:	e00d      	b.n	800cbe2 <__sflush_r+0xae>
 800cbc6:	2301      	movs	r3, #1
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b0      	blx	r6
 800cbcc:	4602      	mov	r2, r0
 800cbce:	1c50      	adds	r0, r2, #1
 800cbd0:	d1c9      	bne.n	800cb66 <__sflush_r+0x32>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0c6      	beq.n	800cb66 <__sflush_r+0x32>
 800cbd8:	2b1d      	cmp	r3, #29
 800cbda:	d001      	beq.n	800cbe0 <__sflush_r+0xac>
 800cbdc:	2b16      	cmp	r3, #22
 800cbde:	d11e      	bne.n	800cc1e <__sflush_r+0xea>
 800cbe0:	602f      	str	r7, [r5, #0]
 800cbe2:	2000      	movs	r0, #0
 800cbe4:	e022      	b.n	800cc2c <__sflush_r+0xf8>
 800cbe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbea:	b21b      	sxth	r3, r3
 800cbec:	e01b      	b.n	800cc26 <__sflush_r+0xf2>
 800cbee:	690f      	ldr	r7, [r1, #16]
 800cbf0:	2f00      	cmp	r7, #0
 800cbf2:	d0f6      	beq.n	800cbe2 <__sflush_r+0xae>
 800cbf4:	0793      	lsls	r3, r2, #30
 800cbf6:	680e      	ldr	r6, [r1, #0]
 800cbf8:	bf08      	it	eq
 800cbfa:	694b      	ldreq	r3, [r1, #20]
 800cbfc:	600f      	str	r7, [r1, #0]
 800cbfe:	bf18      	it	ne
 800cc00:	2300      	movne	r3, #0
 800cc02:	eba6 0807 	sub.w	r8, r6, r7
 800cc06:	608b      	str	r3, [r1, #8]
 800cc08:	f1b8 0f00 	cmp.w	r8, #0
 800cc0c:	dde9      	ble.n	800cbe2 <__sflush_r+0xae>
 800cc0e:	6a21      	ldr	r1, [r4, #32]
 800cc10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc12:	4643      	mov	r3, r8
 800cc14:	463a      	mov	r2, r7
 800cc16:	4628      	mov	r0, r5
 800cc18:	47b0      	blx	r6
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	dc08      	bgt.n	800cc30 <__sflush_r+0xfc>
 800cc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc26:	81a3      	strh	r3, [r4, #12]
 800cc28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc30:	4407      	add	r7, r0
 800cc32:	eba8 0800 	sub.w	r8, r8, r0
 800cc36:	e7e7      	b.n	800cc08 <__sflush_r+0xd4>
 800cc38:	dfbffffe 	.word	0xdfbffffe

0800cc3c <_fflush_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	690b      	ldr	r3, [r1, #16]
 800cc40:	4605      	mov	r5, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	b913      	cbnz	r3, 800cc4c <_fflush_r+0x10>
 800cc46:	2500      	movs	r5, #0
 800cc48:	4628      	mov	r0, r5
 800cc4a:	bd38      	pop	{r3, r4, r5, pc}
 800cc4c:	b118      	cbz	r0, 800cc56 <_fflush_r+0x1a>
 800cc4e:	6a03      	ldr	r3, [r0, #32]
 800cc50:	b90b      	cbnz	r3, 800cc56 <_fflush_r+0x1a>
 800cc52:	f7fe fd59 	bl	800b708 <__sinit>
 800cc56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0f3      	beq.n	800cc46 <_fflush_r+0xa>
 800cc5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc60:	07d0      	lsls	r0, r2, #31
 800cc62:	d404      	bmi.n	800cc6e <_fflush_r+0x32>
 800cc64:	0599      	lsls	r1, r3, #22
 800cc66:	d402      	bmi.n	800cc6e <_fflush_r+0x32>
 800cc68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc6a:	f7fe fef0 	bl	800ba4e <__retarget_lock_acquire_recursive>
 800cc6e:	4628      	mov	r0, r5
 800cc70:	4621      	mov	r1, r4
 800cc72:	f7ff ff5f 	bl	800cb34 <__sflush_r>
 800cc76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc78:	07da      	lsls	r2, r3, #31
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	d4e4      	bmi.n	800cc48 <_fflush_r+0xc>
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	059b      	lsls	r3, r3, #22
 800cc82:	d4e1      	bmi.n	800cc48 <_fflush_r+0xc>
 800cc84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc86:	f7fe fee3 	bl	800ba50 <__retarget_lock_release_recursive>
 800cc8a:	e7dd      	b.n	800cc48 <_fflush_r+0xc>

0800cc8c <__malloc_lock>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	@ (800cc94 <__malloc_lock+0x8>)
 800cc8e:	f7fe bede 	b.w	800ba4e <__retarget_lock_acquire_recursive>
 800cc92:	bf00      	nop
 800cc94:	20003414 	.word	0x20003414

0800cc98 <__malloc_unlock>:
 800cc98:	4801      	ldr	r0, [pc, #4]	@ (800cca0 <__malloc_unlock+0x8>)
 800cc9a:	f7fe bed9 	b.w	800ba50 <__retarget_lock_release_recursive>
 800cc9e:	bf00      	nop
 800cca0:	20003414 	.word	0x20003414

0800cca4 <__submore>:
 800cca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca8:	460c      	mov	r4, r1
 800ccaa:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ccac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccb0:	4299      	cmp	r1, r3
 800ccb2:	d11d      	bne.n	800ccf0 <__submore+0x4c>
 800ccb4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ccb8:	f7ff fba6 	bl	800c408 <_malloc_r>
 800ccbc:	b918      	cbnz	r0, 800ccc6 <__submore+0x22>
 800ccbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ccc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccca:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cccc:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ccd0:	6360      	str	r0, [r4, #52]	@ 0x34
 800ccd2:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ccd6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ccda:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ccde:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cce2:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cce6:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ccea:	6020      	str	r0, [r4, #0]
 800ccec:	2000      	movs	r0, #0
 800ccee:	e7e8      	b.n	800ccc2 <__submore+0x1e>
 800ccf0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ccf2:	0077      	lsls	r7, r6, #1
 800ccf4:	463a      	mov	r2, r7
 800ccf6:	f000 f80f 	bl	800cd18 <_realloc_r>
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	2800      	cmp	r0, #0
 800ccfe:	d0de      	beq.n	800ccbe <__submore+0x1a>
 800cd00:	eb00 0806 	add.w	r8, r0, r6
 800cd04:	4601      	mov	r1, r0
 800cd06:	4632      	mov	r2, r6
 800cd08:	4640      	mov	r0, r8
 800cd0a:	f000 f9dd 	bl	800d0c8 <memcpy>
 800cd0e:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cd12:	f8c4 8000 	str.w	r8, [r4]
 800cd16:	e7e9      	b.n	800ccec <__submore+0x48>

0800cd18 <_realloc_r>:
 800cd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	4615      	mov	r5, r2
 800cd20:	460c      	mov	r4, r1
 800cd22:	b921      	cbnz	r1, 800cd2e <_realloc_r+0x16>
 800cd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd28:	4611      	mov	r1, r2
 800cd2a:	f7ff bb6d 	b.w	800c408 <_malloc_r>
 800cd2e:	b92a      	cbnz	r2, 800cd3c <_realloc_r+0x24>
 800cd30:	f7fe fe90 	bl	800ba54 <_free_r>
 800cd34:	2400      	movs	r4, #0
 800cd36:	4620      	mov	r0, r4
 800cd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd3c:	f000 f9d2 	bl	800d0e4 <_malloc_usable_size_r>
 800cd40:	4285      	cmp	r5, r0
 800cd42:	4606      	mov	r6, r0
 800cd44:	d802      	bhi.n	800cd4c <_realloc_r+0x34>
 800cd46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd4a:	d8f4      	bhi.n	800cd36 <_realloc_r+0x1e>
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4640      	mov	r0, r8
 800cd50:	f7ff fb5a 	bl	800c408 <_malloc_r>
 800cd54:	4607      	mov	r7, r0
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0ec      	beq.n	800cd34 <_realloc_r+0x1c>
 800cd5a:	42b5      	cmp	r5, r6
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	4621      	mov	r1, r4
 800cd60:	bf28      	it	cs
 800cd62:	4632      	movcs	r2, r6
 800cd64:	f000 f9b0 	bl	800d0c8 <memcpy>
 800cd68:	4621      	mov	r1, r4
 800cd6a:	4640      	mov	r0, r8
 800cd6c:	f7fe fe72 	bl	800ba54 <_free_r>
 800cd70:	463c      	mov	r4, r7
 800cd72:	e7e0      	b.n	800cd36 <_realloc_r+0x1e>

0800cd74 <_strtol_l.constprop.0>:
 800cd74:	2b24      	cmp	r3, #36	@ 0x24
 800cd76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd7a:	4686      	mov	lr, r0
 800cd7c:	4690      	mov	r8, r2
 800cd7e:	d801      	bhi.n	800cd84 <_strtol_l.constprop.0+0x10>
 800cd80:	2b01      	cmp	r3, #1
 800cd82:	d106      	bne.n	800cd92 <_strtol_l.constprop.0+0x1e>
 800cd84:	f7fe fe38 	bl	800b9f8 <__errno>
 800cd88:	2316      	movs	r3, #22
 800cd8a:	6003      	str	r3, [r0, #0]
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd92:	4834      	ldr	r0, [pc, #208]	@ (800ce64 <_strtol_l.constprop.0+0xf0>)
 800cd94:	460d      	mov	r5, r1
 800cd96:	462a      	mov	r2, r5
 800cd98:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd9c:	5d06      	ldrb	r6, [r0, r4]
 800cd9e:	f016 0608 	ands.w	r6, r6, #8
 800cda2:	d1f8      	bne.n	800cd96 <_strtol_l.constprop.0+0x22>
 800cda4:	2c2d      	cmp	r4, #45	@ 0x2d
 800cda6:	d12d      	bne.n	800ce04 <_strtol_l.constprop.0+0x90>
 800cda8:	782c      	ldrb	r4, [r5, #0]
 800cdaa:	2601      	movs	r6, #1
 800cdac:	1c95      	adds	r5, r2, #2
 800cdae:	f033 0210 	bics.w	r2, r3, #16
 800cdb2:	d109      	bne.n	800cdc8 <_strtol_l.constprop.0+0x54>
 800cdb4:	2c30      	cmp	r4, #48	@ 0x30
 800cdb6:	d12a      	bne.n	800ce0e <_strtol_l.constprop.0+0x9a>
 800cdb8:	782a      	ldrb	r2, [r5, #0]
 800cdba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cdbe:	2a58      	cmp	r2, #88	@ 0x58
 800cdc0:	d125      	bne.n	800ce0e <_strtol_l.constprop.0+0x9a>
 800cdc2:	786c      	ldrb	r4, [r5, #1]
 800cdc4:	2310      	movs	r3, #16
 800cdc6:	3502      	adds	r5, #2
 800cdc8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cdcc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	fbbc f9f3 	udiv	r9, ip, r3
 800cdd6:	4610      	mov	r0, r2
 800cdd8:	fb03 ca19 	mls	sl, r3, r9, ip
 800cddc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cde0:	2f09      	cmp	r7, #9
 800cde2:	d81b      	bhi.n	800ce1c <_strtol_l.constprop.0+0xa8>
 800cde4:	463c      	mov	r4, r7
 800cde6:	42a3      	cmp	r3, r4
 800cde8:	dd27      	ble.n	800ce3a <_strtol_l.constprop.0+0xc6>
 800cdea:	1c57      	adds	r7, r2, #1
 800cdec:	d007      	beq.n	800cdfe <_strtol_l.constprop.0+0x8a>
 800cdee:	4581      	cmp	r9, r0
 800cdf0:	d320      	bcc.n	800ce34 <_strtol_l.constprop.0+0xc0>
 800cdf2:	d101      	bne.n	800cdf8 <_strtol_l.constprop.0+0x84>
 800cdf4:	45a2      	cmp	sl, r4
 800cdf6:	db1d      	blt.n	800ce34 <_strtol_l.constprop.0+0xc0>
 800cdf8:	fb00 4003 	mla	r0, r0, r3, r4
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce02:	e7eb      	b.n	800cddc <_strtol_l.constprop.0+0x68>
 800ce04:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce06:	bf04      	itt	eq
 800ce08:	782c      	ldrbeq	r4, [r5, #0]
 800ce0a:	1c95      	addeq	r5, r2, #2
 800ce0c:	e7cf      	b.n	800cdae <_strtol_l.constprop.0+0x3a>
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d1da      	bne.n	800cdc8 <_strtol_l.constprop.0+0x54>
 800ce12:	2c30      	cmp	r4, #48	@ 0x30
 800ce14:	bf0c      	ite	eq
 800ce16:	2308      	moveq	r3, #8
 800ce18:	230a      	movne	r3, #10
 800ce1a:	e7d5      	b.n	800cdc8 <_strtol_l.constprop.0+0x54>
 800ce1c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce20:	2f19      	cmp	r7, #25
 800ce22:	d801      	bhi.n	800ce28 <_strtol_l.constprop.0+0xb4>
 800ce24:	3c37      	subs	r4, #55	@ 0x37
 800ce26:	e7de      	b.n	800cde6 <_strtol_l.constprop.0+0x72>
 800ce28:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ce2c:	2f19      	cmp	r7, #25
 800ce2e:	d804      	bhi.n	800ce3a <_strtol_l.constprop.0+0xc6>
 800ce30:	3c57      	subs	r4, #87	@ 0x57
 800ce32:	e7d8      	b.n	800cde6 <_strtol_l.constprop.0+0x72>
 800ce34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce38:	e7e1      	b.n	800cdfe <_strtol_l.constprop.0+0x8a>
 800ce3a:	1c53      	adds	r3, r2, #1
 800ce3c:	d108      	bne.n	800ce50 <_strtol_l.constprop.0+0xdc>
 800ce3e:	2322      	movs	r3, #34	@ 0x22
 800ce40:	f8ce 3000 	str.w	r3, [lr]
 800ce44:	4660      	mov	r0, ip
 800ce46:	f1b8 0f00 	cmp.w	r8, #0
 800ce4a:	d0a0      	beq.n	800cd8e <_strtol_l.constprop.0+0x1a>
 800ce4c:	1e69      	subs	r1, r5, #1
 800ce4e:	e006      	b.n	800ce5e <_strtol_l.constprop.0+0xea>
 800ce50:	b106      	cbz	r6, 800ce54 <_strtol_l.constprop.0+0xe0>
 800ce52:	4240      	negs	r0, r0
 800ce54:	f1b8 0f00 	cmp.w	r8, #0
 800ce58:	d099      	beq.n	800cd8e <_strtol_l.constprop.0+0x1a>
 800ce5a:	2a00      	cmp	r2, #0
 800ce5c:	d1f6      	bne.n	800ce4c <_strtol_l.constprop.0+0xd8>
 800ce5e:	f8c8 1000 	str.w	r1, [r8]
 800ce62:	e794      	b.n	800cd8e <_strtol_l.constprop.0+0x1a>
 800ce64:	0800d47f 	.word	0x0800d47f

0800ce68 <_strtol_r>:
 800ce68:	f7ff bf84 	b.w	800cd74 <_strtol_l.constprop.0>

0800ce6c <_strtoul_l.constprop.0>:
 800ce6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce70:	4e34      	ldr	r6, [pc, #208]	@ (800cf44 <_strtoul_l.constprop.0+0xd8>)
 800ce72:	4686      	mov	lr, r0
 800ce74:	460d      	mov	r5, r1
 800ce76:	4628      	mov	r0, r5
 800ce78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce7c:	5d37      	ldrb	r7, [r6, r4]
 800ce7e:	f017 0708 	ands.w	r7, r7, #8
 800ce82:	d1f8      	bne.n	800ce76 <_strtoul_l.constprop.0+0xa>
 800ce84:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce86:	d12f      	bne.n	800cee8 <_strtoul_l.constprop.0+0x7c>
 800ce88:	782c      	ldrb	r4, [r5, #0]
 800ce8a:	2701      	movs	r7, #1
 800ce8c:	1c85      	adds	r5, r0, #2
 800ce8e:	f033 0010 	bics.w	r0, r3, #16
 800ce92:	d109      	bne.n	800cea8 <_strtoul_l.constprop.0+0x3c>
 800ce94:	2c30      	cmp	r4, #48	@ 0x30
 800ce96:	d12c      	bne.n	800cef2 <_strtoul_l.constprop.0+0x86>
 800ce98:	7828      	ldrb	r0, [r5, #0]
 800ce9a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ce9e:	2858      	cmp	r0, #88	@ 0x58
 800cea0:	d127      	bne.n	800cef2 <_strtoul_l.constprop.0+0x86>
 800cea2:	786c      	ldrb	r4, [r5, #1]
 800cea4:	2310      	movs	r3, #16
 800cea6:	3502      	adds	r5, #2
 800cea8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ceac:	2600      	movs	r6, #0
 800ceae:	fbb8 f8f3 	udiv	r8, r8, r3
 800ceb2:	fb03 f908 	mul.w	r9, r3, r8
 800ceb6:	ea6f 0909 	mvn.w	r9, r9
 800ceba:	4630      	mov	r0, r6
 800cebc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cec0:	f1bc 0f09 	cmp.w	ip, #9
 800cec4:	d81c      	bhi.n	800cf00 <_strtoul_l.constprop.0+0x94>
 800cec6:	4664      	mov	r4, ip
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	dd2a      	ble.n	800cf22 <_strtoul_l.constprop.0+0xb6>
 800cecc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800ced0:	d007      	beq.n	800cee2 <_strtoul_l.constprop.0+0x76>
 800ced2:	4580      	cmp	r8, r0
 800ced4:	d322      	bcc.n	800cf1c <_strtoul_l.constprop.0+0xb0>
 800ced6:	d101      	bne.n	800cedc <_strtoul_l.constprop.0+0x70>
 800ced8:	45a1      	cmp	r9, r4
 800ceda:	db1f      	blt.n	800cf1c <_strtoul_l.constprop.0+0xb0>
 800cedc:	fb00 4003 	mla	r0, r0, r3, r4
 800cee0:	2601      	movs	r6, #1
 800cee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cee6:	e7e9      	b.n	800cebc <_strtoul_l.constprop.0+0x50>
 800cee8:	2c2b      	cmp	r4, #43	@ 0x2b
 800ceea:	bf04      	itt	eq
 800ceec:	782c      	ldrbeq	r4, [r5, #0]
 800ceee:	1c85      	addeq	r5, r0, #2
 800cef0:	e7cd      	b.n	800ce8e <_strtoul_l.constprop.0+0x22>
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1d8      	bne.n	800cea8 <_strtoul_l.constprop.0+0x3c>
 800cef6:	2c30      	cmp	r4, #48	@ 0x30
 800cef8:	bf0c      	ite	eq
 800cefa:	2308      	moveq	r3, #8
 800cefc:	230a      	movne	r3, #10
 800cefe:	e7d3      	b.n	800cea8 <_strtoul_l.constprop.0+0x3c>
 800cf00:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cf04:	f1bc 0f19 	cmp.w	ip, #25
 800cf08:	d801      	bhi.n	800cf0e <_strtoul_l.constprop.0+0xa2>
 800cf0a:	3c37      	subs	r4, #55	@ 0x37
 800cf0c:	e7dc      	b.n	800cec8 <_strtoul_l.constprop.0+0x5c>
 800cf0e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cf12:	f1bc 0f19 	cmp.w	ip, #25
 800cf16:	d804      	bhi.n	800cf22 <_strtoul_l.constprop.0+0xb6>
 800cf18:	3c57      	subs	r4, #87	@ 0x57
 800cf1a:	e7d5      	b.n	800cec8 <_strtoul_l.constprop.0+0x5c>
 800cf1c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800cf20:	e7df      	b.n	800cee2 <_strtoul_l.constprop.0+0x76>
 800cf22:	1c73      	adds	r3, r6, #1
 800cf24:	d106      	bne.n	800cf34 <_strtoul_l.constprop.0+0xc8>
 800cf26:	2322      	movs	r3, #34	@ 0x22
 800cf28:	f8ce 3000 	str.w	r3, [lr]
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	b932      	cbnz	r2, 800cf3e <_strtoul_l.constprop.0+0xd2>
 800cf30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf34:	b107      	cbz	r7, 800cf38 <_strtoul_l.constprop.0+0xcc>
 800cf36:	4240      	negs	r0, r0
 800cf38:	2a00      	cmp	r2, #0
 800cf3a:	d0f9      	beq.n	800cf30 <_strtoul_l.constprop.0+0xc4>
 800cf3c:	b106      	cbz	r6, 800cf40 <_strtoul_l.constprop.0+0xd4>
 800cf3e:	1e69      	subs	r1, r5, #1
 800cf40:	6011      	str	r1, [r2, #0]
 800cf42:	e7f5      	b.n	800cf30 <_strtoul_l.constprop.0+0xc4>
 800cf44:	0800d47f 	.word	0x0800d47f

0800cf48 <_strtoul_r>:
 800cf48:	f7ff bf90 	b.w	800ce6c <_strtoul_l.constprop.0>

0800cf4c <__swbuf_r>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	460e      	mov	r6, r1
 800cf50:	4614      	mov	r4, r2
 800cf52:	4605      	mov	r5, r0
 800cf54:	b118      	cbz	r0, 800cf5e <__swbuf_r+0x12>
 800cf56:	6a03      	ldr	r3, [r0, #32]
 800cf58:	b90b      	cbnz	r3, 800cf5e <__swbuf_r+0x12>
 800cf5a:	f7fe fbd5 	bl	800b708 <__sinit>
 800cf5e:	69a3      	ldr	r3, [r4, #24]
 800cf60:	60a3      	str	r3, [r4, #8]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	071a      	lsls	r2, r3, #28
 800cf66:	d501      	bpl.n	800cf6c <__swbuf_r+0x20>
 800cf68:	6923      	ldr	r3, [r4, #16]
 800cf6a:	b943      	cbnz	r3, 800cf7e <__swbuf_r+0x32>
 800cf6c:	4621      	mov	r1, r4
 800cf6e:	4628      	mov	r0, r5
 800cf70:	f000 f82a 	bl	800cfc8 <__swsetup_r>
 800cf74:	b118      	cbz	r0, 800cf7e <__swbuf_r+0x32>
 800cf76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cf7a:	4638      	mov	r0, r7
 800cf7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	6922      	ldr	r2, [r4, #16]
 800cf82:	1a98      	subs	r0, r3, r2
 800cf84:	6963      	ldr	r3, [r4, #20]
 800cf86:	b2f6      	uxtb	r6, r6
 800cf88:	4283      	cmp	r3, r0
 800cf8a:	4637      	mov	r7, r6
 800cf8c:	dc05      	bgt.n	800cf9a <__swbuf_r+0x4e>
 800cf8e:	4621      	mov	r1, r4
 800cf90:	4628      	mov	r0, r5
 800cf92:	f7ff fe53 	bl	800cc3c <_fflush_r>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d1ed      	bne.n	800cf76 <__swbuf_r+0x2a>
 800cf9a:	68a3      	ldr	r3, [r4, #8]
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	60a3      	str	r3, [r4, #8]
 800cfa0:	6823      	ldr	r3, [r4, #0]
 800cfa2:	1c5a      	adds	r2, r3, #1
 800cfa4:	6022      	str	r2, [r4, #0]
 800cfa6:	701e      	strb	r6, [r3, #0]
 800cfa8:	6962      	ldr	r2, [r4, #20]
 800cfaa:	1c43      	adds	r3, r0, #1
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d004      	beq.n	800cfba <__swbuf_r+0x6e>
 800cfb0:	89a3      	ldrh	r3, [r4, #12]
 800cfb2:	07db      	lsls	r3, r3, #31
 800cfb4:	d5e1      	bpl.n	800cf7a <__swbuf_r+0x2e>
 800cfb6:	2e0a      	cmp	r6, #10
 800cfb8:	d1df      	bne.n	800cf7a <__swbuf_r+0x2e>
 800cfba:	4621      	mov	r1, r4
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	f7ff fe3d 	bl	800cc3c <_fflush_r>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d0d9      	beq.n	800cf7a <__swbuf_r+0x2e>
 800cfc6:	e7d6      	b.n	800cf76 <__swbuf_r+0x2a>

0800cfc8 <__swsetup_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	4b29      	ldr	r3, [pc, #164]	@ (800d070 <__swsetup_r+0xa8>)
 800cfcc:	4605      	mov	r5, r0
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	460c      	mov	r4, r1
 800cfd2:	b118      	cbz	r0, 800cfdc <__swsetup_r+0x14>
 800cfd4:	6a03      	ldr	r3, [r0, #32]
 800cfd6:	b90b      	cbnz	r3, 800cfdc <__swsetup_r+0x14>
 800cfd8:	f7fe fb96 	bl	800b708 <__sinit>
 800cfdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfe0:	0719      	lsls	r1, r3, #28
 800cfe2:	d422      	bmi.n	800d02a <__swsetup_r+0x62>
 800cfe4:	06da      	lsls	r2, r3, #27
 800cfe6:	d407      	bmi.n	800cff8 <__swsetup_r+0x30>
 800cfe8:	2209      	movs	r2, #9
 800cfea:	602a      	str	r2, [r5, #0]
 800cfec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cff0:	81a3      	strh	r3, [r4, #12]
 800cff2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cff6:	e033      	b.n	800d060 <__swsetup_r+0x98>
 800cff8:	0758      	lsls	r0, r3, #29
 800cffa:	d512      	bpl.n	800d022 <__swsetup_r+0x5a>
 800cffc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cffe:	b141      	cbz	r1, 800d012 <__swsetup_r+0x4a>
 800d000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d004:	4299      	cmp	r1, r3
 800d006:	d002      	beq.n	800d00e <__swsetup_r+0x46>
 800d008:	4628      	mov	r0, r5
 800d00a:	f7fe fd23 	bl	800ba54 <_free_r>
 800d00e:	2300      	movs	r3, #0
 800d010:	6363      	str	r3, [r4, #52]	@ 0x34
 800d012:	89a3      	ldrh	r3, [r4, #12]
 800d014:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d018:	81a3      	strh	r3, [r4, #12]
 800d01a:	2300      	movs	r3, #0
 800d01c:	6063      	str	r3, [r4, #4]
 800d01e:	6923      	ldr	r3, [r4, #16]
 800d020:	6023      	str	r3, [r4, #0]
 800d022:	89a3      	ldrh	r3, [r4, #12]
 800d024:	f043 0308 	orr.w	r3, r3, #8
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	6923      	ldr	r3, [r4, #16]
 800d02c:	b94b      	cbnz	r3, 800d042 <__swsetup_r+0x7a>
 800d02e:	89a3      	ldrh	r3, [r4, #12]
 800d030:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d038:	d003      	beq.n	800d042 <__swsetup_r+0x7a>
 800d03a:	4621      	mov	r1, r4
 800d03c:	4628      	mov	r0, r5
 800d03e:	f7fe fbbf 	bl	800b7c0 <__smakebuf_r>
 800d042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d046:	f013 0201 	ands.w	r2, r3, #1
 800d04a:	d00a      	beq.n	800d062 <__swsetup_r+0x9a>
 800d04c:	2200      	movs	r2, #0
 800d04e:	60a2      	str	r2, [r4, #8]
 800d050:	6962      	ldr	r2, [r4, #20]
 800d052:	4252      	negs	r2, r2
 800d054:	61a2      	str	r2, [r4, #24]
 800d056:	6922      	ldr	r2, [r4, #16]
 800d058:	b942      	cbnz	r2, 800d06c <__swsetup_r+0xa4>
 800d05a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d05e:	d1c5      	bne.n	800cfec <__swsetup_r+0x24>
 800d060:	bd38      	pop	{r3, r4, r5, pc}
 800d062:	0799      	lsls	r1, r3, #30
 800d064:	bf58      	it	pl
 800d066:	6962      	ldrpl	r2, [r4, #20]
 800d068:	60a2      	str	r2, [r4, #8]
 800d06a:	e7f4      	b.n	800d056 <__swsetup_r+0x8e>
 800d06c:	2000      	movs	r0, #0
 800d06e:	e7f7      	b.n	800d060 <__swsetup_r+0x98>
 800d070:	20000044 	.word	0x20000044

0800d074 <memmove>:
 800d074:	4288      	cmp	r0, r1
 800d076:	b510      	push	{r4, lr}
 800d078:	eb01 0402 	add.w	r4, r1, r2
 800d07c:	d902      	bls.n	800d084 <memmove+0x10>
 800d07e:	4284      	cmp	r4, r0
 800d080:	4623      	mov	r3, r4
 800d082:	d807      	bhi.n	800d094 <memmove+0x20>
 800d084:	1e43      	subs	r3, r0, #1
 800d086:	42a1      	cmp	r1, r4
 800d088:	d008      	beq.n	800d09c <memmove+0x28>
 800d08a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d08e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d092:	e7f8      	b.n	800d086 <memmove+0x12>
 800d094:	4402      	add	r2, r0
 800d096:	4601      	mov	r1, r0
 800d098:	428a      	cmp	r2, r1
 800d09a:	d100      	bne.n	800d09e <memmove+0x2a>
 800d09c:	bd10      	pop	{r4, pc}
 800d09e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0a6:	e7f7      	b.n	800d098 <memmove+0x24>

0800d0a8 <_sbrk_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d06      	ldr	r5, [pc, #24]	@ (800d0c4 <_sbrk_r+0x1c>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f7f4 f9ce 	bl	8001454 <_sbrk>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_sbrk_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_sbrk_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	20003410 	.word	0x20003410

0800d0c8 <memcpy>:
 800d0c8:	440a      	add	r2, r1
 800d0ca:	4291      	cmp	r1, r2
 800d0cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d0d0:	d100      	bne.n	800d0d4 <memcpy+0xc>
 800d0d2:	4770      	bx	lr
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0de:	4291      	cmp	r1, r2
 800d0e0:	d1f9      	bne.n	800d0d6 <memcpy+0xe>
 800d0e2:	bd10      	pop	{r4, pc}

0800d0e4 <_malloc_usable_size_r>:
 800d0e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0e8:	1f18      	subs	r0, r3, #4
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	bfbc      	itt	lt
 800d0ee:	580b      	ldrlt	r3, [r1, r0]
 800d0f0:	18c0      	addlt	r0, r0, r3
 800d0f2:	4770      	bx	lr

0800d0f4 <_init>:
 800d0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f6:	bf00      	nop
 800d0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fa:	bc08      	pop	{r3}
 800d0fc:	469e      	mov	lr, r3
 800d0fe:	4770      	bx	lr

0800d100 <_fini>:
 800d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d102:	bf00      	nop
 800d104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d106:	bc08      	pop	{r3}
 800d108:	469e      	mov	lr, r3
 800d10a:	4770      	bx	lr
