
tdm_sd_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfa0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800d130  0800d130  0000e130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a4  0800d5a4  0000f094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a4  0800d5a4  0000e5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5ac  0800d5ac  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5ac  0800d5ac  0000e5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d5b0  0800d5b0  0000e5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d5b4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e48c  20000094  0800d648  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  2000e520  0800d648  0000f520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bc0  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000366b  00000000  00000000  00025c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000292f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee2  00000000  00000000  0002a660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4be  00000000  00000000  0002b542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196c1  00000000  00000000  00055a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b25  00000000  00000000  0006f0c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162be6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf0  00000000  00000000  00162c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0016881c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d118 	.word	0x0800d118

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d118 	.word	0x0800d118

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sd_card_init>:
static FATFS sdCard;
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
void sd_card_init()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	490f      	ldr	r1, [pc, #60]	@ (80005d4 <sd_card_init+0x44>)
 8000598:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <sd_card_init+0x48>)
 800059a:	f00a f811 	bl	800a5c0 <f_mount>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <sd_card_init+0x4c>)
 80005a4:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <sd_card_init+0x4c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d007      	beq.n	80005be <sd_card_init+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <sd_card_init+0x4c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <sd_card_init+0x50>)
 80005b6:	f00b f951 	bl	800b85c <iprintf>
		while(1);
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <sd_card_init+0x54>)
 80005c0:	f00b f9b4 	bl	800b92c <puts>
	    printf("sdCard.fs_type = %d\n", sdCard.fs_type); // Check if fs_type is set
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <sd_card_init+0x48>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <sd_card_init+0x58>)
 80005cc:	f00b f946 	bl	800b85c <iprintf>

	}
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000e39c 	.word	0x2000e39c
 80005d8:	200000b4 	.word	0x200000b4
 80005dc:	200000b0 	.word	0x200000b0
 80005e0:	0800d130 	.word	0x0800d130
 80005e4:	0800d154 	.word	0x0800d154
 80005e8:	0800d178 	.word	0x0800d178

080005ec <start_recording>:

void start_recording(uint32_t fs, char* file_name, uint8_t n_channels)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	//static char file_name[] = "w_000.wav";
	uint32_t temp_number;

	static uint8_t file_counter = 10;
	//int file_number_digits = file_counter;
	uint32_t byte_rate = fs * 4 * n_channels; // fs * 32 bit (4 bytes) x n_channels
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	617b      	str	r3, [r7, #20]
	wav_file_header[22] = (uint8_t)n_channels;
 8000606:	4a36      	ldr	r2, [pc, #216]	@ (80006e0 <start_recording+0xf4>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7593      	strb	r3, [r2, #22]

	wav_file_header[24] = (uint8_t)fs;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b33      	ldr	r3, [pc, #204]	@ (80006e0 <start_recording+0xf4>)
 8000612:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(fs >> 8);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b31      	ldr	r3, [pc, #196]	@ (80006e0 <start_recording+0xf4>)
 800061c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(fs >> 16);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b2e      	ldr	r3, [pc, #184]	@ (80006e0 <start_recording+0xf4>)
 8000626:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(fs >> 24);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	0e1b      	lsrs	r3, r3, #24
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <start_recording+0xf4>)
 8000630:	76da      	strb	r2, [r3, #27]

	wav_file_header[28] = (uint8_t)byte_rate;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b2a      	ldr	r3, [pc, #168]	@ (80006e0 <start_recording+0xf4>)
 8000638:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b27      	ldr	r3, [pc, #156]	@ (80006e0 <start_recording+0xf4>)
 8000642:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <start_recording+0xf4>)
 800064c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <start_recording+0xf4>)
 8000656:	77da      	strb	r2, [r3, #31]

	wav_file_header[32] = (uint8_t)(4 * n_channels); // 32 bit (4 bytes) x n_channels
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <start_recording+0xf4>)
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
	//file_name[4] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[3] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[2] = file_number_digits%10 + 48;
	printf("file name %s \n", file_name);
 8000664:	68b9      	ldr	r1, [r7, #8]
 8000666:	481f      	ldr	r0, [pc, #124]	@ (80006e4 <start_recording+0xf8>)
 8000668:	f00b f8f8 	bl	800b85c <iprintf>
	//file_counter++;

	// creating a file
	sd_result = f_open(&wavFile ,"0:/test2.wav", FA_WRITE|FA_CREATE_ALWAYS);
 800066c:	220a      	movs	r2, #10
 800066e:	491e      	ldr	r1, [pc, #120]	@ (80006e8 <start_recording+0xfc>)
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <start_recording+0x100>)
 8000672:	f009 ffeb 	bl	800a64c <f_open>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <start_recording+0x104>)
 800067c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <start_recording+0x104>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d007      	beq.n	8000696 <start_recording+0xaa>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <start_recording+0x104>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	4819      	ldr	r0, [pc, #100]	@ (80006f4 <start_recording+0x108>)
 800068e:	f00b f8e5 	bl	800b85c <iprintf>
		while(1);
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <start_recording+0xa6>
	}
	else
	{
		printf("succeeded in opening a file \n");
 8000696:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <start_recording+0x10c>)
 8000698:	f00b f948 	bl	800b92c <puts>
	}
	wav_file_size = 0;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <start_recording+0x110>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80006a2:	2064      	movs	r0, #100	@ 0x64
 80006a4:	f000 ffc8 	bl	8001638 <HAL_Delay>

	sd_result = f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	222c      	movs	r2, #44	@ 0x2c
 80006ae:	490c      	ldr	r1, [pc, #48]	@ (80006e0 <start_recording+0xf4>)
 80006b0:	480e      	ldr	r0, [pc, #56]	@ (80006ec <start_recording+0x100>)
 80006b2:	f00a f993 	bl	800a9dc <f_write>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <start_recording+0x104>)
 80006bc:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80006be:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <start_recording+0x104>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d007      	beq.n	80006d6 <start_recording+0xea>
	{
		printf("error in writing the first sector: %d \n", sd_result);
 80006c6:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <start_recording+0x104>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <start_recording+0x114>)
 80006ce:	f00b f8c5 	bl	800b85c <iprintf>
		while(1);
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <start_recording+0xe6>
	}
}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000000 	.word	0x20000000
 80006e4:	0800d190 	.word	0x0800d190
 80006e8:	0800d1a0 	.word	0x0800d1a0
 80006ec:	200010e8 	.word	0x200010e8
 80006f0:	200000b0 	.word	0x200000b0
 80006f4:	0800d1b0 	.word	0x0800d1b0
 80006f8:	0800d1d0 	.word	0x0800d1d0
 80006fc:	20002118 	.word	0x20002118
 8000700:	0800d1f0 	.word	0x0800d1f0

08000704 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size) // data size is in bytes.
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 8000710:	4811      	ldr	r0, [pc, #68]	@ (8000758 <write2wave_file+0x54>)
 8000712:	f00b f90b 	bl	800b92c <puts>


	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 8000716:	887a      	ldrh	r2, [r7, #2]
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	6879      	ldr	r1, [r7, #4]
 800071e:	480f      	ldr	r0, [pc, #60]	@ (800075c <write2wave_file+0x58>)
 8000720:	f00a f95c 	bl	800a9dc <f_write>
 8000724:	4603      	mov	r3, r0
 8000726:	461a      	mov	r2, r3
 8000728:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <write2wave_file+0x5c>)
 800072a:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <write2wave_file+0x5c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d007      	beq.n	8000744 <write2wave_file+0x40>
	{
		printf("error in writing to the file: %d \n", sd_result);
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <write2wave_file+0x5c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	480a      	ldr	r0, [pc, #40]	@ (8000764 <write2wave_file+0x60>)
 800073c:	f00b f88e 	bl	800b85c <iprintf>
		while(1);
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <write2wave_file+0x3c>
	}
	wav_file_size += data_size;
 8000744:	887a      	ldrh	r2, [r7, #2]
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <write2wave_file+0x64>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4413      	add	r3, r2
 800074c:	4a06      	ldr	r2, [pc, #24]	@ (8000768 <write2wave_file+0x64>)
 800074e:	6013      	str	r3, [r2, #0]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	0800d218 	.word	0x0800d218
 800075c:	200010e8 	.word	0x200010e8
 8000760:	200000b0 	.word	0x200000b0
 8000764:	0800d21c 	.word	0x0800d21c
 8000768:	20002118 	.word	0x20002118

0800076c <stop_recording>:

void stop_recording()
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <stop_recording+0xd8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3b08      	subs	r3, #8
 8000778:	4a32      	ldr	r2, [pc, #200]	@ (8000844 <stop_recording+0xd8>)
 800077a:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 800077c:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <stop_recording+0xd8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b31      	ldr	r3, [pc, #196]	@ (8000848 <stop_recording+0xdc>)
 8000784:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 8000786:	4b2f      	ldr	r3, [pc, #188]	@ (8000844 <stop_recording+0xd8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b2e      	ldr	r3, [pc, #184]	@ (8000848 <stop_recording+0xdc>)
 8000790:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000792:	4b2c      	ldr	r3, [pc, #176]	@ (8000844 <stop_recording+0xd8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	0c1b      	lsrs	r3, r3, #16
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b2b      	ldr	r3, [pc, #172]	@ (8000848 <stop_recording+0xdc>)
 800079c:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 800079e:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <stop_recording+0xd8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	0e1b      	lsrs	r3, r3, #24
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <stop_recording+0xdc>)
 80007a8:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 80007aa:	4b26      	ldr	r3, [pc, #152]	@ (8000844 <stop_recording+0xd8>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	3b24      	subs	r3, #36	@ 0x24
 80007b0:	4a24      	ldr	r2, [pc, #144]	@ (8000844 <stop_recording+0xd8>)
 80007b2:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <stop_recording+0xd8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b23      	ldr	r3, [pc, #140]	@ (8000848 <stop_recording+0xdc>)
 80007bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80007c0:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <stop_recording+0xd8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000848 <stop_recording+0xdc>)
 80007ca:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <stop_recording+0xd8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	0c1b      	lsrs	r3, r3, #16
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000848 <stop_recording+0xdc>)
 80007d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80007dc:	4b19      	ldr	r3, [pc, #100]	@ (8000844 <stop_recording+0xd8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <stop_recording+0xdc>)
 80007e6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	4817      	ldr	r0, [pc, #92]	@ (800084c <stop_recording+0xe0>)
 80007ee:	f00a fb31 	bl	800ae54 <f_lseek>
	sd_result = f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	222c      	movs	r2, #44	@ 0x2c
 80007f6:	4914      	ldr	r1, [pc, #80]	@ (8000848 <stop_recording+0xdc>)
 80007f8:	4814      	ldr	r0, [pc, #80]	@ (800084c <stop_recording+0xe0>)
 80007fa:	f00a f8ef 	bl	800a9dc <f_write>
 80007fe:	4603      	mov	r3, r0
 8000800:	461a      	mov	r2, r3
 8000802:	4b13      	ldr	r3, [pc, #76]	@ (8000850 <stop_recording+0xe4>)
 8000804:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <stop_recording+0xe4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d007      	beq.n	800081e <stop_recording+0xb2>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 800080e:	4b10      	ldr	r3, [pc, #64]	@ (8000850 <stop_recording+0xe4>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	4619      	mov	r1, r3
 8000814:	480f      	ldr	r0, [pc, #60]	@ (8000854 <stop_recording+0xe8>)
 8000816:	f00b f821 	bl	800b85c <iprintf>
		while(1);
 800081a:	bf00      	nop
 800081c:	e7fd      	b.n	800081a <stop_recording+0xae>
	}
	f_close(&wavFile);
 800081e:	480b      	ldr	r0, [pc, #44]	@ (800084c <stop_recording+0xe0>)
 8000820:	f00a faee 	bl	800ae00 <f_close>
	first_time = 0;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <stop_recording+0xec>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
	printf("wrote %ld bytes.\n", wav_file_size);
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <stop_recording+0xd8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4619      	mov	r1, r3
 8000830:	480a      	ldr	r0, [pc, #40]	@ (800085c <stop_recording+0xf0>)
 8000832:	f00b f813 	bl	800b85c <iprintf>
	printf("closed the file \n");
 8000836:	480a      	ldr	r0, [pc, #40]	@ (8000860 <stop_recording+0xf4>)
 8000838:	f00b f878 	bl	800b92c <puts>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20002118 	.word	0x20002118
 8000848:	20000000 	.word	0x20000000
 800084c:	200010e8 	.word	0x200010e8
 8000850:	200000b0 	.word	0x200000b0
 8000854:	0800d240 	.word	0x0800d240
 8000858:	2000211c 	.word	0x2000211c
 800085c:	0800d26c 	.word	0x0800d26c
 8000860:	0800d280 	.word	0x0800d280

08000864 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a1b      	ldr	r2, [pc, #108]	@ (80008e0 <HAL_UART_RxCpltCallback+0x7c>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d130      	bne.n	80008d8 <HAL_UART_RxCpltCallback+0x74>

        if (uart_rx_buffer[uart_rx_index] == '\n') {
 8000876:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	4b1a      	ldr	r3, [pc, #104]	@ (80008e8 <HAL_UART_RxCpltCallback+0x84>)
 8000880:	5c9b      	ldrb	r3, [r3, r2]
 8000882:	2b0a      	cmp	r3, #10
 8000884:	d10d      	bne.n	80008a2 <HAL_UART_RxCpltCallback+0x3e>
            uart_rx_buffer[uart_rx_index] = '\0';
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	461a      	mov	r2, r3
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <HAL_UART_RxCpltCallback+0x84>)
 8000890:	2100      	movs	r1, #0
 8000892:	5499      	strb	r1, [r3, r2]
            command_received = 1;
 8000894:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_UART_RxCpltCallback+0x88>)
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
            uart_rx_index = 0;
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 800089c:	2200      	movs	r2, #0
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e00f      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x5e>
        } else if (uart_rx_index < CMD_BUFFER_SIZE - 1) {
 80008a2:	4b10      	ldr	r3, [pc, #64]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80008aa:	d807      	bhi.n	80008bc <HAL_UART_RxCpltCallback+0x58>
            uart_rx_index = uart_rx_index + 1;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e002      	b.n	80008c2 <HAL_UART_RxCpltCallback+0x5e>



        } else {
            uart_rx_index = 0; // Reset index on overflow
 80008bc:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80008c2:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <HAL_UART_RxCpltCallback+0x80>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b07      	ldr	r3, [pc, #28]	@ (80008e8 <HAL_UART_RxCpltCallback+0x84>)
 80008cc:	4413      	add	r3, r2
 80008ce:	2201      	movs	r2, #1
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	@ (80008f0 <HAL_UART_RxCpltCallback+0x8c>)
 80008d4:	f005 fe1e 	bl	8006514 <HAL_UART_Receive_IT>
    }
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40004400 	.word	0x40004400
 80008e4:	2000e380 	.word	0x2000e380
 80008e8:	2000e300 	.word	0x2000e300
 80008ec:	2000e384 	.word	0x2000e384
 80008f0:	20002270 	.word	0x20002270

080008f4 <process_command>:

void process_command(char *command) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b092      	sub	sp, #72	@ 0x48
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
    if (command[0] == 's' && command[1] == ' ') {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b73      	cmp	r3, #115	@ 0x73
 8000902:	d115      	bne.n	8000930 <process_command+0x3c>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b20      	cmp	r3, #32
 800090c:	d110      	bne.n	8000930 <process_command+0x3c>
        char filename[CMD_BUFFER_SIZE];
        sscanf(command, "s %s", filename);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	461a      	mov	r2, r3
 8000914:	4915      	ldr	r1, [pc, #84]	@ (800096c <process_command+0x78>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f00a fe0c 	bl	800b534 <siscanf>
        StartRecording(filename);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fab3 	bl	8000e8c <StartRecording>
        recording_state = 1;
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <process_command+0x7c>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
    if (command[0] == 's' && command[1] == ' ') {
 800092c:	bf00      	nop
    } else if (strcmp(command, "c") == 0) {
        SendCurrentStatus();
    } else {
        IndicateInvalidCommand();
    }
}
 800092e:	e018      	b.n	8000962 <process_command+0x6e>
    } else if (strcmp(command, "e") == 0) {
 8000930:	4910      	ldr	r1, [pc, #64]	@ (8000974 <process_command+0x80>)
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fc54 	bl	80001e0 <strcmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <process_command+0x56>
        recording_state = 0;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <process_command+0x7c>)
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
        StopRecording();
 8000944:	f000 face 	bl	8000ee4 <StopRecording>
}
 8000948:	e00b      	b.n	8000962 <process_command+0x6e>
    } else if (strcmp(command, "c") == 0) {
 800094a:	490b      	ldr	r1, [pc, #44]	@ (8000978 <process_command+0x84>)
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fc47 	bl	80001e0 <strcmp>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d102      	bne.n	800095e <process_command+0x6a>
        SendCurrentStatus();
 8000958:	f000 fad8 	bl	8000f0c <SendCurrentStatus>
}
 800095c:	e001      	b.n	8000962 <process_command+0x6e>
        IndicateInvalidCommand();
 800095e:	f000 faef 	bl	8000f40 <IndicateInvalidCommand>
}
 8000962:	bf00      	nop
 8000964:	3748      	adds	r7, #72	@ 0x48
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	0800d294 	.word	0x0800d294
 8000970:	2000e388 	.word	0x2000e388
 8000974:	0800d29c 	.word	0x0800d29c
 8000978:	0800d2a0 	.word	0x0800d2a0

0800097c <UART_SendString>:

void UART_SendString(UART_HandleTypeDef *huart, char *str) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f7ff fc22 	bl	80001d0 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f005 fd32 	bl	8006400 <HAL_UART_Transmit>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 80009a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <main+0xc4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f00a fcce 	bl	800b352 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b6:	f000 fdc3 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ba:	f000 f86b 	bl	8000a94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009be:	f000 f987 	bl	8000cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c2:	f000 f967 	bl	8000c94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009c6:	f000 f935 	bl	8000c34 <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 80009ca:	f000 f90f 	bl	8000bec <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80009ce:	f007 fe29 	bl	8008624 <MX_FATFS_Init>
  MX_SAI1_Init();
 80009d2:	f000 f8b1 	bl	8000b38 <MX_SAI1_Init>
  /* USER CODE BEGIN 2 */
  sd_card_init();
 80009d6:	f7ff fddb 	bl	8000590 <sd_card_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_rx_index = 0;
 80009da:	4b24      	ldr	r3, [pc, #144]	@ (8000a6c <main+0xc8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <main+0xc8>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b21      	ldr	r3, [pc, #132]	@ (8000a70 <main+0xcc>)
 80009ea:	4413      	add	r3, r2
 80009ec:	2201      	movs	r2, #1
 80009ee:	4619      	mov	r1, r3
 80009f0:	4820      	ldr	r0, [pc, #128]	@ (8000a74 <main+0xd0>)
 80009f2:	f005 fd8f 	bl	8006514 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (command_received) {
 80009f6:	4b20      	ldr	r3, [pc, #128]	@ (8000a78 <main+0xd4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <main+0x66>
          process_command(uart_rx_buffer);
 80009fe:	481c      	ldr	r0, [pc, #112]	@ (8000a70 <main+0xcc>)
 8000a00:	f7ff ff78 	bl	80008f4 <process_command>
          command_received = 0;
 8000a04:	4b1c      	ldr	r3, [pc, #112]	@ (8000a78 <main+0xd4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
      }

	  if(recording_state && half_tdm)
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <main+0xd8>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d016      	beq.n	8000a40 <main+0x9c>
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <main+0xdc>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d011      	beq.n	8000a40 <main+0x9c>
	  {

		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2120      	movs	r1, #32
 8000a20:	4818      	ldr	r0, [pc, #96]	@ (8000a84 <main+0xe0>)
 8000a22:	f001 fb77 	bl	8002114 <HAL_GPIO_WritePin>
		  write2wave_file(((uint8_t*)data_tdm),	 sizeof(data_tdm)/2); // half count * 4 byte per sample
 8000a26:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000a2a:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <main+0xe4>)
 8000a2c:	f7ff fe6a 	bl	8000704 <write2wave_file>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2120      	movs	r1, #32
 8000a34:	4813      	ldr	r0, [pc, #76]	@ (8000a84 <main+0xe0>)
 8000a36:	f001 fb6d 	bl	8002114 <HAL_GPIO_WritePin>

		  half_tdm = 0;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <main+0xdc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
	  }
	  if(recording_state && full_tdm)
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <main+0xd8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0d6      	beq.n	80009f6 <main+0x52>
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <main+0xe8>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0d1      	beq.n	80009f6 <main+0x52>
	  {
		//  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
		  write2wave_file(((uint8_t*)data_tdm) + sizeof(data_tdm)/2, sizeof(data_tdm)/2);
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <main+0xec>)
 8000a54:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe53 	bl	8000704 <write2wave_file>
		 // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);

		  full_tdm = 0;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <main+0xe8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
      if (command_received) {
 8000a64:	e7c7      	b.n	80009f6 <main+0x52>
 8000a66:	bf00      	nop
 8000a68:	20000044 	.word	0x20000044
 8000a6c:	2000e380 	.word	0x2000e380
 8000a70:	2000e300 	.word	0x2000e300
 8000a74:	20002270 	.word	0x20002270
 8000a78:	2000e384 	.word	0x2000e384
 8000a7c:	2000e388 	.word	0x2000e388
 8000a80:	2000e2fc 	.word	0x2000e2fc
 8000a84:	48000800 	.word	0x48000800
 8000a88:	200022f8 	.word	0x200022f8
 8000a8c:	2000e2fd 	.word	0x2000e2fd
 8000a90:	200082f8 	.word	0x200082f8

08000a94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b096      	sub	sp, #88	@ 0x58
 8000a98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	2244      	movs	r2, #68	@ 0x44
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f00a ff4a 	bl	800b93c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ab6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aba:	f001 fb51 	bl	8002160 <HAL_PWREx_ControlVoltageScaling>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ac4:	f000 fa5e 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000acc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ad0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ae2:	230a      	movs	r3, #10
 8000ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ae6:	2307      	movs	r3, #7
 8000ae8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000aea:	2304      	movs	r3, #4
 8000aec:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 fb88 	bl	800220c <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b02:	f000 fa3f 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 ff50 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b2a:	f000 fa2b 	bl	8000f84 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3758      	adds	r7, #88	@ 0x58
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b3c:	4b29      	ldr	r3, [pc, #164]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000be8 <MX_SAI1_Init+0xb0>)
 8000b40:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b48:	4b26      	ldr	r3, [pc, #152]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_32;
 8000b4e:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b50:	22e0      	movs	r2, #224	@ 0xe0
 8000b52:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b54:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000b5a:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b60:	4b20      	ldr	r3, [pc, #128]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b7a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b7e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b86:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.FrameInit.FrameLength = 128;
 8000b92:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b94:	2280      	movs	r2, #128	@ 0x80
 8000b96:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000ba6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000baa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000bae:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000bb2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000bbc:	2280      	movs	r2, #128	@ 0x80
 8000bbe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 4;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x0000FFFF;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bcc:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_SAI1_Init+0xac>)
 8000bd0:	f003 fc36 	bl	8004440 <HAL_SAI_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SAI1_Init+0xa6>
  {
    Error_Handler();
 8000bda:	f000 f9d3 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20002120 	.word	0x20002120
 8000be8:	40015404 	.word	0x40015404

08000bec <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000c30 <MX_SDMMC1_SD_Init+0x44>)
 8000bf4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c0e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 12;
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c18:	220c      	movs	r2, #12
 8000c1a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <MX_SDMMC1_SD_Init+0x40>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	200021ec 	.word	0x200021ec
 8000c30:	40012800 	.word	0x40012800

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	@ (8000c90 <MX_USART2_UART_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c78:	f005 fb74 	bl	8006364 <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 f97f 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20002270 	.word	0x20002270
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_DMA_Init+0x38>)
 8000c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <MX_DMA_Init+0x38>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_DMA_Init+0x38>)
 8000ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2038      	movs	r0, #56	@ 0x38
 8000cb8:	f000 fdbd 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000cbc:	2038      	movs	r0, #56	@ 0x38
 8000cbe:	f000 fdd6 	bl	800186e <HAL_NVIC_EnableIRQ>

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b49      	ldr	r3, [pc, #292]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a48      	ldr	r2, [pc, #288]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b46      	ldr	r3, [pc, #280]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cfe:	4b43      	ldr	r3, [pc, #268]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a42      	ldr	r2, [pc, #264]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b40      	ldr	r3, [pc, #256]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d16:	4b3d      	ldr	r3, [pc, #244]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b3a      	ldr	r3, [pc, #232]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b37      	ldr	r3, [pc, #220]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	4a36      	ldr	r2, [pc, #216]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d3a:	4b34      	ldr	r3, [pc, #208]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d46:	4b31      	ldr	r3, [pc, #196]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4a:	4a30      	ldr	r2, [pc, #192]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d4c:	f043 0308 	orr.w	r3, r3, #8
 8000d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d52:	4b2e      	ldr	r3, [pc, #184]	@ (8000e0c <MX_GPIO_Init+0x13c>)
 8000d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d66:	f001 f9d5 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2160      	movs	r1, #96	@ 0x60
 8000d6e:	4828      	ldr	r0, [pc, #160]	@ (8000e10 <MX_GPIO_Init+0x140>)
 8000d70:	f001 f9d0 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d7a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4821      	ldr	r0, [pc, #132]	@ (8000e10 <MX_GPIO_Init+0x140>)
 8000d8c:	f001 f800 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d90:	2301      	movs	r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000da0:	230d      	movs	r3, #13
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f000 ffef 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000db2:	2320      	movs	r3, #32
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dcc:	f000 ffe0 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000dd0:	2360      	movs	r3, #96	@ 0x60
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <MX_GPIO_Init+0x140>)
 8000de8:	f000 ffd2 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dec:	2310      	movs	r3, #16
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_GPIO_Init+0x144>)
 8000e00:	f000 ffc6 	bl	8001d90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	@ 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000800 	.word	0x48000800
 8000e14:	48000400 	.word	0x48000400

08000e18 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	2140      	movs	r1, #64	@ 0x40
 8000e24:	4806      	ldr	r0, [pc, #24]	@ (8000e40 <HAL_SAI_RxCpltCallback+0x28>)
 8000e26:	f001 f975 	bl	8002114 <HAL_GPIO_WritePin>
	full_tdm = 1;
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_SAI_RxCpltCallback+0x2c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[0];
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_SAI_RxCpltCallback+0x30>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <HAL_SAI_RxCpltCallback+0x34>)
 8000e36:	6013      	str	r3, [r2, #0]
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	48000800 	.word	0x48000800
 8000e44:	2000e2fd 	.word	0x2000e2fd
 8000e48:	200022f8 	.word	0x200022f8
 8000e4c:	2000e2f8 	.word	0x2000e2f8

08000e50 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2140      	movs	r1, #64	@ 0x40
 8000e5c:	4807      	ldr	r0, [pc, #28]	@ (8000e7c <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000e5e:	f001 f959 	bl	8002114 <HAL_GPIO_WritePin>
	half_tdm= 1;
 8000e62:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_SAI_RxHalfCpltCallback+0x30>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[WAV_WRITE_SAMPLE_COUNT/2];
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <HAL_SAI_RxHalfCpltCallback+0x34>)
 8000e6a:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <HAL_SAI_RxHalfCpltCallback+0x38>)
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	48000800 	.word	0x48000800
 8000e80:	2000e2fc 	.word	0x2000e2fc
 8000e84:	200022f8 	.word	0x200022f8
 8000e88:	2000e2f8 	.word	0x2000e2f8

08000e8c <StartRecording>:

void StartRecording(char *filename) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
    snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "Starting recording to file: %s\r\n", filename);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <StartRecording+0x44>)
 8000e98:	2140      	movs	r1, #64	@ 0x40
 8000e9a:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <StartRecording+0x48>)
 8000e9c:	f00a fb16 	bl	800b4cc <sniprintf>
    UART_SendString(&huart2, uart_tx_buffer);
 8000ea0:	490c      	ldr	r1, [pc, #48]	@ (8000ed4 <StartRecording+0x48>)
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <StartRecording+0x4c>)
 8000ea4:	f7ff fd6a 	bl	800097c <UART_SendString>
    // Implement file opening/creation here
    start_recording(SAI_AUDIO_FREQUENCY_48K, filename, (uint8_t)hsai_BlockA1.SlotInit.SlotNumber);
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <StartRecording+0x50>)
 8000eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	461a      	mov	r2, r3
 8000eb0:	6879      	ldr	r1, [r7, #4]
 8000eb2:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8000eb6:	f7ff fb99 	bl	80005ec <start_recording>
    HAL_SAI_Receive_DMA(&hsai_BlockA1, (uint8_t *)data_tdm, WAV_WRITE_SAMPLE_COUNT); // THIS SHOULD NOT BE NUMBER OF BYTES!!!
 8000eba:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000ebe:	4908      	ldr	r1, [pc, #32]	@ (8000ee0 <StartRecording+0x54>)
 8000ec0:	4806      	ldr	r0, [pc, #24]	@ (8000edc <StartRecording+0x50>)
 8000ec2:	f003 fc83 	bl	80047cc <HAL_SAI_Receive_DMA>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	0800d2a4 	.word	0x0800d2a4
 8000ed4:	2000e340 	.word	0x2000e340
 8000ed8:	20002270 	.word	0x20002270
 8000edc:	20002120 	.word	0x20002120
 8000ee0:	200022f8 	.word	0x200022f8

08000ee4 <StopRecording>:

void StopRecording() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	HAL_SAI_DMAStop(&hsai_BlockA1);
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <StopRecording+0x1c>)
 8000eea:	f003 fc1b 	bl	8004724 <HAL_SAI_DMAStop>
    UART_SendString(&huart2, "Stopping recording\r\n");
 8000eee:	4905      	ldr	r1, [pc, #20]	@ (8000f04 <StopRecording+0x20>)
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <StopRecording+0x24>)
 8000ef2:	f7ff fd43 	bl	800097c <UART_SendString>
    // Implement file closing and clean-up here
    stop_recording();
 8000ef6:	f7ff fc39 	bl	800076c <stop_recording>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20002120 	.word	0x20002120
 8000f04:	0800d2c8 	.word	0x0800d2c8
 8000f08:	20002270 	.word	0x20002270

08000f0c <SendCurrentStatus>:

void SendCurrentStatus() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
    if (recording_state == 1) {
 8000f10:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <SendCurrentStatus+0x24>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d104      	bne.n	8000f22 <SendCurrentStatus+0x16>
        UART_SendString(&huart2, "Recording in progress\r\n");
 8000f18:	4906      	ldr	r1, [pc, #24]	@ (8000f34 <SendCurrentStatus+0x28>)
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <SendCurrentStatus+0x2c>)
 8000f1c:	f7ff fd2e 	bl	800097c <UART_SendString>
    } else {
        UART_SendString(&huart2, "Recording stopped\r\n");
    }
}
 8000f20:	e003      	b.n	8000f2a <SendCurrentStatus+0x1e>
        UART_SendString(&huart2, "Recording stopped\r\n");
 8000f22:	4906      	ldr	r1, [pc, #24]	@ (8000f3c <SendCurrentStatus+0x30>)
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <SendCurrentStatus+0x2c>)
 8000f26:	f7ff fd29 	bl	800097c <UART_SendString>
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	2000e388 	.word	0x2000e388
 8000f34:	0800d2e0 	.word	0x0800d2e0
 8000f38:	20002270 	.word	0x20002270
 8000f3c:	0800d2f8 	.word	0x0800d2f8

08000f40 <IndicateInvalidCommand>:

void IndicateInvalidCommand() {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    UART_SendString(&huart2, "Invalid command received\r\n");
 8000f44:	4902      	ldr	r1, [pc, #8]	@ (8000f50 <IndicateInvalidCommand+0x10>)
 8000f46:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <IndicateInvalidCommand+0x14>)
 8000f48:	f7ff fd18 	bl	800097c <UART_SendString>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	0800d30c 	.word	0x0800d30c
 8000f54:	20002270 	.word	0x20002270

08000f58 <_write>:
int _write(int file, char *ptr, int len)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len, HAL_MAX_DELAY);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <_write+0x28>)
 8000f70:	f005 fa46 	bl	8006400 <HAL_UART_Transmit>
  return len;
 8000f74:	687b      	ldr	r3, [r7, #4]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20002270 	.word	0x20002270

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <Error_Handler+0x8>

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_MspInit+0x44>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b0ac      	sub	sp, #176	@ 0xb0
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2288      	movs	r2, #136	@ 0x88
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f00a fc9f 	bl	800b93c <memset>
  if(hsd->Instance==SDMMC1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a37      	ldr	r2, [pc, #220]	@ (80010e0 <HAL_SD_MspInit+0x108>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d167      	bne.n	80010d8 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001008:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800100c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 800100e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8001012:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4618      	mov	r0, r3
 800101c:	f001 fef6 	bl	8002e0c <HAL_RCCEx_PeriphCLKConfig>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8001026:	f7ff ffad 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800102a:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102e:	4a2d      	ldr	r2, [pc, #180]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001034:	6613      	str	r3, [r2, #96]	@ 0x60
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a27      	ldr	r2, [pc, #156]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b25      	ldr	r3, [pc, #148]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001060:	f043 0308 	orr.w	r3, r3, #8
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <HAL_SD_MspInit+0x10c>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001072:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800108c:	230c      	movs	r3, #12
 800108e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001092:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001096:	4619      	mov	r1, r3
 8001098:	4813      	ldr	r0, [pc, #76]	@ (80010e8 <HAL_SD_MspInit+0x110>)
 800109a:	f000 fe79 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109e:	2304      	movs	r3, #4
 80010a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010b6:	230c      	movs	r3, #12
 80010b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010c0:	4619      	mov	r1, r3
 80010c2:	480a      	ldr	r0, [pc, #40]	@ (80010ec <HAL_SD_MspInit+0x114>)
 80010c4:	f000 fe64 	bl	8001d90 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2100      	movs	r1, #0
 80010cc:	2031      	movs	r0, #49	@ 0x31
 80010ce:	f000 fbb2 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80010d2:	2031      	movs	r0, #49	@ 0x31
 80010d4:	f000 fbcb 	bl	800186e <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80010d8:	bf00      	nop
 80010da:	37b0      	adds	r7, #176	@ 0xb0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40012800 	.word	0x40012800
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48000800 	.word	0x48000800
 80010ec:	48000c00 	.word	0x48000c00

080010f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b0ac      	sub	sp, #176	@ 0xb0
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2288      	movs	r2, #136	@ 0x88
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fc13 	bl	800b93c <memset>
  if(huart->Instance==USART2)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a25      	ldr	r2, [pc, #148]	@ (80011b0 <HAL_UART_MspInit+0xc0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d143      	bne.n	80011a8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001120:	2302      	movs	r3, #2
 8001122:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001124:	2300      	movs	r3, #0
 8001126:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	4618      	mov	r0, r3
 800112e:	f001 fe6d 	bl	8002e0c <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001138:	f7ff ff24 	bl	8000f84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800113c:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_UART_MspInit+0xc4>)
 800113e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001140:	4a1c      	ldr	r2, [pc, #112]	@ (80011b4 <HAL_UART_MspInit+0xc4>)
 8001142:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001146:	6593      	str	r3, [r2, #88]	@ 0x58
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_UART_MspInit+0xc4>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_UART_MspInit+0xc4>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_UART_MspInit+0xc4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_UART_MspInit+0xc4>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800116c:	230c      	movs	r3, #12
 800116e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001184:	2307      	movs	r3, #7
 8001186:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001194:	f000 fdfc 	bl	8001d90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	2100      	movs	r1, #0
 800119c:	2026      	movs	r0, #38	@ 0x26
 800119e:	f000 fb4a 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011a2:	2026      	movs	r0, #38	@ 0x26
 80011a4:	f000 fb63 	bl	800186e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011a8:	bf00      	nop
 80011aa:	37b0      	adds	r7, #176	@ 0xb0
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40004400 	.word	0x40004400
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_a;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0aa      	sub	sp, #168	@ 0xa8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2288      	movs	r2, #136	@ 0x88
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f00a fbb7 	bl	800b93c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a4b      	ldr	r2, [pc, #300]	@ (8001300 <HAL_SAI_MspInit+0x148>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	f040 808f 	bne.w	80012f8 <HAL_SAI_MspInit+0x140>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80011da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011de:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	673b      	str	r3, [r7, #112]	@ 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 80011ec:	230d      	movs	r3, #13
 80011ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80011f0:	2311      	movs	r3, #17
 80011f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fe00 	bl	8002e0c <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_SAI_MspInit+0x5e>
    {
      Error_Handler();
 8001212:	f7ff feb7 	bl	8000f84 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_SAI_MspInit+0x14c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10b      	bne.n	8001236 <HAL_SAI_MspInit+0x7e>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800121e:	4b3a      	ldr	r3, [pc, #232]	@ (8001308 <HAL_SAI_MspInit+0x150>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001222:	4a39      	ldr	r2, [pc, #228]	@ (8001308 <HAL_SAI_MspInit+0x150>)
 8001224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001228:	6613      	str	r3, [r2, #96]	@ 0x60
 800122a:	4b37      	ldr	r3, [pc, #220]	@ (8001308 <HAL_SAI_MspInit+0x150>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001236:	4b33      	ldr	r3, [pc, #204]	@ (8001304 <HAL_SAI_MspInit+0x14c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	4a31      	ldr	r2, [pc, #196]	@ (8001304 <HAL_SAI_MspInit+0x14c>)
 800123e:	6013      	str	r3, [r2, #0]
    /**SAI1_A_Block_A GPIO Configuration
    PC3     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    PB9     ------> SAI1_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001240:	2308      	movs	r3, #8
 8001242:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001258:	230d      	movs	r3, #13
 800125a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001262:	4619      	mov	r1, r3
 8001264:	4829      	ldr	r0, [pc, #164]	@ (800130c <HAL_SAI_MspInit+0x154>)
 8001266:	f000 fd93 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800126a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800126e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001284:	230d      	movs	r3, #13
 8001286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800128e:	4619      	mov	r1, r3
 8001290:	481f      	ldr	r0, [pc, #124]	@ (8001310 <HAL_SAI_MspInit+0x158>)
 8001292:	f000 fd7d 	bl	8001d90 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai1_a.Instance = DMA2_Channel1;
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 8001298:	4a1f      	ldr	r2, [pc, #124]	@ (8001318 <HAL_SAI_MspInit+0x160>)
 800129a:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012b4:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012ba:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012c2:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 80012c4:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012c6:	2220      	movs	r2, #32
 80012c8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_LOW;
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80012d0:	4810      	ldr	r0, [pc, #64]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012d2:	f000 fae7 	bl	80018a4 <HAL_DMA_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_SAI_MspInit+0x128>
    {
      Error_Handler();
 80012dc:	f7ff fe52 	bl	8000f84 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80012e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012f0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80012f2:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <HAL_SAI_MspInit+0x15c>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 80012f8:	bf00      	nop
 80012fa:	37a8      	adds	r7, #168	@ 0xa8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40015404 	.word	0x40015404
 8001304:	2000e38c 	.word	0x2000e38c
 8001308:	40021000 	.word	0x40021000
 800130c:	48000800 	.word	0x48000800
 8001310:	48000400 	.word	0x48000400
 8001314:	200021a4 	.word	0x200021a4
 8001318:	40020408 	.word	0x40020408

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001320:	bf00      	nop
 8001322:	e7fd      	b.n	8001320 <NMI_Handler+0x4>

08001324 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <MemManage_Handler+0x4>

08001334 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <UsageFault_Handler+0x4>

08001344 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001372:	f000 f941 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <USART2_IRQHandler+0x10>)
 8001382:	f005 f913 	bl	80065ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20002270 	.word	0x20002270

08001390 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <SDMMC1_IRQHandler+0x10>)
 8001396:	f003 ffcf 	bl	8005338 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200021ec 	.word	0x200021ec

080013a4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 80013a8:	4802      	ldr	r0, [pc, #8]	@ (80013b4 <DMA2_Channel1_IRQHandler+0x10>)
 80013aa:	f000 fc12 	bl	8001bd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200021a4 	.word	0x200021a4

080013b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e00a      	b.n	80013e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ca:	f3af 8000 	nop.w
 80013ce:	4601      	mov	r1, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1c5a      	adds	r2, r3, #1
 80013d4:	60ba      	str	r2, [r7, #8]
 80013d6:	b2ca      	uxtb	r2, r1
 80013d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	3301      	adds	r3, #1
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	dbf0      	blt.n	80013ca <_read+0x12>
  }

  return len;
 80013e8:	687b      	ldr	r3, [r7, #4]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
 8001412:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800141a:	605a      	str	r2, [r3, #4]
  return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <_isatty>:

int _isatty(int file)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	@ (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f00a fac6 	bl	800ba1c <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	@ (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	@ (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20018000 	.word	0x20018000
 80014bc:	00006000 	.word	0x00006000
 80014c0:	2000e390 	.word	0x2000e390
 80014c4:	2000e520 	.word	0x2000e520

080014c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001524 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f0:	f7ff ffea 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	@ (800152c <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <LoopForever+0xe>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	@ (8001538 <LoopForever+0x16>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f00a fa85 	bl	800ba28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151e:	f7ff fa41 	bl	80009a4 <main>

08001522 <LoopForever>:

LoopForever:
    b LoopForever
 8001522:	e7fe      	b.n	8001522 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001524:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001530:	0800d5b4 	.word	0x0800d5b4
  ldr r2, =_sbss
 8001534:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001538:	2000e520 	.word	0x2000e520

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>
	...

08001540 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <HAL_Init+0x3c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a0b      	ldr	r2, [pc, #44]	@ (800157c <HAL_Init+0x3c>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001556:	2003      	movs	r0, #3
 8001558:	f000 f962 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f80f 	bl	8001580 <HAL_InitTick>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d002      	beq.n	800156e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	e001      	b.n	8001572 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156e:	f7ff fd0f 	bl	8000f90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001572:	79fb      	ldrb	r3, [r7, #7]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_InitTick+0x6c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001594:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <HAL_InitTick+0x70>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_InitTick+0x6c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f96d 	bl	800188a <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d809      	bhi.n	80015d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015c4:	f000 f937 	bl	8001836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c8:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <HAL_InitTick+0x74>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e004      	b.n	80015e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e001      	b.n	80015e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000034 	.word	0x20000034
 80015f0:	2000002c 	.word	0x2000002c
 80015f4:	20000030 	.word	0x20000030

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000034 	.word	0x20000034
 800161c:	2000e394 	.word	0x2000e394

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000e394 	.word	0x2000e394

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000034 	.word	0x20000034

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	@ (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e098      	b.n	80019e8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <HAL_DMA_Init+0x150>)
 80018be:	429a      	cmp	r2, r3
 80018c0:	d80f      	bhi.n	80018e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b4b      	ldr	r3, [pc, #300]	@ (80019f8 <HAL_DMA_Init+0x154>)
 80018ca:	4413      	add	r3, r2
 80018cc:	4a4b      	ldr	r2, [pc, #300]	@ (80019fc <HAL_DMA_Init+0x158>)
 80018ce:	fba2 2303 	umull	r2, r3, r2, r3
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	009a      	lsls	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a48      	ldr	r2, [pc, #288]	@ (8001a00 <HAL_DMA_Init+0x15c>)
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40
 80018e0:	e00e      	b.n	8001900 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b46      	ldr	r3, [pc, #280]	@ (8001a04 <HAL_DMA_Init+0x160>)
 80018ea:	4413      	add	r3, r2
 80018ec:	4a43      	ldr	r2, [pc, #268]	@ (80019fc <HAL_DMA_Init+0x158>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	091b      	lsrs	r3, r3, #4
 80018f4:	009a      	lsls	r2, r3, #2
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a42      	ldr	r2, [pc, #264]	@ (8001a08 <HAL_DMA_Init+0x164>)
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2202      	movs	r2, #2
 8001904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800191a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001924:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800195a:	d039      	beq.n	80019d0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	4a27      	ldr	r2, [pc, #156]	@ (8001a00 <HAL_DMA_Init+0x15c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d11a      	bne.n	800199c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001966:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <HAL_DMA_Init+0x168>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800196e:	f003 031c 	and.w	r3, r3, #28
 8001972:	210f      	movs	r1, #15
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4924      	ldr	r1, [pc, #144]	@ (8001a0c <HAL_DMA_Init+0x168>)
 800197c:	4013      	ands	r3, r2
 800197e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001980:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_DMA_Init+0x168>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198c:	f003 031c 	and.w	r3, r3, #28
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	491d      	ldr	r1, [pc, #116]	@ (8001a0c <HAL_DMA_Init+0x168>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
 800199a:	e019      	b.n	80019d0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800199c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <HAL_DMA_Init+0x16c>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a4:	f003 031c 	and.w	r3, r3, #28
 80019a8:	210f      	movs	r1, #15
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	4917      	ldr	r1, [pc, #92]	@ (8001a10 <HAL_DMA_Init+0x16c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_DMA_Init+0x16c>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6859      	ldr	r1, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f003 031c 	and.w	r3, r3, #28
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	4911      	ldr	r1, [pc, #68]	@ (8001a10 <HAL_DMA_Init+0x16c>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	40020407 	.word	0x40020407
 80019f8:	bffdfff8 	.word	0xbffdfff8
 80019fc:	cccccccd 	.word	0xcccccccd
 8001a00:	40020000 	.word	0x40020000
 8001a04:	bffdfbf8 	.word	0xbffdfbf8
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	400200a8 	.word	0x400200a8
 8001a10:	400204a8 	.word	0x400204a8

08001a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_DMA_Start_IT+0x20>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e04b      	b.n	8001acc <HAL_DMA_Start_IT+0xb8>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d13a      	bne.n	8001abe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f95f 	bl	8001d30 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f042 020e 	orr.w	r2, r2, #14
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e00f      	b.n	8001aac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0204 	bic.w	r2, r2, #4
 8001a9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 020a 	orr.w	r2, r2, #10
 8001aaa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	e005      	b.n	8001aca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d008      	beq.n	8001afe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e022      	b.n	8001b44 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 020e 	bic.w	r2, r2, #14
 8001b0c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0201 	bic.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f003 021c 	and.w	r2, r3, #28
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b30:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d005      	beq.n	8001b74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	73fb      	strb	r3, [r7, #15]
 8001b72:	e029      	b.n	8001bc8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 020e 	bic.w	r2, r2, #14
 8001b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0201 	bic.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	f003 021c 	and.w	r2, r3, #28
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	4798      	blx	r3
    }
  }
  return status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f003 031c 	and.w	r3, r3, #28
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d026      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x7a>
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d021      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0204 	bic.w	r2, r2, #4
 8001c24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f003 021c 	and.w	r2, r3, #28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	2104      	movs	r1, #4
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d071      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c4a:	e06c      	b.n	8001d26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c50:	f003 031c 	and.w	r3, r3, #28
 8001c54:	2202      	movs	r2, #2
 8001c56:	409a      	lsls	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d02e      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xec>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d029      	beq.n	8001cbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020a 	bic.w	r2, r2, #10
 8001c86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c94:	f003 021c 	and.w	r2, r3, #28
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d038      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cbc:	e033      	b.n	8001d26 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f003 031c 	and.w	r3, r3, #28
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02a      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x156>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d025      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 020e 	bic.w	r2, r2, #14
 8001cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf0:	f003 021c 	and.w	r2, r3, #28
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
}
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
 8001d3c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f003 021c 	and.w	r2, r3, #28
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b10      	cmp	r3, #16
 8001d60:	d108      	bne.n	8001d74 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d72:	e007      	b.n	8001d84 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e17f      	b.n	80020a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8171 	beq.w	800209a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_GPIO_Init+0x40>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d130      	bne.n	8001e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4013      	ands	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e06:	2201      	movs	r2, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4013      	ands	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f003 0201 	and.w	r2, r3, #1
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d118      	bne.n	8001e70 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e44:	2201      	movs	r2, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	08db      	lsrs	r3, r3, #3
 8001e5a:	f003 0201 	and.w	r2, r3, #1
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d017      	beq.n	8001eac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	2203      	movs	r2, #3
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d123      	bne.n	8001f00 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	220f      	movs	r2, #15
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	08da      	lsrs	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3208      	adds	r2, #8
 8001efa:	6939      	ldr	r1, [r7, #16]
 8001efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	4013      	ands	r3, r2
 8001f16:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0203 	and.w	r2, r3, #3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80ac 	beq.w	800209a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f42:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_GPIO_Init+0x330>)
 8001f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f46:	4a5e      	ldr	r2, [pc, #376]	@ (80020c0 <HAL_GPIO_Init+0x330>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4e:	4b5c      	ldr	r3, [pc, #368]	@ (80020c0 <HAL_GPIO_Init+0x330>)
 8001f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f5a:	4a5a      	ldr	r2, [pc, #360]	@ (80020c4 <HAL_GPIO_Init+0x334>)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	089b      	lsrs	r3, r3, #2
 8001f60:	3302      	adds	r3, #2
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	220f      	movs	r2, #15
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f84:	d025      	beq.n	8001fd2 <HAL_GPIO_Init+0x242>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4f      	ldr	r2, [pc, #316]	@ (80020c8 <HAL_GPIO_Init+0x338>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <HAL_GPIO_Init+0x23e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	@ (80020cc <HAL_GPIO_Init+0x33c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d019      	beq.n	8001fca <HAL_GPIO_Init+0x23a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4d      	ldr	r2, [pc, #308]	@ (80020d0 <HAL_GPIO_Init+0x340>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0x236>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	@ (80020d4 <HAL_GPIO_Init+0x344>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00d      	beq.n	8001fc2 <HAL_GPIO_Init+0x232>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80020d8 <HAL_GPIO_Init+0x348>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d007      	beq.n	8001fbe <HAL_GPIO_Init+0x22e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80020dc <HAL_GPIO_Init+0x34c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d101      	bne.n	8001fba <HAL_GPIO_Init+0x22a>
 8001fb6:	2306      	movs	r3, #6
 8001fb8:	e00c      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fba:	2307      	movs	r3, #7
 8001fbc:	e00a      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fbe:	2305      	movs	r3, #5
 8001fc0:	e008      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	e006      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e004      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e002      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_GPIO_Init+0x244>
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	f002 0203 	and.w	r2, r2, #3
 8001fda:	0092      	lsls	r2, r2, #2
 8001fdc:	4093      	lsls	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe4:	4937      	ldr	r1, [pc, #220]	@ (80020c4 <HAL_GPIO_Init+0x334>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002016:	4a32      	ldr	r2, [pc, #200]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	43db      	mvns	r3, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4013      	ands	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002040:	4a27      	ldr	r2, [pc, #156]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4013      	ands	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	43db      	mvns	r3, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4013      	ands	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <HAL_GPIO_Init+0x350>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f47f ae78 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	371c      	adds	r7, #28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	48000c00 	.word	0x48000c00
 80020d4:	48001000 	.word	0x48001000
 80020d8:	48001400 	.word	0x48001400
 80020dc:	48001800 	.word	0x48001800
 80020e0:	40010400 	.word	0x40010400

080020e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	887b      	ldrh	r3, [r7, #2]
 80020f6:	4013      	ands	r3, r2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d002      	beq.n	8002102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002130:	e002      	b.n	8002138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <HAL_PWREx_GetVoltageRange+0x18>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800216e:	d130      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800217c:	d038      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002186:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800218e:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2232      	movs	r2, #50	@ 0x32
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	e002      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b8:	d102      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f2      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021cc:	d110      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e00f      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021de:	d007      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e0:	4b07      	ldr	r3, [pc, #28]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021e8:	4a05      	ldr	r2, [pc, #20]	@ (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000
 8002204:	2000002c 	.word	0x2000002c
 8002208:	431bde83 	.word	0x431bde83

0800220c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e3ca      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4b97      	ldr	r3, [pc, #604]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b94      	ldr	r3, [pc, #592]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80e4 	beq.w	8002408 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_RCC_OscConfig+0x4a>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f040 808b 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 8087 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	4b89      	ldr	r3, [pc, #548]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e3a2      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4b82      	ldr	r3, [pc, #520]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_RCC_OscConfig+0x7c>
 800227e:	4b7f      	ldr	r3, [pc, #508]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002286:	e005      	b.n	8002294 <HAL_RCC_OscConfig+0x88>
 8002288:	4b7c      	ldr	r3, [pc, #496]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002294:	4293      	cmp	r3, r2
 8002296:	d223      	bcs.n	80022e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd55 	bl	8002d4c <RCC_SetFlashLatencyFromMSIRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e383      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b73      	ldr	r3, [pc, #460]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a72      	ldr	r2, [pc, #456]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b70      	ldr	r3, [pc, #448]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	496d      	ldr	r1, [pc, #436]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b6c      	ldr	r3, [pc, #432]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	4968      	ldr	r1, [pc, #416]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e025      	b.n	800232c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b66      	ldr	r3, [pc, #408]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a65      	ldr	r2, [pc, #404]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b63      	ldr	r3, [pc, #396]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4960      	ldr	r1, [pc, #384]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fe:	4b5f      	ldr	r3, [pc, #380]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	495b      	ldr	r1, [pc, #364]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fd15 	bl	8002d4c <RCC_SetFlashLatencyFromMSIRange>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e343      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232c:	f000 fc4a 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b52      	ldr	r3, [pc, #328]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	4950      	ldr	r1, [pc, #320]	@ (8002480 <HAL_RCC_OscConfig+0x274>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	4a4e      	ldr	r2, [pc, #312]	@ (8002484 <HAL_RCC_OscConfig+0x278>)
 800234a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234c:	4b4e      	ldr	r3, [pc, #312]	@ (8002488 <HAL_RCC_OscConfig+0x27c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff f915 	bl	8001580 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d052      	beq.n	8002406 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e327      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d032      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236c:	4b43      	ldr	r3, [pc, #268]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a42      	ldr	r2, [pc, #264]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002378:	f7ff f952 	bl	8001620 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002380:	f7ff f94e 	bl	8001620 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e310      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	4b3a      	ldr	r3, [pc, #232]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a36      	ldr	r2, [pc, #216]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b34      	ldr	r3, [pc, #208]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4931      	ldr	r1, [pc, #196]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023bc:	4b2f      	ldr	r3, [pc, #188]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	492c      	ldr	r1, [pc, #176]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e01a      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a29      	ldr	r2, [pc, #164]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023de:	f7ff f91f 	bl	8001620 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e6:	f7ff f91b 	bl	8001620 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e2dd      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f8:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x1da>
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002406:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d074      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x21a>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4b15      	ldr	r3, [pc, #84]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d064      	beq.n	80024fc <HAL_RCC_OscConfig+0x2f0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d160      	bne.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e2ba      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x24a>
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0b      	ldr	r2, [pc, #44]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e026      	b.n	80024a4 <HAL_RCC_OscConfig+0x298>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800245e:	d115      	bne.n	800248c <HAL_RCC_OscConfig+0x280>
 8002460:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a05      	ldr	r2, [pc, #20]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002466:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a02      	ldr	r2, [pc, #8]	@ (800247c <HAL_RCC_OscConfig+0x270>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e014      	b.n	80024a4 <HAL_RCC_OscConfig+0x298>
 800247a:	bf00      	nop
 800247c:	40021000 	.word	0x40021000
 8002480:	0800d378 	.word	0x0800d378
 8002484:	2000002c 	.word	0x2000002c
 8002488:	20000030 	.word	0x20000030
 800248c:	4ba0      	ldr	r3, [pc, #640]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a9f      	ldr	r2, [pc, #636]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b9d      	ldr	r3, [pc, #628]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a9c      	ldr	r2, [pc, #624]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f8b8 	bl	8001620 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f8b4 	bl	8001620 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	@ 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e276      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4b92      	ldr	r3, [pc, #584]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7ff f8a4 	bl	8001620 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f8a0 	bl	8001620 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	@ 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e262      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	4b88      	ldr	r3, [pc, #544]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d0>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x310>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d119      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b7c      	ldr	r3, [pc, #496]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x328>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e23f      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b76      	ldr	r3, [pc, #472]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	4973      	ldr	r1, [pc, #460]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e040      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b6f      	ldr	r3, [pc, #444]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6e      	ldr	r2, [pc, #440]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff f85f 	bl	8001620 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7ff f85b 	bl	8001620 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e21d      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b65      	ldr	r3, [pc, #404]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b62      	ldr	r3, [pc, #392]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	495f      	ldr	r1, [pc, #380]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a5c      	ldr	r2, [pc, #368]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7ff f83b 	bl	8001620 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7ff f837 	bl	8001620 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e1f9      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025e6:	4a4a      	ldr	r2, [pc, #296]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff f816 	bl	8001620 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff f812 	bl	8001620 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1d4      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3ec>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002620:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fff9 	bl	8001620 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fff5 	bl	8001620 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1b7      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b32      	ldr	r3, [pc, #200]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002664:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b27      	ldr	r3, [pc, #156]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	4a26      	ldr	r2, [pc, #152]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	@ 0x58
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d118      	bne.n	80026ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7fe ffbc 	bl	8001620 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe ffb8 	bl	8001620 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e17a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <HAL_RCC_OscConfig+0x508>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026e2:	e029      	b.n	8002738 <HAL_RCC_OscConfig+0x52c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d115      	bne.n	8002718 <HAL_RCC_OscConfig+0x50c>
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	4a07      	ldr	r2, [pc, #28]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002702:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <HAL_RCC_OscConfig+0x504>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800270c:	e014      	b.n	8002738 <HAL_RCC_OscConfig+0x52c>
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	40007000 	.word	0x40007000
 8002718:	4b9c      	ldr	r3, [pc, #624]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	4a9b      	ldr	r2, [pc, #620]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002720:	f023 0301 	bic.w	r3, r3, #1
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002728:	4b98      	ldr	r3, [pc, #608]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a97      	ldr	r2, [pc, #604]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002730:	f023 0304 	bic.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d016      	beq.n	800276e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002740:	f7fe ff6e 	bl	8001620 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002748:	f7fe ff6a 	bl	8001620 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e12a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275e:	4b8b      	ldr	r3, [pc, #556]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0ed      	beq.n	8002748 <HAL_RCC_OscConfig+0x53c>
 800276c:	e015      	b.n	800279a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800276e:	f7fe ff57 	bl	8001620 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe ff53 	bl	8001620 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e113      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b7f      	ldr	r3, [pc, #508]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ed      	bne.n	8002776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b7a      	ldr	r3, [pc, #488]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a4:	4a79      	ldr	r2, [pc, #484]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80fe 	beq.w	80029b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 80d0 	bne.w	8002960 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c0:	4b72      	ldr	r3, [pc, #456]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d130      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027de:	3b01      	subs	r3, #1
 80027e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d127      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d11f      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002800:	2a07      	cmp	r2, #7
 8002802:	bf14      	ite	ne
 8002804:	2201      	movne	r2, #1
 8002806:	2200      	moveq	r2, #0
 8002808:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	4293      	cmp	r3, r2
 800280c:	d113      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d109      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d06e      	beq.n	8002914 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d069      	beq.n	8002910 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800283c:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002848:	4b50      	ldr	r3, [pc, #320]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0ad      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002858:	4b4c      	ldr	r3, [pc, #304]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a4b      	ldr	r2, [pc, #300]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7fe fedc 	bl	8001620 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fed8 	bl	8001620 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e09a      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287e:	4b43      	ldr	r3, [pc, #268]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288a:	4b40      	ldr	r3, [pc, #256]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b40      	ldr	r3, [pc, #256]	@ (8002990 <HAL_RCC_OscConfig+0x784>)
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800289a:	3a01      	subs	r2, #1
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0552      	lsls	r2, r2, #21
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80028c4:	0912      	lsrs	r2, r2, #4
 80028c6:	0452      	lsls	r2, r2, #17
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4930      	ldr	r1, [pc, #192]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d0:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2d      	ldr	r2, [pc, #180]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b2b      	ldr	r3, [pc, #172]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe fe9a 	bl	8001620 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fe96 	bl	8001620 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e058      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b22      	ldr	r3, [pc, #136]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	e050      	b.n	80029b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e04f      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b1d      	ldr	r3, [pc, #116]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d148      	bne.n	80029b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002920:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292c:	4b17      	ldr	r3, [pc, #92]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a16      	ldr	r2, [pc, #88]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe fe72 	bl	8001620 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fe6e 	bl	8001620 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e030      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x734>
 800295e:	e028      	b.n	80029b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d023      	beq.n	80029ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <HAL_RCC_OscConfig+0x780>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fe55 	bl	8001620 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	e00c      	b.n	8002994 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fe51 	bl	8001620 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d905      	bls.n	8002994 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e013      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
 800298c:	40021000 	.word	0x40021000
 8002990:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_RCC_OscConfig+0x7b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ec      	bne.n	800297a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x7b0>)
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	4905      	ldr	r1, [pc, #20]	@ (80029bc <HAL_RCC_OscConfig+0x7b0>)
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_OscConfig+0x7b4>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	60cb      	str	r3, [r1, #12]
 80029ac:	e001      	b.n	80029b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3720      	adds	r7, #32
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40021000 	.word	0x40021000
 80029c0:	feeefffc 	.word	0xfeeefffc

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0e7      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b72      	ldr	r3, [pc, #456]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4970      	ldr	r1, [pc, #448]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b6e      	ldr	r3, [pc, #440]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0cf      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d010      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	4b66      	ldr	r3, [pc, #408]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d908      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a24:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	4960      	ldr	r1, [pc, #384]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04c      	beq.n	8002adc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d107      	bne.n	8002a5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a4a:	4b5a      	ldr	r3, [pc, #360]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d121      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0a6      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a62:	4b54      	ldr	r3, [pc, #336]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d115      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e09a      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e08e      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e086      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b46      	ldr	r3, [pc, #280]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4943      	ldr	r1, [pc, #268]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aac:	f7fe fdb8 	bl	8001620 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fe fdb4 	bl	8001620 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e06e      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d010      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	4b31      	ldr	r3, [pc, #196]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d208      	bcs.n	8002b0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af8:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	492b      	ldr	r1, [pc, #172]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0a:	4b29      	ldr	r3, [pc, #164]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d210      	bcs.n	8002b3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0207 	bic.w	r2, r3, #7
 8002b20:	4923      	ldr	r1, [pc, #140]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b28:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e036      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b46:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4918      	ldr	r1, [pc, #96]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d009      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b64:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4910      	ldr	r1, [pc, #64]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b78:	f000 f824 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	091b      	lsrs	r3, r3, #4
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	490b      	ldr	r1, [pc, #44]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1f4>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
 8002b94:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1f8>)
 8002b96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1fc>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fcef 	bl	8001580 <HAL_InitTick>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ba6:	7afb      	ldrb	r3, [r7, #11]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	0800d378 	.word	0x0800d378
 8002bbc:	2000002c 	.word	0x2000002c
 8002bc0:	20000030 	.word	0x20000030

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b089      	sub	sp, #36	@ 0x24
 8002bc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b0c      	cmp	r3, #12
 8002bf0:	d121      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d11e      	bne.n	8002c36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bf8:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c04:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c0a:	0a1b      	lsrs	r3, r3, #8
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	61fb      	str	r3, [r7, #28]
 8002c12:	e005      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c20:	4a2b      	ldr	r2, [pc, #172]	@ (8002cd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10d      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c34:	e00a      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c3e:	61bb      	str	r3, [r7, #24]
 8002c40:	e004      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b0c      	cmp	r3, #12
 8002c50:	d134      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d003      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d003      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0xac>
 8002c68:	e005      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c6c:	617b      	str	r3, [r7, #20]
      break;
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c72:	617b      	str	r3, [r7, #20]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	617b      	str	r3, [r7, #20]
      break;
 8002c7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	3301      	adds	r3, #1
 8002c88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	fb03 f202 	mul.w	r2, r3, r2
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	0e5b      	lsrs	r3, r3, #25
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	3301      	adds	r3, #1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cbc:	69bb      	ldr	r3, [r7, #24]
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3724      	adds	r7, #36	@ 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	0800d390 	.word	0x0800d390
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	01770000 	.word	0x01770000

08002cdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	@ (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	2000002c 	.word	0x2000002c

08002cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0a1b      	lsrs	r3, r3, #8
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4904      	ldr	r1, [pc, #16]	@ (8002d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	0800d388 	.word	0x0800d388

08002d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d24:	f7ff ffda 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0adb      	lsrs	r3, r3, #11
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4904      	ldr	r1, [pc, #16]	@ (8002d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	0800d388 	.word	0x0800d388

08002d4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d58:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d64:	f7ff f9ee 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002d68:	6178      	str	r0, [r7, #20]
 8002d6a:	e014      	b.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	4a24      	ldr	r2, [pc, #144]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d84:	f7ff f9de 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002d88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002e04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d94:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d9c:	d10b      	bne.n	8002db6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b80      	cmp	r3, #128	@ 0x80
 8002da2:	d919      	bls.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002da8:	d902      	bls.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002daa:	2302      	movs	r3, #2
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e013      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db0:	2301      	movs	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	e010      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b80      	cmp	r3, #128	@ 0x80
 8002dba:	d902      	bls.n	8002dc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	e00a      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b80      	cmp	r3, #128	@ 0x80
 8002dc6:	d102      	bne.n	8002dce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dc8:	2302      	movs	r3, #2
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	e004      	b.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b70      	cmp	r3, #112	@ 0x70
 8002dd2:	d101      	bne.n	8002dd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 0207 	bic.w	r2, r3, #7
 8002de0:	4909      	ldr	r1, [pc, #36]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002de8:	4b07      	ldr	r3, [pc, #28]	@ (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e000      	b.n	8002dfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40022000 	.word	0x40022000

08002e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e14:	2300      	movs	r3, #0
 8002e16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d041      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e2c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e30:	d02a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e32:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002e36:	d824      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e3c:	d008      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002e42:	d81e      	bhi.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e4c:	d010      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e4e:	e018      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e50:	4b86      	ldr	r3, [pc, #536]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4a85      	ldr	r2, [pc, #532]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e5c:	e015      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2100      	movs	r1, #0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 f829 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e6e:	e00c      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3320      	adds	r3, #32
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f001 f914 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	74fb      	strb	r3, [r7, #19]
      break;
 8002e86:	e000      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e90:	4b76      	ldr	r3, [pc, #472]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9e:	4973      	ldr	r1, [pc, #460]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ea6:	e001      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d041      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ebc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ec0:	d02a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ec2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ec6:	d824      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ec8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ed2:	d81e      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002ed8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002edc:	d010      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ede:	e018      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee0:	4b62      	ldr	r3, [pc, #392]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a61      	ldr	r2, [pc, #388]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002eec:	e015      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 ffe1 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002efe:	e00c      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3320      	adds	r3, #32
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f8cc 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f10:	e003      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	74fb      	strb	r3, [r7, #19]
      break;
 8002f16:	e000      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7cfb      	ldrb	r3, [r7, #19]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f20:	4b52      	ldr	r3, [pc, #328]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f2e:	494f      	ldr	r1, [pc, #316]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f36:	e001      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80a0 	beq.w	800308a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f4e:	4b47      	ldr	r3, [pc, #284]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f64:	4b41      	ldr	r3, [pc, #260]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	4a40      	ldr	r2, [pc, #256]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f70:	4b3e      	ldr	r3, [pc, #248]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f78:	60bb      	str	r3, [r7, #8]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f80:	4b3b      	ldr	r3, [pc, #236]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3a      	ldr	r2, [pc, #232]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fb48 	bl	8001620 <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f92:	e009      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f94:	f7fe fb44 	bl	8001620 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa6:	e005      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fa8:	4b31      	ldr	r3, [pc, #196]	@ (8003070 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ef      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d15c      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fba:	4b2c      	ldr	r3, [pc, #176]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d01f      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d019      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fd8:	4b24      	ldr	r3, [pc, #144]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4b21      	ldr	r3, [pc, #132]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fea:	4a20      	ldr	r2, [pc, #128]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003004:	4a19      	ldr	r2, [pc, #100]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe fb03 	bl	8001620 <HAL_GetTick>
 800301a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301c:	e00b      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe faff 	bl	8001620 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d902      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	74fb      	strb	r3, [r7, #19]
            break;
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003036:	4b0d      	ldr	r3, [pc, #52]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ec      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003050:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305a:	4904      	ldr	r1, [pc, #16]	@ (800306c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003062:	e009      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003064:	7cfb      	ldrb	r3, [r7, #19]
 8003066:	74bb      	strb	r3, [r7, #18]
 8003068:	e006      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	7cfb      	ldrb	r3, [r7, #19]
 8003076:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003078:	7c7b      	ldrb	r3, [r7, #17]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307e:	4b9e      	ldr	r3, [pc, #632]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003082:	4a9d      	ldr	r2, [pc, #628]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003088:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003096:	4b98      	ldr	r3, [pc, #608]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f023 0203 	bic.w	r2, r3, #3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a4:	4994      	ldr	r1, [pc, #592]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b8:	4b8f      	ldr	r3, [pc, #572]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030be:	f023 020c 	bic.w	r2, r3, #12
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c6:	498c      	ldr	r1, [pc, #560]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030da:	4b87      	ldr	r3, [pc, #540]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e8:	4983      	ldr	r1, [pc, #524]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030fc:	4b7e      	ldr	r3, [pc, #504]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003102:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	497b      	ldr	r1, [pc, #492]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800311e:	4b76      	ldr	r3, [pc, #472]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312c:	4972      	ldr	r1, [pc, #456]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003140:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003146:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314e:	496a      	ldr	r1, [pc, #424]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003162:	4b65      	ldr	r3, [pc, #404]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003168:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	4961      	ldr	r1, [pc, #388]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003184:	4b5c      	ldr	r3, [pc, #368]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003192:	4959      	ldr	r1, [pc, #356]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003194:	4313      	orrs	r3, r2
 8003196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031a6:	4b54      	ldr	r3, [pc, #336]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031b4:	4950      	ldr	r1, [pc, #320]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031c8:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	4948      	ldr	r1, [pc, #288]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ea:	4b43      	ldr	r3, [pc, #268]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	493f      	ldr	r1, [pc, #252]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d028      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800320c:	4b3a      	ldr	r3, [pc, #232]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800321a:	4937      	ldr	r1, [pc, #220]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800322a:	d106      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800322c:	4b32      	ldr	r3, [pc, #200]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	4a31      	ldr	r2, [pc, #196]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003236:	60d3      	str	r3, [r2, #12]
 8003238:	e011      	b.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800323e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003242:	d10c      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	2101      	movs	r1, #1
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe36 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d028      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003270:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003278:	491f      	ldr	r1, [pc, #124]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003284:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003288:	d106      	bne.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800328a:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003294:	60d3      	str	r3, [r2, #12]
 8003296:	e011      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800329c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032a0:	d10c      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3304      	adds	r3, #4
 80032a6:	2101      	movs	r1, #1
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fe07 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032b2:	7cfb      	ldrb	r3, [r7, #19]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d02b      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032c8:	4b0b      	ldr	r3, [pc, #44]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d6:	4908      	ldr	r1, [pc, #32]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032e6:	d109      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a02      	ldr	r2, [pc, #8]	@ (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032f2:	60d3      	str	r3, [r2, #12]
 80032f4:	e014      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003300:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003304:	d10c      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3304      	adds	r3, #4
 800330a:	2101      	movs	r1, #1
 800330c:	4618      	mov	r0, r3
 800330e:	f000 fdd5 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003312:	4603      	mov	r3, r0
 8003314:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003316:	7cfb      	ldrb	r3, [r7, #19]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d02f      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800332c:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800333a:	4928      	ldr	r1, [pc, #160]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003346:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800334a:	d10d      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2102      	movs	r1, #2
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fdb2 	bl	8003ebc <RCCEx_PLLSAI1_Config>
 8003358:	4603      	mov	r3, r0
 800335a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d014      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	74bb      	strb	r3, [r7, #18]
 8003366:	e011      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800336c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3320      	adds	r3, #32
 8003376:	2102      	movs	r1, #2
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fe93 	bl	80040a4 <RCCEx_PLLSAI2_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003398:	4b10      	ldr	r3, [pc, #64]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033a6:	490d      	ldr	r1, [pc, #52]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033ca:	4904      	ldr	r1, [pc, #16]	@ (80033dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000

080033e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033f2:	d13e      	bne.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80033f4:	4bb2      	ldr	r3, [pc, #712]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033fe:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003406:	d028      	beq.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800340e:	f200 8542 	bhi.w	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003418:	d005      	beq.n	8003426 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003420:	d00e      	beq.n	8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003422:	f000 bd38 	b.w	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003426:	4ba6      	ldr	r3, [pc, #664]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	f040 8532 	bne.w	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800343a:	61fb      	str	r3, [r7, #28]
      break;
 800343c:	f000 bd2d 	b.w	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003440:	4b9f      	ldr	r3, [pc, #636]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003442:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	f040 8527 	bne.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003450:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003454:	61fb      	str	r3, [r7, #28]
      break;
 8003456:	f000 bd22 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800345a:	4b99      	ldr	r3, [pc, #612]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003462:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003466:	f040 851c 	bne.w	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800346a:	4b96      	ldr	r3, [pc, #600]	@ (80036c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 800346c:	61fb      	str	r3, [r7, #28]
      break;
 800346e:	f000 bd18 	b.w	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003472:	4b93      	ldr	r3, [pc, #588]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d036      	beq.n	80034f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d840      	bhi.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d020      	beq.n	80034d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003494:	e039      	b.n	800350a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003496:	4b8a      	ldr	r3, [pc, #552]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d116      	bne.n	80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80034a2:	4b87      	ldr	r3, [pc, #540]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80034ae:	4b84      	ldr	r3, [pc, #528]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	091b      	lsrs	r3, r3, #4
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	e005      	b.n	80034c6 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80034ba:	4b81      	ldr	r3, [pc, #516]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034c0:	0a1b      	lsrs	r3, r3, #8
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4a80      	ldr	r2, [pc, #512]	@ (80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80034ce:	e01f      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
      break;
 80034d4:	e01c      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80034d6:	4b7a      	ldr	r3, [pc, #488]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e2:	d102      	bne.n	80034ea <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80034e4:	4b79      	ldr	r3, [pc, #484]	@ (80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80034e6:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80034e8:	e012      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
      break;
 80034ee:	e00f      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80034f0:	4b73      	ldr	r3, [pc, #460]	@ (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034fc:	d102      	bne.n	8003504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80034fe:	4b74      	ldr	r3, [pc, #464]	@ (80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003500:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003502:	e005      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
      break;
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
      break;
 800350e:	bf00      	nop
    }

    switch(PeriphClk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003516:	f000 80dd 	beq.w	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003520:	f200 84c1 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800352a:	f000 80d3 	beq.w	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003534:	f200 84b7 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353e:	f000 835f 	beq.w	8003c00 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	f200 84ad 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003552:	f000 847e 	beq.w	8003e52 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800355c:	f200 84a3 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003566:	f000 82cd 	beq.w	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003570:	f200 8499 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800357a:	f000 80ab 	beq.w	80036d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003584:	f200 848f 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358e:	f000 8090 	beq.w	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003598:	f200 8485 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a2:	d07f      	beq.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035aa:	f200 847c 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b4:	f000 8403 	beq.w	8003dbe <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035be:	f200 8472 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035c8:	f000 83af 	beq.w	8003d2a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d2:	f200 8468 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035dc:	f000 8379 	beq.w	8003cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035e6:	f200 845e 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b80      	cmp	r3, #128	@ 0x80
 80035ee:	f000 8344 	beq.w	8003c7a <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b80      	cmp	r3, #128	@ 0x80
 80035f6:	f200 8456 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d84b      	bhi.n	8003698 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 844f 	beq.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	2b1f      	cmp	r3, #31
 800360e:	f200 844a 	bhi.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003612:	a201      	add	r2, pc, #4	@ (adr r2, 8003618 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003618:	08003801 	.word	0x08003801
 800361c:	0800386f 	.word	0x0800386f
 8003620:	08003ea7 	.word	0x08003ea7
 8003624:	08003903 	.word	0x08003903
 8003628:	08003ea7 	.word	0x08003ea7
 800362c:	08003ea7 	.word	0x08003ea7
 8003630:	08003ea7 	.word	0x08003ea7
 8003634:	08003989 	.word	0x08003989
 8003638:	08003ea7 	.word	0x08003ea7
 800363c:	08003ea7 	.word	0x08003ea7
 8003640:	08003ea7 	.word	0x08003ea7
 8003644:	08003ea7 	.word	0x08003ea7
 8003648:	08003ea7 	.word	0x08003ea7
 800364c:	08003ea7 	.word	0x08003ea7
 8003650:	08003ea7 	.word	0x08003ea7
 8003654:	08003a01 	.word	0x08003a01
 8003658:	08003ea7 	.word	0x08003ea7
 800365c:	08003ea7 	.word	0x08003ea7
 8003660:	08003ea7 	.word	0x08003ea7
 8003664:	08003ea7 	.word	0x08003ea7
 8003668:	08003ea7 	.word	0x08003ea7
 800366c:	08003ea7 	.word	0x08003ea7
 8003670:	08003ea7 	.word	0x08003ea7
 8003674:	08003ea7 	.word	0x08003ea7
 8003678:	08003ea7 	.word	0x08003ea7
 800367c:	08003ea7 	.word	0x08003ea7
 8003680:	08003ea7 	.word	0x08003ea7
 8003684:	08003ea7 	.word	0x08003ea7
 8003688:	08003ea7 	.word	0x08003ea7
 800368c:	08003ea7 	.word	0x08003ea7
 8003690:	08003ea7 	.word	0x08003ea7
 8003694:	08003a83 	.word	0x08003a83
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b40      	cmp	r3, #64	@ 0x40
 800369c:	f000 82c1 	beq.w	8003c22 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80036a0:	f000 bc01 	b.w	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036aa:	f000 fdd9 	bl	8004260 <RCCEx_GetSAIxPeriphCLKFreq>
 80036ae:	61f8      	str	r0, [r7, #28]
      break;
 80036b0:	e3fa      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80036b2:	69b9      	ldr	r1, [r7, #24]
 80036b4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80036b8:	f000 fdd2 	bl	8004260 <RCCEx_GetSAIxPeriphCLKFreq>
 80036bc:	61f8      	str	r0, [r7, #28]
      break;
 80036be:	e3f3      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80036c0:	40021000 	.word	0x40021000
 80036c4:	000bb800 	.word	0x000bb800
 80036c8:	0800d390 	.word	0x0800d390
 80036cc:	00f42400 	.word	0x00f42400
 80036d0:	01770000 	.word	0x01770000
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80036d4:	4ba9      	ldr	r3, [pc, #676]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80036de:	613b      	str	r3, [r7, #16]
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036e6:	d00c      	beq.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80036ee:	d87f      	bhi.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036f6:	d04e      	beq.n	8003796 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036fe:	d01d      	beq.n	800373c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003700:	e076      	b.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003702:	4b9e      	ldr	r3, [pc, #632]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b02      	cmp	r3, #2
 800370c:	d172      	bne.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800370e:	4b9b      	ldr	r3, [pc, #620]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800371a:	4b98      	ldr	r3, [pc, #608]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	e005      	b.n	8003732 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003726:	4b95      	ldr	r3, [pc, #596]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003728:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	4a93      	ldr	r2, [pc, #588]	@ (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003738:	61fb      	str	r3, [r7, #28]
          break;
 800373a:	e05b      	b.n	80037f4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800373c:	4b8f      	ldr	r3, [pc, #572]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003744:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003748:	d156      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800374a:	4b8c      	ldr	r3, [pc, #560]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003756:	d14f      	bne.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003758:	4b88      	ldr	r3, [pc, #544]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003762:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	fb03 f202 	mul.w	r2, r3, r2
 800376c:	4b83      	ldr	r3, [pc, #524]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	3301      	adds	r3, #1
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800377e:	4b7f      	ldr	r3, [pc, #508]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	0d5b      	lsrs	r3, r3, #21
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	3301      	adds	r3, #1
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	61fb      	str	r3, [r7, #28]
          break;
 8003794:	e030      	b.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003796:	4b79      	ldr	r3, [pc, #484]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800379e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037a2:	d12b      	bne.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80037a4:	4b75      	ldr	r3, [pc, #468]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037b0:	d124      	bne.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80037b2:	4b72      	ldr	r3, [pc, #456]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037bc:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	fb03 f202 	mul.w	r2, r3, r2
 80037c6:	4b6d      	ldr	r3, [pc, #436]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	091b      	lsrs	r3, r3, #4
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	3301      	adds	r3, #1
 80037d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80037d8:	4b68      	ldr	r3, [pc, #416]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	0d5b      	lsrs	r3, r3, #21
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	3301      	adds	r3, #1
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ec:	61fb      	str	r3, [r7, #28]
          break;
 80037ee:	e005      	b.n	80037fc <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80037f0:	bf00      	nop
 80037f2:	e359      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037f4:	bf00      	nop
 80037f6:	e357      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037f8:	bf00      	nop
 80037fa:	e355      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037fc:	bf00      	nop
        break;
 80037fe:	e353      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003800:	4b5e      	ldr	r3, [pc, #376]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b03      	cmp	r3, #3
 8003810:	d827      	bhi.n	8003862 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003812:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003829 	.word	0x08003829
 800381c:	08003831 	.word	0x08003831
 8003820:	08003839 	.word	0x08003839
 8003824:	0800384d 	.word	0x0800384d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003828:	f7ff fa7a 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 800382c:	61f8      	str	r0, [r7, #28]
          break;
 800382e:	e01d      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003830:	f7ff f9c8 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003834:	61f8      	str	r0, [r7, #28]
          break;
 8003836:	e019      	b.n	800386c <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003838:	4b50      	ldr	r3, [pc, #320]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003844:	d10f      	bne.n	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003846:	4b4f      	ldr	r3, [pc, #316]	@ (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003848:	61fb      	str	r3, [r7, #28]
          break;
 800384a:	e00c      	b.n	8003866 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800384c:	4b4b      	ldr	r3, [pc, #300]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d107      	bne.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800385a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800385e:	61fb      	str	r3, [r7, #28]
          break;
 8003860:	e003      	b.n	800386a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003862:	bf00      	nop
 8003864:	e320      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003866:	bf00      	nop
 8003868:	e31e      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800386a:	bf00      	nop
        break;
 800386c:	e31c      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800386e:	4b43      	ldr	r3, [pc, #268]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d83a      	bhi.n	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	080038bd 	.word	0x080038bd
 800388c:	080038f7 	.word	0x080038f7
 8003890:	080038f7 	.word	0x080038f7
 8003894:	080038f7 	.word	0x080038f7
 8003898:	080038c5 	.word	0x080038c5
 800389c:	080038f7 	.word	0x080038f7
 80038a0:	080038f7 	.word	0x080038f7
 80038a4:	080038f7 	.word	0x080038f7
 80038a8:	080038cd 	.word	0x080038cd
 80038ac:	080038f7 	.word	0x080038f7
 80038b0:	080038f7 	.word	0x080038f7
 80038b4:	080038f7 	.word	0x080038f7
 80038b8:	080038e1 	.word	0x080038e1
          frequency = HAL_RCC_GetPCLK1Freq();
 80038bc:	f7ff fa1a 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80038c0:	61f8      	str	r0, [r7, #28]
          break;
 80038c2:	e01d      	b.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80038c4:	f7ff f97e 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80038c8:	61f8      	str	r0, [r7, #28]
          break;
 80038ca:	e019      	b.n	8003900 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038cc:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d8:	d10f      	bne.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80038da:	4b2a      	ldr	r3, [pc, #168]	@ (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80038dc:	61fb      	str	r3, [r7, #28]
          break;
 80038de:	e00c      	b.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038e0:	4b26      	ldr	r3, [pc, #152]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d107      	bne.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80038ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f2:	61fb      	str	r3, [r7, #28]
          break;
 80038f4:	e003      	b.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80038f6:	bf00      	nop
 80038f8:	e2d6      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038fa:	bf00      	nop
 80038fc:	e2d4      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038fe:	bf00      	nop
        break;
 8003900:	e2d2      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003902:	4b1e      	ldr	r3, [pc, #120]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003908:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b30      	cmp	r3, #48	@ 0x30
 8003912:	d021      	beq.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b30      	cmp	r3, #48	@ 0x30
 8003918:	d829      	bhi.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b20      	cmp	r3, #32
 800391e:	d011      	beq.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b20      	cmp	r3, #32
 8003924:	d823      	bhi.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b10      	cmp	r3, #16
 8003930:	d004      	beq.n	800393c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003932:	e01c      	b.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003934:	f7ff f9de 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003938:	61f8      	str	r0, [r7, #28]
          break;
 800393a:	e01d      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 800393c:	f7ff f942 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003940:	61f8      	str	r0, [r7, #28]
          break;
 8003942:	e019      	b.n	8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003944:	4b0d      	ldr	r3, [pc, #52]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003950:	d10f      	bne.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003952:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003954:	61fb      	str	r3, [r7, #28]
          break;
 8003956:	e00c      	b.n	8003972 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003966:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800396a:	61fb      	str	r3, [r7, #28]
          break;
 800396c:	e003      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800396e:	bf00      	nop
 8003970:	e29a      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003972:	bf00      	nop
 8003974:	e298      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003976:	bf00      	nop
        break;
 8003978:	e296      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	0800d390 	.word	0x0800d390
 8003984:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003988:	4b9b      	ldr	r3, [pc, #620]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2bc0      	cmp	r3, #192	@ 0xc0
 8003998:	d021      	beq.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	2bc0      	cmp	r3, #192	@ 0xc0
 800399e:	d829      	bhi.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b80      	cmp	r3, #128	@ 0x80
 80039a4:	d011      	beq.n	80039ca <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b80      	cmp	r3, #128	@ 0x80
 80039aa:	d823      	bhi.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b40      	cmp	r3, #64	@ 0x40
 80039b6:	d004      	beq.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80039b8:	e01c      	b.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80039ba:	f7ff f99b 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80039be:	61f8      	str	r0, [r7, #28]
          break;
 80039c0:	e01d      	b.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80039c2:	f7ff f8ff 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80039c6:	61f8      	str	r0, [r7, #28]
          break;
 80039c8:	e019      	b.n	80039fe <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039ca:	4b8b      	ldr	r3, [pc, #556]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039d6:	d10f      	bne.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80039d8:	4b88      	ldr	r3, [pc, #544]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80039da:	61fb      	str	r3, [r7, #28]
          break;
 80039dc:	e00c      	b.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80039de:	4b86      	ldr	r3, [pc, #536]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e4:	f003 0302 	and.w	r3, r3, #2
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d107      	bne.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80039ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039f0:	61fb      	str	r3, [r7, #28]
          break;
 80039f2:	e003      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80039f4:	bf00      	nop
 80039f6:	e257      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039f8:	bf00      	nop
 80039fa:	e255      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80039fc:	bf00      	nop
        break;
 80039fe:	e253      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003a00:	4b7d      	ldr	r3, [pc, #500]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0a:	613b      	str	r3, [r7, #16]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a12:	d025      	beq.n	8003a60 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a1a:	d82c      	bhi.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a22:	d013      	beq.n	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a2a:	d824      	bhi.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a38:	d004      	beq.n	8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f7ff f95a 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003a40:	61f8      	str	r0, [r7, #28]
          break;
 8003a42:	e01d      	b.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a44:	f7ff f8be 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003a48:	61f8      	str	r0, [r7, #28]
          break;
 8003a4a:	e019      	b.n	8003a80 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a58:	d10f      	bne.n	8003a7a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003a5a:	4b68      	ldr	r3, [pc, #416]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003a5c:	61fb      	str	r3, [r7, #28]
          break;
 8003a5e:	e00c      	b.n	8003a7a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a60:	4b65      	ldr	r3, [pc, #404]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a72:	61fb      	str	r3, [r7, #28]
          break;
 8003a74:	e003      	b.n	8003a7e <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003a76:	bf00      	nop
 8003a78:	e216      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a7a:	bf00      	nop
 8003a7c:	e214      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a7e:	bf00      	nop
        break;
 8003a80:	e212      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003a82:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a94:	d025      	beq.n	8003ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a9c:	d82c      	bhi.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa4:	d013      	beq.n	8003ace <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aac:	d824      	bhi.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aba:	d004      	beq.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003abc:	e01c      	b.n	8003af8 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7ff f919 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	61f8      	str	r0, [r7, #28]
          break;
 8003ac4:	e01d      	b.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7ff f87d 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003aca:	61f8      	str	r0, [r7, #28]
          break;
 8003acc:	e019      	b.n	8003b02 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ace:	4b4a      	ldr	r3, [pc, #296]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ada:	d10f      	bne.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003adc:	4b47      	ldr	r3, [pc, #284]	@ (8003bfc <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003ade:	61fb      	str	r3, [r7, #28]
          break;
 8003ae0:	e00c      	b.n	8003afc <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003ae2:	4b45      	ldr	r3, [pc, #276]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d107      	bne.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003af0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af4:	61fb      	str	r3, [r7, #28]
          break;
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003af8:	bf00      	nop
 8003afa:	e1d5      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003afc:	bf00      	nop
 8003afe:	e1d3      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b00:	bf00      	nop
        break;
 8003b02:	e1d1      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003b04:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b16:	d00c      	beq.n	8003b32 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b1e:	d864      	bhi.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b26:	d008      	beq.n	8003b3a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b2e:	d030      	beq.n	8003b92 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003b30:	e05b      	b.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003b32:	f7ff f847 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003b36:	61f8      	str	r0, [r7, #28]
          break;
 8003b38:	e05c      	b.n	8003bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b46:	d152      	bne.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003b48:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d04c      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003b54:	4b28      	ldr	r3, [pc, #160]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b5e:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	fb03 f202 	mul.w	r2, r3, r2
 8003b68:	4b23      	ldr	r3, [pc, #140]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	3301      	adds	r3, #1
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	0e5b      	lsrs	r3, r3, #25
 8003b80:	f003 0303 	and.w	r3, r3, #3
 8003b84:	3301      	adds	r3, #1
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8e:	61fb      	str	r3, [r7, #28]
          break;
 8003b90:	e02d      	b.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003b92:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b9e:	d128      	bne.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003ba0:	4b15      	ldr	r3, [pc, #84]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d022      	beq.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003bac:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	0a1b      	lsrs	r3, r3, #8
 8003bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb6:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	fb03 f202 	mul.w	r2, r3, r2
 8003bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	3301      	adds	r3, #1
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003bd2:	4b09      	ldr	r3, [pc, #36]	@ (8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	0e5b      	lsrs	r3, r3, #25
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	3301      	adds	r3, #1
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	61fb      	str	r3, [r7, #28]
          break;
 8003be8:	e003      	b.n	8003bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003bea:	bf00      	nop
 8003bec:	e15c      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bee:	bf00      	nop
 8003bf0:	e15a      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003bf2:	bf00      	nop
        break;
 8003bf4:	e158      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003c00:	4b9d      	ldr	r3, [pc, #628]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c0a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003c12:	f7ff f885 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8003c16:	61f8      	str	r0, [r7, #28]
        break;
 8003c18:	e146      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe ffd3 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003c1e:	61f8      	str	r0, [r7, #28]
        break;
 8003c20:	e142      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003c22:	4b95      	ldr	r3, [pc, #596]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c28:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c34:	d013      	beq.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3c:	d819      	bhi.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4a:	d004      	beq.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003c4c:	e011      	b.n	8003c72 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c4e:	f7ff f851 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003c52:	61f8      	str	r0, [r7, #28]
          break;
 8003c54:	e010      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c56:	f7fe ffb5 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003c5a:	61f8      	str	r0, [r7, #28]
          break;
 8003c5c:	e00c      	b.n	8003c78 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c5e:	4b86      	ldr	r3, [pc, #536]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c6a:	d104      	bne.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003c6c:	4b83      	ldr	r3, [pc, #524]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003c6e:	61fb      	str	r3, [r7, #28]
          break;
 8003c70:	e001      	b.n	8003c76 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003c72:	bf00      	nop
 8003c74:	e118      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c76:	bf00      	nop
        break;
 8003c78:	e116      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c8c:	d013      	beq.n	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c94:	d819      	bhi.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ca2:	d004      	beq.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003ca4:	e011      	b.n	8003cca <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ca6:	f7ff f825 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003caa:	61f8      	str	r0, [r7, #28]
          break;
 8003cac:	e010      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003cae:	f7fe ff89 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003cb2:	61f8      	str	r0, [r7, #28]
          break;
 8003cb4:	e00c      	b.n	8003cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003cb6:	4b70      	ldr	r3, [pc, #448]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cc2:	d104      	bne.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003cc4:	4b6d      	ldr	r3, [pc, #436]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003cc6:	61fb      	str	r3, [r7, #28]
          break;
 8003cc8:	e001      	b.n	8003cce <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003cca:	bf00      	nop
 8003ccc:	e0ec      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cce:	bf00      	nop
        break;
 8003cd0:	e0ea      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003cd2:	4b69      	ldr	r3, [pc, #420]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ce4:	d013      	beq.n	8003d0e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cec:	d819      	bhi.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cfa:	d004      	beq.n	8003d06 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003cfc:	e011      	b.n	8003d22 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cfe:	f7fe fff9 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003d02:	61f8      	str	r0, [r7, #28]
          break;
 8003d04:	e010      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fe ff5d 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8003d0a:	61f8      	str	r0, [r7, #28]
          break;
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1a:	d104      	bne.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003d1c:	4b57      	ldr	r3, [pc, #348]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d1e:	61fb      	str	r3, [r7, #28]
          break;
 8003d20:	e001      	b.n	8003d26 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003d22:	bf00      	nop
 8003d24:	e0c0      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d26:	bf00      	nop
        break;
 8003d28:	e0be      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003d2a:	4b53      	ldr	r3, [pc, #332]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d3c:	d02c      	beq.n	8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d44:	d833      	bhi.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d4c:	d01a      	beq.n	8003d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d54:	d82b      	bhi.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d004      	beq.n	8003d66 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d62:	d004      	beq.n	8003d6e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003d64:	e023      	b.n	8003dae <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d66:	f7fe ffc5 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003d6a:	61f8      	str	r0, [r7, #28]
          break;
 8003d6c:	e026      	b.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d6e:	4b42      	ldr	r3, [pc, #264]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d11a      	bne.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003d7c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d80:	61fb      	str	r3, [r7, #28]
          break;
 8003d82:	e016      	b.n	8003db2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d84:	4b3c      	ldr	r3, [pc, #240]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d90:	d111      	bne.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003d92:	4b3a      	ldr	r3, [pc, #232]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d94:	61fb      	str	r3, [r7, #28]
          break;
 8003d96:	e00e      	b.n	8003db6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d98:	4b37      	ldr	r3, [pc, #220]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d109      	bne.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003da6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003daa:	61fb      	str	r3, [r7, #28]
          break;
 8003dac:	e005      	b.n	8003dba <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003dae:	bf00      	nop
 8003db0:	e07a      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003db2:	bf00      	nop
 8003db4:	e078      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003db6:	bf00      	nop
 8003db8:	e076      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dba:	bf00      	nop
        break;
 8003dbc:	e074      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003dc8:	613b      	str	r3, [r7, #16]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dd0:	d02c      	beq.n	8003e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003dd8:	d833      	bhi.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de0:	d01a      	beq.n	8003e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de8:	d82b      	bhi.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003df6:	d004      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003df8:	e023      	b.n	8003e42 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dfa:	f7fe ff7b 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003dfe:	61f8      	str	r0, [r7, #28]
          break;
 8003e00:	e026      	b.n	8003e50 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003e02:	4b1d      	ldr	r3, [pc, #116]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d11a      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003e10:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e14:	61fb      	str	r3, [r7, #28]
          break;
 8003e16:	e016      	b.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e18:	4b17      	ldr	r3, [pc, #92]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e24:	d111      	bne.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003e28:	61fb      	str	r3, [r7, #28]
          break;
 8003e2a:	e00e      	b.n	8003e4a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e2c:	4b12      	ldr	r3, [pc, #72]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d109      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e3e:	61fb      	str	r3, [r7, #28]
          break;
 8003e40:	e005      	b.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003e42:	bf00      	nop
 8003e44:	e030      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e46:	bf00      	nop
 8003e48:	e02e      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e4a:	bf00      	nop
 8003e4c:	e02c      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e4e:	bf00      	nop
        break;
 8003e50:	e02a      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003e52:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6a:	d009      	beq.n	8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003e6c:	e012      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e6e:	f7fe ff41 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8003e72:	61f8      	str	r0, [r7, #28]
          break;
 8003e74:	e00e      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003e90:	61fb      	str	r3, [r7, #28]
          break;
 8003e92:	bf00      	nop
        break;
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e006      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e004      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003ea6:	bf00      	nop
    }
  }

  return(frequency);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	00f42400 	.word	0x00f42400

08003ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eca:	4b75      	ldr	r3, [pc, #468]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f003 0303 	and.w	r3, r3, #3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d018      	beq.n	8003f08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ed6:	4b72      	ldr	r3, [pc, #456]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0203 	and.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10d      	bne.n	8003f02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
       ||
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003eee:	4b6c      	ldr	r3, [pc, #432]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
       ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d047      	beq.n	8003f92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e044      	b.n	8003f92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b03      	cmp	r3, #3
 8003f0e:	d018      	beq.n	8003f42 <RCCEx_PLLSAI1_Config+0x86>
 8003f10:	2b03      	cmp	r3, #3
 8003f12:	d825      	bhi.n	8003f60 <RCCEx_PLLSAI1_Config+0xa4>
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d002      	beq.n	8003f1e <RCCEx_PLLSAI1_Config+0x62>
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d009      	beq.n	8003f30 <RCCEx_PLLSAI1_Config+0x74>
 8003f1c:	e020      	b.n	8003f60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f1e:	4b60      	ldr	r3, [pc, #384]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d11d      	bne.n	8003f66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2e:	e01a      	b.n	8003f66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f30:	4b5b      	ldr	r3, [pc, #364]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d116      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f40:	e013      	b.n	8003f6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f42:	4b57      	ldr	r3, [pc, #348]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10f      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f4e:	4b54      	ldr	r3, [pc, #336]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f5e:	e006      	b.n	8003f6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e004      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f66:	bf00      	nop
 8003f68:	e002      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e000      	b.n	8003f70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10d      	bne.n	8003f92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f76:	4b4a      	ldr	r3, [pc, #296]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6819      	ldr	r1, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	3b01      	subs	r3, #1
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	4944      	ldr	r1, [pc, #272]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d17d      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f98:	4b41      	ldr	r3, [pc, #260]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a40      	ldr	r2, [pc, #256]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fa2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa4:	f7fd fb3c 	bl	8001620 <HAL_GetTick>
 8003fa8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003faa:	e009      	b.n	8003fc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fac:	f7fd fb38 	bl	8001620 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	73fb      	strb	r3, [r7, #15]
        break;
 8003fbe:	e005      	b.n	8003fcc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fc0:	4b37      	ldr	r3, [pc, #220]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ef      	bne.n	8003fac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d160      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d111      	bne.n	8003ffc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd8:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	0211      	lsls	r1, r2, #8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68d2      	ldr	r2, [r2, #12]
 8003fee:	0912      	lsrs	r2, r2, #4
 8003ff0:	0452      	lsls	r2, r2, #17
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	492a      	ldr	r1, [pc, #168]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	610b      	str	r3, [r1, #16]
 8003ffa:	e027      	b.n	800404c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d112      	bne.n	8004028 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004002:	4b27      	ldr	r3, [pc, #156]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800400a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	6892      	ldr	r2, [r2, #8]
 8004012:	0211      	lsls	r1, r2, #8
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6912      	ldr	r2, [r2, #16]
 8004018:	0852      	lsrs	r2, r2, #1
 800401a:	3a01      	subs	r2, #1
 800401c:	0552      	lsls	r2, r2, #21
 800401e:	430a      	orrs	r2, r1
 8004020:	491f      	ldr	r1, [pc, #124]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	610b      	str	r3, [r1, #16]
 8004026:	e011      	b.n	800404c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004028:	4b1d      	ldr	r3, [pc, #116]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004030:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6892      	ldr	r2, [r2, #8]
 8004038:	0211      	lsls	r1, r2, #8
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6952      	ldr	r2, [r2, #20]
 800403e:	0852      	lsrs	r2, r2, #1
 8004040:	3a01      	subs	r2, #1
 8004042:	0652      	lsls	r2, r2, #25
 8004044:	430a      	orrs	r2, r1
 8004046:	4916      	ldr	r1, [pc, #88]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004048:	4313      	orrs	r3, r2
 800404a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800404c:	4b14      	ldr	r3, [pc, #80]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a13      	ldr	r2, [pc, #76]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004052:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fae2 	bl	8001620 <HAL_GetTick>
 800405c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800405e:	e009      	b.n	8004074 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004060:	f7fd fade 	bl	8001620 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d902      	bls.n	8004074 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	73fb      	strb	r3, [r7, #15]
          break;
 8004072:	e005      	b.n	8004080 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004074:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ef      	beq.n	8004060 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	691a      	ldr	r2, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	4904      	ldr	r1, [pc, #16]	@ (80040a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004094:	7bfb      	ldrb	r3, [r7, #15]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40021000 	.word	0x40021000

080040a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040b2:	4b6a      	ldr	r3, [pc, #424]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d018      	beq.n	80040f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040be:	4b67      	ldr	r3, [pc, #412]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f003 0203 	and.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d10d      	bne.n	80040ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
       ||
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d009      	beq.n	80040ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040d6:	4b61      	ldr	r3, [pc, #388]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
       ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d047      	beq.n	800417a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	73fb      	strb	r3, [r7, #15]
 80040ee:	e044      	b.n	800417a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d018      	beq.n	800412a <RCCEx_PLLSAI2_Config+0x86>
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d825      	bhi.n	8004148 <RCCEx_PLLSAI2_Config+0xa4>
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d002      	beq.n	8004106 <RCCEx_PLLSAI2_Config+0x62>
 8004100:	2b02      	cmp	r3, #2
 8004102:	d009      	beq.n	8004118 <RCCEx_PLLSAI2_Config+0x74>
 8004104:	e020      	b.n	8004148 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004106:	4b55      	ldr	r3, [pc, #340]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d11d      	bne.n	800414e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004116:	e01a      	b.n	800414e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004118:	4b50      	ldr	r3, [pc, #320]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004120:	2b00      	cmp	r3, #0
 8004122:	d116      	bne.n	8004152 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004128:	e013      	b.n	8004152 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800412a:	4b4c      	ldr	r3, [pc, #304]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10f      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004136:	4b49      	ldr	r3, [pc, #292]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004146:	e006      	b.n	8004156 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      break;
 800414c:	e004      	b.n	8004158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004156:	bf00      	nop
    }

    if(status == HAL_OK)
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10d      	bne.n	800417a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800415e:	4b3f      	ldr	r3, [pc, #252]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6819      	ldr	r1, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	430b      	orrs	r3, r1
 8004174:	4939      	ldr	r1, [pc, #228]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d167      	bne.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004180:	4b36      	ldr	r3, [pc, #216]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a35      	ldr	r2, [pc, #212]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800418a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418c:	f7fd fa48 	bl	8001620 <HAL_GetTick>
 8004190:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004192:	e009      	b.n	80041a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004194:	f7fd fa44 	bl	8001620 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d902      	bls.n	80041a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	73fb      	strb	r3, [r7, #15]
        break;
 80041a6:	e005      	b.n	80041b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a8:	4b2c      	ldr	r3, [pc, #176]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1ef      	bne.n	8004194 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d14a      	bne.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d111      	bne.n	80041e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041c0:	4b26      	ldr	r3, [pc, #152]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6892      	ldr	r2, [r2, #8]
 80041d0:	0211      	lsls	r1, r2, #8
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68d2      	ldr	r2, [r2, #12]
 80041d6:	0912      	lsrs	r2, r2, #4
 80041d8:	0452      	lsls	r2, r2, #17
 80041da:	430a      	orrs	r2, r1
 80041dc:	491f      	ldr	r1, [pc, #124]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	614b      	str	r3, [r1, #20]
 80041e2:	e011      	b.n	8004208 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041e4:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6892      	ldr	r2, [r2, #8]
 80041f4:	0211      	lsls	r1, r2, #8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6912      	ldr	r2, [r2, #16]
 80041fa:	0852      	lsrs	r2, r2, #1
 80041fc:	3a01      	subs	r2, #1
 80041fe:	0652      	lsls	r2, r2, #25
 8004200:	430a      	orrs	r2, r1
 8004202:	4916      	ldr	r1, [pc, #88]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004204:	4313      	orrs	r3, r2
 8004206:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004208:	4b14      	ldr	r3, [pc, #80]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a13      	ldr	r2, [pc, #76]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004212:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd fa04 	bl	8001620 <HAL_GetTick>
 8004218:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800421a:	e009      	b.n	8004230 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800421c:	f7fd fa00 	bl	8001620 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d902      	bls.n	8004230 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	73fb      	strb	r3, [r7, #15]
          break;
 800422e:	e005      	b.n	800423c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004230:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ef      	beq.n	800421c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004242:	4b06      	ldr	r3, [pc, #24]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	4904      	ldr	r1, [pc, #16]	@ (800425c <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	4313      	orrs	r3, r2
 800424e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000

08004260 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004260:	b480      	push	{r7}
 8004262:	b089      	sub	sp, #36	@ 0x24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800427c:	d10c      	bne.n	8004298 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800427e:	4b6e      	ldr	r3, [pc, #440]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004284:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004288:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004290:	d112      	bne.n	80042b8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004292:	4b6a      	ldr	r3, [pc, #424]	@ (800443c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	e00f      	b.n	80042b8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429e:	d10b      	bne.n	80042b8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80042a0:	4b65      	ldr	r3, [pc, #404]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80042aa:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80042b2:	d101      	bne.n	80042b8 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80042b4:	4b61      	ldr	r3, [pc, #388]	@ (800443c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80042b6:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f040 80b4 	bne.w	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042ca:	d003      	beq.n	80042d4 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042d2:	d135      	bne.n	8004340 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80042d4:	4b58      	ldr	r3, [pc, #352]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042e0:	f040 80a1 	bne.w	8004426 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80042e4:	4b54      	ldr	r3, [pc, #336]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 809a 	beq.w	8004426 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80042f2:	4b51      	ldr	r3, [pc, #324]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	3301      	adds	r3, #1
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004306:	4b4c      	ldr	r3, [pc, #304]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004310:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004318:	4b47      	ldr	r3, [pc, #284]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004324:	2311      	movs	r3, #17
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e001      	b.n	800432e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800432a:	2307      	movs	r3, #7
 800432c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	fb03 f202 	mul.w	r2, r3, r2
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800433e:	e072      	b.n	8004426 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d133      	bne.n	80043ae <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004346:	4b3c      	ldr	r3, [pc, #240]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800434e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004352:	d169      	bne.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004354:	4b38      	ldr	r3, [pc, #224]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d063      	beq.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004360:	4b35      	ldr	r3, [pc, #212]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	3301      	adds	r3, #1
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004374:	4b30      	ldr	r3, [pc, #192]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004386:	4b2c      	ldr	r3, [pc, #176]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004392:	2311      	movs	r3, #17
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e001      	b.n	800439c <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004398:	2307      	movs	r3, #7
 800439a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	fb03 f202 	mul.w	r2, r3, r2
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043aa:	61fb      	str	r3, [r7, #28]
 80043ac:	e03c      	b.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043b4:	d003      	beq.n	80043be <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043bc:	d134      	bne.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80043be:	4b1e      	ldr	r3, [pc, #120]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043ca:	d12d      	bne.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80043cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d027      	beq.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80043d8:	4b17      	ldr	r3, [pc, #92]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	3301      	adds	r3, #1
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043f6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80043fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004438 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800440a:	2311      	movs	r3, #17
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e001      	b.n	8004414 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004410:	2307      	movs	r3, #7
 8004412:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	fb03 f202 	mul.w	r2, r3, r2
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e000      	b.n	8004428 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004426:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004428:	69fb      	ldr	r3, [r7, #28]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3724      	adds	r7, #36	@ 0x24
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	01770000 	.word	0x01770000

08004440 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e155      	b.n	80046fe <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fea6 	bl	80011b8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa7d 	bl	800496c <SAI_Disable>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e140      	b.n	80046fe <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d00c      	beq.n	80044a6 <HAL_SAI_Init+0x66>
 800448c:	2b02      	cmp	r3, #2
 800448e:	d80d      	bhi.n	80044ac <HAL_SAI_Init+0x6c>
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_SAI_Init+0x5a>
 8004494:	2b01      	cmp	r3, #1
 8004496:	d003      	beq.n	80044a0 <HAL_SAI_Init+0x60>
 8004498:	e008      	b.n	80044ac <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
      break;
 800449e:	e008      	b.n	80044b2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80044a0:	2310      	movs	r3, #16
 80044a2:	61fb      	str	r3, [r7, #28]
      break;
 80044a4:	e005      	b.n	80044b2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80044a6:	2320      	movs	r3, #32
 80044a8:	61fb      	str	r3, [r7, #28]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
      break;
 80044b0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d81d      	bhi.n	80044f6 <HAL_SAI_Init+0xb6>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <HAL_SAI_Init+0x80>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044d1 	.word	0x080044d1
 80044c4:	080044d7 	.word	0x080044d7
 80044c8:	080044df 	.word	0x080044df
 80044cc:	080044e7 	.word	0x080044e7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
      break;
 80044d4:	e012      	b.n	80044fc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80044d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044da:	617b      	str	r3, [r7, #20]
      break;
 80044dc:	e00e      	b.n	80044fc <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80044de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044e2:	617b      	str	r3, [r7, #20]
      break;
 80044e4:	e00a      	b.n	80044fc <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80044e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80044ea:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
      break;
 80044f4:	e002      	b.n	80044fc <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	617b      	str	r3, [r7, #20]
      break;
 80044fa:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a81      	ldr	r2, [pc, #516]	@ (8004708 <HAL_SAI_Init+0x2c8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_SAI_Init+0xd0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a80      	ldr	r2, [pc, #512]	@ (800470c <HAL_SAI_Init+0x2cc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d103      	bne.n	8004518 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004510:	4a7f      	ldr	r2, [pc, #508]	@ (8004710 <HAL_SAI_Init+0x2d0>)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e002      	b.n	800451e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004518:	4a7e      	ldr	r2, [pc, #504]	@ (8004714 <HAL_SAI_Init+0x2d4>)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d041      	beq.n	80045aa <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a77      	ldr	r2, [pc, #476]	@ (8004708 <HAL_SAI_Init+0x2c8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_SAI_Init+0xfa>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a75      	ldr	r2, [pc, #468]	@ (800470c <HAL_SAI_Init+0x2cc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d105      	bne.n	8004546 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800453a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800453e:	f7fe ff4f 	bl	80033e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004542:	6138      	str	r0, [r7, #16]
 8004544:	e004      	b.n	8004550 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004546:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800454a:	f7fe ff49 	bl	80033e0 <HAL_RCCEx_GetPeriphCLKFreq>
 800454e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	461a      	mov	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a6b      	ldr	r2, [pc, #428]	@ (8004718 <HAL_SAI_Init+0x2d8>)
 800456c:	fba2 2303 	umull	r2, r3, r2, r3
 8004570:	08da      	lsrs	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	4b67      	ldr	r3, [pc, #412]	@ (8004718 <HAL_SAI_Init+0x2d8>)
 800457a:	fba3 2301 	umull	r2, r3, r3, r1
 800457e:	08da      	lsrs	r2, r3, #3
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	1aca      	subs	r2, r1, r3
 800458a:	2a08      	cmp	r2, #8
 800458c:	d904      	bls.n	8004598 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1b      	ldr	r3, [r3, #32]
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	2b04      	cmp	r3, #4
 800459e:	d104      	bne.n	80045aa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	085a      	lsrs	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_SAI_Init+0x17a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d109      	bne.n	80045ce <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_SAI_Init+0x186>
 80045c2:	2300      	movs	r3, #0
 80045c4:	e001      	b.n	80045ca <HAL_SAI_Init+0x18a>
 80045c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e008      	b.n	80045e0 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d102      	bne.n	80045dc <HAL_SAI_Init+0x19c>
 80045d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80045da:	e000      	b.n	80045de <HAL_SAI_Init+0x19e>
 80045dc:	2300      	movs	r3, #0
 80045de:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6819      	ldr	r1, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	4b4c      	ldr	r3, [pc, #304]	@ (800471c <HAL_SAI_Init+0x2dc>)
 80045ec:	400b      	ands	r3, r1
 80045ee:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6819      	ldr	r1, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fe:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004604:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	431a      	orrs	r2, r3
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004618:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004624:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	051b      	lsls	r3, r3, #20
 800462c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	6812      	ldr	r2, [r2, #0]
 8004640:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004644:	f023 030f 	bic.w	r3, r3, #15
 8004648:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	431a      	orrs	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6899      	ldr	r1, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	4b2b      	ldr	r3, [pc, #172]	@ (8004720 <HAL_SAI_Init+0x2e0>)
 8004674:	400b      	ands	r3, r1
 8004676:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6899      	ldr	r1, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004688:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800468e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004694:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469a:	3b01      	subs	r3, #1
 800469c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800469e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68d9      	ldr	r1, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80046b6:	400b      	ands	r3, r1
 80046b8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68d9      	ldr	r1, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046ce:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80046d0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d6:	3b01      	subs	r3, #1
 80046d8:	021b      	lsls	r3, r3, #8
 80046da:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3720      	adds	r7, #32
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40015404 	.word	0x40015404
 800470c:	40015424 	.word	0x40015424
 8004710:	40015400 	.word	0x40015400
 8004714:	40015800 	.word	0x40015800
 8004718:	cccccccd 	.word	0xcccccccd
 800471c:	ff05c010 	.word	0xff05c010
 8004720:	fff88000 	.word	0xfff88000

08004724 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d101      	bne.n	800473e <HAL_SAI_DMAStop+0x1a>
 800473a:	2302      	movs	r3, #2
 800473c:	e042      	b.n	80047c4 <HAL_SAI_DMAStop+0xa0>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f910 	bl	800496c <SAI_Disable>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004764:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b12      	cmp	r3, #18
 8004770:	d108      	bne.n	8004784 <HAL_SAI_DMAStop+0x60>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d004      	beq.n	8004784 <HAL_SAI_DMAStop+0x60>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477e:	4618      	mov	r0, r3
 8004780:	f7fd f9a8 	bl	8001ad4 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b22      	cmp	r3, #34	@ 0x22
 800478e:	d108      	bne.n	80047a2 <HAL_SAI_DMAStop+0x7e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	2b00      	cmp	r3, #0
 8004796:	d004      	beq.n	80047a2 <HAL_SAI_DMAStop+0x7e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd f999 	bl	8001ad4 <HAL_DMA_Abort>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0208 	orr.w	r2, r2, #8
 80047b0:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <HAL_SAI_Receive_DMA+0x1a>
 80047e0:	88fb      	ldrh	r3, [r7, #6]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e074      	b.n	80048d4 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d16d      	bne.n	80048d2 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_SAI_Receive_DMA+0x38>
 8004800:	2302      	movs	r3, #2
 8004802:	e067      	b.n	80048d4 <HAL_SAI_Receive_DMA+0x108>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	88fa      	ldrh	r2, [r7, #6]
 8004816:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	@ 0x22
 800482e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004836:	4a29      	ldr	r2, [pc, #164]	@ (80048dc <HAL_SAI_Receive_DMA+0x110>)
 8004838:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <HAL_SAI_Receive_DMA+0x114>)
 8004840:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	4a27      	ldr	r2, [pc, #156]	@ (80048e4 <HAL_SAI_Receive_DMA+0x118>)
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	2200      	movs	r2, #0
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	331c      	adds	r3, #28
 800485c:	4619      	mov	r1, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004862:	461a      	mov	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800486a:	f7fd f8d3 	bl	8001a14 <HAL_DMA_Start_IT>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e029      	b.n	80048d4 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004880:	2100      	movs	r1, #0
 8004882:	68f8      	ldr	r0, [r7, #12]
 8004884:	f000 f83a 	bl	80048fc <SAI_InterruptFlag>
 8004888:	4601      	mov	r1, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80048a6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d107      	bne.n	80048c6 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80048c4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	08004a3f 	.word	0x08004a3f
 80048e0:	080049e1 	.word	0x080049e1
 80048e4:	08004a5b 	.word	0x08004a5b

080048e8 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004908:	2301      	movs	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d103      	bne.n	800491a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	2b08      	cmp	r3, #8
 8004920:	d10b      	bne.n	800493a <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004926:	2b03      	cmp	r3, #3
 8004928:	d003      	beq.n	8004932 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d103      	bne.n	800493a <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f043 0310 	orr.w	r3, r3, #16
 8004938:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d003      	beq.n	800494a <SAI_InterruptFlag+0x4e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d104      	bne.n	8004954 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004950:	60fb      	str	r3, [r7, #12]
 8004952:	e003      	b.n	800495c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800495c:	68fb      	ldr	r3, [r7, #12]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004974:	4b18      	ldr	r3, [pc, #96]	@ (80049d8 <SAI_Disable+0x6c>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <SAI_Disable+0x70>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	0b1b      	lsrs	r3, r3, #12
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004996:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	72fb      	strb	r3, [r7, #11]
      break;
 80049b2:	e009      	b.n	80049c8 <SAI_Disable+0x5c>
    }
    count--;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e7      	bne.n	8004998 <SAI_Disable+0x2c>

  return status;
 80049c8:	7afb      	ldrb	r3, [r7, #11]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	2000002c 	.word	0x2000002c
 80049dc:	95cbec1b 	.word	0x95cbec1b

080049e0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d01c      	beq.n	8004a30 <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004a04:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004a0e:	2100      	movs	r1, #0
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ff73 	bl	80048fc <SAI_InterruptFlag>
 8004a16:	4603      	mov	r3, r0
 8004a18:	43d9      	mvns	r1, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	400a      	ands	r2, r1
 8004a26:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f7fc f9f1 	bl	8000e18 <HAL_SAI_RxCpltCallback>
#endif
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f7fc f9ff 	bl	8000e50 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004a52:	bf00      	nop
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b084      	sub	sp, #16
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004a86:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f7ff ff6f 	bl	800496c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f7ff ff22 	bl	80048e8 <HAL_SAI_ErrorCallback>
#endif
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e02d      	b.n	8004b1a <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7fc fa81 	bl	8000fd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f820 	bl	8004b24 <HAL_SD_InitCard>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e015      	b.n	8004b1a <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 ff6f 	bl	80059d8 <HAL_SD_ConfigWideBusOperation>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d001      	beq.n	8004b04 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e00a      	b.n	8004b1a <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b24:	b5b0      	push	{r4, r5, r7, lr}
 8004b26:	b08e      	sub	sp, #56	@ 0x38
 8004b28:	af04      	add	r7, sp, #16
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004b34:	2300      	movs	r3, #0
 8004b36:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004b40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004b44:	f7fe fc4c 	bl	80033e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004b5e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e07b      	b.n	8004c5c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	09db      	lsrs	r3, r3, #7
 8004b68:	4a3e      	ldr	r2, [pc, #248]	@ (8004c64 <HAL_SD_InitCard+0x140>)
 8004b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	3b02      	subs	r3, #2
 8004b72:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681d      	ldr	r5, [r3, #0]
 8004b78:	466c      	mov	r4, sp
 8004b7a:	f107 0314 	add.w	r3, r7, #20
 8004b7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	f002 ffd3 	bl	8007b38 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ba0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f003 f811 	bl	8007bce <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bba:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004bc8:	4a27      	ldr	r2, [pc, #156]	@ (8004c68 <HAL_SD_InitCard+0x144>)
 8004bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fc fd30 	bl	8001638 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f001 f907 	bl	8005dec <SD_PowerON>
 8004bde:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bf2:	6a3b      	ldr	r3, [r7, #32]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e02e      	b.n	8004c5c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f001 f834 	bl	8005c6c <SD_InitCard>
 8004c04:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00b      	beq.n	8004c24 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e01b      	b.n	8004c5c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f003 f861 	bl	8007cf4 <SDMMC_CmdBlockLength>
 8004c32:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00f      	beq.n	8004c5a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c6c <HAL_SD_InitCard+0x148>)
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e000      	b.n	8004c5c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3728      	adds	r7, #40	@ 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bdb0      	pop	{r4, r5, r7, pc}
 8004c64:	014f8b59 	.word	0x014f8b59
 8004c68:	00012110 	.word	0x00012110
 8004c6c:	004005ff 	.word	0x004005ff

08004c70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b092      	sub	sp, #72	@ 0x48
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c7e:	f7fc fccf 	bl	8001620 <HAL_GetTick>
 8004c82:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d107      	bne.n	8004ca2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e1bd      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	f040 81b0 	bne.w	8005010 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	441a      	add	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d907      	bls.n	8004cd4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e1a4      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d002      	beq.n	8004cf2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	025b      	lsls	r3, r3, #9
 8004cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cf6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	025b      	lsls	r3, r3, #9
 8004cfc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004cfe:	2390      	movs	r3, #144	@ 0x90
 8004d00:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d02:	2302      	movs	r3, #2
 8004d04:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f107 0214 	add.w	r2, r7, #20
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f002 ffbf 	bl	8007c9c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d90a      	bls.n	8004d3a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2202      	movs	r2, #2
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d30:	4618      	mov	r0, r3
 8004d32:	f003 f823 	bl	8007d7c <SDMMC_CmdReadMultiBlock>
 8004d36:	6478      	str	r0, [r7, #68]	@ 0x44
 8004d38:	e009      	b.n	8004d4e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d46:	4618      	mov	r0, r3
 8004d48:	f002 fff6 	bl	8007d38 <SDMMC_CmdReadSingleBlock>
 8004d4c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d012      	beq.n	8004d7a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a7a      	ldr	r2, [pc, #488]	@ (8004f44 <HAL_SD_ReadBlocks+0x2d4>)
 8004d5a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d62:	431a      	orrs	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e151      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d7e:	e061      	b.n	8004e44 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d03c      	beq.n	8004e08 <HAL_SD_ReadBlocks+0x198>
 8004d8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d039      	beq.n	8004e08 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004d94:	2300      	movs	r3, #0
 8004d96:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d98:	e033      	b.n	8004e02 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f002 fef7 	bl	8007b92 <SDMMC_ReadFIFO>
 8004da4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004db0:	3301      	adds	r3, #1
 8004db2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db6:	3b01      	subs	r3, #1
 8004db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbc:	0a1b      	lsrs	r3, r3, #8
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004dda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ddc:	3301      	adds	r3, #1
 8004dde:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de2:	3b01      	subs	r3, #1
 8004de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de8:	0e1b      	lsrs	r3, r3, #24
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dee:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df2:	3301      	adds	r3, #1
 8004df4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004dfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dfe:	3301      	adds	r3, #1
 8004e00:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e04:	2b07      	cmp	r3, #7
 8004e06:	d9c8      	bls.n	8004d9a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004e08:	f7fc fc0a 	bl	8001620 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d902      	bls.n	8004e1e <HAL_SD_ReadBlocks+0x1ae>
 8004e18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d112      	bne.n	8004e44 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a48      	ldr	r2, [pc, #288]	@ (8004f44 <HAL_SD_ReadBlocks+0x2d4>)
 8004e24:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e2a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e0ec      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d096      	beq.n	8004d80 <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d022      	beq.n	8004ea6 <HAL_SD_ReadBlocks+0x236>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d91f      	bls.n	8004ea6 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d01b      	beq.n	8004ea6 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 ffe8 	bl	8007e48 <SDMMC_CmdStopTransfer>
 8004e78:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d012      	beq.n	8004ea6 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a2f      	ldr	r2, [pc, #188]	@ (8004f44 <HAL_SD_ReadBlocks+0x2d4>)
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e0bb      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a22      	ldr	r2, [pc, #136]	@ (8004f44 <HAL_SD_ReadBlocks+0x2d4>)
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec0:	f043 0208 	orr.w	r2, r3, #8
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e0a1      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d012      	beq.n	8004f0e <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <HAL_SD_ReadBlocks+0x2d4>)
 8004eee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef4:	f043 0202 	orr.w	r2, r3, #2
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e087      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d064      	beq.n	8004fe6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a08      	ldr	r2, [pc, #32]	@ (8004f44 <HAL_SD_ReadBlocks+0x2d4>)
 8004f22:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	f043 0220 	orr.w	r2, r3, #32
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e06d      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
 8004f42:	bf00      	nop
 8004f44:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f002 fe20 	bl	8007b92 <SDMMC_ReadFIFO>
 8004f52:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	3301      	adds	r3, #1
 8004f60:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f64:	3b01      	subs	r3, #1
 8004f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f70:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f74:	3301      	adds	r3, #1
 8004f76:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f86:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f90:	3b01      	subs	r3, #1
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	0e1b      	lsrs	r3, r3, #24
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f9c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004faa:	f7fc fb39 	bl	8001620 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d902      	bls.n	8004fc0 <HAL_SD_ReadBlocks+0x350>
 8004fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d112      	bne.n	8004fe6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a18      	ldr	r2, [pc, #96]	@ (8005028 <HAL_SD_ReadBlocks+0x3b8>)
 8004fc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fcc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e01b      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_SD_ReadBlocks+0x38a>
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1a6      	bne.n	8004f48 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005002:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e006      	b.n	800501e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
  }
}
 800501e:	4618      	mov	r0, r3
 8005020:	3748      	adds	r7, #72	@ 0x48
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	004005ff 	.word	0x004005ff

0800502c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b092      	sub	sp, #72	@ 0x48
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800503a:	f7fc faf1 	bl	8001620 <HAL_GetTick>
 800503e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e165      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b01      	cmp	r3, #1
 8005068:	f040 8158 	bne.w	800531c <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005072:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	441a      	add	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	429a      	cmp	r2, r3
 800507e:	d907      	bls.n	8005090 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005084:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e14c      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2200      	movs	r2, #0
 800509e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d002      	beq.n	80050ae <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80050a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050aa:	025b      	lsls	r3, r3, #9
 80050ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050b2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	025b      	lsls	r3, r3, #9
 80050b8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80050ba:	2390      	movs	r3, #144	@ 0x90
 80050bc:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80050c2:	2300      	movs	r3, #0
 80050c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80050c6:	2301      	movs	r3, #1
 80050c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f107 0218 	add.w	r2, r7, #24
 80050d2:	4611      	mov	r1, r2
 80050d4:	4618      	mov	r0, r3
 80050d6:	f002 fde1 	bl	8007c9c <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d90a      	bls.n	80050f6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80050ec:	4618      	mov	r0, r3
 80050ee:	f002 fe89 	bl	8007e04 <SDMMC_CmdWriteMultiBlock>
 80050f2:	6478      	str	r0, [r7, #68]	@ 0x44
 80050f4:	e009      	b.n	800510a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2210      	movs	r2, #16
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005102:	4618      	mov	r0, r3
 8005104:	f002 fe5c 	bl	8007dc0 <SDMMC_CmdWriteSingleBlock>
 8005108:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800510a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800510c:	2b00      	cmp	r3, #0
 800510e:	d012      	beq.n	8005136 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a87      	ldr	r2, [pc, #540]	@ (8005334 <HAL_SD_WriteBlocks+0x308>)
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511e:	431a      	orrs	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0f9      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800513a:	e065      	b.n	8005208 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d040      	beq.n	80051cc <HAL_SD_WriteBlocks+0x1a0>
 800514a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d03d      	beq.n	80051cc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005150:	2300      	movs	r3, #0
 8005152:	643b      	str	r3, [r7, #64]	@ 0x40
 8005154:	e037      	b.n	80051c6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800515c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800515e:	3301      	adds	r3, #1
 8005160:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005164:	3b01      	subs	r3, #1
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	021a      	lsls	r2, r3, #8
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005176:	3301      	adds	r3, #1
 8005178:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800517a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517c:	3b01      	subs	r3, #1
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	041a      	lsls	r2, r3, #16
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	3301      	adds	r3, #1
 8005190:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005194:	3b01      	subs	r3, #1
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	061a      	lsls	r2, r3, #24
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80051a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a6:	3301      	adds	r3, #1
 80051a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80051aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ac:	3b01      	subs	r3, #1
 80051ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f107 0214 	add.w	r2, r7, #20
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f002 fcf6 	bl	8007bac <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80051c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c2:	3301      	adds	r3, #1
 80051c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c8:	2b07      	cmp	r3, #7
 80051ca:	d9c4      	bls.n	8005156 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80051cc:	f7fc fa28 	bl	8001620 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051d8:	429a      	cmp	r2, r3
 80051da:	d902      	bls.n	80051e2 <HAL_SD_WriteBlocks+0x1b6>
 80051dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d112      	bne.n	8005208 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a53      	ldr	r2, [pc, #332]	@ (8005334 <HAL_SD_WriteBlocks+0x308>)
 80051e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e090      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800520e:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8005212:	2b00      	cmp	r3, #0
 8005214:	d092      	beq.n	800513c <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800521c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_SD_WriteBlocks+0x23e>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d91f      	bls.n	800526a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522e:	2b03      	cmp	r3, #3
 8005230:	d01b      	beq.n	800526a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f002 fe06 	bl	8007e48 <SDMMC_CmdStopTransfer>
 800523c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800523e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005240:	2b00      	cmp	r3, #0
 8005242:	d012      	beq.n	800526a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a3a      	ldr	r2, [pc, #232]	@ (8005334 <HAL_SD_WriteBlocks+0x308>)
 800524a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005252:	431a      	orrs	r2, r3
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e05f      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d012      	beq.n	800529e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a2d      	ldr	r2, [pc, #180]	@ (8005334 <HAL_SD_WriteBlocks+0x308>)
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	f043 0208 	orr.w	r2, r3, #8
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e045      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d012      	beq.n	80052d2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a20      	ldr	r2, [pc, #128]	@ (8005334 <HAL_SD_WriteBlocks+0x308>)
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b8:	f043 0202 	orr.w	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2200      	movs	r2, #0
 80052cc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e02b      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	f003 0310 	and.w	r3, r3, #16
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a13      	ldr	r2, [pc, #76]	@ (8005334 <HAL_SD_WriteBlocks+0x308>)
 80052e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ec:	f043 0210 	orr.w	r2, r3, #16
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e011      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800530e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e006      	b.n	800532a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3748      	adds	r7, #72	@ 0x48
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	004005ff 	.word	0x004005ff

08005338 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_SD_IRQHandler+0x2e>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 ff5a 	bl	8006218 <SD_Read_IT>
 8005364:	e155      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 808f 	beq.w	8005494 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800537e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800538e:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8005392:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0201 	bic.w	r2, r2, #1
 80053a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d039      	beq.n	8005422 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <HAL_SD_IRQHandler+0x8a>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d011      	beq.n	80053e6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f002 fd3e 	bl	8007e48 <SDMMC_CmdStopTransfer>
 80053cc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d008      	beq.n	80053e6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f91f 	bl	8005624 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f240 523a 	movw	r2, #1338	@ 0x53a
 80053ee:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <HAL_SD_IRQHandler+0xda>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f003 f9b4 	bl	8008780 <HAL_SD_RxCpltCallback>
 8005418:	e0fb      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f003 f9a6 	bl	800876c <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 8005420:	e0f7      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80f2 	beq.w	8005612 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4618      	mov	r0, r3
 800543e:	f002 fd03 	bl	8007e48 <SDMMC_CmdStopTransfer>
 8005442:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d008      	beq.n	800545c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 f8e4 	bl	8005624 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 80d5 	bne.w	8005612 <HAL_SD_IRQHandler+0x2da>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 80cf 	bne.w	8005612 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0208 	bic.w	r2, r2, #8
 8005482:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f003 f96d 	bl	800876c <HAL_SD_TxCpltCallback>
}
 8005492:	e0be      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d008      	beq.n	80054b4 <HAL_SD_IRQHandler+0x17c>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d003      	beq.n	80054b4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 ff04 	bl	80062ba <SD_Write_IT>
 80054b2:	e0ae      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 80a7 	beq.w	8005612 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d6:	f043 0202 	orr.w	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	f003 0308 	and.w	r3, r3, #8
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	f043 0208 	orr.w	r2, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b00      	cmp	r3, #0
 800551e:	d005      	beq.n	800552c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005524:	f043 0210 	orr.w	r2, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005544:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f002 fc7c 	bl	8007e48 <SDMMC_CmdStopTransfer>
 8005550:	4602      	mov	r2, r0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f855 	bl	8005624 <HAL_SD_ErrorCallback>
}
 800557a:	e04a      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005582:	2b00      	cmp	r3, #0
 8005584:	d045      	beq.n	8005612 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_SD_IRQHandler+0x262>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d011      	beq.n	80055be <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	4a1f      	ldr	r2, [pc, #124]	@ (800561c <HAL_SD_IRQHandler+0x2e4>)
 80055a0:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc fad2 	bl	8001b50 <HAL_DMA_Abort_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02f      	beq.n	8005612 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 faea 	bl	8005b90 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80055bc:	e029      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_SD_IRQHandler+0x29a>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d011      	beq.n	80055f6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	4a12      	ldr	r2, [pc, #72]	@ (8005620 <HAL_SD_IRQHandler+0x2e8>)
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055de:	4618      	mov	r0, r3
 80055e0:	f7fc fab6 	bl	8001b50 <HAL_DMA_Abort_IT>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d013      	beq.n	8005612 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fb05 	bl	8005bfe <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80055f4:	e00d      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f003 f8a4 	bl	8008758 <HAL_SD_AbortCallback>
}
 8005610:	e7ff      	b.n	8005612 <HAL_SD_IRQHandler+0x2da>
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	08005b91 	.word	0x08005b91
 8005620:	08005bff 	.word	0x08005bff

08005624 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005646:	0f9b      	lsrs	r3, r3, #30
 8005648:	b2da      	uxtb	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005652:	0e9b      	lsrs	r3, r3, #26
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f003 030f 	and.w	r3, r3, #15
 800565a:	b2da      	uxtb	r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005664:	0e1b      	lsrs	r3, r3, #24
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	b2da      	uxtb	r2, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	b2da      	uxtb	r2, r3
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	b2da      	uxtb	r2, r3
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800568e:	b2da      	uxtb	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005698:	0d1b      	lsrs	r3, r3, #20
 800569a:	b29a      	uxth	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056a4:	0c1b      	lsrs	r3, r3, #16
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f003 030f 	and.w	r3, r3, #15
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056b6:	0bdb      	lsrs	r3, r3, #15
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056c8:	0b9b      	lsrs	r3, r3, #14
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056da:	0b5b      	lsrs	r3, r3, #13
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ec:	0b1b      	lsrs	r3, r3, #12
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2200      	movs	r2, #0
 80056fe:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005704:	2b00      	cmp	r3, #0
 8005706:	d163      	bne.n	80057d0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570c:	009a      	lsls	r2, r3, #2
 800570e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005712:	4013      	ands	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005718:	0f92      	lsrs	r2, r2, #30
 800571a:	431a      	orrs	r2, r3
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005724:	0edb      	lsrs	r3, r3, #27
 8005726:	b2db      	uxtb	r3, r3
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	b2da      	uxtb	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005736:	0e1b      	lsrs	r3, r3, #24
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	b2da      	uxtb	r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005748:	0d5b      	lsrs	r3, r3, #21
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 0307 	and.w	r3, r3, #7
 8005750:	b2da      	uxtb	r2, r3
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800575a:	0c9b      	lsrs	r3, r3, #18
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	b2da      	uxtb	r2, r3
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800576c:	0bdb      	lsrs	r3, r3, #15
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	b2da      	uxtb	r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	7e1b      	ldrb	r3, [r3, #24]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	3302      	adds	r3, #2
 8005790:	2201      	movs	r2, #1
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800579a:	fb03 f202 	mul.w	r2, r3, r2
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	7a1b      	ldrb	r3, [r3, #8]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	f003 030f 	and.w	r3, r3, #15
 80057ac:	2201      	movs	r2, #1
 80057ae:	409a      	lsls	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80057bc:	0a52      	lsrs	r2, r2, #9
 80057be:	fb03 f202 	mul.w	r2, r3, r2
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80057ce:	e031      	b.n	8005834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d11d      	bne.n	8005814 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057dc:	041b      	lsls	r3, r3, #16
 80057de:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e6:	0c1b      	lsrs	r3, r3, #16
 80057e8:	431a      	orrs	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	3301      	adds	r3, #1
 80057f4:	029a      	lsls	r2, r3, #10
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005808:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	661a      	str	r2, [r3, #96]	@ 0x60
 8005812:	e00f      	b.n	8005834 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a58      	ldr	r2, [pc, #352]	@ (800597c <HAL_SD_GetCardCSD+0x344>)
 800581a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005820:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e09d      	b.n	8005970 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005838:	0b9b      	lsrs	r3, r3, #14
 800583a:	b2db      	uxtb	r3, r3
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	b2da      	uxtb	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800584a:	09db      	lsrs	r3, r3, #7
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005852:	b2da      	uxtb	r2, r3
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005862:	b2da      	uxtb	r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586c:	0fdb      	lsrs	r3, r3, #31
 800586e:	b2da      	uxtb	r2, r3
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005878:	0f5b      	lsrs	r3, r3, #29
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	b2da      	uxtb	r2, r3
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800588a:	0e9b      	lsrs	r3, r3, #26
 800588c:	b2db      	uxtb	r3, r3
 800588e:	f003 0307 	and.w	r3, r3, #7
 8005892:	b2da      	uxtb	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800589c:	0d9b      	lsrs	r3, r3, #22
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ae:	0d5b      	lsrs	r3, r3, #21
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ca:	0c1b      	lsrs	r3, r3, #16
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058de:	0bdb      	lsrs	r3, r3, #15
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	0b9b      	lsrs	r3, r3, #14
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	0b5b      	lsrs	r3, r3, #13
 8005908:	b2db      	uxtb	r3, r3
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	b2da      	uxtb	r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800591a:	0b1b      	lsrs	r3, r3, #12
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	b2da      	uxtb	r2, r3
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	0a9b      	lsrs	r3, r3, #10
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 0303 	and.w	r3, r3, #3
 8005936:	b2da      	uxtb	r2, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005942:	0a1b      	lsrs	r3, r3, #8
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 0303 	and.w	r3, r3, #3
 800594a:	b2da      	uxtb	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800595e:	b2da      	uxtb	r2, r3
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	004005ff 	.word	0x004005ff

08005980 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80059d8:	b5b0      	push	{r4, r5, r7, lr}
 80059da:	b090      	sub	sp, #64	@ 0x40
 80059dc:	af04      	add	r7, sp, #16
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2203      	movs	r2, #3
 80059ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f4:	2b03      	cmp	r3, #3
 80059f6:	d02e      	beq.n	8005a56 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059fe:	d106      	bne.n	8005a0e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a0c:	e029      	b.n	8005a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a14:	d10a      	bne.n	8005a2c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa9e 	bl	8005f58 <SD_WideBus_Enable>
 8005a1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a2a:	e01a      	b.n	8005a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fadb 	bl	8005fee <SD_WideBus_Disable>
 8005a38:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a46:	e00c      	b.n	8005a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a54:	e005      	b.n	8005a62 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a35      	ldr	r2, [pc, #212]	@ (8005b44 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005a70:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a78:	e042      	b.n	8005b00 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005a7a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005a7e:	f7fd fcaf 	bl	80033e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a82:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d031      	beq.n	8005aee <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	3302      	adds	r3, #2
 8005aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	4a25      	ldr	r2, [pc, #148]	@ (8005b48 <HAL_SD_ConfigWideBusOperation+0x170>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d907      	bls.n	8005ac8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aba:	4a24      	ldr	r2, [pc, #144]	@ (8005b4c <HAL_SD_ConfigWideBusOperation+0x174>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	0ddb      	lsrs	r3, r3, #23
 8005ac2:	3b02      	subs	r3, #2
 8005ac4:	623b      	str	r3, [r7, #32]
 8005ac6:	e002      	b.n	8005ace <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681d      	ldr	r5, [r3, #0]
 8005ad2:	466c      	mov	r4, sp
 8005ad4:	f107 0318 	add.w	r3, r7, #24
 8005ad8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f002 f826 	bl	8007b38 <SDMMC_Init>
 8005aec:	e008      	b.n	8005b00 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f002 f8f3 	bl	8007cf4 <SDMMC_CmdBlockLength>
 8005b0e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b44 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005b38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	@ 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bdb0      	pop	{r4, r5, r7, pc}
 8005b44:	004005ff 	.word	0x004005ff
 8005b48:	017d7840 	.word	0x017d7840
 8005b4c:	55e63b89 	.word	0x55e63b89

08005b50 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005b5c:	f107 030c 	add.w	r3, r7, #12
 8005b60:	4619      	mov	r1, r3
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f9d0 	bl	8005f08 <SD_SendStatus>
 8005b68:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d005      	beq.n	8005b7c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	0a5b      	lsrs	r3, r3, #9
 8005b80:	f003 030f 	and.w	r3, r3, #15
 8005b84:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005b86:	693b      	ldr	r3, [r7, #16]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b9c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005ba6:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff ffd1 	bl	8005b50 <HAL_SD_GetCardState>
 8005bae:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	d002      	beq.n	8005bca <SD_DMATxAbort+0x3a>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d10a      	bne.n	8005be0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f002 f93a 	bl	8007e48 <SDMMC_CmdStopTransfer>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f002 fdb5 	bl	8008758 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005bee:	e002      	b.n	8005bf6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fd17 	bl	8005624 <HAL_SD_ErrorCallback>
}
 8005bf6:	bf00      	nop
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}

08005bfe <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005bfe:	b580      	push	{r7, lr}
 8005c00:	b084      	sub	sp, #16
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005c14:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f7ff ff9a 	bl	8005b50 <HAL_SD_GetCardState>
 8005c1c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2b06      	cmp	r3, #6
 8005c30:	d002      	beq.n	8005c38 <SD_DMARxAbort+0x3a>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d10a      	bne.n	8005c4e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f002 f903 	bl	8007e48 <SDMMC_CmdStopTransfer>
 8005c42:	4602      	mov	r2, r0
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c48:	431a      	orrs	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d103      	bne.n	8005c5e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f002 fd7e 	bl	8008758 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005c5c:	e002      	b.n	8005c64 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff fce0 	bl	8005624 <HAL_SD_ErrorCallback>
}
 8005c64:	bf00      	nop
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c6c:	b5b0      	push	{r4, r5, r7, lr}
 8005c6e:	b090      	sub	sp, #64	@ 0x40
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005c74:	2301      	movs	r3, #1
 8005c76:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f001 ffb5 	bl	8007bec <SDMMC_GetPowerState>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d102      	bne.n	8005c8e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c88:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005c8c:	e0aa      	b.n	8005de4 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d02f      	beq.n	8005cf6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f002 f9de 	bl	800805c <SDMMC_CmdSendCID>
 8005ca0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <SD_InitCard+0x40>
    {
      return errorstate;
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005caa:	e09b      	b.n	8005de4 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 ffdf 	bl	8007c76 <SDMMC_GetResponse>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2104      	movs	r1, #4
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 ffd6 	bl	8007c76 <SDMMC_GetResponse>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2108      	movs	r1, #8
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 ffcd 	bl	8007c76 <SDMMC_GetResponse>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	210c      	movs	r1, #12
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f001 ffc4 	bl	8007c76 <SDMMC_GetResponse>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d00d      	beq.n	8005d1a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f107 020e 	add.w	r2, r7, #14
 8005d06:	4611      	mov	r1, r2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f002 f9e4 	bl	80080d6 <SDMMC_CmdSetRelAdd>
 8005d0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <SD_InitCard+0xae>
    {
      return errorstate;
 8005d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d18:	e064      	b.n	8005de4 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d036      	beq.n	8005d90 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005d22:	89fb      	ldrh	r3, [r7, #14]
 8005d24:	461a      	mov	r2, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f002 f9ae 	bl	8008098 <SDMMC_CmdSendCSD>
 8005d3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d46:	e04d      	b.n	8005de4 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 ff91 	bl	8007c76 <SDMMC_GetResponse>
 8005d54:	4602      	mov	r2, r0
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2104      	movs	r1, #4
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 ff88 	bl	8007c76 <SDMMC_GetResponse>
 8005d66:	4602      	mov	r2, r0
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2108      	movs	r1, #8
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 ff7f 	bl	8007c76 <SDMMC_GetResponse>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	210c      	movs	r1, #12
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 ff76 	bl	8007c76 <SDMMC_GetResponse>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2104      	movs	r1, #4
 8005d96:	4618      	mov	r0, r3
 8005d98:	f001 ff6d 	bl	8007c76 <SDMMC_GetResponse>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	0d1a      	lsrs	r2, r3, #20
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005da4:	f107 0310 	add.w	r3, r7, #16
 8005da8:	4619      	mov	r1, r3
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fc44 	bl	8005638 <HAL_SD_GetCardCSD>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005db6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005dba:	e013      	b.n	8005de4 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	461c      	mov	r4, r3
 8005dca:	4615      	mov	r5, r2
 8005dcc:	4622      	mov	r2, r4
 8005dce:	462b      	mov	r3, r5
 8005dd0:	4608      	mov	r0, r1
 8005dd2:	f002 f85b 	bl	8007e8c <SDMMC_CmdSelDesel>
 8005dd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <SD_InitCard+0x176>
  {
    return errorstate;
 8005dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de0:	e000      	b.n	8005de4 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3740      	adds	r7, #64	@ 0x40
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bdb0      	pop	{r4, r5, r7, pc}

08005dec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	617b      	str	r3, [r7, #20]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f002 f864 	bl	8007ed2 <SDMMC_CmdGoIdleState>
 8005e0a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	e072      	b.n	8005efc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f002 f877 	bl	8007f0e <SDMMC_CmdOperCond>
 8005e20:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00d      	beq.n	8005e44 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f002 f84d 	bl	8007ed2 <SDMMC_CmdGoIdleState>
 8005e38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <SD_PowerON+0x5e>
    {
      return errorstate;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	e05b      	b.n	8005efc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d137      	bne.n	8005ec2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2100      	movs	r1, #0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f002 f877 	bl	8007f4c <SDMMC_CmdAppCommand>
 8005e5e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d02d      	beq.n	8005ec2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e66:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e6a:	e047      	b.n	8005efc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f002 f86a 	bl	8007f4c <SDMMC_CmdAppCommand>
 8005e78:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <SD_PowerON+0x98>
    {
      return errorstate;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	e03b      	b.n	8005efc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	491e      	ldr	r1, [pc, #120]	@ (8005f04 <SD_PowerON+0x118>)
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f002 f880 	bl	8007f90 <SDMMC_CmdAppOperCommand>
 8005e90:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e9c:	e02e      	b.n	8005efc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f001 fee6 	bl	8007c76 <SDMMC_GetResponse>
 8005eaa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	0fdb      	lsrs	r3, r3, #31
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <SD_PowerON+0xcc>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <SD_PowerON+0xce>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	613b      	str	r3, [r7, #16]

    count++;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d802      	bhi.n	8005ed2 <SD_PowerON+0xe6>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0cc      	beq.n	8005e6c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d902      	bls.n	8005ee2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005edc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ee0:	e00c      	b.n	8005efc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	645a      	str	r2, [r3, #68]	@ 0x44
 8005ef2:	e002      	b.n	8005efa <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	c1100000 	.word	0xc1100000

08005f08 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005f18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f1c:	e018      	b.n	8005f50 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f26:	041b      	lsls	r3, r3, #16
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f002 f8f4 	bl	8008118 <SDMMC_CmdSendStatus>
 8005f30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <SD_SendStatus+0x34>
  {
    return errorstate;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	e009      	b.n	8005f50 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f001 fe97 	bl	8007c76 <SDMMC_GetResponse>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	2300      	movs	r3, #0
 8005f66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f001 fe81 	bl	8007c76 <SDMMC_GetResponse>
 8005f74:	4603      	mov	r3, r0
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f7e:	d102      	bne.n	8005f86 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f84:	e02f      	b.n	8005fe6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f879 	bl	8006084 <SD_FindSCR>
 8005f92:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	e023      	b.n	8005fe6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01c      	beq.n	8005fe2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fb0:	041b      	lsls	r3, r3, #16
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f001 ffc9 	bl	8007f4c <SDMMC_CmdAppCommand>
 8005fba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	e00f      	b.n	8005fe6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2102      	movs	r1, #2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f002 f802 	bl	8007fd6 <SDMMC_CmdBusWidth>
 8005fd2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	e003      	b.n	8005fe6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e001      	b.n	8005fe6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005fe2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f001 fe36 	bl	8007c76 <SDMMC_GetResponse>
 800600a:	4603      	mov	r3, r0
 800600c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006010:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006014:	d102      	bne.n	800601c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006016:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800601a:	e02f      	b.n	800607c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f82e 	bl	8006084 <SD_FindSCR>
 8006028:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	e023      	b.n	800607c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01c      	beq.n	8006078 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f001 ff7e 	bl	8007f4c <SDMMC_CmdAppCommand>
 8006050:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	e00f      	b.n	800607c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2100      	movs	r1, #0
 8006062:	4618      	mov	r0, r3
 8006064:	f001 ffb7 	bl	8007fd6 <SDMMC_CmdBusWidth>
 8006068:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	e003      	b.n	800607c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006074:	2300      	movs	r3, #0
 8006076:	e001      	b.n	800607c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006078:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b08f      	sub	sp, #60	@ 0x3c
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800608e:	f7fb fac7 	bl	8001620 <HAL_GetTick>
 8006092:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006098:	2300      	movs	r3, #0
 800609a:	60bb      	str	r3, [r7, #8]
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2108      	movs	r1, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f001 fe22 	bl	8007cf4 <SDMMC_CmdBlockLength>
 80060b0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d001      	beq.n	80060bc <SD_FindSCR+0x38>
  {
    return errorstate;
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	e0a9      	b.n	8006210 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f001 ff3f 	bl	8007f4c <SDMMC_CmdAppCommand>
 80060ce:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80060d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <SD_FindSCR+0x56>
  {
    return errorstate;
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	e09a      	b.n	8006210 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060de:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80060e0:	2308      	movs	r3, #8
 80060e2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80060e4:	2330      	movs	r3, #48	@ 0x30
 80060e6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80060e8:	2302      	movs	r3, #2
 80060ea:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80060f0:	2301      	movs	r3, #1
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f107 0210 	add.w	r2, r7, #16
 80060fc:	4611      	mov	r1, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fdcc 	bl	8007c9c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f001 ff86 	bl	800801a <SDMMC_CmdSendSCR>
 800610e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d022      	beq.n	800615c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8006116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006118:	e07a      	b.n	8006210 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00e      	beq.n	8006146 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6819      	ldr	r1, [r3, #0]
 800612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	f107 0208 	add.w	r2, r7, #8
 8006134:	18d4      	adds	r4, r2, r3
 8006136:	4608      	mov	r0, r1
 8006138:	f001 fd2b 	bl	8007b92 <SDMMC_ReadFIFO>
 800613c:	4603      	mov	r3, r0
 800613e:	6023      	str	r3, [r4, #0]
      index++;
 8006140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006142:	3301      	adds	r3, #1
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006146:	f7fb fa6b 	bl	8001620 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006154:	d102      	bne.n	800615c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006156:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800615a:	e059      	b.n	8006210 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006162:	f240 432a 	movw	r3, #1066	@ 0x42a
 8006166:	4013      	ands	r3, r2
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0d6      	beq.n	800611a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2208      	movs	r2, #8
 8006180:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006182:	2308      	movs	r3, #8
 8006184:	e044      	b.n	8006210 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2202      	movs	r2, #2
 800619a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800619c:	2302      	movs	r3, #2
 800619e:	e037      	b.n	8006210 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2220      	movs	r2, #32
 80061b4:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80061b6:	2320      	movs	r3, #32
 80061b8:	e02a      	b.n	8006210 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f240 523a 	movw	r2, #1338	@ 0x53a
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	061a      	lsls	r2, r3, #24
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061d0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	0a1b      	lsrs	r3, r3, #8
 80061d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061da:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	0e1b      	lsrs	r3, r3, #24
 80061e0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	601a      	str	r2, [r3, #0]
    scr++;
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	3304      	adds	r3, #4
 80061ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	061a      	lsls	r2, r3, #24
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80061f8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006202:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	0e1b      	lsrs	r3, r3, #24
 8006208:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800620a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	373c      	adds	r7, #60	@ 0x3c
 8006214:	46bd      	mov	sp, r7
 8006216:	bd90      	pop	{r4, r7, pc}

08006218 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800622a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d03f      	beq.n	80062b2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e033      	b.n	80062a0 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f001 fca8 	bl	8007b92 <SDMMC_ReadFIFO>
 8006242:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3b01      	subs	r3, #1
 8006256:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3301      	adds	r3, #1
 8006266:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	3b01      	subs	r3, #1
 800626c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	b2da      	uxtb	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3301      	adds	r3, #1
 800627c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	3b01      	subs	r3, #1
 8006282:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	0e1b      	lsrs	r3, r3, #24
 8006288:	b2da      	uxtb	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	3b01      	subs	r3, #1
 8006298:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	3301      	adds	r3, #1
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2b07      	cmp	r3, #7
 80062a4:	d9c8      	bls.n	8006238 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80062b2:	bf00      	nop
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b086      	sub	sp, #24
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d043      	beq.n	800635c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e037      	b.n	800634a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	60bb      	str	r3, [r7, #8]
      tmp++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	021a      	lsls	r2, r3, #8
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	3b01      	subs	r3, #1
 8006302:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	041a      	lsls	r2, r3, #16
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	4313      	orrs	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	3b01      	subs	r3, #1
 800631a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	061a      	lsls	r2, r3, #24
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4313      	orrs	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	3b01      	subs	r3, #1
 8006332:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f107 0208 	add.w	r2, r7, #8
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f001 fc34 	bl	8007bac <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	3301      	adds	r3, #1
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b07      	cmp	r3, #7
 800634e:	d9c4      	bls.n	80062da <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800635c:	bf00      	nop
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e040      	b.n	80063f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f7fa feb2 	bl	80010f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2224      	movs	r2, #36	@ 0x24
 8006390:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fedc 	bl	8007168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fc21 	bl	8006bf8 <UART_SetConfig>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e01b      	b.n	80063f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 ff5b 	bl	80072ac <UART_CheckIdleState>
 80063f6:	4603      	mov	r3, r0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006414:	2b20      	cmp	r3, #32
 8006416:	d177      	bne.n	8006508 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_UART_Transmit+0x24>
 800641e:	88fb      	ldrh	r3, [r7, #6]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e070      	b.n	800650a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2221      	movs	r2, #33	@ 0x21
 8006434:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006436:	f7fb f8f3 	bl	8001620 <HAL_GetTick>
 800643a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	88fa      	ldrh	r2, [r7, #6]
 8006440:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	88fa      	ldrh	r2, [r7, #6]
 8006448:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006454:	d108      	bne.n	8006468 <HAL_UART_Transmit+0x68>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e003      	b.n	8006470 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006470:	e02f      	b.n	80064d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	2180      	movs	r1, #128	@ 0x80
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 ffbd 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e03b      	b.n	800650a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10b      	bne.n	80064b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	881a      	ldrh	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064a4:	b292      	uxth	r2, r2
 80064a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	3302      	adds	r3, #2
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e007      	b.n	80064c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	781a      	ldrb	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	3301      	adds	r3, #1
 80064be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1c9      	bne.n	8006472 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2140      	movs	r1, #64	@ 0x40
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 ff87 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2220      	movs	r2, #32
 80064f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e005      	b.n	800650a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	e000      	b.n	800650a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006508:	2302      	movs	r3, #2
  }
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08a      	sub	sp, #40	@ 0x28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006528:	2b20      	cmp	r3, #32
 800652a:	d137      	bne.n	800659c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_UART_Receive_IT+0x24>
 8006532:	88fb      	ldrh	r3, [r7, #6]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e030      	b.n	800659e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a18      	ldr	r2, [pc, #96]	@ (80065a8 <HAL_UART_Receive_IT+0x94>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d01f      	beq.n	800658c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d018      	beq.n	800658c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	613b      	str	r3, [r7, #16]
   return(result);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	461a      	mov	r2, r3
 8006576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	69f9      	ldr	r1, [r7, #28]
 800657e:	6a3a      	ldr	r2, [r7, #32]
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	61bb      	str	r3, [r7, #24]
   return(result);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e6      	bne.n	800655a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	461a      	mov	r2, r3
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 ffa0 	bl	80074d8 <UART_Start_Receive_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	e000      	b.n	800659e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3728      	adds	r7, #40	@ 0x28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40008000 	.word	0x40008000

080065ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b0ba      	sub	sp, #232	@ 0xe8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80065d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80065d6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80065da:	4013      	ands	r3, r2
 80065dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80065e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d115      	bne.n	8006614 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 82ca 	beq.w	8006b9e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	4798      	blx	r3
      }
      return;
 8006612:	e2c4      	b.n	8006b9e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 8117 	beq.w	800684c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800661e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006622:	f003 0301 	and.w	r3, r3, #1
 8006626:	2b00      	cmp	r3, #0
 8006628:	d106      	bne.n	8006638 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800662a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800662e:	4b85      	ldr	r3, [pc, #532]	@ (8006844 <HAL_UART_IRQHandler+0x298>)
 8006630:	4013      	ands	r3, r2
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 810a 	beq.w	800684c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d011      	beq.n	8006668 <HAL_UART_IRQHandler+0xbc>
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2201      	movs	r2, #1
 8006656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800665e:	f043 0201 	orr.w	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d011      	beq.n	8006698 <HAL_UART_IRQHandler+0xec>
 8006674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2202      	movs	r2, #2
 8006686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800668e:	f043 0204 	orr.w	r2, r3, #4
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d011      	beq.n	80066c8 <HAL_UART_IRQHandler+0x11c>
 80066a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00b      	beq.n	80066c8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2204      	movs	r2, #4
 80066b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066be:	f043 0202 	orr.w	r2, r3, #2
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d017      	beq.n	8006704 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d8:	f003 0320 	and.w	r3, r3, #32
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2208      	movs	r2, #8
 80066f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066fa:	f043 0208 	orr.w	r2, r3, #8
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800670c:	2b00      	cmp	r3, #0
 800670e:	d012      	beq.n	8006736 <HAL_UART_IRQHandler+0x18a>
 8006710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00c      	beq.n	8006736 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800672c:	f043 0220 	orr.w	r2, r3, #32
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 8230 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00d      	beq.n	800676a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800674e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b00      	cmp	r3, #0
 8006758:	d007      	beq.n	800676a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675e:	2b00      	cmp	r3, #0
 8006760:	d003      	beq.n	800676a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006770:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800677e:	2b40      	cmp	r3, #64	@ 0x40
 8006780:	d005      	beq.n	800678e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006786:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800678a:	2b00      	cmp	r3, #0
 800678c:	d04f      	beq.n	800682e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 ff68 	bl	8007664 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679e:	2b40      	cmp	r3, #64	@ 0x40
 80067a0:	d141      	bne.n	8006826 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3308      	adds	r3, #8
 80067ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80067e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1d9      	bne.n	80067a2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d013      	beq.n	800681e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fa:	4a13      	ldr	r2, [pc, #76]	@ (8006848 <HAL_UART_IRQHandler+0x29c>)
 80067fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006802:	4618      	mov	r0, r3
 8006804:	f7fb f9a4 	bl	8001b50 <HAL_DMA_Abort_IT>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d017      	beq.n	800683e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006818:	4610      	mov	r0, r2
 800681a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800681c:	e00f      	b.n	800683e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9d4 	bl	8006bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006824:	e00b      	b.n	800683e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9d0 	bl	8006bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682c:	e007      	b.n	800683e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9cc 	bl	8006bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800683c:	e1b1      	b.n	8006ba2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683e:	bf00      	nop
    return;
 8006840:	e1af      	b.n	8006ba2 <HAL_UART_IRQHandler+0x5f6>
 8006842:	bf00      	nop
 8006844:	04000120 	.word	0x04000120
 8006848:	0800772d 	.word	0x0800772d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006850:	2b01      	cmp	r3, #1
 8006852:	f040 816a 	bne.w	8006b2a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800685a:	f003 0310 	and.w	r3, r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	f000 8163 	beq.w	8006b2a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 815c 	beq.w	8006b2a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006884:	2b40      	cmp	r3, #64	@ 0x40
 8006886:	f040 80d4 	bne.w	8006a32 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006896:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80ad 	beq.w	80069fa <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068aa:	429a      	cmp	r2, r3
 80068ac:	f080 80a5 	bcs.w	80069fa <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 8086 	bne.w	80069d8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80068e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80068e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80068f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80068fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800690e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1da      	bne.n	80068cc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	3308      	adds	r3, #8
 8006936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800693a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800693e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800694c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1e1      	bne.n	8006916 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3308      	adds	r3, #8
 8006958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3308      	adds	r3, #8
 8006972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800697c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e3      	bne.n	8006952 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a0:	e853 3f00 	ldrex	r3, [r3]
 80069a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069a8:	f023 0310 	bic.w	r3, r3, #16
 80069ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80069ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069bc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e4      	bne.n	8006998 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fb f87e 	bl	8001ad4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	4619      	mov	r1, r3
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f8f4 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80069f8:	e0d5      	b.n	8006ba6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a04:	429a      	cmp	r2, r3
 8006a06:	f040 80ce 	bne.w	8006ba6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0320 	and.w	r3, r3, #32
 8006a16:	2b20      	cmp	r3, #32
 8006a18:	f040 80c5 	bne.w	8006ba6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f8d8 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
      return;
 8006a30:	e0b9      	b.n	8006ba6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	f000 80ab 	beq.w	8006baa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006a54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f000 80a6 	beq.w	8006baa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a88:	e841 2300 	strex	r3, r2, [r1]
 8006a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e4      	bne.n	8006a5e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3308      	adds	r3, #8
 8006a9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	f023 0301 	bic.w	r3, r3, #1
 8006aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ab8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ac0:	e841 2300 	strex	r3, r2, [r1]
 8006ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d1e3      	bne.n	8006a94 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f023 0310 	bic.w	r3, r3, #16
 8006af4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b02:	61fb      	str	r3, [r7, #28]
 8006b04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	69b9      	ldr	r1, [r7, #24]
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e4      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f85c 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b28:	e03f      	b.n	8006baa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00e      	beq.n	8006b54 <HAL_UART_IRQHandler+0x5a8>
 8006b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 ffe9 	bl	8007b24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b52:	e02d      	b.n	8006bb0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01c      	beq.n	8006bae <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
    }
    return;
 8006b7c:	e017      	b.n	8006bae <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d012      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x604>
 8006b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fdde 	bl	8007758 <UART_EndTransmit_IT>
    return;
 8006b9c:	e008      	b.n	8006bb0 <HAL_UART_IRQHandler+0x604>
      return;
 8006b9e:	bf00      	nop
 8006ba0:	e006      	b.n	8006bb0 <HAL_UART_IRQHandler+0x604>
    return;
 8006ba2:	bf00      	nop
 8006ba4:	e004      	b.n	8006bb0 <HAL_UART_IRQHandler+0x604>
      return;
 8006ba6:	bf00      	nop
 8006ba8:	e002      	b.n	8006bb0 <HAL_UART_IRQHandler+0x604>
      return;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_IRQHandler+0x604>
    return;
 8006bae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006bb0:	37e8      	adds	r7, #232	@ 0xe8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop

08006bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bfc:	b08a      	sub	sp, #40	@ 0x28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4ba4      	ldr	r3, [pc, #656]	@ (8006eb8 <UART_SetConfig+0x2c0>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a99      	ldr	r2, [pc, #612]	@ (8006ebc <UART_SetConfig+0x2c4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c60:	4313      	orrs	r3, r2
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a90      	ldr	r2, [pc, #576]	@ (8006ec0 <UART_SetConfig+0x2c8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d126      	bne.n	8006cd0 <UART_SetConfig+0xd8>
 8006c82:	4b90      	ldr	r3, [pc, #576]	@ (8006ec4 <UART_SetConfig+0x2cc>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d81b      	bhi.n	8006cc8 <UART_SetConfig+0xd0>
 8006c90:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <UART_SetConfig+0xa0>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cae:	e116      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb6:	e112      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cbe:	e10e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc6:	e10a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cce:	e106      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ec8 <UART_SetConfig+0x2d0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d138      	bne.n	8006d4c <UART_SetConfig+0x154>
 8006cda:	4b7a      	ldr	r3, [pc, #488]	@ (8006ec4 <UART_SetConfig+0x2cc>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d82d      	bhi.n	8006d44 <UART_SetConfig+0x14c>
 8006ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cf0 <UART_SetConfig+0xf8>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d25 	.word	0x08006d25
 8006cf4:	08006d45 	.word	0x08006d45
 8006cf8:	08006d45 	.word	0x08006d45
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2a:	e0d8      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d32:	e0d4      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d3a:	e0d0      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d42:	e0cc      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4a:	e0c8      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a5e      	ldr	r2, [pc, #376]	@ (8006ecc <UART_SetConfig+0x2d4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d125      	bne.n	8006da2 <UART_SetConfig+0x1aa>
 8006d56:	4b5b      	ldr	r3, [pc, #364]	@ (8006ec4 <UART_SetConfig+0x2cc>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d60:	2b30      	cmp	r3, #48	@ 0x30
 8006d62:	d016      	beq.n	8006d92 <UART_SetConfig+0x19a>
 8006d64:	2b30      	cmp	r3, #48	@ 0x30
 8006d66:	d818      	bhi.n	8006d9a <UART_SetConfig+0x1a2>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d00a      	beq.n	8006d82 <UART_SetConfig+0x18a>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d814      	bhi.n	8006d9a <UART_SetConfig+0x1a2>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <UART_SetConfig+0x182>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d008      	beq.n	8006d8a <UART_SetConfig+0x192>
 8006d78:	e00f      	b.n	8006d9a <UART_SetConfig+0x1a2>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d80:	e0ad      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d82:	2302      	movs	r3, #2
 8006d84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d88:	e0a9      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d90:	e0a5      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d92:	2308      	movs	r3, #8
 8006d94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d98:	e0a1      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006da0:	e09d      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a4a      	ldr	r2, [pc, #296]	@ (8006ed0 <UART_SetConfig+0x2d8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d125      	bne.n	8006df8 <UART_SetConfig+0x200>
 8006dac:	4b45      	ldr	r3, [pc, #276]	@ (8006ec4 <UART_SetConfig+0x2cc>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006db6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006db8:	d016      	beq.n	8006de8 <UART_SetConfig+0x1f0>
 8006dba:	2bc0      	cmp	r3, #192	@ 0xc0
 8006dbc:	d818      	bhi.n	8006df0 <UART_SetConfig+0x1f8>
 8006dbe:	2b80      	cmp	r3, #128	@ 0x80
 8006dc0:	d00a      	beq.n	8006dd8 <UART_SetConfig+0x1e0>
 8006dc2:	2b80      	cmp	r3, #128	@ 0x80
 8006dc4:	d814      	bhi.n	8006df0 <UART_SetConfig+0x1f8>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <UART_SetConfig+0x1d8>
 8006dca:	2b40      	cmp	r3, #64	@ 0x40
 8006dcc:	d008      	beq.n	8006de0 <UART_SetConfig+0x1e8>
 8006dce:	e00f      	b.n	8006df0 <UART_SetConfig+0x1f8>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd6:	e082      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dde:	e07e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de6:	e07a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dee:	e076      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006df6:	e072      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a35      	ldr	r2, [pc, #212]	@ (8006ed4 <UART_SetConfig+0x2dc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d12a      	bne.n	8006e58 <UART_SetConfig+0x260>
 8006e02:	4b30      	ldr	r3, [pc, #192]	@ (8006ec4 <UART_SetConfig+0x2cc>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e10:	d01a      	beq.n	8006e48 <UART_SetConfig+0x250>
 8006e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e16:	d81b      	bhi.n	8006e50 <UART_SetConfig+0x258>
 8006e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e1c:	d00c      	beq.n	8006e38 <UART_SetConfig+0x240>
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e22:	d815      	bhi.n	8006e50 <UART_SetConfig+0x258>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <UART_SetConfig+0x238>
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e2c:	d008      	beq.n	8006e40 <UART_SetConfig+0x248>
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x258>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e36:	e052      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3e:	e04e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e46:	e04a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e4e:	e046      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e56:	e042      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a17      	ldr	r2, [pc, #92]	@ (8006ebc <UART_SetConfig+0x2c4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d13a      	bne.n	8006ed8 <UART_SetConfig+0x2e0>
 8006e62:	4b18      	ldr	r3, [pc, #96]	@ (8006ec4 <UART_SetConfig+0x2cc>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006e6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e70:	d01a      	beq.n	8006ea8 <UART_SetConfig+0x2b0>
 8006e72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e76:	d81b      	bhi.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e7c:	d00c      	beq.n	8006e98 <UART_SetConfig+0x2a0>
 8006e7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e82:	d815      	bhi.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <UART_SetConfig+0x298>
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e8c:	d008      	beq.n	8006ea0 <UART_SetConfig+0x2a8>
 8006e8e:	e00f      	b.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e96:	e022      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e9e:	e01e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea6:	e01a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eae:	e016      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb6:	e012      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006eb8:	efff69f3 	.word	0xefff69f3
 8006ebc:	40008000 	.word	0x40008000
 8006ec0:	40013800 	.word	0x40013800
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40004400 	.word	0x40004400
 8006ecc:	40004800 	.word	0x40004800
 8006ed0:	40004c00 	.word	0x40004c00
 8006ed4:	40005000 	.word	0x40005000
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a9f      	ldr	r2, [pc, #636]	@ (8007160 <UART_SetConfig+0x568>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d17a      	bne.n	8006fde <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d824      	bhi.n	8006f3a <UART_SetConfig+0x342>
 8006ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ef8 <UART_SetConfig+0x300>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f2b 	.word	0x08006f2b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f3b 	.word	0x08006f3b
 8006f18:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fb feea 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8006f20:	61f8      	str	r0, [r7, #28]
        break;
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b8f      	ldr	r3, [pc, #572]	@ (8007164 <UART_SetConfig+0x56c>)
 8006f26:	61fb      	str	r3, [r7, #28]
        break;
 8006f28:	e00d      	b.n	8006f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fb fe4b 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8006f2e:	61f8      	str	r0, [r7, #28]
        break;
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80fb 	beq.w	8007144 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	4413      	add	r3, r2
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d305      	bcc.n	8006f6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d903      	bls.n	8006f72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f70:	e0e8      	b.n	8007144 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2200      	movs	r2, #0
 8006f76:	461c      	mov	r4, r3
 8006f78:	4615      	mov	r5, r2
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	022b      	lsls	r3, r5, #8
 8006f84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f88:	0222      	lsls	r2, r4, #8
 8006f8a:	68f9      	ldr	r1, [r7, #12]
 8006f8c:	6849      	ldr	r1, [r1, #4]
 8006f8e:	0849      	lsrs	r1, r1, #1
 8006f90:	2000      	movs	r0, #0
 8006f92:	4688      	mov	r8, r1
 8006f94:	4681      	mov	r9, r0
 8006f96:	eb12 0a08 	adds.w	sl, r2, r8
 8006f9a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fac:	4650      	mov	r0, sl
 8006fae:	4659      	mov	r1, fp
 8006fb0:	f7f9 f976 	bl	80002a0 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fc2:	d308      	bcc.n	8006fd6 <UART_SetConfig+0x3de>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006fca:	d204      	bcs.n	8006fd6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	e0b6      	b.n	8007144 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006fdc:	e0b2      	b.n	8007144 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fe6:	d15e      	bne.n	80070a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d828      	bhi.n	8007042 <UART_SetConfig+0x44a>
 8006ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff8 <UART_SetConfig+0x400>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007043 	.word	0x08007043
 8007008:	08007033 	.word	0x08007033
 800700c:	08007043 	.word	0x08007043
 8007010:	08007043 	.word	0x08007043
 8007014:	08007043 	.word	0x08007043
 8007018:	0800703b 	.word	0x0800703b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fb fe6a 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 8007020:	61f8      	str	r0, [r7, #28]
        break;
 8007022:	e014      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007024:	f7fb fe7c 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 8007028:	61f8      	str	r0, [r7, #28]
        break;
 800702a:	e010      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800702c:	4b4d      	ldr	r3, [pc, #308]	@ (8007164 <UART_SetConfig+0x56c>)
 800702e:	61fb      	str	r3, [r7, #28]
        break;
 8007030:	e00d      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007032:	f7fb fdc7 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8007036:	61f8      	str	r0, [r7, #28]
        break;
 8007038:	e009      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800703e:	61fb      	str	r3, [r7, #28]
        break;
 8007040:	e005      	b.n	800704e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800704c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d077      	beq.n	8007144 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	005a      	lsls	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b0f      	cmp	r3, #15
 800706e:	d916      	bls.n	800709e <UART_SetConfig+0x4a6>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007076:	d212      	bcs.n	800709e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f023 030f 	bic.w	r3, r3, #15
 8007080:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	b29b      	uxth	r3, r3
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	b29a      	uxth	r2, r3
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	4313      	orrs	r3, r2
 8007092:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	8afa      	ldrh	r2, [r7, #22]
 800709a:	60da      	str	r2, [r3, #12]
 800709c:	e052      	b.n	8007144 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80070a4:	e04e      	b.n	8007144 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d827      	bhi.n	80070fe <UART_SetConfig+0x506>
 80070ae:	a201      	add	r2, pc, #4	@ (adr r2, 80070b4 <UART_SetConfig+0x4bc>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	080070ff 	.word	0x080070ff
 80070c4:	080070ef 	.word	0x080070ef
 80070c8:	080070ff 	.word	0x080070ff
 80070cc:	080070ff 	.word	0x080070ff
 80070d0:	080070ff 	.word	0x080070ff
 80070d4:	080070f7 	.word	0x080070f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d8:	f7fb fe0c 	bl	8002cf4 <HAL_RCC_GetPCLK1Freq>
 80070dc:	61f8      	str	r0, [r7, #28]
        break;
 80070de:	e014      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e0:	f7fb fe1e 	bl	8002d20 <HAL_RCC_GetPCLK2Freq>
 80070e4:	61f8      	str	r0, [r7, #28]
        break;
 80070e6:	e010      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e8:	4b1e      	ldr	r3, [pc, #120]	@ (8007164 <UART_SetConfig+0x56c>)
 80070ea:	61fb      	str	r3, [r7, #28]
        break;
 80070ec:	e00d      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fb fd69 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 80070f2:	61f8      	str	r0, [r7, #28]
        break;
 80070f4:	e009      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070fa:	61fb      	str	r3, [r7, #28]
        break;
 80070fc:	e005      	b.n	800710a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007108:	bf00      	nop
    }

    if (pclk != 0U)
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d019      	beq.n	8007144 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	085a      	lsrs	r2, r3, #1
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	441a      	add	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d909      	bls.n	800713e <UART_SetConfig+0x546>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007130:	d205      	bcs.n	800713e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	e002      	b.n	8007144 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007150:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	@ 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715e:	bf00      	nop
 8007160:	40008000 	.word	0x40008000
 8007164:	00f42400 	.word	0x00f42400

08007168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	f003 0308 	and.w	r3, r3, #8
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071da:	f003 0304 	and.w	r3, r3, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01a      	beq.n	800727e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007262:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007266:	d10a      	bne.n	800727e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
  }
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b098      	sub	sp, #96	@ 0x60
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072bc:	f7fa f9b0 	bl	8001620 <HAL_GetTick>
 80072c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d12e      	bne.n	800732e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d8:	2200      	movs	r2, #0
 80072da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f88c 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d021      	beq.n	800732e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80072f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007308:	647b      	str	r3, [r7, #68]	@ 0x44
 800730a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800730e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e062      	b.n	80073f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b04      	cmp	r3, #4
 800733a:	d149      	bne.n	80073d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f856 	bl	80073fc <UART_WaitOnFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d03c      	beq.n	80073d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	623b      	str	r3, [r7, #32]
   return(result);
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800736a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007374:	633b      	str	r3, [r7, #48]	@ 0x30
 8007376:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800737a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	60fb      	str	r3, [r7, #12]
   return(result);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0301 	bic.w	r3, r3, #1
 800739e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3308      	adds	r3, #8
 80073a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073a8:	61fa      	str	r2, [r7, #28]
 80073aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	69b9      	ldr	r1, [r7, #24]
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	617b      	str	r3, [r7, #20]
   return(result);
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e5      	bne.n	8007388 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e011      	b.n	80073f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2220      	movs	r2, #32
 80073da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3758      	adds	r7, #88	@ 0x58
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	603b      	str	r3, [r7, #0]
 8007408:	4613      	mov	r3, r2
 800740a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800740c:	e04f      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007414:	d04b      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007416:	f7fa f903 	bl	8001620 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	429a      	cmp	r2, r3
 8007424:	d302      	bcc.n	800742c <UART_WaitOnFlagUntilTimeout+0x30>
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e04e      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d037      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b80      	cmp	r3, #128	@ 0x80
 8007442:	d034      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b40      	cmp	r3, #64	@ 0x40
 8007448:	d031      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	f003 0308 	and.w	r3, r3, #8
 8007454:	2b08      	cmp	r3, #8
 8007456:	d110      	bne.n	800747a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2208      	movs	r2, #8
 800745e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f8ff 	bl	8007664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2208      	movs	r2, #8
 800746a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e029      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007488:	d111      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f8e5 	bl	8007664 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e00f      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d0a0      	beq.n	800740e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074d8:	b480      	push	{r7}
 80074da:	b097      	sub	sp, #92	@ 0x5c
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750a:	d10e      	bne.n	800752a <UART_Start_Receive_IT+0x52>
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <UART_Start_Receive_IT+0x48>
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800751a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800751e:	e02d      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	22ff      	movs	r2, #255	@ 0xff
 8007524:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007528:	e028      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10d      	bne.n	800754e <UART_Start_Receive_IT+0x76>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d104      	bne.n	8007544 <UART_Start_Receive_IT+0x6c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	22ff      	movs	r2, #255	@ 0xff
 800753e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007542:	e01b      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	227f      	movs	r2, #127	@ 0x7f
 8007548:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800754c:	e016      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007556:	d10d      	bne.n	8007574 <UART_Start_Receive_IT+0x9c>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d104      	bne.n	800756a <UART_Start_Receive_IT+0x92>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	227f      	movs	r2, #127	@ 0x7f
 8007564:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007568:	e008      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	223f      	movs	r2, #63	@ 0x3f
 800756e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007572:	e003      	b.n	800757c <UART_Start_Receive_IT+0xa4>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2200      	movs	r2, #0
 8007578:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2222      	movs	r2, #34	@ 0x22
 8007588:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	f043 0301 	orr.w	r3, r3, #1
 80075a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3308      	adds	r3, #8
 80075aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80075ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80075b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80075ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e5      	bne.n	800758c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075c8:	d107      	bne.n	80075da <UART_Start_Receive_IT+0x102>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d103      	bne.n	80075da <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a21      	ldr	r2, [pc, #132]	@ (800765c <UART_Start_Receive_IT+0x184>)
 80075d6:	669a      	str	r2, [r3, #104]	@ 0x68
 80075d8:	e002      	b.n	80075e0 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a20      	ldr	r2, [pc, #128]	@ (8007660 <UART_Start_Receive_IT+0x188>)
 80075de:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d019      	beq.n	800761c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80075f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f8:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80075fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007606:	637b      	str	r3, [r7, #52]	@ 0x34
 8007608:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800760c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800760e:	e841 2300 	strex	r3, r2, [r1]
 8007612:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e6      	bne.n	80075e8 <UART_Start_Receive_IT+0x110>
 800761a:	e018      	b.n	800764e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	613b      	str	r3, [r7, #16]
   return(result);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f043 0320 	orr.w	r3, r3, #32
 8007630:	653b      	str	r3, [r7, #80]	@ 0x50
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800763a:	623b      	str	r3, [r7, #32]
 800763c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	69f9      	ldr	r1, [r7, #28]
 8007640:	6a3a      	ldr	r2, [r7, #32]
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	61bb      	str	r3, [r7, #24]
   return(result);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e6      	bne.n	800761c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	375c      	adds	r7, #92	@ 0x5c
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	08007969 	.word	0x08007969
 8007660:	080077ad 	.word	0x080077ad

08007664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007664:	b480      	push	{r7}
 8007666:	b095      	sub	sp, #84	@ 0x54
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800768a:	643b      	str	r3, [r7, #64]	@ 0x40
 800768c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007692:	e841 2300 	strex	r3, r2, [r1]
 8007696:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e6      	bne.n	800766c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	3308      	adds	r3, #8
 80076a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	f023 0301 	bic.w	r3, r3, #1
 80076b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	3308      	adds	r3, #8
 80076bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e5      	bne.n	800769e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d118      	bne.n	800770c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f023 0310 	bic.w	r3, r3, #16
 80076ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	461a      	mov	r2, r3
 80076f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6979      	ldr	r1, [r7, #20]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	613b      	str	r3, [r7, #16]
   return(result);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e6      	bne.n	80076da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007720:	bf00      	nop
 8007722:	3754      	adds	r7, #84	@ 0x54
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fa3e 	bl	8006bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	e853 3f00 	ldrex	r3, [r3]
 800776c:	60bb      	str	r3, [r7, #8]
   return(result);
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007774:	61fb      	str	r3, [r7, #28]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	61bb      	str	r3, [r7, #24]
 8007780:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007782:	6979      	ldr	r1, [r7, #20]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	e841 2300 	strex	r3, r2, [r1]
 800778a:	613b      	str	r3, [r7, #16]
   return(result);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1e6      	bne.n	8007760 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2220      	movs	r2, #32
 8007796:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f7ff fa0a 	bl	8006bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a4:	bf00      	nop
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b09c      	sub	sp, #112	@ 0x70
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077c4:	2b22      	cmp	r3, #34	@ 0x22
 80077c6:	f040 80be 	bne.w	8007946 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80077d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80077d8:	b2d9      	uxtb	r1, r3
 80077da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e4:	400a      	ands	r2, r1
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ee:	1c5a      	adds	r2, r3, #1
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800780c:	b29b      	uxth	r3, r3
 800780e:	2b00      	cmp	r3, #0
 8007810:	f040 80a3 	bne.w	800795a <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007834:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007858:	f023 0301 	bic.w	r3, r3, #1
 800785c:	667b      	str	r3, [r7, #100]	@ 0x64
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007866:	647a      	str	r2, [r7, #68]	@ 0x44
 8007868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800786c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800786e:	e841 2300 	strex	r3, r2, [r1]
 8007872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1e5      	bne.n	8007846 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a34      	ldr	r2, [pc, #208]	@ (8007964 <UART_RxISR_8BIT+0x1b8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d01f      	beq.n	80078d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d018      	beq.n	80078d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ae:	e853 3f00 	ldrex	r3, [r3]
 80078b2:	623b      	str	r3, [r7, #32]
   return(result);
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80078c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80078ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e6      	bne.n	80078a6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d12e      	bne.n	800793e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 0310 	bic.w	r3, r3, #16
 80078fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007904:	61fb      	str	r3, [r7, #28]
 8007906:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	69b9      	ldr	r1, [r7, #24]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	617b      	str	r3, [r7, #20]
   return(result);
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0310 	and.w	r3, r3, #16
 8007922:	2b10      	cmp	r3, #16
 8007924:	d103      	bne.n	800792e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2210      	movs	r2, #16
 800792c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff f952 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800793c:	e00d      	b.n	800795a <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7f8 ff90 	bl	8000864 <HAL_UART_RxCpltCallback>
}
 8007944:	e009      	b.n	800795a <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	8b1b      	ldrh	r3, [r3, #24]
 800794c:	b29a      	uxth	r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0208 	orr.w	r2, r2, #8
 8007956:	b292      	uxth	r2, r2
 8007958:	831a      	strh	r2, [r3, #24]
}
 800795a:	bf00      	nop
 800795c:	3770      	adds	r7, #112	@ 0x70
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	40008000 	.word	0x40008000

08007968 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b09c      	sub	sp, #112	@ 0x70
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007976:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007980:	2b22      	cmp	r3, #34	@ 0x22
 8007982:	f040 80be 	bne.w	8007b02 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800798c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007994:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007996:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800799a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800799e:	4013      	ands	r3, r2
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80079a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079aa:	1c9a      	adds	r2, r3, #2
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3b01      	subs	r3, #1
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f040 80a3 	bne.w	8007b16 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80079de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80079f0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80079f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80079fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e6      	bne.n	80079d0 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a22:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e5      	bne.n	8007a02 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a34      	ldr	r2, [pc, #208]	@ (8007b20 <UART_RxISR_16BIT+0x1b8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d01f      	beq.n	8007a94 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d018      	beq.n	8007a94 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a82:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a88:	e841 2300 	strex	r3, r2, [r1]
 8007a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e6      	bne.n	8007a62 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d12e      	bne.n	8007afa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	e853 3f00 	ldrex	r3, [r3]
 8007aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	f023 0310 	bic.w	r3, r3, #16
 8007ab6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	461a      	mov	r2, r3
 8007abe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ac0:	61bb      	str	r3, [r7, #24]
 8007ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6979      	ldr	r1, [r7, #20]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e6      	bne.n	8007aa2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b10      	cmp	r3, #16
 8007ae0:	d103      	bne.n	8007aea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7ff f874 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007af8:	e00d      	b.n	8007b16 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7f8 feb2 	bl	8000864 <HAL_UART_RxCpltCallback>
}
 8007b00:	e009      	b.n	8007b16 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	8b1b      	ldrh	r3, [r3, #24]
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0208 	orr.w	r2, r2, #8
 8007b12:	b292      	uxth	r2, r2
 8007b14:	831a      	strh	r2, [r3, #24]
}
 8007b16:	bf00      	nop
 8007b18:	3770      	adds	r7, #112	@ 0x70
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40008000 	.word	0x40008000

08007b24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007b38:	b084      	sub	sp, #16
 8007b3a:	b480      	push	{r7}
 8007b3c:	b085      	sub	sp, #20
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	f107 001c 	add.w	r0, r7, #28
 8007b46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007b56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007b5a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007b5e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007b62:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8007b66:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8007b76:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	431a      	orrs	r2, r3
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	b004      	add	sp, #16
 8007b90:	4770      	bx	lr

08007b92 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b083      	sub	sp, #12
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2203      	movs	r2, #3
 8007bda:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007bdc:	2002      	movs	r0, #2
 8007bde:	f7f9 fd2b 	bl	8001638 <HAL_Delay>

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0303 	and.w	r3, r3, #3
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c26:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007c2c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007c32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007c42:	f023 030f 	bic.w	r3, r3, #15
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	b2db      	uxtb	r3, r3
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3314      	adds	r3, #20
 8007c84:	461a      	mov	r2, r3
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cc2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007cc8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007cce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cda:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0

}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007d02:	2310      	movs	r3, #16
 8007d04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d06:	2340      	movs	r3, #64	@ 0x40
 8007d08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d14:	f107 0308 	add.w	r3, r7, #8
 8007d18:	4619      	mov	r1, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7ff ff74 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d24:	2110      	movs	r1, #16
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa18 	bl	800815c <SDMMC_GetCmdResp1>
 8007d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d2e:	69fb      	ldr	r3, [r7, #28]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3720      	adds	r7, #32
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007d46:	2311      	movs	r3, #17
 8007d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d4a:	2340      	movs	r3, #64	@ 0x40
 8007d4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d58:	f107 0308 	add.w	r3, r7, #8
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff ff52 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d68:	2111      	movs	r1, #17
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f9f6 	bl	800815c <SDMMC_GetCmdResp1>
 8007d70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d72:	69fb      	ldr	r3, [r7, #28]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3720      	adds	r7, #32
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b088      	sub	sp, #32
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007d8a:	2312      	movs	r3, #18
 8007d8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d8e:	2340      	movs	r3, #64	@ 0x40
 8007d90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f7ff ff30 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dac:	2112      	movs	r1, #18
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f9d4 	bl	800815c <SDMMC_GetCmdResp1>
 8007db4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007db6:	69fb      	ldr	r3, [r7, #28]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3720      	adds	r7, #32
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b088      	sub	sp, #32
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007dce:	2318      	movs	r3, #24
 8007dd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007dd2:	2340      	movs	r3, #64	@ 0x40
 8007dd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007de0:	f107 0308 	add.w	r3, r7, #8
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ff0e 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007df0:	2118      	movs	r1, #24
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f9b2 	bl	800815c <SDMMC_GetCmdResp1>
 8007df8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3720      	adds	r7, #32
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007e12:	2319      	movs	r3, #25
 8007e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e16:	2340      	movs	r3, #64	@ 0x40
 8007e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff feec 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e34:	2119      	movs	r1, #25
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f990 	bl	800815c <SDMMC_GetCmdResp1>
 8007e3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e3e:	69fb      	ldr	r3, [r7, #28]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3720      	adds	r7, #32
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b088      	sub	sp, #32
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007e54:	230c      	movs	r3, #12
 8007e56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e58:	2340      	movs	r3, #64	@ 0x40
 8007e5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e64:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e66:	f107 0308 	add.w	r3, r7, #8
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7ff fecb 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007e72:	4a05      	ldr	r2, [pc, #20]	@ (8007e88 <SDMMC_CmdStopTransfer+0x40>)
 8007e74:	210c      	movs	r1, #12
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f970 	bl	800815c <SDMMC_GetCmdResp1>
 8007e7c:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3720      	adds	r7, #32
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	05f5e100 	.word	0x05f5e100

08007e8c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	@ 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007e9c:	2307      	movs	r3, #7
 8007e9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ea0:	2340      	movs	r3, #64	@ 0x40
 8007ea2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ea8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eac:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eae:	f107 0310 	add.w	r3, r7, #16
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f7ff fea7 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ebe:	2107      	movs	r1, #7
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	f000 f94b 	bl	800815c <SDMMC_GetCmdResp1>
 8007ec6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3728      	adds	r7, #40	@ 0x28
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b088      	sub	sp, #32
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007eda:	2300      	movs	r3, #0
 8007edc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ef0:	f107 0308 	add.w	r3, r7, #8
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fe86 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb65 	bl	80085cc <SDMMC_GetCmdError>
 8007f02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f04:	69fb      	ldr	r3, [r7, #28]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b088      	sub	sp, #32
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007f16:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f20:	2340      	movs	r3, #64	@ 0x40
 8007f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f24:	2300      	movs	r3, #0
 8007f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f2e:	f107 0308 	add.w	r3, r7, #8
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7ff fe67 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 faf8 	bl	8008530 <SDMMC_GetCmdResp7>
 8007f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f42:	69fb      	ldr	r3, [r7, #28]
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
 8007f54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007f5a:	2337      	movs	r3, #55	@ 0x37
 8007f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f5e:	2340      	movs	r3, #64	@ 0x40
 8007f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f6c:	f107 0308 	add.w	r3, r7, #8
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff fe48 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f7c:	2137      	movs	r1, #55	@ 0x37
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f8ec 	bl	800815c <SDMMC_GetCmdResp1>
 8007f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f86:	69fb      	ldr	r3, [r7, #28]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007fa4:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007fa6:	2329      	movs	r3, #41	@ 0x29
 8007fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007faa:	2340      	movs	r3, #64	@ 0x40
 8007fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff fe22 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f9ff 	bl	80083c8 <SDMMC_GetCmdResp3>
 8007fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3720      	adds	r7, #32
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b088      	sub	sp, #32
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
 8007fde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007fe4:	2306      	movs	r3, #6
 8007fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fe8:	2340      	movs	r3, #64	@ 0x40
 8007fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ff0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ff4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ff6:	f107 0308 	add.w	r3, r7, #8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f7ff fe03 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008002:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008006:	2106      	movs	r1, #6
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8a7 	bl	800815c <SDMMC_GetCmdResp1>
 800800e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008010:	69fb      	ldr	r3, [r7, #28]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3720      	adds	r7, #32
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b088      	sub	sp, #32
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008026:	2333      	movs	r3, #51	@ 0x33
 8008028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800802a:	2340      	movs	r3, #64	@ 0x40
 800802c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008032:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008036:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008038:	f107 0308 	add.w	r3, r7, #8
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fde2 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008044:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008048:	2133      	movs	r1, #51	@ 0x33
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f886 	bl	800815c <SDMMC_GetCmdResp1>
 8008050:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008052:	69fb      	ldr	r3, [r7, #28]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3720      	adds	r7, #32
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b088      	sub	sp, #32
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008068:	2302      	movs	r3, #2
 800806a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800806c:	23c0      	movs	r3, #192	@ 0xc0
 800806e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008070:	2300      	movs	r3, #0
 8008072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008078:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800807a:	f107 0308 	add.w	r3, r7, #8
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fdc1 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f956 	bl	8008338 <SDMMC_GetCmdResp2>
 800808c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800808e:	69fb      	ldr	r3, [r7, #28]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80080a6:	2309      	movs	r3, #9
 80080a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80080aa:	23c0      	movs	r3, #192	@ 0xc0
 80080ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080b8:	f107 0308 	add.w	r3, r7, #8
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff fda2 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f937 	bl	8008338 <SDMMC_GetCmdResp2>
 80080ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080cc:	69fb      	ldr	r3, [r7, #28]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3720      	adds	r7, #32
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b088      	sub	sp, #32
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80080e4:	2303      	movs	r3, #3
 80080e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080e8:	2340      	movs	r3, #64	@ 0x40
 80080ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fd83 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	2103      	movs	r1, #3
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f99c 	bl	8008444 <SDMMC_GetCmdResp6>
 800810c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800810e:	69fb      	ldr	r3, [r7, #28]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008126:	230d      	movs	r3, #13
 8008128:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800812a:	2340      	movs	r3, #64	@ 0x40
 800812c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008136:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008138:	f107 0308 	add.w	r3, r7, #8
 800813c:	4619      	mov	r1, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff fd62 	bl	8007c08 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008148:	210d      	movs	r1, #13
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f806 	bl	800815c <SDMMC_GetCmdResp1>
 8008150:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008152:	69fb      	ldr	r3, [r7, #28]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	460b      	mov	r3, r1
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800816a:	4b70      	ldr	r3, [pc, #448]	@ (800832c <SDMMC_GetCmdResp1+0x1d0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a70      	ldr	r2, [pc, #448]	@ (8008330 <SDMMC_GetCmdResp1+0x1d4>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	0a5a      	lsrs	r2, r3, #9
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	fb02 f303 	mul.w	r3, r2, r3
 800817c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	1e5a      	subs	r2, r3, #1
 8008182:	61fa      	str	r2, [r7, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d102      	bne.n	800818e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008188:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800818c:	e0c9      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008192:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800819a:	2b00      	cmp	r3, #0
 800819c:	d0ef      	beq.n	800817e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1ea      	bne.n	800817e <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ac:	f003 0304 	and.w	r3, r3, #4
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d004      	beq.n	80081be <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2204      	movs	r2, #4
 80081b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80081ba:	2304      	movs	r3, #4
 80081bc:	e0b1      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0a6      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	22c5      	movs	r2, #197	@ 0xc5
 80081d8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f7ff fd3e 	bl	8007c5c <SDMMC_GetCommandResponse>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d001      	beq.n	80081ee <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e099      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80081ee:	2100      	movs	r1, #0
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff fd40 	bl	8007c76 <SDMMC_GetResponse>
 80081f6:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008334 <SDMMC_GetCmdResp1+0x1d8>)
 80081fc:	4013      	ands	r3, r2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008202:	2300      	movs	r3, #0
 8008204:	e08d      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da02      	bge.n	8008212 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800820c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008210:	e087      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800821c:	2340      	movs	r3, #64	@ 0x40
 800821e:	e080      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800822a:	2380      	movs	r3, #128	@ 0x80
 800822c:	e079      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800823c:	e071      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800824c:	e069      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008258:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800825c:	e061      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d002      	beq.n	800826e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008268:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800826c:	e059      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008278:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800827c:	e051      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d002      	beq.n	800828e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008288:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800828c:	e049      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008298:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800829c:	e041      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80082a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082ac:	e039      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80082b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80082bc:	e031      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d002      	beq.n	80082ce <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80082c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80082cc:	e029      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d002      	beq.n	80082de <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80082d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082dc:	e021      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80082e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80082ec:	e019      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80082f8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80082fc:	e011      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008308:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800830c:	e009      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f003 0308 	and.w	r3, r3, #8
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008318:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800831c:	e001      	b.n	8008322 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800831e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008322:	4618      	mov	r0, r3
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	2000002c 	.word	0x2000002c
 8008330:	10624dd3 	.word	0x10624dd3
 8008334:	fdffe008 	.word	0xfdffe008

08008338 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008340:	4b1f      	ldr	r3, [pc, #124]	@ (80083c0 <SDMMC_GetCmdResp2+0x88>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a1f      	ldr	r2, [pc, #124]	@ (80083c4 <SDMMC_GetCmdResp2+0x8c>)
 8008346:	fba2 2303 	umull	r2, r3, r2, r3
 800834a:	0a5b      	lsrs	r3, r3, #9
 800834c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	1e5a      	subs	r2, r3, #1
 800835a:	60fa      	str	r2, [r7, #12]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d102      	bne.n	8008366 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008360:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008364:	e026      	b.n	80083b4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800836a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0ef      	beq.n	8008356 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1ea      	bne.n	8008356 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2204      	movs	r2, #4
 8008390:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008392:	2304      	movs	r3, #4
 8008394:	e00e      	b.n	80083b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800839a:	f003 0301 	and.w	r3, r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d004      	beq.n	80083ac <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e003      	b.n	80083b4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	22c5      	movs	r2, #197	@ 0xc5
 80083b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	2000002c 	.word	0x2000002c
 80083c4:	10624dd3 	.word	0x10624dd3

080083c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083d0:	4b1a      	ldr	r3, [pc, #104]	@ (800843c <SDMMC_GetCmdResp3+0x74>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008440 <SDMMC_GetCmdResp3+0x78>)
 80083d6:	fba2 2303 	umull	r2, r3, r2, r3
 80083da:	0a5b      	lsrs	r3, r3, #9
 80083dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083e0:	fb02 f303 	mul.w	r3, r2, r3
 80083e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1e5a      	subs	r2, r3, #1
 80083ea:	60fa      	str	r2, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d102      	bne.n	80083f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80083f4:	e01b      	b.n	800842e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008402:	2b00      	cmp	r3, #0
 8008404:	d0ef      	beq.n	80083e6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1ea      	bne.n	80083e6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2204      	movs	r2, #4
 8008420:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008422:	2304      	movs	r3, #4
 8008424:	e003      	b.n	800842e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	22c5      	movs	r2, #197	@ 0xc5
 800842a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	2000002c 	.word	0x2000002c
 8008440:	10624dd3 	.word	0x10624dd3

08008444 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	460b      	mov	r3, r1
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008452:	4b35      	ldr	r3, [pc, #212]	@ (8008528 <SDMMC_GetCmdResp6+0xe4>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a35      	ldr	r2, [pc, #212]	@ (800852c <SDMMC_GetCmdResp6+0xe8>)
 8008458:	fba2 2303 	umull	r2, r3, r2, r3
 800845c:	0a5b      	lsrs	r3, r3, #9
 800845e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008462:	fb02 f303 	mul.w	r3, r2, r3
 8008466:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	1e5a      	subs	r2, r3, #1
 800846c:	61fa      	str	r2, [r7, #28]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d102      	bne.n	8008478 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008472:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008476:	e052      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800847c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800847e:	69bb      	ldr	r3, [r7, #24]
 8008480:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0ef      	beq.n	8008468 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1ea      	bne.n	8008468 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008496:	f003 0304 	and.w	r3, r3, #4
 800849a:	2b00      	cmp	r3, #0
 800849c:	d004      	beq.n	80084a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2204      	movs	r2, #4
 80084a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084a4:	2304      	movs	r3, #4
 80084a6:	e03a      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e02f      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7ff fbcc 	bl	8007c5c <SDMMC_GetCommandResponse>
 80084c4:	4603      	mov	r3, r0
 80084c6:	461a      	mov	r2, r3
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d001      	beq.n	80084d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084ce:	2301      	movs	r3, #1
 80084d0:	e025      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	22c5      	movs	r2, #197	@ 0xc5
 80084d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80084d8:	2100      	movs	r1, #0
 80084da:	68f8      	ldr	r0, [r7, #12]
 80084dc:	f7ff fbcb 	bl	8007c76 <SDMMC_GetResponse>
 80084e0:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d106      	bne.n	80084fa <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	0c1b      	lsrs	r3, r3, #16
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	e011      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008504:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008508:	e009      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008518:	e001      	b.n	800851e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800851a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800851e:	4618      	mov	r0, r3
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	2000002c 	.word	0x2000002c
 800852c:	10624dd3 	.word	0x10624dd3

08008530 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008538:	4b22      	ldr	r3, [pc, #136]	@ (80085c4 <SDMMC_GetCmdResp7+0x94>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a22      	ldr	r2, [pc, #136]	@ (80085c8 <SDMMC_GetCmdResp7+0x98>)
 800853e:	fba2 2303 	umull	r2, r3, r2, r3
 8008542:	0a5b      	lsrs	r3, r3, #9
 8008544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008548:	fb02 f303 	mul.w	r3, r2, r3
 800854c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	1e5a      	subs	r2, r3, #1
 8008552:	60fa      	str	r2, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008558:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800855c:	e02c      	b.n	80085b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008562:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800856a:	2b00      	cmp	r3, #0
 800856c:	d0ef      	beq.n	800854e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1ea      	bne.n	800854e <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2204      	movs	r2, #4
 8008588:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800858a:	2304      	movs	r3, #4
 800858c:	e014      	b.n	80085b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008592:	f003 0301 	and.w	r3, r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	d004      	beq.n	80085a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e009      	b.n	80085b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2240      	movs	r2, #64	@ 0x40
 80085b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80085b6:	2300      	movs	r3, #0

}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	2000002c 	.word	0x2000002c
 80085c8:	10624dd3 	.word	0x10624dd3

080085cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80085d4:	4b11      	ldr	r3, [pc, #68]	@ (800861c <SDMMC_GetCmdError+0x50>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a11      	ldr	r2, [pc, #68]	@ (8008620 <SDMMC_GetCmdError+0x54>)
 80085da:	fba2 2303 	umull	r2, r3, r2, r3
 80085de:	0a5b      	lsrs	r3, r3, #9
 80085e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	1e5a      	subs	r2, r3, #1
 80085ee:	60fa      	str	r2, [r7, #12]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80085f8:	e009      	b.n	800860e <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008602:	2b00      	cmp	r3, #0
 8008604:	d0f1      	beq.n	80085ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	22c5      	movs	r2, #197	@ 0xc5
 800860a:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	2000002c 	.word	0x2000002c
 8008620:	10624dd3 	.word	0x10624dd3

08008624 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008628:	4904      	ldr	r1, [pc, #16]	@ (800863c <MX_FATFS_Init+0x18>)
 800862a:	4805      	ldr	r0, [pc, #20]	@ (8008640 <MX_FATFS_Init+0x1c>)
 800862c:	f002 fe82 	bl	800b334 <FATFS_LinkDriver>
 8008630:	4603      	mov	r3, r0
 8008632:	461a      	mov	r2, r3
 8008634:	4b03      	ldr	r3, [pc, #12]	@ (8008644 <MX_FATFS_Init+0x20>)
 8008636:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008638:	bf00      	nop
 800863a:	bd80      	pop	{r7, pc}
 800863c:	2000e39c 	.word	0x2000e39c
 8008640:	0800d3c0 	.word	0x0800d3c0
 8008644:	2000e398 	.word	0x2000e398

08008648 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800864c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008662:	f000 f8ac 	bl	80087be <BSP_SD_IsDetected>
 8008666:	4603      	mov	r3, r0
 8008668:	2b01      	cmp	r3, #1
 800866a:	d001      	beq.n	8008670 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800866c:	2302      	movs	r3, #2
 800866e:	e012      	b.n	8008696 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008670:	480b      	ldr	r0, [pc, #44]	@ (80086a0 <BSP_SD_Init+0x48>)
 8008672:	f7fc fa1b 	bl	8004aac <HAL_SD_Init>
 8008676:	4603      	mov	r3, r0
 8008678:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008680:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008684:	4806      	ldr	r0, [pc, #24]	@ (80086a0 <BSP_SD_Init+0x48>)
 8008686:	f7fd f9a7 	bl	80059d8 <HAL_SD_ConfigWideBusOperation>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008694:	79fb      	ldrb	r3, [r7, #7]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	200021ec 	.word	0x200021ec

080086a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	4806      	ldr	r0, [pc, #24]	@ (80086dc <BSP_SD_ReadBlocks+0x38>)
 80086c2:	f7fc fad5 	bl	8004c70 <HAL_SD_ReadBlocks>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	200021ec 	.word	0x200021ec

080086e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b088      	sub	sp, #32
 80086e4:	af02      	add	r7, sp, #8
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	68f9      	ldr	r1, [r7, #12]
 80086fc:	4806      	ldr	r0, [pc, #24]	@ (8008718 <BSP_SD_WriteBlocks+0x38>)
 80086fe:	f7fc fc95 	bl	800502c <HAL_SD_WriteBlocks>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200021ec 	.word	0x200021ec

0800871c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008720:	4805      	ldr	r0, [pc, #20]	@ (8008738 <BSP_SD_GetCardState+0x1c>)
 8008722:	f7fd fa15 	bl	8005b50 <HAL_SD_GetCardState>
 8008726:	4603      	mov	r3, r0
 8008728:	2b04      	cmp	r3, #4
 800872a:	bf14      	ite	ne
 800872c:	2301      	movne	r3, #1
 800872e:	2300      	moveq	r3, #0
 8008730:	b2db      	uxtb	r3, r3
}
 8008732:	4618      	mov	r0, r3
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	200021ec 	.word	0x200021ec

0800873c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008744:	6879      	ldr	r1, [r7, #4]
 8008746:	4803      	ldr	r0, [pc, #12]	@ (8008754 <BSP_SD_GetCardInfo+0x18>)
 8008748:	f7fd f91a 	bl	8005980 <HAL_SD_GetCardInfo>
}
 800874c:	bf00      	nop
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	200021ec 	.word	0x200021ec

08008758 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008760:	f000 f818 	bl	8008794 <BSP_SD_AbortCallback>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008774:	f000 f815 	bl	80087a2 <BSP_SD_WriteCpltCallback>
}
 8008778:	bf00      	nop
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008788:	f000 f812 	bl	80087b0 <BSP_SD_ReadCpltCallback>
}
 800878c:	bf00      	nop
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0

}
 8008798:	bf00      	nop
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr

080087a2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80087a2:	b480      	push	{r7}
 80087a4:	af00      	add	r7, sp, #0

}
 80087a6:	bf00      	nop
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0

}
 80087b4:	bf00      	nop
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80087c4:	2301      	movs	r3, #1
 80087c6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80087c8:	f000 f80c 	bl	80087e4 <BSP_PlatformIsDetected>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80087d2:	2300      	movs	r3, #0
 80087d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	b2db      	uxtb	r3, r3
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80087ea:	2301      	movs	r3, #1
 80087ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80087ee:	2110      	movs	r1, #16
 80087f0:	4806      	ldr	r0, [pc, #24]	@ (800880c <BSP_PlatformIsDetected+0x28>)
 80087f2:	f7f9 fc77 	bl	80020e4 <HAL_GPIO_ReadPin>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80087fc:	2300      	movs	r3, #0
 80087fe:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008800:	79fb      	ldrb	r3, [r7, #7]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	48000400 	.word	0x48000400

08008810 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b082      	sub	sp, #8
 8008814:	af00      	add	r7, sp, #0
 8008816:	4603      	mov	r3, r0
 8008818:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800881a:	4b0b      	ldr	r3, [pc, #44]	@ (8008848 <SD_CheckStatus+0x38>)
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008820:	f7ff ff7c 	bl	800871c <BSP_SD_GetCardState>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d107      	bne.n	800883a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800882a:	4b07      	ldr	r3, [pc, #28]	@ (8008848 <SD_CheckStatus+0x38>)
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	b2da      	uxtb	r2, r3
 8008836:	4b04      	ldr	r3, [pc, #16]	@ (8008848 <SD_CheckStatus+0x38>)
 8008838:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800883a:	4b03      	ldr	r3, [pc, #12]	@ (8008848 <SD_CheckStatus+0x38>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	b2db      	uxtb	r3, r3
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000035 	.word	0x20000035

0800884c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008856:	4b0b      	ldr	r3, [pc, #44]	@ (8008884 <SD_initialize+0x38>)
 8008858:	2201      	movs	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800885c:	f7ff fefc 	bl	8008658 <BSP_SD_Init>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d107      	bne.n	8008876 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008866:	79fb      	ldrb	r3, [r7, #7]
 8008868:	4618      	mov	r0, r3
 800886a:	f7ff ffd1 	bl	8008810 <SD_CheckStatus>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	4b04      	ldr	r3, [pc, #16]	@ (8008884 <SD_initialize+0x38>)
 8008874:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008876:	4b03      	ldr	r3, [pc, #12]	@ (8008884 <SD_initialize+0x38>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	b2db      	uxtb	r3, r3
}
 800887c:	4618      	mov	r0, r3
 800887e:	3708      	adds	r7, #8
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	20000035 	.word	0x20000035

08008888 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff ffbb 	bl	8008810 <SD_CheckStatus>
 800889a:	4603      	mov	r3, r0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
 80088ae:	603b      	str	r3, [r7, #0]
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088bc:	683a      	ldr	r2, [r7, #0]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f7ff feef 	bl	80086a4 <BSP_SD_ReadBlocks>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d107      	bne.n	80088dc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80088cc:	bf00      	nop
 80088ce:	f7ff ff25 	bl	800871c <BSP_SD_GetCardState>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1fa      	bne.n	80088ce <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80088dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3718      	adds	r7, #24
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80088fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80088fe:	683a      	ldr	r2, [r7, #0]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	68b8      	ldr	r0, [r7, #8]
 8008904:	f7ff feec 	bl	80086e0 <BSP_SD_WriteBlocks>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d107      	bne.n	800891e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800890e:	bf00      	nop
 8008910:	f7ff ff04 	bl	800871c <BSP_SD_GetCardState>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1fa      	bne.n	8008910 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800891e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b08c      	sub	sp, #48	@ 0x30
 800892c:	af00      	add	r7, sp, #0
 800892e:	4603      	mov	r3, r0
 8008930:	603a      	str	r2, [r7, #0]
 8008932:	71fb      	strb	r3, [r7, #7]
 8008934:	460b      	mov	r3, r1
 8008936:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800893e:	4b25      	ldr	r3, [pc, #148]	@ (80089d4 <SD_ioctl+0xac>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0301 	and.w	r3, r3, #1
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <SD_ioctl+0x28>
 800894c:	2303      	movs	r3, #3
 800894e:	e03c      	b.n	80089ca <SD_ioctl+0xa2>

  switch (cmd)
 8008950:	79bb      	ldrb	r3, [r7, #6]
 8008952:	2b03      	cmp	r3, #3
 8008954:	d834      	bhi.n	80089c0 <SD_ioctl+0x98>
 8008956:	a201      	add	r2, pc, #4	@ (adr r2, 800895c <SD_ioctl+0x34>)
 8008958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895c:	0800896d 	.word	0x0800896d
 8008960:	08008975 	.word	0x08008975
 8008964:	0800898d 	.word	0x0800898d
 8008968:	080089a7 	.word	0x080089a7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008972:	e028      	b.n	80089c6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008974:	f107 030c 	add.w	r3, r7, #12
 8008978:	4618      	mov	r0, r3
 800897a:	f7ff fedf 	bl	800873c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800897e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800898a:	e01c      	b.n	80089c6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800898c:	f107 030c 	add.w	r3, r7, #12
 8008990:	4618      	mov	r0, r3
 8008992:	f7ff fed3 	bl	800873c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008998:	b29a      	uxth	r2, r3
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80089a4:	e00f      	b.n	80089c6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80089a6:	f107 030c 	add.w	r3, r7, #12
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff fec6 	bl	800873c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80089b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b2:	0a5a      	lsrs	r2, r3, #9
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80089be:	e002      	b.n	80089c6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80089c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3730      	adds	r7, #48	@ 0x30
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20000035 	.word	0x20000035

080089d8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b084      	sub	sp, #16
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	4a08      	ldr	r2, [pc, #32]	@ (8008a08 <disk_status+0x30>)
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	4413      	add	r3, r2
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	79fa      	ldrb	r2, [r7, #7]
 80089f0:	4905      	ldr	r1, [pc, #20]	@ (8008a08 <disk_status+0x30>)
 80089f2:	440a      	add	r2, r1
 80089f4:	7a12      	ldrb	r2, [r2, #8]
 80089f6:	4610      	mov	r0, r2
 80089f8:	4798      	blx	r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000e3c8 	.word	0x2000e3c8

08008a0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	4603      	mov	r3, r0
 8008a14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a16:	2300      	movs	r3, #0
 8008a18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8008a54 <disk_initialize+0x48>)
 8008a1e:	5cd3      	ldrb	r3, [r2, r3]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d111      	bne.n	8008a48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	4a0b      	ldr	r2, [pc, #44]	@ (8008a54 <disk_initialize+0x48>)
 8008a28:	2101      	movs	r1, #1
 8008a2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	4a09      	ldr	r2, [pc, #36]	@ (8008a54 <disk_initialize+0x48>)
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	79fa      	ldrb	r2, [r7, #7]
 8008a3a:	4906      	ldr	r1, [pc, #24]	@ (8008a54 <disk_initialize+0x48>)
 8008a3c:	440a      	add	r2, r1
 8008a3e:	7a12      	ldrb	r2, [r2, #8]
 8008a40:	4610      	mov	r0, r2
 8008a42:	4798      	blx	r3
 8008a44:	4603      	mov	r3, r0
 8008a46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	2000e3c8 	.word	0x2000e3c8

08008a58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008a58:	b590      	push	{r4, r7, lr}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a94 <disk_read+0x3c>)
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	689c      	ldr	r4, [r3, #8]
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4a07      	ldr	r2, [pc, #28]	@ (8008a94 <disk_read+0x3c>)
 8008a78:	4413      	add	r3, r2
 8008a7a:	7a18      	ldrb	r0, [r3, #8]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	47a0      	blx	r4
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd90      	pop	{r4, r7, pc}
 8008a92:	bf00      	nop
 8008a94:	2000e3c8 	.word	0x2000e3c8

08008a98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b087      	sub	sp, #28
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60b9      	str	r1, [r7, #8]
 8008aa0:	607a      	str	r2, [r7, #4]
 8008aa2:	603b      	str	r3, [r7, #0]
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8008ad4 <disk_write+0x3c>)
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68dc      	ldr	r4, [r3, #12]
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	4a07      	ldr	r2, [pc, #28]	@ (8008ad4 <disk_write+0x3c>)
 8008ab8:	4413      	add	r3, r2
 8008aba:	7a18      	ldrb	r0, [r3, #8]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	68b9      	ldr	r1, [r7, #8]
 8008ac2:	47a0      	blx	r4
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd90      	pop	{r4, r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000e3c8 	.word	0x2000e3c8

08008ad8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b084      	sub	sp, #16
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	603a      	str	r2, [r7, #0]
 8008ae2:	71fb      	strb	r3, [r7, #7]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	4a09      	ldr	r2, [pc, #36]	@ (8008b10 <disk_ioctl+0x38>)
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	79fa      	ldrb	r2, [r7, #7]
 8008af6:	4906      	ldr	r1, [pc, #24]	@ (8008b10 <disk_ioctl+0x38>)
 8008af8:	440a      	add	r2, r1
 8008afa:	7a10      	ldrb	r0, [r2, #8]
 8008afc:	79b9      	ldrb	r1, [r7, #6]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	4798      	blx	r3
 8008b02:	4603      	mov	r3, r0
 8008b04:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	2000e3c8 	.word	0x2000e3c8

08008b14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b24:	89fb      	ldrh	r3, [r7, #14]
 8008b26:	021b      	lsls	r3, r3, #8
 8008b28:	b21a      	sxth	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	b21b      	sxth	r3, r3
 8008b30:	4313      	orrs	r3, r2
 8008b32:	b21b      	sxth	r3, r3
 8008b34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b36:	89fb      	ldrh	r3, [r7, #14]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3303      	adds	r3, #3
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	021b      	lsls	r3, r3, #8
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	3202      	adds	r2, #2
 8008b5c:	7812      	ldrb	r2, [r2, #0]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	3201      	adds	r2, #1
 8008b6a:	7812      	ldrb	r2, [r2, #0]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	021b      	lsls	r3, r3, #8
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
	return rv;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	887a      	ldrh	r2, [r7, #2]
 8008b9e:	b2d2      	uxtb	r2, r2
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	887b      	ldrh	r3, [r7, #2]
 8008ba4:	0a1b      	lsrs	r3, r3, #8
 8008ba6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	887a      	ldrh	r2, [r7, #2]
 8008bb0:	b2d2      	uxtb	r2, r2
 8008bb2:	701a      	strb	r2, [r3, #0]
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	1c5a      	adds	r2, r3, #1
 8008bce:	607a      	str	r2, [r7, #4]
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	b2d2      	uxtb	r2, r2
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	0a1b      	lsrs	r3, r3, #8
 8008bda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	1c5a      	adds	r2, r3, #1
 8008be0:	607a      	str	r2, [r7, #4]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	b2d2      	uxtb	r2, r2
 8008be6:	701a      	strb	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	1c5a      	adds	r2, r3, #1
 8008bf2:	607a      	str	r2, [r7, #4]
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	607a      	str	r2, [r7, #4]
 8008c06:	683a      	ldr	r2, [r7, #0]
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00d      	beq.n	8008c4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	1c53      	adds	r3, r2, #1
 8008c36:	613b      	str	r3, [r7, #16]
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	1c59      	adds	r1, r3, #1
 8008c3c:	6179      	str	r1, [r7, #20]
 8008c3e:	7812      	ldrb	r2, [r2, #0]
 8008c40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	607b      	str	r3, [r7, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1f1      	bne.n	8008c32 <mem_cpy+0x1a>
	}
}
 8008c4e:	bf00      	nop
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008c5a:	b480      	push	{r7}
 8008c5c:	b087      	sub	sp, #28
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	617a      	str	r2, [r7, #20]
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	607b      	str	r3, [r7, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1f3      	bne.n	8008c6a <mem_set+0x10>
}
 8008c82:	bf00      	nop
 8008c84:	bf00      	nop
 8008c86:	371c      	adds	r7, #28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008c90:	b480      	push	{r7}
 8008c92:	b089      	sub	sp, #36	@ 0x24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	1c5a      	adds	r2, r3, #1
 8008cac:	61fa      	str	r2, [r7, #28]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	61ba      	str	r2, [r7, #24]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	1acb      	subs	r3, r1, r3
 8008cbc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	607b      	str	r3, [r7, #4]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d002      	beq.n	8008cd0 <mem_cmp+0x40>
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0eb      	beq.n	8008ca8 <mem_cmp+0x18>

	return r;
 8008cd0:	697b      	ldr	r3, [r7, #20]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3724      	adds	r7, #36	@ 0x24
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ce8:	e002      	b.n	8008cf0 <chk_chr+0x12>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3301      	adds	r3, #1
 8008cee:	607b      	str	r3, [r7, #4]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d005      	beq.n	8008d04 <chk_chr+0x26>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d1f2      	bne.n	8008cea <chk_chr+0xc>
	return *str;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	781b      	ldrb	r3, [r3, #0]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60bb      	str	r3, [r7, #8]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	60fb      	str	r3, [r7, #12]
 8008d26:	e029      	b.n	8008d7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d28:	4a27      	ldr	r2, [pc, #156]	@ (8008dc8 <chk_lock+0xb4>)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	011b      	lsls	r3, r3, #4
 8008d2e:	4413      	add	r3, r2
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d01d      	beq.n	8008d72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d36:	4a24      	ldr	r2, [pc, #144]	@ (8008dc8 <chk_lock+0xb4>)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	011b      	lsls	r3, r3, #4
 8008d3c:	4413      	add	r3, r2
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d116      	bne.n	8008d76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008d48:	4a1f      	ldr	r2, [pc, #124]	@ (8008dc8 <chk_lock+0xb4>)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	4413      	add	r3, r2
 8008d50:	3304      	adds	r3, #4
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d10c      	bne.n	8008d76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc8 <chk_lock+0xb4>)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	4413      	add	r3, r2
 8008d64:	3308      	adds	r3, #8
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d102      	bne.n	8008d76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008d70:	e007      	b.n	8008d82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008d72:	2301      	movs	r3, #1
 8008d74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d9d2      	bls.n	8008d28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d109      	bne.n	8008d9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <chk_lock+0x80>
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d101      	bne.n	8008d98 <chk_lock+0x84>
 8008d94:	2300      	movs	r3, #0
 8008d96:	e010      	b.n	8008dba <chk_lock+0xa6>
 8008d98:	2312      	movs	r3, #18
 8008d9a:	e00e      	b.n	8008dba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d108      	bne.n	8008db4 <chk_lock+0xa0>
 8008da2:	4a09      	ldr	r2, [pc, #36]	@ (8008dc8 <chk_lock+0xb4>)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	4413      	add	r3, r2
 8008daa:	330c      	adds	r3, #12
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008db2:	d101      	bne.n	8008db8 <chk_lock+0xa4>
 8008db4:	2310      	movs	r3, #16
 8008db6:	e000      	b.n	8008dba <chk_lock+0xa6>
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	2000e3a8 	.word	0x2000e3a8

08008dcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	e002      	b.n	8008dde <enq_lock+0x12>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	607b      	str	r3, [r7, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d806      	bhi.n	8008df2 <enq_lock+0x26>
 8008de4:	4a09      	ldr	r2, [pc, #36]	@ (8008e0c <enq_lock+0x40>)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	011b      	lsls	r3, r3, #4
 8008dea:	4413      	add	r3, r2
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1f2      	bne.n	8008dd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	bf14      	ite	ne
 8008df8:	2301      	movne	r3, #1
 8008dfa:	2300      	moveq	r3, #0
 8008dfc:	b2db      	uxtb	r3, r3
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	2000e3a8 	.word	0x2000e3a8

08008e10 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	e01f      	b.n	8008e60 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e20:	4a41      	ldr	r2, [pc, #260]	@ (8008f28 <inc_lock+0x118>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	4413      	add	r3, r2
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d113      	bne.n	8008e5a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e32:	4a3d      	ldr	r2, [pc, #244]	@ (8008f28 <inc_lock+0x118>)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	011b      	lsls	r3, r3, #4
 8008e38:	4413      	add	r3, r2
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d109      	bne.n	8008e5a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e46:	4a38      	ldr	r2, [pc, #224]	@ (8008f28 <inc_lock+0x118>)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	011b      	lsls	r3, r3, #4
 8008e4c:	4413      	add	r3, r2
 8008e4e:	3308      	adds	r3, #8
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d006      	beq.n	8008e68 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d9dc      	bls.n	8008e20 <inc_lock+0x10>
 8008e66:	e000      	b.n	8008e6a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008e68:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d132      	bne.n	8008ed6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	e002      	b.n	8008e7c <inc_lock+0x6c>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d806      	bhi.n	8008e90 <inc_lock+0x80>
 8008e82:	4a29      	ldr	r2, [pc, #164]	@ (8008f28 <inc_lock+0x118>)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	4413      	add	r3, r2
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1f2      	bne.n	8008e76 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	d101      	bne.n	8008e9a <inc_lock+0x8a>
 8008e96:	2300      	movs	r3, #0
 8008e98:	e040      	b.n	8008f1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	4922      	ldr	r1, [pc, #136]	@ (8008f28 <inc_lock+0x118>)
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	440b      	add	r3, r1
 8008ea6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689a      	ldr	r2, [r3, #8]
 8008eac:	491e      	ldr	r1, [pc, #120]	@ (8008f28 <inc_lock+0x118>)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	011b      	lsls	r3, r3, #4
 8008eb2:	440b      	add	r3, r1
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695a      	ldr	r2, [r3, #20]
 8008ebc:	491a      	ldr	r1, [pc, #104]	@ (8008f28 <inc_lock+0x118>)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	011b      	lsls	r3, r3, #4
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3308      	adds	r3, #8
 8008ec6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008ec8:	4a17      	ldr	r2, [pc, #92]	@ (8008f28 <inc_lock+0x118>)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	011b      	lsls	r3, r3, #4
 8008ece:	4413      	add	r3, r2
 8008ed0:	330c      	adds	r3, #12
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <inc_lock+0xe0>
 8008edc:	4a12      	ldr	r2, [pc, #72]	@ (8008f28 <inc_lock+0x118>)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	4413      	add	r3, r2
 8008ee4:	330c      	adds	r3, #12
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <inc_lock+0xe0>
 8008eec:	2300      	movs	r3, #0
 8008eee:	e015      	b.n	8008f1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d108      	bne.n	8008f08 <inc_lock+0xf8>
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f28 <inc_lock+0x118>)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	011b      	lsls	r3, r3, #4
 8008efc:	4413      	add	r3, r2
 8008efe:	330c      	adds	r3, #12
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	3301      	adds	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	e001      	b.n	8008f0c <inc_lock+0xfc>
 8008f08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f0c:	4906      	ldr	r1, [pc, #24]	@ (8008f28 <inc_lock+0x118>)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	011b      	lsls	r3, r3, #4
 8008f12:	440b      	add	r3, r1
 8008f14:	330c      	adds	r3, #12
 8008f16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3301      	adds	r3, #1
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	2000e3a8 	.word	0x2000e3a8

08008f2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b085      	sub	sp, #20
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	607b      	str	r3, [r7, #4]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d825      	bhi.n	8008f8c <dec_lock+0x60>
		n = Files[i].ctr;
 8008f40:	4a17      	ldr	r2, [pc, #92]	@ (8008fa0 <dec_lock+0x74>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	011b      	lsls	r3, r3, #4
 8008f46:	4413      	add	r3, r2
 8008f48:	330c      	adds	r3, #12
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008f4e:	89fb      	ldrh	r3, [r7, #14]
 8008f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f54:	d101      	bne.n	8008f5a <dec_lock+0x2e>
 8008f56:	2300      	movs	r3, #0
 8008f58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008f5a:	89fb      	ldrh	r3, [r7, #14]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <dec_lock+0x3a>
 8008f60:	89fb      	ldrh	r3, [r7, #14]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008f66:	4a0e      	ldr	r2, [pc, #56]	@ (8008fa0 <dec_lock+0x74>)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	4413      	add	r3, r2
 8008f6e:	330c      	adds	r3, #12
 8008f70:	89fa      	ldrh	r2, [r7, #14]
 8008f72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008f74:	89fb      	ldrh	r3, [r7, #14]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d105      	bne.n	8008f86 <dec_lock+0x5a>
 8008f7a:	4a09      	ldr	r2, [pc, #36]	@ (8008fa0 <dec_lock+0x74>)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	4413      	add	r3, r2
 8008f82:	2200      	movs	r2, #0
 8008f84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	737b      	strb	r3, [r7, #13]
 8008f8a:	e001      	b.n	8008f90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008f90:	7b7b      	ldrb	r3, [r7, #13]
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	2000e3a8 	.word	0x2000e3a8

08008fa4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008fac:	2300      	movs	r3, #0
 8008fae:	60fb      	str	r3, [r7, #12]
 8008fb0:	e010      	b.n	8008fd4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008fb2:	4a0d      	ldr	r2, [pc, #52]	@ (8008fe8 <clear_lock+0x44>)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	011b      	lsls	r3, r3, #4
 8008fb8:	4413      	add	r3, r2
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d105      	bne.n	8008fce <clear_lock+0x2a>
 8008fc2:	4a09      	ldr	r2, [pc, #36]	@ (8008fe8 <clear_lock+0x44>)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	4413      	add	r3, r2
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d9eb      	bls.n	8008fb2 <clear_lock+0xe>
	}
}
 8008fda:	bf00      	nop
 8008fdc:	bf00      	nop
 8008fde:	3714      	adds	r7, #20
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	2000e3a8 	.word	0x2000e3a8

08008fec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b086      	sub	sp, #24
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	78db      	ldrb	r3, [r3, #3]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d034      	beq.n	800906a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009004:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7858      	ldrb	r0, [r3, #1]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009010:	2301      	movs	r3, #1
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	f7ff fd40 	bl	8008a98 <disk_write>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <sync_window+0x38>
			res = FR_DISK_ERR;
 800901e:	2301      	movs	r3, #1
 8009020:	73fb      	strb	r3, [r7, #15]
 8009022:	e022      	b.n	800906a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800902e:	697a      	ldr	r2, [r7, #20]
 8009030:	1ad2      	subs	r2, r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	429a      	cmp	r2, r3
 8009038:	d217      	bcs.n	800906a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	789b      	ldrb	r3, [r3, #2]
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	e010      	b.n	8009064 <sync_window+0x78>
					wsect += fs->fsize;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4413      	add	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	7858      	ldrb	r0, [r3, #1]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009056:	2301      	movs	r3, #1
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	f7ff fd1d 	bl	8008a98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	3b01      	subs	r3, #1
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d8eb      	bhi.n	8009042 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800906a:	7bfb      	ldrb	r3, [r7, #15]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d01b      	beq.n	80090c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff ffad 	bl	8008fec <sync_window>
 8009092:	4603      	mov	r3, r0
 8009094:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d113      	bne.n	80090c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7858      	ldrb	r0, [r3, #1]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80090a6:	2301      	movs	r3, #1
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	f7ff fcd5 	bl	8008a58 <disk_read>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d004      	beq.n	80090be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	683a      	ldr	r2, [r7, #0]
 80090c2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
	...

080090d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff ff87 	bl	8008fec <sync_window>
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d159      	bne.n	800919c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d149      	bne.n	8009184 <sync_fs+0xb4>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	791b      	ldrb	r3, [r3, #4]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d145      	bne.n	8009184 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	899b      	ldrh	r3, [r3, #12]
 8009102:	461a      	mov	r2, r3
 8009104:	2100      	movs	r1, #0
 8009106:	f7ff fda8 	bl	8008c5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3334      	adds	r3, #52	@ 0x34
 800910e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009112:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009116:	4618      	mov	r0, r3
 8009118:	f7ff fd37 	bl	8008b8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	3334      	adds	r3, #52	@ 0x34
 8009120:	4921      	ldr	r1, [pc, #132]	@ (80091a8 <sync_fs+0xd8>)
 8009122:	4618      	mov	r0, r3
 8009124:	f7ff fd4c 	bl	8008bc0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3334      	adds	r3, #52	@ 0x34
 800912c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8009130:	491e      	ldr	r1, [pc, #120]	@ (80091ac <sync_fs+0xdc>)
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff fd44 	bl	8008bc0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3334      	adds	r3, #52	@ 0x34
 800913c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	695b      	ldr	r3, [r3, #20]
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	f7ff fd3a 	bl	8008bc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	3334      	adds	r3, #52	@ 0x34
 8009150:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7ff fd30 	bl	8008bc0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	1c5a      	adds	r2, r3, #1
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7858      	ldrb	r0, [r3, #1]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009178:	2301      	movs	r3, #1
 800917a:	f7ff fc8d 	bl	8008a98 <disk_write>
			fs->fsi_flag = 0;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	2200      	movs	r2, #0
 800918a:	2100      	movs	r1, #0
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff fca3 	bl	8008ad8 <disk_ioctl>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <sync_fs+0xcc>
 8009198:	2301      	movs	r3, #1
 800919a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	41615252 	.word	0x41615252
 80091ac:	61417272 	.word	0x61417272

080091b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	3b02      	subs	r3, #2
 80091be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	3b02      	subs	r3, #2
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d301      	bcc.n	80091d0 <clust2sect+0x20>
 80091cc:	2300      	movs	r3, #0
 80091ce:	e008      	b.n	80091e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	895b      	ldrh	r3, [r3, #10]
 80091d4:	461a      	mov	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	fb03 f202 	mul.w	r2, r3, r2
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091e0:	4413      	add	r3, r2
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b086      	sub	sp, #24
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d904      	bls.n	800920e <get_fat+0x20>
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	429a      	cmp	r2, r3
 800920c:	d302      	bcc.n	8009214 <get_fat+0x26>
		val = 1;	/* Internal error */
 800920e:	2301      	movs	r3, #1
 8009210:	617b      	str	r3, [r7, #20]
 8009212:	e0ba      	b.n	800938a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009218:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b03      	cmp	r3, #3
 8009220:	f000 8082 	beq.w	8009328 <get_fat+0x13a>
 8009224:	2b03      	cmp	r3, #3
 8009226:	f300 80a6 	bgt.w	8009376 <get_fat+0x188>
 800922a:	2b01      	cmp	r3, #1
 800922c:	d002      	beq.n	8009234 <get_fat+0x46>
 800922e:	2b02      	cmp	r3, #2
 8009230:	d055      	beq.n	80092de <get_fat+0xf0>
 8009232:	e0a0      	b.n	8009376 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	899b      	ldrh	r3, [r3, #12]
 800924a:	4619      	mov	r1, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009252:	4413      	add	r3, r2
 8009254:	4619      	mov	r1, r3
 8009256:	6938      	ldr	r0, [r7, #16]
 8009258:	f7ff ff0c 	bl	8009074 <move_window>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	f040 808c 	bne.w	800937c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	60fa      	str	r2, [r7, #12]
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	8992      	ldrh	r2, [r2, #12]
 800926e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009272:	fb01 f202 	mul.w	r2, r1, r2
 8009276:	1a9b      	subs	r3, r3, r2
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4413      	add	r3, r2
 800927c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009280:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	899b      	ldrh	r3, [r3, #12]
 800928a:	4619      	mov	r1, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009292:	4413      	add	r3, r2
 8009294:	4619      	mov	r1, r3
 8009296:	6938      	ldr	r0, [r7, #16]
 8009298:	f7ff feec 	bl	8009074 <move_window>
 800929c:	4603      	mov	r3, r0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d16e      	bne.n	8009380 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	899b      	ldrh	r3, [r3, #12]
 80092a6:	461a      	mov	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80092ae:	fb01 f202 	mul.w	r2, r1, r2
 80092b2:	1a9b      	subs	r3, r3, r2
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	4413      	add	r3, r2
 80092b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <get_fat+0xe6>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	091b      	lsrs	r3, r3, #4
 80092d2:	e002      	b.n	80092da <get_fat+0xec>
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092da:	617b      	str	r3, [r7, #20]
			break;
 80092dc:	e055      	b.n	800938a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	899b      	ldrh	r3, [r3, #12]
 80092e6:	085b      	lsrs	r3, r3, #1
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80092f2:	4413      	add	r3, r2
 80092f4:	4619      	mov	r1, r3
 80092f6:	6938      	ldr	r0, [r7, #16]
 80092f8:	f7ff febc 	bl	8009074 <move_window>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d140      	bne.n	8009384 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	693a      	ldr	r2, [r7, #16]
 800930e:	8992      	ldrh	r2, [r2, #12]
 8009310:	fbb3 f0f2 	udiv	r0, r3, r2
 8009314:	fb00 f202 	mul.w	r2, r0, r2
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	440b      	add	r3, r1
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fbf9 	bl	8008b14 <ld_word>
 8009322:	4603      	mov	r3, r0
 8009324:	617b      	str	r3, [r7, #20]
			break;
 8009326:	e030      	b.n	800938a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	899b      	ldrh	r3, [r3, #12]
 8009330:	089b      	lsrs	r3, r3, #2
 8009332:	b29b      	uxth	r3, r3
 8009334:	4619      	mov	r1, r3
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	fbb3 f3f1 	udiv	r3, r3, r1
 800933c:	4413      	add	r3, r2
 800933e:	4619      	mov	r1, r3
 8009340:	6938      	ldr	r0, [r7, #16]
 8009342:	f7ff fe97 	bl	8009074 <move_window>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11d      	bne.n	8009388 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	8992      	ldrh	r2, [r2, #12]
 800935a:	fbb3 f0f2 	udiv	r0, r3, r2
 800935e:	fb00 f202 	mul.w	r2, r0, r2
 8009362:	1a9b      	subs	r3, r3, r2
 8009364:	440b      	add	r3, r1
 8009366:	4618      	mov	r0, r3
 8009368:	f7ff fbec 	bl	8008b44 <ld_dword>
 800936c:	4603      	mov	r3, r0
 800936e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009372:	617b      	str	r3, [r7, #20]
			break;
 8009374:	e009      	b.n	800938a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009376:	2301      	movs	r3, #1
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	e006      	b.n	800938a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800937c:	bf00      	nop
 800937e:	e004      	b.n	800938a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009380:	bf00      	nop
 8009382:	e002      	b.n	800938a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009384:	bf00      	nop
 8009386:	e000      	b.n	800938a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009388:	bf00      	nop
		}
	}

	return val;
 800938a:	697b      	ldr	r3, [r7, #20]
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b089      	sub	sp, #36	@ 0x24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80093a0:	2302      	movs	r3, #2
 80093a2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	f240 8109 	bls.w	80095be <put_fat+0x22a>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	f080 8103 	bcs.w	80095be <put_fat+0x22a>
		switch (fs->fs_type) {
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b03      	cmp	r3, #3
 80093be:	f000 80b6 	beq.w	800952e <put_fat+0x19a>
 80093c2:	2b03      	cmp	r3, #3
 80093c4:	f300 80fb 	bgt.w	80095be <put_fat+0x22a>
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d003      	beq.n	80093d4 <put_fat+0x40>
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	f000 8083 	beq.w	80094d8 <put_fat+0x144>
 80093d2:	e0f4      	b.n	80095be <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	61bb      	str	r3, [r7, #24]
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	085b      	lsrs	r3, r3, #1
 80093dc:	69ba      	ldr	r2, [r7, #24]
 80093de:	4413      	add	r3, r2
 80093e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	899b      	ldrh	r3, [r3, #12]
 80093ea:	4619      	mov	r1, r3
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80093f2:	4413      	add	r3, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7ff fe3c 	bl	8009074 <move_window>
 80093fc:	4603      	mov	r3, r0
 80093fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009400:	7ffb      	ldrb	r3, [r7, #31]
 8009402:	2b00      	cmp	r3, #0
 8009404:	f040 80d4 	bne.w	80095b0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	61ba      	str	r2, [r7, #24]
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	8992      	ldrh	r2, [r2, #12]
 8009418:	fbb3 f0f2 	udiv	r0, r3, r2
 800941c:	fb00 f202 	mul.w	r2, r0, r2
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	440b      	add	r3, r1
 8009424:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00d      	beq.n	800944c <put_fat+0xb8>
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	b25b      	sxtb	r3, r3
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	b25a      	sxtb	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	b2db      	uxtb	r3, r3
 8009440:	011b      	lsls	r3, r3, #4
 8009442:	b25b      	sxtb	r3, r3
 8009444:	4313      	orrs	r3, r2
 8009446:	b25b      	sxtb	r3, r3
 8009448:	b2db      	uxtb	r3, r3
 800944a:	e001      	b.n	8009450 <put_fat+0xbc>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2201      	movs	r2, #1
 8009458:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	899b      	ldrh	r3, [r3, #12]
 8009462:	4619      	mov	r1, r3
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	fbb3 f3f1 	udiv	r3, r3, r1
 800946a:	4413      	add	r3, r2
 800946c:	4619      	mov	r1, r3
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f7ff fe00 	bl	8009074 <move_window>
 8009474:	4603      	mov	r3, r0
 8009476:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009478:	7ffb      	ldrb	r3, [r7, #31]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f040 809a 	bne.w	80095b4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	899b      	ldrh	r3, [r3, #12]
 800948a:	461a      	mov	r2, r3
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009492:	fb00 f202 	mul.w	r2, r0, r2
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	440b      	add	r3, r1
 800949a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d003      	beq.n	80094ae <put_fat+0x11a>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	091b      	lsrs	r3, r3, #4
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	e00e      	b.n	80094cc <put_fat+0x138>
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	b25b      	sxtb	r3, r3
 80094b4:	f023 030f 	bic.w	r3, r3, #15
 80094b8:	b25a      	sxtb	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	0a1b      	lsrs	r3, r3, #8
 80094be:	b25b      	sxtb	r3, r3
 80094c0:	f003 030f 	and.w	r3, r3, #15
 80094c4:	b25b      	sxtb	r3, r3
 80094c6:	4313      	orrs	r3, r2
 80094c8:	b25b      	sxtb	r3, r3
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2201      	movs	r2, #1
 80094d4:	70da      	strb	r2, [r3, #3]
			break;
 80094d6:	e072      	b.n	80095be <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	899b      	ldrh	r3, [r3, #12]
 80094e0:	085b      	lsrs	r3, r3, #1
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	4619      	mov	r1, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80094ec:	4413      	add	r3, r2
 80094ee:	4619      	mov	r1, r3
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f7ff fdbf 	bl	8009074 <move_window>
 80094f6:	4603      	mov	r3, r0
 80094f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094fa:	7ffb      	ldrb	r3, [r7, #31]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d15b      	bne.n	80095b8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	005b      	lsls	r3, r3, #1
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	8992      	ldrh	r2, [r2, #12]
 800950e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009512:	fb00 f202 	mul.w	r2, r0, r2
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	440b      	add	r3, r1
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	b292      	uxth	r2, r2
 800951e:	4611      	mov	r1, r2
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff fb32 	bl	8008b8a <st_word>
			fs->wflag = 1;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2201      	movs	r2, #1
 800952a:	70da      	strb	r2, [r3, #3]
			break;
 800952c:	e047      	b.n	80095be <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	899b      	ldrh	r3, [r3, #12]
 8009536:	089b      	lsrs	r3, r3, #2
 8009538:	b29b      	uxth	r3, r3
 800953a:	4619      	mov	r1, r3
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009542:	4413      	add	r3, r2
 8009544:	4619      	mov	r1, r3
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f7ff fd94 	bl	8009074 <move_window>
 800954c:	4603      	mov	r3, r0
 800954e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009550:	7ffb      	ldrb	r3, [r7, #31]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d132      	bne.n	80095bc <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	8992      	ldrh	r2, [r2, #12]
 800956a:	fbb3 f0f2 	udiv	r0, r3, r2
 800956e:	fb00 f202 	mul.w	r2, r0, r2
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	440b      	add	r3, r1
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff fae4 	bl	8008b44 <ld_dword>
 800957c:	4603      	mov	r3, r0
 800957e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8009582:	4323      	orrs	r3, r4
 8009584:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	8992      	ldrh	r2, [r2, #12]
 8009594:	fbb3 f0f2 	udiv	r0, r3, r2
 8009598:	fb00 f202 	mul.w	r2, r0, r2
 800959c:	1a9b      	subs	r3, r3, r2
 800959e:	440b      	add	r3, r1
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff fb0c 	bl	8008bc0 <st_dword>
			fs->wflag = 1;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	70da      	strb	r2, [r3, #3]
			break;
 80095ae:	e006      	b.n	80095be <put_fat+0x22a>
			if (res != FR_OK) break;
 80095b0:	bf00      	nop
 80095b2:	e004      	b.n	80095be <put_fat+0x22a>
			if (res != FR_OK) break;
 80095b4:	bf00      	nop
 80095b6:	e002      	b.n	80095be <put_fat+0x22a>
			if (res != FR_OK) break;
 80095b8:	bf00      	nop
 80095ba:	e000      	b.n	80095be <put_fat+0x22a>
			if (res != FR_OK) break;
 80095bc:	bf00      	nop
		}
	}
	return res;
 80095be:	7ffb      	ldrb	r3, [r7, #31]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3724      	adds	r7, #36	@ 0x24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd90      	pop	{r4, r7, pc}

080095c8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b088      	sub	sp, #32
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80095d4:	2300      	movs	r3, #0
 80095d6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d904      	bls.n	80095ee <remove_chain+0x26>
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	699b      	ldr	r3, [r3, #24]
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d301      	bcc.n	80095f2 <remove_chain+0x2a>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e04b      	b.n	800968a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d00c      	beq.n	8009612 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80095f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	69b8      	ldr	r0, [r7, #24]
 8009600:	f7ff fec8 	bl	8009394 <put_fat>
 8009604:	4603      	mov	r3, r0
 8009606:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009608:	7ffb      	ldrb	r3, [r7, #31]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <remove_chain+0x4a>
 800960e:	7ffb      	ldrb	r3, [r7, #31]
 8009610:	e03b      	b.n	800968a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009612:	68b9      	ldr	r1, [r7, #8]
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7ff fdea 	bl	80091ee <get_fat>
 800961a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d031      	beq.n	8009686 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d101      	bne.n	800962c <remove_chain+0x64>
 8009628:	2302      	movs	r3, #2
 800962a:	e02e      	b.n	800968a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009632:	d101      	bne.n	8009638 <remove_chain+0x70>
 8009634:	2301      	movs	r3, #1
 8009636:	e028      	b.n	800968a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009638:	2200      	movs	r2, #0
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	69b8      	ldr	r0, [r7, #24]
 800963e:	f7ff fea9 	bl	8009394 <put_fat>
 8009642:	4603      	mov	r3, r0
 8009644:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009646:	7ffb      	ldrb	r3, [r7, #31]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d001      	beq.n	8009650 <remove_chain+0x88>
 800964c:	7ffb      	ldrb	r3, [r7, #31]
 800964e:	e01c      	b.n	800968a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	695a      	ldr	r2, [r3, #20]
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	3b02      	subs	r3, #2
 800965a:	429a      	cmp	r2, r3
 800965c:	d20b      	bcs.n	8009676 <remove_chain+0xae>
			fs->free_clst++;
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	791b      	ldrb	r3, [r3, #4]
 800966c:	f043 0301 	orr.w	r3, r3, #1
 8009670:	b2da      	uxtb	r2, r3
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	429a      	cmp	r2, r3
 8009682:	d3c6      	bcc.n	8009612 <remove_chain+0x4a>
 8009684:	e000      	b.n	8009688 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009686:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b088      	sub	sp, #32
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d10d      	bne.n	80096c4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d004      	beq.n	80096be <create_chain+0x2c>
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d31b      	bcc.n	80096f6 <create_chain+0x64>
 80096be:	2301      	movs	r3, #1
 80096c0:	61bb      	str	r3, [r7, #24]
 80096c2:	e018      	b.n	80096f6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80096c4:	6839      	ldr	r1, [r7, #0]
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f7ff fd91 	bl	80091ee <get_fat>
 80096cc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d801      	bhi.n	80096d8 <create_chain+0x46>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e070      	b.n	80097ba <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096de:	d101      	bne.n	80096e4 <create_chain+0x52>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	e06a      	b.n	80097ba <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d201      	bcs.n	80096f2 <create_chain+0x60>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	e063      	b.n	80097ba <create_chain+0x128>
		scl = clst;
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	3301      	adds	r3, #1
 80096fe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	69fa      	ldr	r2, [r7, #28]
 8009706:	429a      	cmp	r2, r3
 8009708:	d307      	bcc.n	800971a <create_chain+0x88>
				ncl = 2;
 800970a:	2302      	movs	r3, #2
 800970c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800970e:	69fa      	ldr	r2, [r7, #28]
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	429a      	cmp	r2, r3
 8009714:	d901      	bls.n	800971a <create_chain+0x88>
 8009716:	2300      	movs	r3, #0
 8009718:	e04f      	b.n	80097ba <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800971a:	69f9      	ldr	r1, [r7, #28]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff fd66 	bl	80091ee <get_fat>
 8009722:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d003      	beq.n	8009738 <create_chain+0xa6>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009736:	d101      	bne.n	800973c <create_chain+0xaa>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	e03e      	b.n	80097ba <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800973c:	69fa      	ldr	r2, [r7, #28]
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	429a      	cmp	r2, r3
 8009742:	d1da      	bne.n	80096fa <create_chain+0x68>
 8009744:	2300      	movs	r3, #0
 8009746:	e038      	b.n	80097ba <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009748:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800974a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800974e:	69f9      	ldr	r1, [r7, #28]
 8009750:	6938      	ldr	r0, [r7, #16]
 8009752:	f7ff fe1f 	bl	8009394 <put_fat>
 8009756:	4603      	mov	r3, r0
 8009758:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <create_chain+0xe2>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d006      	beq.n	8009774 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009766:	69fa      	ldr	r2, [r7, #28]
 8009768:	6839      	ldr	r1, [r7, #0]
 800976a:	6938      	ldr	r0, [r7, #16]
 800976c:	f7ff fe12 	bl	8009394 <put_fat>
 8009770:	4603      	mov	r3, r0
 8009772:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d116      	bne.n	80097a8 <create_chain+0x116>
		fs->last_clst = ncl;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	69fa      	ldr	r2, [r7, #28]
 800977e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	695a      	ldr	r2, [r3, #20]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	3b02      	subs	r3, #2
 800978a:	429a      	cmp	r2, r3
 800978c:	d804      	bhi.n	8009798 <create_chain+0x106>
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	1e5a      	subs	r2, r3, #1
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	791b      	ldrb	r3, [r3, #4]
 800979c:	f043 0301 	orr.w	r3, r3, #1
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	711a      	strb	r2, [r3, #4]
 80097a6:	e007      	b.n	80097b8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d102      	bne.n	80097b4 <create_chain+0x122>
 80097ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097b2:	e000      	b.n	80097b6 <create_chain+0x124>
 80097b4:	2301      	movs	r3, #1
 80097b6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80097b8:	69fb      	ldr	r3, [r7, #28]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3720      	adds	r7, #32
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b087      	sub	sp, #28
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097d6:	3304      	adds	r3, #4
 80097d8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	899b      	ldrh	r3, [r3, #12]
 80097de:	461a      	mov	r2, r3
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	8952      	ldrh	r2, [r2, #10]
 80097ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80097ee:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	1d1a      	adds	r2, r3, #4
 80097f4:	613a      	str	r2, [r7, #16]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <clmt_clust+0x42>
 8009800:	2300      	movs	r3, #0
 8009802:	e010      	b.n	8009826 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	429a      	cmp	r2, r3
 800980a:	d307      	bcc.n	800981c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800980c:	697a      	ldr	r2, [r7, #20]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	3304      	adds	r3, #4
 8009818:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800981a:	e7e9      	b.n	80097f0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800981c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	4413      	add	r3, r2
}
 8009826:	4618      	mov	r0, r3
 8009828:	371c      	adds	r7, #28
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009832:	b580      	push	{r7, lr}
 8009834:	b086      	sub	sp, #24
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009848:	d204      	bcs.n	8009854 <dir_sdi+0x22>
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	f003 031f 	and.w	r3, r3, #31
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009854:	2302      	movs	r3, #2
 8009856:	e071      	b.n	800993c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <dir_sdi+0x46>
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b02      	cmp	r3, #2
 8009870:	d902      	bls.n	8009878 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009876:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d10c      	bne.n	8009898 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	095b      	lsrs	r3, r3, #5
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	8912      	ldrh	r2, [r2, #8]
 8009886:	4293      	cmp	r3, r2
 8009888:	d301      	bcc.n	800988e <dir_sdi+0x5c>
 800988a:	2302      	movs	r3, #2
 800988c:	e056      	b.n	800993c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	61da      	str	r2, [r3, #28]
 8009896:	e02d      	b.n	80098f4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	895b      	ldrh	r3, [r3, #10]
 800989c:	461a      	mov	r2, r3
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	899b      	ldrh	r3, [r3, #12]
 80098a2:	fb02 f303 	mul.w	r3, r2, r3
 80098a6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098a8:	e019      	b.n	80098de <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6979      	ldr	r1, [r7, #20]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fc9d 	bl	80091ee <get_fat>
 80098b4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098bc:	d101      	bne.n	80098c2 <dir_sdi+0x90>
 80098be:	2301      	movs	r3, #1
 80098c0:	e03c      	b.n	800993c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d904      	bls.n	80098d2 <dir_sdi+0xa0>
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d301      	bcc.n	80098d6 <dir_sdi+0xa4>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e032      	b.n	800993c <dir_sdi+0x10a>
			ofs -= csz;
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d2e1      	bcs.n	80098aa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80098e6:	6979      	ldr	r1, [r7, #20]
 80098e8:	6938      	ldr	r0, [r7, #16]
 80098ea:	f7ff fc61 	bl	80091b0 <clust2sect>
 80098ee:	4602      	mov	r2, r0
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <dir_sdi+0xd4>
 8009902:	2302      	movs	r3, #2
 8009904:	e01a      	b.n	800993c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	69da      	ldr	r2, [r3, #28]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	899b      	ldrh	r3, [r3, #12]
 800990e:	4619      	mov	r1, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	fbb3 f3f1 	udiv	r3, r3, r1
 8009916:	441a      	add	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	899b      	ldrh	r3, [r3, #12]
 8009926:	461a      	mov	r2, r3
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	fbb3 f0f2 	udiv	r0, r3, r2
 800992e:	fb00 f202 	mul.w	r2, r0, r2
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	18ca      	adds	r2, r1, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	3320      	adds	r3, #32
 800995a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	69db      	ldr	r3, [r3, #28]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d003      	beq.n	800996c <dir_next+0x28>
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800996a:	d301      	bcc.n	8009970 <dir_next+0x2c>
 800996c:	2304      	movs	r3, #4
 800996e:	e0bb      	b.n	8009ae8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	899b      	ldrh	r3, [r3, #12]
 8009974:	461a      	mov	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	fbb3 f1f2 	udiv	r1, r3, r2
 800997c:	fb01 f202 	mul.w	r2, r1, r2
 8009980:	1a9b      	subs	r3, r3, r2
 8009982:	2b00      	cmp	r3, #0
 8009984:	f040 809d 	bne.w	8009ac2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	1c5a      	adds	r2, r3, #1
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	8912      	ldrh	r2, [r2, #8]
 80099a2:	4293      	cmp	r3, r2
 80099a4:	f0c0 808d 	bcc.w	8009ac2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	61da      	str	r2, [r3, #28]
 80099ae:	2304      	movs	r3, #4
 80099b0:	e09a      	b.n	8009ae8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	899b      	ldrh	r3, [r3, #12]
 80099b6:	461a      	mov	r2, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	8952      	ldrh	r2, [r2, #10]
 80099c2:	3a01      	subs	r2, #1
 80099c4:	4013      	ands	r3, r2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d17b      	bne.n	8009ac2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	4619      	mov	r1, r3
 80099d2:	4610      	mov	r0, r2
 80099d4:	f7ff fc0b 	bl	80091ee <get_fat>
 80099d8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d801      	bhi.n	80099e4 <dir_next+0xa0>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e081      	b.n	8009ae8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ea:	d101      	bne.n	80099f0 <dir_next+0xac>
 80099ec:	2301      	movs	r3, #1
 80099ee:	e07b      	b.n	8009ae8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d359      	bcc.n	8009aae <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d104      	bne.n	8009a0a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2200      	movs	r2, #0
 8009a04:	61da      	str	r2, [r3, #28]
 8009a06:	2304      	movs	r3, #4
 8009a08:	e06e      	b.n	8009ae8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7ff fe3d 	bl	8009692 <create_chain>
 8009a18:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <dir_next+0xe0>
 8009a20:	2307      	movs	r3, #7
 8009a22:	e061      	b.n	8009ae8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <dir_next+0xea>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e05c      	b.n	8009ae8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a34:	d101      	bne.n	8009a3a <dir_next+0xf6>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e056      	b.n	8009ae8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f7ff fad6 	bl	8008fec <sync_window>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <dir_next+0x106>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e04e      	b.n	8009ae8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	899b      	ldrh	r3, [r3, #12]
 8009a54:	461a      	mov	r2, r3
 8009a56:	2100      	movs	r1, #0
 8009a58:	f7ff f8ff 	bl	8008c5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	6979      	ldr	r1, [r7, #20]
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f7ff fba4 	bl	80091b0 <clust2sect>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a6e:	e012      	b.n	8009a96 <dir_next+0x152>
						fs->wflag = 1;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff fab8 	bl	8008fec <sync_window>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <dir_next+0x142>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e030      	b.n	8009ae8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	895b      	ldrh	r3, [r3, #10]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d3e6      	bcc.n	8009a70 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	1ad2      	subs	r2, r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ab4:	6979      	ldr	r1, [r7, #20]
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f7ff fb7a 	bl	80091b0 <clust2sect>
 8009abc:	4602      	mov	r2, r0
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	899b      	ldrh	r3, [r3, #12]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ada:	fb00 f202 	mul.w	r2, r0, r2
 8009ade:	1a9b      	subs	r3, r3, r2
 8009ae0:	18ca      	adds	r2, r1, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3718      	adds	r7, #24
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b00:	2100      	movs	r1, #0
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff fe95 	bl	8009832 <dir_sdi>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b0c:	7dfb      	ldrb	r3, [r7, #23]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d12b      	bne.n	8009b6a <dir_alloc+0x7a>
		n = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	69db      	ldr	r3, [r3, #28]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f7ff faa9 	bl	8009074 <move_window>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d11d      	bne.n	8009b68 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2be5      	cmp	r3, #229	@ 0xe5
 8009b34:	d004      	beq.n	8009b40 <dir_alloc+0x50>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d107      	bne.n	8009b50 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	3301      	adds	r3, #1
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d102      	bne.n	8009b54 <dir_alloc+0x64>
 8009b4e:	e00c      	b.n	8009b6a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b50:	2300      	movs	r3, #0
 8009b52:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b54:	2101      	movs	r1, #1
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff fef4 	bl	8009944 <dir_next>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0d7      	beq.n	8009b16 <dir_alloc+0x26>
 8009b66:	e000      	b.n	8009b6a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009b68:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d101      	bne.n	8009b74 <dir_alloc+0x84>
 8009b70:	2307      	movs	r3, #7
 8009b72:	75fb      	strb	r3, [r7, #23]
	return res;
 8009b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	331a      	adds	r3, #26
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fe ffc1 	bl	8008b14 <ld_word>
 8009b92:	4603      	mov	r3, r0
 8009b94:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d109      	bne.n	8009bb2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	3314      	adds	r3, #20
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe ffb6 	bl	8008b14 <ld_word>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	331a      	adds	r3, #26
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	b292      	uxth	r2, r2
 8009bd0:	4611      	mov	r1, r2
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe ffd9 	bl	8008b8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d109      	bne.n	8009bf4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	f103 0214 	add.w	r2, r3, #20
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	0c1b      	lsrs	r3, r3, #16
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	4619      	mov	r1, r3
 8009bee:	4610      	mov	r0, r2
 8009bf0:	f7fe ffcb 	bl	8008b8a <st_word>
	}
}
 8009bf4:	bf00      	nop
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f7ff fe10 	bl	8009832 <dir_sdi>
 8009c12:	4603      	mov	r3, r0
 8009c14:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d001      	beq.n	8009c20 <dir_find+0x24>
 8009c1c:	7dfb      	ldrb	r3, [r7, #23]
 8009c1e:	e03e      	b.n	8009c9e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	69db      	ldr	r3, [r3, #28]
 8009c24:	4619      	mov	r1, r3
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f7ff fa24 	bl	8009074 <move_window>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d12f      	bne.n	8009c96 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c3e:	7bfb      	ldrb	r3, [r7, #15]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <dir_find+0x4e>
 8009c44:	2304      	movs	r3, #4
 8009c46:	75fb      	strb	r3, [r7, #23]
 8009c48:	e028      	b.n	8009c9c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	330b      	adds	r3, #11
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	330b      	adds	r3, #11
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	f003 0308 	and.w	r3, r3, #8
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d10a      	bne.n	8009c82 <dir_find+0x86>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a18      	ldr	r0, [r3, #32]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	3324      	adds	r3, #36	@ 0x24
 8009c74:	220b      	movs	r2, #11
 8009c76:	4619      	mov	r1, r3
 8009c78:	f7ff f80a 	bl	8008c90 <mem_cmp>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009c82:	2100      	movs	r1, #0
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff fe5d 	bl	8009944 <dir_next>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009c8e:	7dfb      	ldrb	r3, [r7, #23]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d0c5      	beq.n	8009c20 <dir_find+0x24>
 8009c94:	e002      	b.n	8009c9c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009c96:	bf00      	nop
 8009c98:	e000      	b.n	8009c9c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c9a:	bf00      	nop

	return res;
 8009c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3718      	adds	r7, #24
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}

08009ca6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009ca6:	b580      	push	{r7, lr}
 8009ca8:	b084      	sub	sp, #16
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff ff1a 	bl	8009af0 <dir_alloc>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d11c      	bne.n	8009d00 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	69db      	ldr	r3, [r3, #28]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	68b8      	ldr	r0, [r7, #8]
 8009cce:	f7ff f9d1 	bl	8009074 <move_window>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d111      	bne.n	8009d00 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	2220      	movs	r2, #32
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7fe ffb8 	bl	8008c5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6a18      	ldr	r0, [r3, #32]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3324      	adds	r3, #36	@ 0x24
 8009cf2:	220b      	movs	r2, #11
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f7fe ff8f 	bl	8008c18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b088      	sub	sp, #32
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3324      	adds	r3, #36	@ 0x24
 8009d20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009d22:	220b      	movs	r2, #11
 8009d24:	2120      	movs	r1, #32
 8009d26:	68b8      	ldr	r0, [r7, #8]
 8009d28:	f7fe ff97 	bl	8008c5a <mem_set>
	si = i = 0; ni = 8;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	61fb      	str	r3, [r7, #28]
 8009d34:	2308      	movs	r3, #8
 8009d36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	61fa      	str	r2, [r7, #28]
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4413      	add	r3, r2
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d46:	7efb      	ldrb	r3, [r7, #27]
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d94e      	bls.n	8009dea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009d4c:	7efb      	ldrb	r3, [r7, #27]
 8009d4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d50:	d006      	beq.n	8009d60 <create_name+0x54>
 8009d52:	7efb      	ldrb	r3, [r7, #27]
 8009d54:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d56:	d110      	bne.n	8009d7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009d58:	e002      	b.n	8009d60 <create_name+0x54>
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	61fb      	str	r3, [r7, #28]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	4413      	add	r3, r2
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d6a:	d0f6      	beq.n	8009d5a <create_name+0x4e>
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d76:	d0f0      	beq.n	8009d5a <create_name+0x4e>
			break;
 8009d78:	e038      	b.n	8009dec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009d7a:	7efb      	ldrb	r3, [r7, #27]
 8009d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d7e:	d003      	beq.n	8009d88 <create_name+0x7c>
 8009d80:	693a      	ldr	r2, [r7, #16]
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d30c      	bcc.n	8009da2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	2b0b      	cmp	r3, #11
 8009d8c:	d002      	beq.n	8009d94 <create_name+0x88>
 8009d8e:	7efb      	ldrb	r3, [r7, #27]
 8009d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d92:	d001      	beq.n	8009d98 <create_name+0x8c>
 8009d94:	2306      	movs	r3, #6
 8009d96:	e044      	b.n	8009e22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009d98:	2308      	movs	r3, #8
 8009d9a:	613b      	str	r3, [r7, #16]
 8009d9c:	230b      	movs	r3, #11
 8009d9e:	617b      	str	r3, [r7, #20]
			continue;
 8009da0:	e022      	b.n	8009de8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009da2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	da04      	bge.n	8009db4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009daa:	7efb      	ldrb	r3, [r7, #27]
 8009dac:	3b80      	subs	r3, #128	@ 0x80
 8009dae:	4a1f      	ldr	r2, [pc, #124]	@ (8009e2c <create_name+0x120>)
 8009db0:	5cd3      	ldrb	r3, [r2, r3]
 8009db2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009db4:	7efb      	ldrb	r3, [r7, #27]
 8009db6:	4619      	mov	r1, r3
 8009db8:	481d      	ldr	r0, [pc, #116]	@ (8009e30 <create_name+0x124>)
 8009dba:	f7fe ff90 	bl	8008cde <chk_chr>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <create_name+0xbc>
 8009dc4:	2306      	movs	r3, #6
 8009dc6:	e02c      	b.n	8009e22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009dc8:	7efb      	ldrb	r3, [r7, #27]
 8009dca:	2b60      	cmp	r3, #96	@ 0x60
 8009dcc:	d905      	bls.n	8009dda <create_name+0xce>
 8009dce:	7efb      	ldrb	r3, [r7, #27]
 8009dd0:	2b7a      	cmp	r3, #122	@ 0x7a
 8009dd2:	d802      	bhi.n	8009dda <create_name+0xce>
 8009dd4:	7efb      	ldrb	r3, [r7, #27]
 8009dd6:	3b20      	subs	r3, #32
 8009dd8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	613a      	str	r2, [r7, #16]
 8009de0:	68ba      	ldr	r2, [r7, #8]
 8009de2:	4413      	add	r3, r2
 8009de4:	7efa      	ldrb	r2, [r7, #27]
 8009de6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009de8:	e7a6      	b.n	8009d38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009dea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	441a      	add	r2, r3
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <create_name+0xf4>
 8009dfc:	2306      	movs	r3, #6
 8009dfe:	e010      	b.n	8009e22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2be5      	cmp	r3, #229	@ 0xe5
 8009e06:	d102      	bne.n	8009e0e <create_name+0x102>
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009e0e:	7efb      	ldrb	r3, [r7, #27]
 8009e10:	2b20      	cmp	r3, #32
 8009e12:	d801      	bhi.n	8009e18 <create_name+0x10c>
 8009e14:	2204      	movs	r2, #4
 8009e16:	e000      	b.n	8009e1a <create_name+0x10e>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	330b      	adds	r3, #11
 8009e1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009e20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3720      	adds	r7, #32
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	0800d3d4 	.word	0x0800d3d4
 8009e30:	0800d328 	.word	0x0800d328

08009e34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009e48:	e002      	b.n	8009e50 <follow_path+0x1c>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	603b      	str	r3, [r7, #0]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	2b2f      	cmp	r3, #47	@ 0x2f
 8009e56:	d0f8      	beq.n	8009e4a <follow_path+0x16>
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009e5e:	d0f4      	beq.n	8009e4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	2200      	movs	r2, #0
 8009e64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b1f      	cmp	r3, #31
 8009e6c:	d80a      	bhi.n	8009e84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2280      	movs	r2, #128	@ 0x80
 8009e72:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009e76:	2100      	movs	r1, #0
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f7ff fcda 	bl	8009832 <dir_sdi>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75fb      	strb	r3, [r7, #23]
 8009e82:	e048      	b.n	8009f16 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e84:	463b      	mov	r3, r7
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ff3f 	bl	8009d0c <create_name>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d139      	bne.n	8009f0c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff feaf 	bl	8009bfc <dir_find>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009ea8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00a      	beq.n	8009ec6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009eb0:	7dfb      	ldrb	r3, [r7, #23]
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d12c      	bne.n	8009f10 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009eb6:	7afb      	ldrb	r3, [r7, #11]
 8009eb8:	f003 0304 	and.w	r3, r3, #4
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d127      	bne.n	8009f10 <follow_path+0xdc>
 8009ec0:	2305      	movs	r3, #5
 8009ec2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009ec4:	e024      	b.n	8009f10 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009ec6:	7afb      	ldrb	r3, [r7, #11]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d121      	bne.n	8009f14 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	799b      	ldrb	r3, [r3, #6]
 8009ed4:	f003 0310 	and.w	r3, r3, #16
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009edc:	2305      	movs	r3, #5
 8009ede:	75fb      	strb	r3, [r7, #23]
 8009ee0:	e019      	b.n	8009f16 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	8992      	ldrh	r2, [r2, #12]
 8009ef0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ef4:	fb00 f202 	mul.w	r2, r0, r2
 8009ef8:	1a9b      	subs	r3, r3, r2
 8009efa:	440b      	add	r3, r1
 8009efc:	4619      	mov	r1, r3
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f7ff fe3d 	bl	8009b7e <ld_clust>
 8009f04:	4602      	mov	r2, r0
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f0a:	e7bb      	b.n	8009e84 <follow_path+0x50>
			if (res != FR_OK) break;
 8009f0c:	bf00      	nop
 8009f0e:	e002      	b.n	8009f16 <follow_path+0xe2>
				break;
 8009f10:	bf00      	nop
 8009f12:	e000      	b.n	8009f16 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009f14:	bf00      	nop
			}
		}
	}

	return res;
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b087      	sub	sp, #28
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009f28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009f2c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d031      	beq.n	8009f9a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e002      	b.n	8009f44 <get_ldnumber+0x24>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	3301      	adds	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	d903      	bls.n	8009f54 <get_ldnumber+0x34>
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f52:	d1f4      	bne.n	8009f3e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b3a      	cmp	r3, #58	@ 0x3a
 8009f5a:	d11c      	bne.n	8009f96 <get_ldnumber+0x76>
			tp = *path;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	60fa      	str	r2, [r7, #12]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	3b30      	subs	r3, #48	@ 0x30
 8009f6c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	2b09      	cmp	r3, #9
 8009f72:	d80e      	bhi.n	8009f92 <get_ldnumber+0x72>
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d10a      	bne.n	8009f92 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d107      	bne.n	8009f92 <get_ldnumber+0x72>
					vol = (int)i;
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	617b      	str	r3, [r7, #20]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	e002      	b.n	8009f9c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f96:	2300      	movs	r3, #0
 8009f98:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f9a:	693b      	ldr	r3, [r7, #16]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	371c      	adds	r7, #28
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	70da      	strb	r2, [r3, #3]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fbe:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f7ff f856 	bl	8009074 <move_window>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <check_fs+0x2a>
 8009fce:	2304      	movs	r3, #4
 8009fd0:	e038      	b.n	800a044 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3334      	adds	r3, #52	@ 0x34
 8009fd6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7fe fd9a 	bl	8008b14 <ld_word>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d001      	beq.n	8009ff0 <check_fs+0x48>
 8009fec:	2303      	movs	r3, #3
 8009fee:	e029      	b.n	800a044 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009ff6:	2be9      	cmp	r3, #233	@ 0xe9
 8009ff8:	d009      	beq.n	800a00e <check_fs+0x66>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a000:	2beb      	cmp	r3, #235	@ 0xeb
 800a002:	d11e      	bne.n	800a042 <check_fs+0x9a>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a00a:	2b90      	cmp	r3, #144	@ 0x90
 800a00c:	d119      	bne.n	800a042 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3334      	adds	r3, #52	@ 0x34
 800a012:	3336      	adds	r3, #54	@ 0x36
 800a014:	4618      	mov	r0, r3
 800a016:	f7fe fd95 	bl	8008b44 <ld_dword>
 800a01a:	4603      	mov	r3, r0
 800a01c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a020:	4a0a      	ldr	r2, [pc, #40]	@ (800a04c <check_fs+0xa4>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d101      	bne.n	800a02a <check_fs+0x82>
 800a026:	2300      	movs	r3, #0
 800a028:	e00c      	b.n	800a044 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	3334      	adds	r3, #52	@ 0x34
 800a02e:	3352      	adds	r3, #82	@ 0x52
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fd87 	bl	8008b44 <ld_dword>
 800a036:	4603      	mov	r3, r0
 800a038:	4a05      	ldr	r2, [pc, #20]	@ (800a050 <check_fs+0xa8>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d101      	bne.n	800a042 <check_fs+0x9a>
 800a03e:	2300      	movs	r3, #0
 800a040:	e000      	b.n	800a044 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a042:	2302      	movs	r3, #2
}
 800a044:	4618      	mov	r0, r3
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	00544146 	.word	0x00544146
 800a050:	33544146 	.word	0x33544146

0800a054 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b096      	sub	sp, #88	@ 0x58
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	4613      	mov	r3, r2
 800a060:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2200      	movs	r2, #0
 800a066:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff ff59 	bl	8009f20 <get_ldnumber>
 800a06e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a072:	2b00      	cmp	r3, #0
 800a074:	da01      	bge.n	800a07a <find_volume+0x26>
 800a076:	230b      	movs	r3, #11
 800a078:	e262      	b.n	800a540 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a07a:	4a9f      	ldr	r2, [pc, #636]	@ (800a2f8 <find_volume+0x2a4>)
 800a07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a082:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a086:	2b00      	cmp	r3, #0
 800a088:	d101      	bne.n	800a08e <find_volume+0x3a>
 800a08a:	230c      	movs	r3, #12
 800a08c:	e258      	b.n	800a540 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a092:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	f023 0301 	bic.w	r3, r3, #1
 800a09a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01a      	beq.n	800a0da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fc95 	bl	80089d8 <disk_status>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a0b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10c      	bne.n	800a0da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a0c0:	79fb      	ldrb	r3, [r7, #7]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <find_volume+0x82>
 800a0c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a0d2:	230a      	movs	r3, #10
 800a0d4:	e234      	b.n	800a540 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	e232      	b.n	800a540 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0dc:	2200      	movs	r2, #0
 800a0de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fc8d 	bl	8008a0c <disk_initialize>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a0f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a104:	2303      	movs	r3, #3
 800a106:	e21b      	b.n	800a540 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <find_volume+0xca>
 800a10e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a112:	f003 0304 	and.w	r3, r3, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a11a:	230a      	movs	r3, #10
 800a11c:	e210      	b.n	800a540 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a120:	7858      	ldrb	r0, [r3, #1]
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	330c      	adds	r3, #12
 800a126:	461a      	mov	r2, r3
 800a128:	2102      	movs	r1, #2
 800a12a:	f7fe fcd5 	bl	8008ad8 <disk_ioctl>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <find_volume+0xe4>
 800a134:	2301      	movs	r3, #1
 800a136:	e203      	b.n	800a540 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a13a:	899b      	ldrh	r3, [r3, #12]
 800a13c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a140:	d80d      	bhi.n	800a15e <find_volume+0x10a>
 800a142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a144:	899b      	ldrh	r3, [r3, #12]
 800a146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a14a:	d308      	bcc.n	800a15e <find_volume+0x10a>
 800a14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a14e:	899b      	ldrh	r3, [r3, #12]
 800a150:	461a      	mov	r2, r3
 800a152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a154:	899b      	ldrh	r3, [r3, #12]
 800a156:	3b01      	subs	r3, #1
 800a158:	4013      	ands	r3, r2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <find_volume+0x10e>
 800a15e:	2301      	movs	r3, #1
 800a160:	e1ee      	b.n	800a540 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a162:	2300      	movs	r3, #0
 800a164:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a166:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a168:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a16a:	f7ff ff1d 	bl	8009fa8 <check_fs>
 800a16e:	4603      	mov	r3, r0
 800a170:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a174:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a178:	2b02      	cmp	r3, #2
 800a17a:	d149      	bne.n	800a210 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a17c:	2300      	movs	r3, #0
 800a17e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a180:	e01e      	b.n	800a1c0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a188:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a18a:	011b      	lsls	r3, r3, #4
 800a18c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a190:	4413      	add	r3, r2
 800a192:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	3304      	adds	r3, #4
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d006      	beq.n	800a1ac <find_volume+0x158>
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7fe fcce 	bl	8008b44 <ld_dword>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	e000      	b.n	800a1ae <find_volume+0x15a>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	3358      	adds	r3, #88	@ 0x58
 800a1b4:	443b      	add	r3, r7
 800a1b6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a1ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1bc:	3301      	adds	r3, #1
 800a1be:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d9dd      	bls.n	800a182 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a1ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <find_volume+0x182>
 800a1d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a1d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	3358      	adds	r3, #88	@ 0x58
 800a1dc:	443b      	add	r3, r7
 800a1de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a1e2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a1e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d005      	beq.n	800a1f6 <find_volume+0x1a2>
 800a1ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1ee:	f7ff fedb 	bl	8009fa8 <check_fs>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	e000      	b.n	800a1f8 <find_volume+0x1a4>
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a200:	2b01      	cmp	r3, #1
 800a202:	d905      	bls.n	800a210 <find_volume+0x1bc>
 800a204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a206:	3301      	adds	r3, #1
 800a208:	643b      	str	r3, [r7, #64]	@ 0x40
 800a20a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a20c:	2b03      	cmp	r3, #3
 800a20e:	d9e2      	bls.n	800a1d6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a210:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a214:	2b04      	cmp	r3, #4
 800a216:	d101      	bne.n	800a21c <find_volume+0x1c8>
 800a218:	2301      	movs	r3, #1
 800a21a:	e191      	b.n	800a540 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a21c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a220:	2b01      	cmp	r3, #1
 800a222:	d901      	bls.n	800a228 <find_volume+0x1d4>
 800a224:	230d      	movs	r3, #13
 800a226:	e18b      	b.n	800a540 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22a:	3334      	adds	r3, #52	@ 0x34
 800a22c:	330b      	adds	r3, #11
 800a22e:	4618      	mov	r0, r3
 800a230:	f7fe fc70 	bl	8008b14 <ld_word>
 800a234:	4603      	mov	r3, r0
 800a236:	461a      	mov	r2, r3
 800a238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a23a:	899b      	ldrh	r3, [r3, #12]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d001      	beq.n	800a244 <find_volume+0x1f0>
 800a240:	230d      	movs	r3, #13
 800a242:	e17d      	b.n	800a540 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	3334      	adds	r3, #52	@ 0x34
 800a248:	3316      	adds	r3, #22
 800a24a:	4618      	mov	r0, r3
 800a24c:	f7fe fc62 	bl	8008b14 <ld_word>
 800a250:	4603      	mov	r3, r0
 800a252:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a256:	2b00      	cmp	r3, #0
 800a258:	d106      	bne.n	800a268 <find_volume+0x214>
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	3334      	adds	r3, #52	@ 0x34
 800a25e:	3324      	adds	r3, #36	@ 0x24
 800a260:	4618      	mov	r0, r3
 800a262:	f7fe fc6f 	bl	8008b44 <ld_dword>
 800a266:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a26c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a276:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27a:	789b      	ldrb	r3, [r3, #2]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d005      	beq.n	800a28c <find_volume+0x238>
 800a280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a282:	789b      	ldrb	r3, [r3, #2]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d001      	beq.n	800a28c <find_volume+0x238>
 800a288:	230d      	movs	r3, #13
 800a28a:	e159      	b.n	800a540 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28e:	789b      	ldrb	r3, [r3, #2]
 800a290:	461a      	mov	r2, r3
 800a292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a294:	fb02 f303 	mul.w	r3, r2, r3
 800a298:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a8:	895b      	ldrh	r3, [r3, #10]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d008      	beq.n	800a2c0 <find_volume+0x26c>
 800a2ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b0:	895b      	ldrh	r3, [r3, #10]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b6:	895b      	ldrh	r3, [r3, #10]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <find_volume+0x270>
 800a2c0:	230d      	movs	r3, #13
 800a2c2:	e13d      	b.n	800a540 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	3334      	adds	r3, #52	@ 0x34
 800a2c8:	3311      	adds	r3, #17
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe fc22 	bl	8008b14 <ld_word>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2de:	8992      	ldrh	r2, [r2, #12]
 800a2e0:	0952      	lsrs	r2, r2, #5
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2e8:	fb01 f202 	mul.w	r2, r1, r2
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <find_volume+0x2a8>
 800a2f4:	230d      	movs	r3, #13
 800a2f6:	e123      	b.n	800a540 <find_volume+0x4ec>
 800a2f8:	2000e3a0 	.word	0x2000e3a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	3334      	adds	r3, #52	@ 0x34
 800a300:	3313      	adds	r3, #19
 800a302:	4618      	mov	r0, r3
 800a304:	f7fe fc06 	bl	8008b14 <ld_word>
 800a308:	4603      	mov	r3, r0
 800a30a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a30c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <find_volume+0x2cc>
 800a312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a314:	3334      	adds	r3, #52	@ 0x34
 800a316:	3320      	adds	r3, #32
 800a318:	4618      	mov	r0, r3
 800a31a:	f7fe fc13 	bl	8008b44 <ld_dword>
 800a31e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a322:	3334      	adds	r3, #52	@ 0x34
 800a324:	330e      	adds	r3, #14
 800a326:	4618      	mov	r0, r3
 800a328:	f7fe fbf4 	bl	8008b14 <ld_word>
 800a32c:	4603      	mov	r3, r0
 800a32e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a330:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a332:	2b00      	cmp	r3, #0
 800a334:	d101      	bne.n	800a33a <find_volume+0x2e6>
 800a336:	230d      	movs	r3, #13
 800a338:	e102      	b.n	800a540 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a33a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a33c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a33e:	4413      	add	r3, r2
 800a340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a342:	8911      	ldrh	r1, [r2, #8]
 800a344:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a346:	8992      	ldrh	r2, [r2, #12]
 800a348:	0952      	lsrs	r2, r2, #5
 800a34a:	b292      	uxth	r2, r2
 800a34c:	fbb1 f2f2 	udiv	r2, r1, r2
 800a350:	b292      	uxth	r2, r2
 800a352:	4413      	add	r3, r2
 800a354:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a356:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d201      	bcs.n	800a362 <find_volume+0x30e>
 800a35e:	230d      	movs	r3, #13
 800a360:	e0ee      	b.n	800a540 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a36a:	8952      	ldrh	r2, [r2, #10]
 800a36c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <find_volume+0x328>
 800a378:	230d      	movs	r3, #13
 800a37a:	e0e1      	b.n	800a540 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800a37c:	2303      	movs	r3, #3
 800a37e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a384:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a388:	4293      	cmp	r3, r2
 800a38a:	d802      	bhi.n	800a392 <find_volume+0x33e>
 800a38c:	2302      	movs	r3, #2
 800a38e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a398:	4293      	cmp	r3, r2
 800a39a:	d802      	bhi.n	800a3a2 <find_volume+0x34e>
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a4:	1c9a      	adds	r2, r3, #2
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3ae:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a3b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a3b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3b4:	441a      	add	r2, r3
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a3ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	441a      	add	r2, r3
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c2:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a3c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d11e      	bne.n	800a40a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	3334      	adds	r3, #52	@ 0x34
 800a3d0:	332a      	adds	r3, #42	@ 0x2a
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fb9e 	bl	8008b14 <ld_word>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <find_volume+0x38e>
 800a3de:	230d      	movs	r3, #13
 800a3e0:	e0ae      	b.n	800a540 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e4:	891b      	ldrh	r3, [r3, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <find_volume+0x39a>
 800a3ea:	230d      	movs	r3, #13
 800a3ec:	e0a8      	b.n	800a540 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	3334      	adds	r3, #52	@ 0x34
 800a3f2:	332c      	adds	r3, #44	@ 0x2c
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe fba5 	bl	8008b44 <ld_dword>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fe:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a402:	699b      	ldr	r3, [r3, #24]
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	647b      	str	r3, [r7, #68]	@ 0x44
 800a408:	e01f      	b.n	800a44a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40c:	891b      	ldrh	r3, [r3, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d101      	bne.n	800a416 <find_volume+0x3c2>
 800a412:	230d      	movs	r3, #13
 800a414:	e094      	b.n	800a540 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a418:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a41c:	441a      	add	r2, r3
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a422:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a426:	2b02      	cmp	r3, #2
 800a428:	d103      	bne.n	800a432 <find_volume+0x3de>
 800a42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	005b      	lsls	r3, r3, #1
 800a430:	e00a      	b.n	800a448 <find_volume+0x3f4>
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	699a      	ldr	r2, [r3, #24]
 800a436:	4613      	mov	r3, r2
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	4413      	add	r3, r2
 800a43c:	085a      	lsrs	r2, r3, #1
 800a43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a448:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44c:	69da      	ldr	r2, [r3, #28]
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	899b      	ldrh	r3, [r3, #12]
 800a452:	4619      	mov	r1, r3
 800a454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a456:	440b      	add	r3, r1
 800a458:	3b01      	subs	r3, #1
 800a45a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a45c:	8989      	ldrh	r1, [r1, #12]
 800a45e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a462:	429a      	cmp	r2, r3
 800a464:	d201      	bcs.n	800a46a <find_volume+0x416>
 800a466:	230d      	movs	r3, #13
 800a468:	e06a      	b.n	800a540 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a470:	615a      	str	r2, [r3, #20]
 800a472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a474:	695a      	ldr	r2, [r3, #20]
 800a476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a478:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47c:	2280      	movs	r2, #128	@ 0x80
 800a47e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a480:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a484:	2b03      	cmp	r3, #3
 800a486:	d149      	bne.n	800a51c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	3334      	adds	r3, #52	@ 0x34
 800a48c:	3330      	adds	r3, #48	@ 0x30
 800a48e:	4618      	mov	r0, r3
 800a490:	f7fe fb40 	bl	8008b14 <ld_word>
 800a494:	4603      	mov	r3, r0
 800a496:	2b01      	cmp	r3, #1
 800a498:	d140      	bne.n	800a51c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a49a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a49c:	3301      	adds	r3, #1
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4a2:	f7fe fde7 	bl	8009074 <move_window>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d137      	bne.n	800a51c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	3334      	adds	r3, #52	@ 0x34
 800a4b6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f7fe fb2a 	bl	8008b14 <ld_word>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d127      	bne.n	800a51c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ce:	3334      	adds	r3, #52	@ 0x34
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fe fb37 	bl	8008b44 <ld_dword>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a548 <find_volume+0x4f4>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d11e      	bne.n	800a51c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e0:	3334      	adds	r3, #52	@ 0x34
 800a4e2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe fb2c 	bl	8008b44 <ld_dword>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	4a17      	ldr	r2, [pc, #92]	@ (800a54c <find_volume+0x4f8>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d113      	bne.n	800a51c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f6:	3334      	adds	r3, #52	@ 0x34
 800a4f8:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fe fb21 	bl	8008b44 <ld_dword>
 800a502:	4602      	mov	r2, r0
 800a504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a506:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50a:	3334      	adds	r3, #52	@ 0x34
 800a50c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a510:	4618      	mov	r0, r3
 800a512:	f7fe fb17 	bl	8008b44 <ld_dword>
 800a516:	4602      	mov	r2, r0
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a522:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a524:	4b0a      	ldr	r3, [pc, #40]	@ (800a550 <find_volume+0x4fc>)
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	3301      	adds	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	4b08      	ldr	r3, [pc, #32]	@ (800a550 <find_volume+0x4fc>)
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	4b07      	ldr	r3, [pc, #28]	@ (800a550 <find_volume+0x4fc>)
 800a532:	881a      	ldrh	r2, [r3, #0]
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a538:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a53a:	f7fe fd33 	bl	8008fa4 <clear_lock>
#endif
	return FR_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3758      	adds	r7, #88	@ 0x58
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	41615252 	.word	0x41615252
 800a54c:	61417272 	.word	0x61417272
 800a550:	2000e3a4 	.word	0x2000e3a4

0800a554 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a55e:	2309      	movs	r3, #9
 800a560:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01c      	beq.n	800a5a2 <validate+0x4e>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d018      	beq.n	800a5a2 <validate+0x4e>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d013      	beq.n	800a5a2 <validate+0x4e>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	889a      	ldrh	r2, [r3, #4]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	88db      	ldrh	r3, [r3, #6]
 800a584:	429a      	cmp	r2, r3
 800a586:	d10c      	bne.n	800a5a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	785b      	ldrb	r3, [r3, #1]
 800a58e:	4618      	mov	r0, r3
 800a590:	f7fe fa22 	bl	80089d8 <disk_status>
 800a594:	4603      	mov	r3, r0
 800a596:	f003 0301 	and.w	r3, r3, #1
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d101      	bne.n	800a5a2 <validate+0x4e>
			res = FR_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d102      	bne.n	800a5ae <validate+0x5a>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	e000      	b.n	800a5b0 <validate+0x5c>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	6013      	str	r3, [r2, #0]
	return res;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
	...

0800a5c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b088      	sub	sp, #32
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a5d2:	f107 0310 	add.w	r3, r7, #16
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fca2 	bl	8009f20 <get_ldnumber>
 800a5dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	da01      	bge.n	800a5e8 <f_mount+0x28>
 800a5e4:	230b      	movs	r3, #11
 800a5e6:	e02b      	b.n	800a640 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a5e8:	4a17      	ldr	r2, [pc, #92]	@ (800a648 <f_mount+0x88>)
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d005      	beq.n	800a604 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a5f8:	69b8      	ldr	r0, [r7, #24]
 800a5fa:	f7fe fcd3 	bl	8008fa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	2200      	movs	r2, #0
 800a602:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d002      	beq.n	800a610 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	490d      	ldr	r1, [pc, #52]	@ (800a648 <f_mount+0x88>)
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <f_mount+0x66>
 800a620:	79fb      	ldrb	r3, [r7, #7]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d001      	beq.n	800a62a <f_mount+0x6a>
 800a626:	2300      	movs	r3, #0
 800a628:	e00a      	b.n	800a640 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a62a:	f107 010c 	add.w	r1, r7, #12
 800a62e:	f107 0308 	add.w	r3, r7, #8
 800a632:	2200      	movs	r2, #0
 800a634:	4618      	mov	r0, r3
 800a636:	f7ff fd0d 	bl	800a054 <find_volume>
 800a63a:	4603      	mov	r3, r0
 800a63c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3720      	adds	r7, #32
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}
 800a648:	2000e3a0 	.word	0x2000e3a0

0800a64c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b098      	sub	sp, #96	@ 0x60
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	4613      	mov	r3, r2
 800a658:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d101      	bne.n	800a664 <f_open+0x18>
 800a660:	2309      	movs	r3, #9
 800a662:	e1b7      	b.n	800a9d4 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a66a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a66c:	79fa      	ldrb	r2, [r7, #7]
 800a66e:	f107 0110 	add.w	r1, r7, #16
 800a672:	f107 0308 	add.w	r3, r7, #8
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff fcec 	bl	800a054 <find_volume>
 800a67c:	4603      	mov	r3, r0
 800a67e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a682:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a686:	2b00      	cmp	r3, #0
 800a688:	f040 819b 	bne.w	800a9c2 <f_open+0x376>
		dj.obj.fs = fs;
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	f107 0314 	add.w	r3, r7, #20
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7ff fbcb 	bl	8009e34 <follow_path>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d118      	bne.n	800a6de <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a6ac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	da03      	bge.n	800a6be <f_open+0x72>
				res = FR_INVALID_NAME;
 800a6b6:	2306      	movs	r3, #6
 800a6b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6bc:	e00f      	b.n	800a6de <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	bf8c      	ite	hi
 800a6c4:	2301      	movhi	r3, #1
 800a6c6:	2300      	movls	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	f107 0314 	add.w	r3, r7, #20
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fb1e 	bl	8008d14 <chk_lock>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a6de:	79fb      	ldrb	r3, [r7, #7]
 800a6e0:	f003 031c 	and.w	r3, r3, #28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d07f      	beq.n	800a7e8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a6e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d017      	beq.n	800a720 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6f4:	2b04      	cmp	r3, #4
 800a6f6:	d10e      	bne.n	800a716 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a6f8:	f7fe fb68 	bl	8008dcc <enq_lock>
 800a6fc:	4603      	mov	r3, r0
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d006      	beq.n	800a710 <f_open+0xc4>
 800a702:	f107 0314 	add.w	r3, r7, #20
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff facd 	bl	8009ca6 <dir_register>
 800a70c:	4603      	mov	r3, r0
 800a70e:	e000      	b.n	800a712 <f_open+0xc6>
 800a710:	2312      	movs	r3, #18
 800a712:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a716:	79fb      	ldrb	r3, [r7, #7]
 800a718:	f043 0308 	orr.w	r3, r3, #8
 800a71c:	71fb      	strb	r3, [r7, #7]
 800a71e:	e010      	b.n	800a742 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a720:	7ebb      	ldrb	r3, [r7, #26]
 800a722:	f003 0311 	and.w	r3, r3, #17
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <f_open+0xe6>
					res = FR_DENIED;
 800a72a:	2307      	movs	r3, #7
 800a72c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a730:	e007      	b.n	800a742 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a732:	79fb      	ldrb	r3, [r7, #7]
 800a734:	f003 0304 	and.w	r3, r3, #4
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <f_open+0xf6>
 800a73c:	2308      	movs	r3, #8
 800a73e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a742:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a746:	2b00      	cmp	r3, #0
 800a748:	d168      	bne.n	800a81c <f_open+0x1d0>
 800a74a:	79fb      	ldrb	r3, [r7, #7]
 800a74c:	f003 0308 	and.w	r3, r3, #8
 800a750:	2b00      	cmp	r3, #0
 800a752:	d063      	beq.n	800a81c <f_open+0x1d0>
				dw = GET_FATTIME();
 800a754:	f7fd ff78 	bl	8008648 <get_fattime>
 800a758:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a75a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a75c:	330e      	adds	r3, #14
 800a75e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe fa2d 	bl	8008bc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a768:	3316      	adds	r3, #22
 800a76a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7fe fa27 	bl	8008bc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a774:	330b      	adds	r3, #11
 800a776:	2220      	movs	r2, #32
 800a778:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a77e:	4611      	mov	r1, r2
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff f9fc 	bl	8009b7e <ld_clust>
 800a786:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a78c:	2200      	movs	r2, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fa14 	bl	8009bbc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a796:	331c      	adds	r3, #28
 800a798:	2100      	movs	r1, #0
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe fa10 	bl	8008bc0 <st_dword>
					fs->wflag = 1;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a7a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d037      	beq.n	800a81c <f_open+0x1d0>
						dw = fs->winsect;
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7b0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a7b2:	f107 0314 	add.w	r3, r7, #20
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe ff04 	bl	80095c8 <remove_chain>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a7c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d126      	bne.n	800a81c <f_open+0x1d0>
							res = move_window(fs, dw);
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fe fc4e 	bl	8009074 <move_window>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a7e2:	3a01      	subs	r2, #1
 800a7e4:	611a      	str	r2, [r3, #16]
 800a7e6:	e019      	b.n	800a81c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d115      	bne.n	800a81c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a7f0:	7ebb      	ldrb	r3, [r7, #26]
 800a7f2:	f003 0310 	and.w	r3, r3, #16
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d003      	beq.n	800a802 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a7fa:	2304      	movs	r3, #4
 800a7fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a800:	e00c      	b.n	800a81c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a802:	79fb      	ldrb	r3, [r7, #7]
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <f_open+0x1d0>
 800a80c:	7ebb      	ldrb	r3, [r7, #26]
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <f_open+0x1d0>
						res = FR_DENIED;
 800a816:	2307      	movs	r3, #7
 800a818:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a81c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a820:	2b00      	cmp	r3, #0
 800a822:	d126      	bne.n	800a872 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	f003 0308 	and.w	r3, r3, #8
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a834:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a83e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	2b01      	cmp	r3, #1
 800a848:	bf8c      	ite	hi
 800a84a:	2301      	movhi	r3, #1
 800a84c:	2300      	movls	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	f107 0314 	add.w	r3, r7, #20
 800a856:	4611      	mov	r1, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fad9 	bl	8008e10 <inc_lock>
 800a85e:	4602      	mov	r2, r0
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d102      	bne.n	800a872 <f_open+0x226>
 800a86c:	2302      	movs	r3, #2
 800a86e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a872:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a876:	2b00      	cmp	r3, #0
 800a878:	f040 80a3 	bne.w	800a9c2 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a880:	4611      	mov	r1, r2
 800a882:	4618      	mov	r0, r3
 800a884:	f7ff f97b 	bl	8009b7e <ld_clust>
 800a888:	4602      	mov	r2, r0
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a890:	331c      	adds	r3, #28
 800a892:	4618      	mov	r0, r3
 800a894:	f7fe f956 	bl	8008b44 <ld_dword>
 800a898:	4602      	mov	r2, r0
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	88da      	ldrh	r2, [r3, #6]
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	79fa      	ldrb	r2, [r7, #7]
 800a8b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	3330      	adds	r3, #48	@ 0x30
 800a8ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe f9c0 	bl	8008c5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	f003 0320 	and.w	r3, r3, #32
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d06e      	beq.n	800a9c2 <f_open+0x376>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d06a      	beq.n	800a9c2 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	895b      	ldrh	r3, [r3, #10]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	899b      	ldrh	r3, [r3, #12]
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a910:	e016      	b.n	800a940 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a916:	4618      	mov	r0, r3
 800a918:	f7fe fc69 	bl	80091ee <get_fat>
 800a91c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a91e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a920:	2b01      	cmp	r3, #1
 800a922:	d802      	bhi.n	800a92a <f_open+0x2de>
 800a924:	2302      	movs	r3, #2
 800a926:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a92a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a92c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a930:	d102      	bne.n	800a938 <f_open+0x2ec>
 800a932:	2301      	movs	r3, #1
 800a934:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a938:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a93a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a93c:	1ad3      	subs	r3, r2, r3
 800a93e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a944:	2b00      	cmp	r3, #0
 800a946:	d103      	bne.n	800a950 <f_open+0x304>
 800a948:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d8e0      	bhi.n	800a912 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a954:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a956:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d131      	bne.n	800a9c2 <f_open+0x376>
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	899b      	ldrh	r3, [r3, #12]
 800a962:	461a      	mov	r2, r3
 800a964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a966:	fbb3 f1f2 	udiv	r1, r3, r2
 800a96a:	fb01 f202 	mul.w	r2, r1, r2
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	d026      	beq.n	800a9c2 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a978:	4618      	mov	r0, r3
 800a97a:	f7fe fc19 	bl	80091b0 <clust2sect>
 800a97e:	6478      	str	r0, [r7, #68]	@ 0x44
 800a980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a982:	2b00      	cmp	r3, #0
 800a984:	d103      	bne.n	800a98e <f_open+0x342>
						res = FR_INT_ERR;
 800a986:	2302      	movs	r3, #2
 800a988:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a98c:	e019      	b.n	800a9c2 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	899b      	ldrh	r3, [r3, #12]
 800a992:	461a      	mov	r2, r3
 800a994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a996:	fbb3 f2f2 	udiv	r2, r3, r2
 800a99a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a99c:	441a      	add	r2, r3
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	7858      	ldrb	r0, [r3, #1]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6a1a      	ldr	r2, [r3, #32]
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f7fe f851 	bl	8008a58 <disk_read>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <f_open+0x376>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a9c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <f_open+0x384>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a9d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3760      	adds	r7, #96	@ 0x60
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08c      	sub	sp, #48	@ 0x30
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f107 0210 	add.w	r2, r7, #16
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7ff fda9 	bl	800a554 <validate>
 800aa02:	4603      	mov	r3, r0
 800aa04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aa08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d107      	bne.n	800aa20 <f_write+0x44>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	7d5b      	ldrb	r3, [r3, #21]
 800aa14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800aa18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <f_write+0x4a>
 800aa20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800aa24:	e16a      	b.n	800acfc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	7d1b      	ldrb	r3, [r3, #20]
 800aa2a:	f003 0302 	and.w	r3, r3, #2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <f_write+0x5a>
 800aa32:	2307      	movs	r3, #7
 800aa34:	e162      	b.n	800acfc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	699a      	ldr	r2, [r3, #24]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	441a      	add	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	f080 814c 	bcs.w	800ace0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	699b      	ldr	r3, [r3, #24]
 800aa4c:	43db      	mvns	r3, r3
 800aa4e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800aa50:	e146      	b.n	800ace0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	699b      	ldr	r3, [r3, #24]
 800aa56:	693a      	ldr	r2, [r7, #16]
 800aa58:	8992      	ldrh	r2, [r2, #12]
 800aa5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa5e:	fb01 f202 	mul.w	r2, r1, r2
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f040 80f1 	bne.w	800ac4c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	693a      	ldr	r2, [r7, #16]
 800aa70:	8992      	ldrh	r2, [r2, #12]
 800aa72:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	8952      	ldrh	r2, [r2, #10]
 800aa7a:	3a01      	subs	r2, #1
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800aa80:	69bb      	ldr	r3, [r7, #24]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d143      	bne.n	800ab0e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	699b      	ldr	r3, [r3, #24]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10c      	bne.n	800aaa8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d11a      	bne.n	800aad0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe fdf7 	bl	8009692 <create_chain>
 800aaa4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aaa6:	e013      	b.n	800aad0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d007      	beq.n	800aac0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	4619      	mov	r1, r3
 800aab6:	68f8      	ldr	r0, [r7, #12]
 800aab8:	f7fe fe83 	bl	80097c2 <clmt_clust>
 800aabc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aabe:	e007      	b.n	800aad0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	4619      	mov	r1, r3
 800aac8:	4610      	mov	r0, r2
 800aaca:	f7fe fde2 	bl	8009692 <create_chain>
 800aace:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 8109 	beq.w	800acea <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d104      	bne.n	800aae8 <f_write+0x10c>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2202      	movs	r2, #2
 800aae2:	755a      	strb	r2, [r3, #21]
 800aae4:	2302      	movs	r3, #2
 800aae6:	e109      	b.n	800acfc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaee:	d104      	bne.n	800aafa <f_write+0x11e>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	755a      	strb	r2, [r3, #21]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e100      	b.n	800acfc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aafe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d102      	bne.n	800ab0e <f_write+0x132>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab0c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	7d1b      	ldrb	r3, [r3, #20]
 800ab12:	b25b      	sxtb	r3, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da18      	bge.n	800ab4a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	7858      	ldrb	r0, [r3, #1]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6a1a      	ldr	r2, [r3, #32]
 800ab26:	2301      	movs	r3, #1
 800ab28:	f7fd ffb6 	bl	8008a98 <disk_write>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d004      	beq.n	800ab3c <f_write+0x160>
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2201      	movs	r2, #1
 800ab36:	755a      	strb	r2, [r3, #21]
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e0df      	b.n	800acfc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	7d1b      	ldrb	r3, [r3, #20]
 800ab40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab44:	b2da      	uxtb	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	4619      	mov	r1, r3
 800ab52:	4610      	mov	r0, r2
 800ab54:	f7fe fb2c 	bl	80091b0 <clust2sect>
 800ab58:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <f_write+0x18e>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2202      	movs	r2, #2
 800ab64:	755a      	strb	r2, [r3, #21]
 800ab66:	2302      	movs	r3, #2
 800ab68:	e0c8      	b.n	800acfc <f_write+0x320>
			sect += csect;
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	4413      	add	r3, r2
 800ab70:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	899b      	ldrh	r3, [r3, #12]
 800ab76:	461a      	mov	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab7e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d043      	beq.n	800ac0e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	4413      	add	r3, r2
 800ab8c:	693a      	ldr	r2, [r7, #16]
 800ab8e:	8952      	ldrh	r2, [r2, #10]
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d905      	bls.n	800aba0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	895b      	ldrh	r3, [r3, #10]
 800ab98:	461a      	mov	r2, r3
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	7858      	ldrb	r0, [r3, #1]
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	69f9      	ldr	r1, [r7, #28]
 800abaa:	f7fd ff75 	bl	8008a98 <disk_write>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d004      	beq.n	800abbe <f_write+0x1e2>
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2201      	movs	r2, #1
 800abb8:	755a      	strb	r2, [r3, #21]
 800abba:	2301      	movs	r3, #1
 800abbc:	e09e      	b.n	800acfc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6a1a      	ldr	r2, [r3, #32]
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	6a3a      	ldr	r2, [r7, #32]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d918      	bls.n	800abfe <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	6a1a      	ldr	r2, [r3, #32]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	693a      	ldr	r2, [r7, #16]
 800abdc:	8992      	ldrh	r2, [r2, #12]
 800abde:	fb02 f303 	mul.w	r3, r2, r3
 800abe2:	69fa      	ldr	r2, [r7, #28]
 800abe4:	18d1      	adds	r1, r2, r3
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	899b      	ldrh	r3, [r3, #12]
 800abea:	461a      	mov	r2, r3
 800abec:	f7fe f814 	bl	8008c18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	7d1b      	ldrb	r3, [r3, #20]
 800abf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	899b      	ldrh	r3, [r3, #12]
 800ac02:	461a      	mov	r2, r3
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
 800ac0a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ac0c:	e04b      	b.n	800aca6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	697a      	ldr	r2, [r7, #20]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d016      	beq.n	800ac46 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	699a      	ldr	r2, [r3, #24]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d210      	bcs.n	800ac46 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	7858      	ldrb	r0, [r3, #1]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac2e:	2301      	movs	r3, #1
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	f7fd ff11 	bl	8008a58 <disk_read>
 800ac36:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d004      	beq.n	800ac46 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	755a      	strb	r2, [r3, #21]
 800ac42:	2301      	movs	r3, #1
 800ac44:	e05a      	b.n	800acfc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	899b      	ldrh	r3, [r3, #12]
 800ac50:	4618      	mov	r0, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	8992      	ldrh	r2, [r2, #12]
 800ac5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac5e:	fb01 f202 	mul.w	r2, r1, r2
 800ac62:	1a9b      	subs	r3, r3, r2
 800ac64:	1ac3      	subs	r3, r0, r3
 800ac66:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ac68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d901      	bls.n	800ac74 <f_write+0x298>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	8992      	ldrh	r2, [r2, #12]
 800ac82:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac86:	fb00 f202 	mul.w	r2, r0, r2
 800ac8a:	1a9b      	subs	r3, r3, r2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac90:	69f9      	ldr	r1, [r7, #28]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7fd ffc0 	bl	8008c18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	7d1b      	ldrb	r3, [r3, #20]
 800ac9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aca0:	b2da      	uxtb	r2, r3
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800aca6:	69fa      	ldr	r2, [r7, #28]
 800aca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acaa:	4413      	add	r3, r2
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	699a      	ldr	r2, [r3, #24]
 800acb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb4:	441a      	add	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	619a      	str	r2, [r3, #24]
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	699b      	ldr	r3, [r3, #24]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	bf38      	it	cc
 800acc6:	461a      	movcc	r2, r3
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	60da      	str	r2, [r3, #12]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd2:	441a      	add	r2, r3
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	601a      	str	r2, [r3, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f47f aeb5 	bne.w	800aa52 <f_write+0x76>
 800ace8:	e000      	b.n	800acec <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800acea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	7d1b      	ldrb	r3, [r3, #20]
 800acf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3730      	adds	r7, #48	@ 0x30
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f107 0208 	add.w	r2, r7, #8
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff fc1d 	bl	800a554 <validate>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ad1e:	7dfb      	ldrb	r3, [r7, #23]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d168      	bne.n	800adf6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	7d1b      	ldrb	r3, [r3, #20]
 800ad28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d062      	beq.n	800adf6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	7d1b      	ldrb	r3, [r3, #20]
 800ad34:	b25b      	sxtb	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	da15      	bge.n	800ad66 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	7858      	ldrb	r0, [r3, #1]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	6a1a      	ldr	r2, [r3, #32]
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f7fd fea5 	bl	8008a98 <disk_write>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <f_sync+0x54>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e04f      	b.n	800adf8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	7d1b      	ldrb	r3, [r3, #20]
 800ad5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ad66:	f7fd fc6f 	bl	8008648 <get_fattime>
 800ad6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad72:	4619      	mov	r1, r3
 800ad74:	4610      	mov	r0, r2
 800ad76:	f7fe f97d 	bl	8009074 <move_window>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d138      	bne.n	800adf6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	330b      	adds	r3, #11
 800ad8e:	781a      	ldrb	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	330b      	adds	r3, #11
 800ad94:	f042 0220 	orr.w	r2, r2, #32
 800ad98:	b2d2      	uxtb	r2, r2
 800ad9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6818      	ldr	r0, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	461a      	mov	r2, r3
 800ada6:	68f9      	ldr	r1, [r7, #12]
 800ada8:	f7fe ff08 	bl	8009bbc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f103 021c 	add.w	r2, r3, #28
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7fd ff01 	bl	8008bc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3316      	adds	r3, #22
 800adc2:	6939      	ldr	r1, [r7, #16]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7fd fefb 	bl	8008bc0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	3312      	adds	r3, #18
 800adce:	2100      	movs	r1, #0
 800add0:	4618      	mov	r0, r3
 800add2:	f7fd feda 	bl	8008b8a <st_word>
					fs->wflag = 1;
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2201      	movs	r2, #1
 800adda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe f976 	bl	80090d0 <sync_fs>
 800ade4:	4603      	mov	r3, r0
 800ade6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7d1b      	ldrb	r3, [r3, #20]
 800adec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}

0800ae00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff ff7b 	bl	800ad04 <f_sync>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d118      	bne.n	800ae4a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f107 0208 	add.w	r2, r7, #8
 800ae1e:	4611      	mov	r1, r2
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fb97 	bl	800a554 <validate>
 800ae26:	4603      	mov	r3, r0
 800ae28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10c      	bne.n	800ae4a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe f879 	bl	8008f2c <dec_lock>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2200      	movs	r2, #0
 800ae48:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b090      	sub	sp, #64	@ 0x40
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f107 0208 	add.w	r2, r7, #8
 800ae64:	4611      	mov	r1, r2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff fb74 	bl	800a554 <validate>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ae72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d103      	bne.n	800ae82 <f_lseek+0x2e>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	7d5b      	ldrb	r3, [r3, #21]
 800ae7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ae82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d002      	beq.n	800ae90 <f_lseek+0x3c>
 800ae8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ae8e:	e201      	b.n	800b294 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f000 80d9 	beq.w	800b04c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aea0:	d15a      	bne.n	800af58 <f_lseek+0x104>
			tbl = fp->cltbl;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea6:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	1d1a      	adds	r2, r3, #4
 800aeac:	627a      	str	r2, [r7, #36]	@ 0x24
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	617b      	str	r3, [r7, #20]
 800aeb2:	2302      	movs	r3, #2
 800aeb4:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800aebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d03a      	beq.n	800af38 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800aec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec4:	613b      	str	r3, [r7, #16]
 800aec6:	2300      	movs	r3, #0
 800aec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aecc:	3302      	adds	r3, #2
 800aece:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800aed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed2:	60fb      	str	r3, [r7, #12]
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed6:	3301      	adds	r3, #1
 800aed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aede:	4618      	mov	r0, r3
 800aee0:	f7fe f985 	bl	80091ee <get_fat>
 800aee4:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d804      	bhi.n	800aef6 <f_lseek+0xa2>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2202      	movs	r2, #2
 800aef0:	755a      	strb	r2, [r3, #21]
 800aef2:	2302      	movs	r3, #2
 800aef4:	e1ce      	b.n	800b294 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aefc:	d104      	bne.n	800af08 <f_lseek+0xb4>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2201      	movs	r2, #1
 800af02:	755a      	strb	r2, [r3, #21]
 800af04:	2301      	movs	r3, #1
 800af06:	e1c5      	b.n	800b294 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af0e:	429a      	cmp	r2, r3
 800af10:	d0de      	beq.n	800aed0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800af12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	429a      	cmp	r2, r3
 800af18:	d809      	bhi.n	800af2e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800af1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1c:	1d1a      	adds	r2, r3, #4
 800af1e:	627a      	str	r2, [r7, #36]	@ 0x24
 800af20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af26:	1d1a      	adds	r2, r3, #4
 800af28:	627a      	str	r2, [r7, #36]	@ 0x24
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af34:	429a      	cmp	r2, r3
 800af36:	d3c4      	bcc.n	800aec2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af3e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800af40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	429a      	cmp	r2, r3
 800af46:	d803      	bhi.n	800af50 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	2200      	movs	r2, #0
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	e19f      	b.n	800b290 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800af50:	2311      	movs	r3, #17
 800af52:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800af56:	e19b      	b.n	800b290 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	683a      	ldr	r2, [r7, #0]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d902      	bls.n	800af68 <f_lseek+0x114>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 818d 	beq.w	800b290 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	3b01      	subs	r3, #1
 800af7a:	4619      	mov	r1, r3
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7fe fc20 	bl	80097c2 <clmt_clust>
 800af82:	4602      	mov	r2, r0
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	4619      	mov	r1, r3
 800af90:	4610      	mov	r0, r2
 800af92:	f7fe f90d 	bl	80091b0 <clust2sect>
 800af96:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d104      	bne.n	800afa8 <f_lseek+0x154>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2202      	movs	r2, #2
 800afa2:	755a      	strb	r2, [r3, #21]
 800afa4:	2302      	movs	r3, #2
 800afa6:	e175      	b.n	800b294 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	3b01      	subs	r3, #1
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	8992      	ldrh	r2, [r2, #12]
 800afb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800afb4:	68ba      	ldr	r2, [r7, #8]
 800afb6:	8952      	ldrh	r2, [r2, #10]
 800afb8:	3a01      	subs	r2, #1
 800afba:	4013      	ands	r3, r2
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	4413      	add	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	8992      	ldrh	r2, [r2, #12]
 800afca:	fbb3 f1f2 	udiv	r1, r3, r2
 800afce:	fb01 f202 	mul.w	r2, r1, r2
 800afd2:	1a9b      	subs	r3, r3, r2
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f000 815b 	beq.w	800b290 <f_lseek+0x43c>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	69ba      	ldr	r2, [r7, #24]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	f000 8155 	beq.w	800b290 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	7d1b      	ldrb	r3, [r3, #20]
 800afea:	b25b      	sxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	da18      	bge.n	800b022 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	7858      	ldrb	r0, [r3, #1]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1a      	ldr	r2, [r3, #32]
 800affe:	2301      	movs	r3, #1
 800b000:	f7fd fd4a 	bl	8008a98 <disk_write>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <f_lseek+0x1c0>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2201      	movs	r2, #1
 800b00e:	755a      	strb	r2, [r3, #21]
 800b010:	2301      	movs	r3, #1
 800b012:	e13f      	b.n	800b294 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	7d1b      	ldrb	r3, [r3, #20]
 800b018:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b01c:	b2da      	uxtb	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	7858      	ldrb	r0, [r3, #1]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b02c:	2301      	movs	r3, #1
 800b02e:	69ba      	ldr	r2, [r7, #24]
 800b030:	f7fd fd12 	bl	8008a58 <disk_read>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d004      	beq.n	800b044 <f_lseek+0x1f0>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2201      	movs	r2, #1
 800b03e:	755a      	strb	r2, [r3, #21]
 800b040:	2301      	movs	r3, #1
 800b042:	e127      	b.n	800b294 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	69ba      	ldr	r2, [r7, #24]
 800b048:	621a      	str	r2, [r3, #32]
 800b04a:	e121      	b.n	800b290 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	68db      	ldr	r3, [r3, #12]
 800b050:	683a      	ldr	r2, [r7, #0]
 800b052:	429a      	cmp	r2, r3
 800b054:	d908      	bls.n	800b068 <f_lseek+0x214>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	7d1b      	ldrb	r3, [r3, #20]
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d102      	bne.n	800b068 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	637b      	str	r3, [r7, #52]	@ 0x34
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b076:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 80b5 	beq.w	800b1ea <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	895b      	ldrh	r3, [r3, #10]
 800b084:	461a      	mov	r2, r3
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	899b      	ldrh	r3, [r3, #12]
 800b08a:	fb02 f303 	mul.w	r3, r2, r3
 800b08e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b090:	6a3b      	ldr	r3, [r7, #32]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d01b      	beq.n	800b0ce <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	1e5a      	subs	r2, r3, #1
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	1e59      	subs	r1, r3, #1
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d30f      	bcc.n	800b0ce <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	1e5a      	subs	r2, r3, #1
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	425b      	negs	r3, r3
 800b0b6:	401a      	ands	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	699b      	ldr	r3, [r3, #24]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	69db      	ldr	r3, [r3, #28]
 800b0ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b0cc:	e022      	b.n	800b114 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d119      	bne.n	800b10e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2100      	movs	r1, #0
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fe fad7 	bl	8009692 <create_chain>
 800b0e4:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d104      	bne.n	800b0f6 <f_lseek+0x2a2>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	755a      	strb	r2, [r3, #21]
 800b0f2:	2302      	movs	r3, #2
 800b0f4:	e0ce      	b.n	800b294 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0fc:	d104      	bne.n	800b108 <f_lseek+0x2b4>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	755a      	strb	r2, [r3, #21]
 800b104:	2301      	movs	r3, #1
 800b106:	e0c5      	b.n	800b294 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b10c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b112:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b116:	2b00      	cmp	r3, #0
 800b118:	d067      	beq.n	800b1ea <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b11a:	e03a      	b.n	800b192 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699a      	ldr	r2, [r3, #24]
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	441a      	add	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	7d1b      	ldrb	r3, [r3, #20]
 800b134:	f003 0302 	and.w	r3, r3, #2
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b140:	4618      	mov	r0, r3
 800b142:	f7fe faa6 	bl	8009692 <create_chain>
 800b146:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d108      	bne.n	800b160 <f_lseek+0x30c>
							ofs = 0; break;
 800b14e:	2300      	movs	r3, #0
 800b150:	603b      	str	r3, [r7, #0]
 800b152:	e022      	b.n	800b19a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b158:	4618      	mov	r0, r3
 800b15a:	f7fe f848 	bl	80091ee <get_fat>
 800b15e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b162:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b166:	d104      	bne.n	800b172 <f_lseek+0x31e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	755a      	strb	r2, [r3, #21]
 800b16e:	2301      	movs	r3, #1
 800b170:	e090      	b.n	800b294 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b174:	2b01      	cmp	r3, #1
 800b176:	d904      	bls.n	800b182 <f_lseek+0x32e>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	699b      	ldr	r3, [r3, #24]
 800b17c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b17e:	429a      	cmp	r2, r3
 800b180:	d304      	bcc.n	800b18c <f_lseek+0x338>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2202      	movs	r2, #2
 800b186:	755a      	strb	r2, [r3, #21]
 800b188:	2302      	movs	r3, #2
 800b18a:	e083      	b.n	800b294 <f_lseek+0x440>
					fp->clust = clst;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b190:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	429a      	cmp	r2, r3
 800b198:	d8c0      	bhi.n	800b11c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	699a      	ldr	r2, [r3, #24]
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	441a      	add	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	899b      	ldrh	r3, [r3, #12]
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1b2:	fb01 f202 	mul.w	r2, r1, r2
 800b1b6:	1a9b      	subs	r3, r3, r2
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d016      	beq.n	800b1ea <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7fd fff5 	bl	80091b0 <clust2sect>
 800b1c6:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d104      	bne.n	800b1d8 <f_lseek+0x384>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2202      	movs	r2, #2
 800b1d2:	755a      	strb	r2, [r3, #21]
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	e05d      	b.n	800b294 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	899b      	ldrh	r3, [r3, #12]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	683b      	ldr	r3, [r7, #0]
 800b1e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1e6:	4413      	add	r3, r2
 800b1e8:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	699a      	ldr	r2, [r3, #24]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d90a      	bls.n	800b20c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	699a      	ldr	r2, [r3, #24]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	7d1b      	ldrb	r3, [r3, #20]
 800b202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b206:	b2da      	uxtb	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	8992      	ldrh	r2, [r2, #12]
 800b214:	fbb3 f1f2 	udiv	r1, r3, r2
 800b218:	fb01 f202 	mul.w	r2, r1, r2
 800b21c:	1a9b      	subs	r3, r3, r2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d036      	beq.n	800b290 <f_lseek+0x43c>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b228:	429a      	cmp	r2, r3
 800b22a:	d031      	beq.n	800b290 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	7d1b      	ldrb	r3, [r3, #20]
 800b230:	b25b      	sxtb	r3, r3
 800b232:	2b00      	cmp	r3, #0
 800b234:	da18      	bge.n	800b268 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	7858      	ldrb	r0, [r3, #1]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a1a      	ldr	r2, [r3, #32]
 800b244:	2301      	movs	r3, #1
 800b246:	f7fd fc27 	bl	8008a98 <disk_write>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d004      	beq.n	800b25a <f_lseek+0x406>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	755a      	strb	r2, [r3, #21]
 800b256:	2301      	movs	r3, #1
 800b258:	e01c      	b.n	800b294 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	7d1b      	ldrb	r3, [r3, #20]
 800b25e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b262:	b2da      	uxtb	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	7858      	ldrb	r0, [r3, #1]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b272:	2301      	movs	r3, #1
 800b274:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b276:	f7fd fbef 	bl	8008a58 <disk_read>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d004      	beq.n	800b28a <f_lseek+0x436>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	755a      	strb	r2, [r3, #21]
 800b286:	2301      	movs	r3, #1
 800b288:	e004      	b.n	800b294 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b28e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b290:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b294:	4618      	mov	r0, r3
 800b296:	3740      	adds	r7, #64	@ 0x40
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b29c:	b480      	push	{r7}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2b4:	7a5b      	ldrb	r3, [r3, #9]
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d131      	bne.n	800b320 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b2bc:	4b1c      	ldr	r3, [pc, #112]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2be:	7a5b      	ldrb	r3, [r3, #9]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2c6:	2100      	movs	r1, #0
 800b2c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b2ca:	4b19      	ldr	r3, [pc, #100]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2cc:	7a5b      	ldrb	r3, [r3, #9]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	4a17      	ldr	r2, [pc, #92]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4413      	add	r3, r2
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2da:	4b15      	ldr	r3, [pc, #84]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2dc:	7a5b      	ldrb	r3, [r3, #9]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	4b13      	ldr	r3, [pc, #76]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2e4:	4413      	add	r3, r2
 800b2e6:	79fa      	ldrb	r2, [r7, #7]
 800b2e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2ea:	4b11      	ldr	r3, [pc, #68]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2ec:	7a5b      	ldrb	r3, [r3, #9]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	1c5a      	adds	r2, r3, #1
 800b2f2:	b2d1      	uxtb	r1, r2
 800b2f4:	4a0e      	ldr	r2, [pc, #56]	@ (800b330 <FATFS_LinkDriverEx+0x94>)
 800b2f6:	7251      	strb	r1, [r2, #9]
 800b2f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2fa:	7dbb      	ldrb	r3, [r7, #22]
 800b2fc:	3330      	adds	r3, #48	@ 0x30
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	3301      	adds	r3, #1
 800b308:	223a      	movs	r2, #58	@ 0x3a
 800b30a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	3302      	adds	r3, #2
 800b310:	222f      	movs	r2, #47	@ 0x2f
 800b312:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	3303      	adds	r3, #3
 800b318:	2200      	movs	r2, #0
 800b31a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b320:	7dfb      	ldrb	r3, [r7, #23]
}
 800b322:	4618      	mov	r0, r3
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	2000e3c8 	.word	0x2000e3c8

0800b334 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b33e:	2200      	movs	r2, #0
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7ff ffaa 	bl	800b29c <FATFS_LinkDriverEx>
 800b348:	4603      	mov	r3, r0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3708      	adds	r7, #8
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <setbuf>:
 800b352:	fab1 f281 	clz	r2, r1
 800b356:	0952      	lsrs	r2, r2, #5
 800b358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b35c:	0052      	lsls	r2, r2, #1
 800b35e:	f000 b801 	b.w	800b364 <setvbuf>
	...

0800b364 <setvbuf>:
 800b364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b368:	461d      	mov	r5, r3
 800b36a:	4b57      	ldr	r3, [pc, #348]	@ (800b4c8 <setvbuf+0x164>)
 800b36c:	681f      	ldr	r7, [r3, #0]
 800b36e:	4604      	mov	r4, r0
 800b370:	460e      	mov	r6, r1
 800b372:	4690      	mov	r8, r2
 800b374:	b127      	cbz	r7, 800b380 <setvbuf+0x1c>
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	b913      	cbnz	r3, 800b380 <setvbuf+0x1c>
 800b37a:	4638      	mov	r0, r7
 800b37c:	f000 f9d6 	bl	800b72c <__sinit>
 800b380:	f1b8 0f02 	cmp.w	r8, #2
 800b384:	d006      	beq.n	800b394 <setvbuf+0x30>
 800b386:	f1b8 0f01 	cmp.w	r8, #1
 800b38a:	f200 809a 	bhi.w	800b4c2 <setvbuf+0x15e>
 800b38e:	2d00      	cmp	r5, #0
 800b390:	f2c0 8097 	blt.w	800b4c2 <setvbuf+0x15e>
 800b394:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b396:	07d9      	lsls	r1, r3, #31
 800b398:	d405      	bmi.n	800b3a6 <setvbuf+0x42>
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	059a      	lsls	r2, r3, #22
 800b39e:	d402      	bmi.n	800b3a6 <setvbuf+0x42>
 800b3a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3a2:	f000 fb66 	bl	800ba72 <__retarget_lock_acquire_recursive>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	f001 fc59 	bl	800cc60 <_fflush_r>
 800b3ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b3b0:	b141      	cbz	r1, 800b3c4 <setvbuf+0x60>
 800b3b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b3b6:	4299      	cmp	r1, r3
 800b3b8:	d002      	beq.n	800b3c0 <setvbuf+0x5c>
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	f000 fb5c 	bl	800ba78 <_free_r>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	61a3      	str	r3, [r4, #24]
 800b3c8:	6063      	str	r3, [r4, #4]
 800b3ca:	89a3      	ldrh	r3, [r4, #12]
 800b3cc:	061b      	lsls	r3, r3, #24
 800b3ce:	d503      	bpl.n	800b3d8 <setvbuf+0x74>
 800b3d0:	6921      	ldr	r1, [r4, #16]
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f000 fb50 	bl	800ba78 <_free_r>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	f1b8 0f02 	cmp.w	r8, #2
 800b3e6:	81a3      	strh	r3, [r4, #12]
 800b3e8:	d061      	beq.n	800b4ae <setvbuf+0x14a>
 800b3ea:	ab01      	add	r3, sp, #4
 800b3ec:	466a      	mov	r2, sp
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f000 f9d1 	bl	800b798 <__swhatbuf_r>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	4318      	orrs	r0, r3
 800b3fa:	81a0      	strh	r0, [r4, #12]
 800b3fc:	bb2d      	cbnz	r5, 800b44a <setvbuf+0xe6>
 800b3fe:	9d00      	ldr	r5, [sp, #0]
 800b400:	4628      	mov	r0, r5
 800b402:	f000 ffe9 	bl	800c3d8 <malloc>
 800b406:	4606      	mov	r6, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d152      	bne.n	800b4b2 <setvbuf+0x14e>
 800b40c:	f8dd 9000 	ldr.w	r9, [sp]
 800b410:	45a9      	cmp	r9, r5
 800b412:	d140      	bne.n	800b496 <setvbuf+0x132>
 800b414:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41c:	f043 0202 	orr.w	r2, r3, #2
 800b420:	81a2      	strh	r2, [r4, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	60a2      	str	r2, [r4, #8]
 800b426:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b42a:	6022      	str	r2, [r4, #0]
 800b42c:	6122      	str	r2, [r4, #16]
 800b42e:	2201      	movs	r2, #1
 800b430:	6162      	str	r2, [r4, #20]
 800b432:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b434:	07d6      	lsls	r6, r2, #31
 800b436:	d404      	bmi.n	800b442 <setvbuf+0xde>
 800b438:	0598      	lsls	r0, r3, #22
 800b43a:	d402      	bmi.n	800b442 <setvbuf+0xde>
 800b43c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b43e:	f000 fb19 	bl	800ba74 <__retarget_lock_release_recursive>
 800b442:	4628      	mov	r0, r5
 800b444:	b003      	add	sp, #12
 800b446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b44a:	2e00      	cmp	r6, #0
 800b44c:	d0d8      	beq.n	800b400 <setvbuf+0x9c>
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	b913      	cbnz	r3, 800b458 <setvbuf+0xf4>
 800b452:	4638      	mov	r0, r7
 800b454:	f000 f96a 	bl	800b72c <__sinit>
 800b458:	f1b8 0f01 	cmp.w	r8, #1
 800b45c:	bf08      	it	eq
 800b45e:	89a3      	ldrheq	r3, [r4, #12]
 800b460:	6026      	str	r6, [r4, #0]
 800b462:	bf04      	itt	eq
 800b464:	f043 0301 	orreq.w	r3, r3, #1
 800b468:	81a3      	strheq	r3, [r4, #12]
 800b46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b46e:	f013 0208 	ands.w	r2, r3, #8
 800b472:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b476:	d01e      	beq.n	800b4b6 <setvbuf+0x152>
 800b478:	07d9      	lsls	r1, r3, #31
 800b47a:	bf41      	itttt	mi
 800b47c:	2200      	movmi	r2, #0
 800b47e:	426d      	negmi	r5, r5
 800b480:	60a2      	strmi	r2, [r4, #8]
 800b482:	61a5      	strmi	r5, [r4, #24]
 800b484:	bf58      	it	pl
 800b486:	60a5      	strpl	r5, [r4, #8]
 800b488:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b48a:	07d2      	lsls	r2, r2, #31
 800b48c:	d401      	bmi.n	800b492 <setvbuf+0x12e>
 800b48e:	059b      	lsls	r3, r3, #22
 800b490:	d513      	bpl.n	800b4ba <setvbuf+0x156>
 800b492:	2500      	movs	r5, #0
 800b494:	e7d5      	b.n	800b442 <setvbuf+0xde>
 800b496:	4648      	mov	r0, r9
 800b498:	f000 ff9e 	bl	800c3d8 <malloc>
 800b49c:	4606      	mov	r6, r0
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d0b8      	beq.n	800b414 <setvbuf+0xb0>
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	464d      	mov	r5, r9
 800b4ac:	e7cf      	b.n	800b44e <setvbuf+0xea>
 800b4ae:	2500      	movs	r5, #0
 800b4b0:	e7b2      	b.n	800b418 <setvbuf+0xb4>
 800b4b2:	46a9      	mov	r9, r5
 800b4b4:	e7f5      	b.n	800b4a2 <setvbuf+0x13e>
 800b4b6:	60a2      	str	r2, [r4, #8]
 800b4b8:	e7e6      	b.n	800b488 <setvbuf+0x124>
 800b4ba:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4bc:	f000 fada 	bl	800ba74 <__retarget_lock_release_recursive>
 800b4c0:	e7e7      	b.n	800b492 <setvbuf+0x12e>
 800b4c2:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b4c6:	e7bc      	b.n	800b442 <setvbuf+0xde>
 800b4c8:	20000044 	.word	0x20000044

0800b4cc <sniprintf>:
 800b4cc:	b40c      	push	{r2, r3}
 800b4ce:	b530      	push	{r4, r5, lr}
 800b4d0:	4b17      	ldr	r3, [pc, #92]	@ (800b530 <sniprintf+0x64>)
 800b4d2:	1e0c      	subs	r4, r1, #0
 800b4d4:	681d      	ldr	r5, [r3, #0]
 800b4d6:	b09d      	sub	sp, #116	@ 0x74
 800b4d8:	da08      	bge.n	800b4ec <sniprintf+0x20>
 800b4da:	238b      	movs	r3, #139	@ 0x8b
 800b4dc:	602b      	str	r3, [r5, #0]
 800b4de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4e2:	b01d      	add	sp, #116	@ 0x74
 800b4e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4e8:	b002      	add	sp, #8
 800b4ea:	4770      	bx	lr
 800b4ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b4f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b4f4:	bf14      	ite	ne
 800b4f6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b4fa:	4623      	moveq	r3, r4
 800b4fc:	9304      	str	r3, [sp, #16]
 800b4fe:	9307      	str	r3, [sp, #28]
 800b500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b504:	9002      	str	r0, [sp, #8]
 800b506:	9006      	str	r0, [sp, #24]
 800b508:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b50c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b50e:	ab21      	add	r3, sp, #132	@ 0x84
 800b510:	a902      	add	r1, sp, #8
 800b512:	4628      	mov	r0, r5
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	f000 fb55 	bl	800bbc4 <_svfiprintf_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	bfbc      	itt	lt
 800b51e:	238b      	movlt	r3, #139	@ 0x8b
 800b520:	602b      	strlt	r3, [r5, #0]
 800b522:	2c00      	cmp	r4, #0
 800b524:	d0dd      	beq.n	800b4e2 <sniprintf+0x16>
 800b526:	9b02      	ldr	r3, [sp, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	e7d9      	b.n	800b4e2 <sniprintf+0x16>
 800b52e:	bf00      	nop
 800b530:	20000044 	.word	0x20000044

0800b534 <siscanf>:
 800b534:	b40e      	push	{r1, r2, r3}
 800b536:	b530      	push	{r4, r5, lr}
 800b538:	b09c      	sub	sp, #112	@ 0x70
 800b53a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b53c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b540:	f854 5b04 	ldr.w	r5, [r4], #4
 800b544:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b548:	9002      	str	r0, [sp, #8]
 800b54a:	9006      	str	r0, [sp, #24]
 800b54c:	f7f4 fe40 	bl	80001d0 <strlen>
 800b550:	4b0b      	ldr	r3, [pc, #44]	@ (800b580 <siscanf+0x4c>)
 800b552:	9003      	str	r0, [sp, #12]
 800b554:	9007      	str	r0, [sp, #28]
 800b556:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b558:	480a      	ldr	r0, [pc, #40]	@ (800b584 <siscanf+0x50>)
 800b55a:	9401      	str	r4, [sp, #4]
 800b55c:	2300      	movs	r3, #0
 800b55e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b560:	9314      	str	r3, [sp, #80]	@ 0x50
 800b562:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b566:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b56a:	462a      	mov	r2, r5
 800b56c:	4623      	mov	r3, r4
 800b56e:	a902      	add	r1, sp, #8
 800b570:	6800      	ldr	r0, [r0, #0]
 800b572:	f000 fc7b 	bl	800be6c <__ssvfiscanf_r>
 800b576:	b01c      	add	sp, #112	@ 0x70
 800b578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b57c:	b003      	add	sp, #12
 800b57e:	4770      	bx	lr
 800b580:	0800b5ab 	.word	0x0800b5ab
 800b584:	20000044 	.word	0x20000044

0800b588 <__sread>:
 800b588:	b510      	push	{r4, lr}
 800b58a:	460c      	mov	r4, r1
 800b58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b590:	f000 fa20 	bl	800b9d4 <_read_r>
 800b594:	2800      	cmp	r0, #0
 800b596:	bfab      	itete	ge
 800b598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b59a:	89a3      	ldrhlt	r3, [r4, #12]
 800b59c:	181b      	addge	r3, r3, r0
 800b59e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b5a2:	bfac      	ite	ge
 800b5a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b5a6:	81a3      	strhlt	r3, [r4, #12]
 800b5a8:	bd10      	pop	{r4, pc}

0800b5aa <__seofread>:
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	4770      	bx	lr

0800b5ae <__swrite>:
 800b5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b2:	461f      	mov	r7, r3
 800b5b4:	898b      	ldrh	r3, [r1, #12]
 800b5b6:	05db      	lsls	r3, r3, #23
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	4616      	mov	r6, r2
 800b5be:	d505      	bpl.n	800b5cc <__swrite+0x1e>
 800b5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c4:	2302      	movs	r3, #2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f000 f9f2 	bl	800b9b0 <_lseek_r>
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	4632      	mov	r2, r6
 800b5da:	463b      	mov	r3, r7
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e2:	f000 ba09 	b.w	800b9f8 <_write_r>

0800b5e6 <__sseek>:
 800b5e6:	b510      	push	{r4, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ee:	f000 f9df 	bl	800b9b0 <_lseek_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	bf15      	itete	ne
 800b5f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b602:	81a3      	strheq	r3, [r4, #12]
 800b604:	bf18      	it	ne
 800b606:	81a3      	strhne	r3, [r4, #12]
 800b608:	bd10      	pop	{r4, pc}

0800b60a <__sclose>:
 800b60a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b60e:	f000 b99d 	b.w	800b94c <_close_r>
	...

0800b614 <std>:
 800b614:	2300      	movs	r3, #0
 800b616:	b510      	push	{r4, lr}
 800b618:	4604      	mov	r4, r0
 800b61a:	e9c0 3300 	strd	r3, r3, [r0]
 800b61e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b622:	6083      	str	r3, [r0, #8]
 800b624:	8181      	strh	r1, [r0, #12]
 800b626:	6643      	str	r3, [r0, #100]	@ 0x64
 800b628:	81c2      	strh	r2, [r0, #14]
 800b62a:	6183      	str	r3, [r0, #24]
 800b62c:	4619      	mov	r1, r3
 800b62e:	2208      	movs	r2, #8
 800b630:	305c      	adds	r0, #92	@ 0x5c
 800b632:	f000 f983 	bl	800b93c <memset>
 800b636:	4b0d      	ldr	r3, [pc, #52]	@ (800b66c <std+0x58>)
 800b638:	6263      	str	r3, [r4, #36]	@ 0x24
 800b63a:	4b0d      	ldr	r3, [pc, #52]	@ (800b670 <std+0x5c>)
 800b63c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b63e:	4b0d      	ldr	r3, [pc, #52]	@ (800b674 <std+0x60>)
 800b640:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b642:	4b0d      	ldr	r3, [pc, #52]	@ (800b678 <std+0x64>)
 800b644:	6323      	str	r3, [r4, #48]	@ 0x30
 800b646:	4b0d      	ldr	r3, [pc, #52]	@ (800b67c <std+0x68>)
 800b648:	6224      	str	r4, [r4, #32]
 800b64a:	429c      	cmp	r4, r3
 800b64c:	d006      	beq.n	800b65c <std+0x48>
 800b64e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b652:	4294      	cmp	r4, r2
 800b654:	d002      	beq.n	800b65c <std+0x48>
 800b656:	33d0      	adds	r3, #208	@ 0xd0
 800b658:	429c      	cmp	r4, r3
 800b65a:	d105      	bne.n	800b668 <std+0x54>
 800b65c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b664:	f000 ba04 	b.w	800ba70 <__retarget_lock_init_recursive>
 800b668:	bd10      	pop	{r4, pc}
 800b66a:	bf00      	nop
 800b66c:	0800b589 	.word	0x0800b589
 800b670:	0800b5af 	.word	0x0800b5af
 800b674:	0800b5e7 	.word	0x0800b5e7
 800b678:	0800b60b 	.word	0x0800b60b
 800b67c:	2000e3d4 	.word	0x2000e3d4

0800b680 <stdio_exit_handler>:
 800b680:	4a02      	ldr	r2, [pc, #8]	@ (800b68c <stdio_exit_handler+0xc>)
 800b682:	4903      	ldr	r1, [pc, #12]	@ (800b690 <stdio_exit_handler+0x10>)
 800b684:	4803      	ldr	r0, [pc, #12]	@ (800b694 <stdio_exit_handler+0x14>)
 800b686:	f000 b869 	b.w	800b75c <_fwalk_sglue>
 800b68a:	bf00      	nop
 800b68c:	20000038 	.word	0x20000038
 800b690:	0800cc61 	.word	0x0800cc61
 800b694:	20000048 	.word	0x20000048

0800b698 <cleanup_stdio>:
 800b698:	6841      	ldr	r1, [r0, #4]
 800b69a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6cc <cleanup_stdio+0x34>)
 800b69c:	4299      	cmp	r1, r3
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	d001      	beq.n	800b6a8 <cleanup_stdio+0x10>
 800b6a4:	f001 fadc 	bl	800cc60 <_fflush_r>
 800b6a8:	68a1      	ldr	r1, [r4, #8]
 800b6aa:	4b09      	ldr	r3, [pc, #36]	@ (800b6d0 <cleanup_stdio+0x38>)
 800b6ac:	4299      	cmp	r1, r3
 800b6ae:	d002      	beq.n	800b6b6 <cleanup_stdio+0x1e>
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f001 fad5 	bl	800cc60 <_fflush_r>
 800b6b6:	68e1      	ldr	r1, [r4, #12]
 800b6b8:	4b06      	ldr	r3, [pc, #24]	@ (800b6d4 <cleanup_stdio+0x3c>)
 800b6ba:	4299      	cmp	r1, r3
 800b6bc:	d004      	beq.n	800b6c8 <cleanup_stdio+0x30>
 800b6be:	4620      	mov	r0, r4
 800b6c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c4:	f001 bacc 	b.w	800cc60 <_fflush_r>
 800b6c8:	bd10      	pop	{r4, pc}
 800b6ca:	bf00      	nop
 800b6cc:	2000e3d4 	.word	0x2000e3d4
 800b6d0:	2000e43c 	.word	0x2000e43c
 800b6d4:	2000e4a4 	.word	0x2000e4a4

0800b6d8 <global_stdio_init.part.0>:
 800b6d8:	b510      	push	{r4, lr}
 800b6da:	4b0b      	ldr	r3, [pc, #44]	@ (800b708 <global_stdio_init.part.0+0x30>)
 800b6dc:	4c0b      	ldr	r4, [pc, #44]	@ (800b70c <global_stdio_init.part.0+0x34>)
 800b6de:	4a0c      	ldr	r2, [pc, #48]	@ (800b710 <global_stdio_init.part.0+0x38>)
 800b6e0:	601a      	str	r2, [r3, #0]
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	2104      	movs	r1, #4
 800b6e8:	f7ff ff94 	bl	800b614 <std>
 800b6ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	2109      	movs	r1, #9
 800b6f4:	f7ff ff8e 	bl	800b614 <std>
 800b6f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b6fc:	2202      	movs	r2, #2
 800b6fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b702:	2112      	movs	r1, #18
 800b704:	f7ff bf86 	b.w	800b614 <std>
 800b708:	2000e50c 	.word	0x2000e50c
 800b70c:	2000e3d4 	.word	0x2000e3d4
 800b710:	0800b681 	.word	0x0800b681

0800b714 <__sfp_lock_acquire>:
 800b714:	4801      	ldr	r0, [pc, #4]	@ (800b71c <__sfp_lock_acquire+0x8>)
 800b716:	f000 b9ac 	b.w	800ba72 <__retarget_lock_acquire_recursive>
 800b71a:	bf00      	nop
 800b71c:	2000e515 	.word	0x2000e515

0800b720 <__sfp_lock_release>:
 800b720:	4801      	ldr	r0, [pc, #4]	@ (800b728 <__sfp_lock_release+0x8>)
 800b722:	f000 b9a7 	b.w	800ba74 <__retarget_lock_release_recursive>
 800b726:	bf00      	nop
 800b728:	2000e515 	.word	0x2000e515

0800b72c <__sinit>:
 800b72c:	b510      	push	{r4, lr}
 800b72e:	4604      	mov	r4, r0
 800b730:	f7ff fff0 	bl	800b714 <__sfp_lock_acquire>
 800b734:	6a23      	ldr	r3, [r4, #32]
 800b736:	b11b      	cbz	r3, 800b740 <__sinit+0x14>
 800b738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b73c:	f7ff bff0 	b.w	800b720 <__sfp_lock_release>
 800b740:	4b04      	ldr	r3, [pc, #16]	@ (800b754 <__sinit+0x28>)
 800b742:	6223      	str	r3, [r4, #32]
 800b744:	4b04      	ldr	r3, [pc, #16]	@ (800b758 <__sinit+0x2c>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1f5      	bne.n	800b738 <__sinit+0xc>
 800b74c:	f7ff ffc4 	bl	800b6d8 <global_stdio_init.part.0>
 800b750:	e7f2      	b.n	800b738 <__sinit+0xc>
 800b752:	bf00      	nop
 800b754:	0800b699 	.word	0x0800b699
 800b758:	2000e50c 	.word	0x2000e50c

0800b75c <_fwalk_sglue>:
 800b75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b760:	4607      	mov	r7, r0
 800b762:	4688      	mov	r8, r1
 800b764:	4614      	mov	r4, r2
 800b766:	2600      	movs	r6, #0
 800b768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b76c:	f1b9 0901 	subs.w	r9, r9, #1
 800b770:	d505      	bpl.n	800b77e <_fwalk_sglue+0x22>
 800b772:	6824      	ldr	r4, [r4, #0]
 800b774:	2c00      	cmp	r4, #0
 800b776:	d1f7      	bne.n	800b768 <_fwalk_sglue+0xc>
 800b778:	4630      	mov	r0, r6
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	89ab      	ldrh	r3, [r5, #12]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d907      	bls.n	800b794 <_fwalk_sglue+0x38>
 800b784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b788:	3301      	adds	r3, #1
 800b78a:	d003      	beq.n	800b794 <_fwalk_sglue+0x38>
 800b78c:	4629      	mov	r1, r5
 800b78e:	4638      	mov	r0, r7
 800b790:	47c0      	blx	r8
 800b792:	4306      	orrs	r6, r0
 800b794:	3568      	adds	r5, #104	@ 0x68
 800b796:	e7e9      	b.n	800b76c <_fwalk_sglue+0x10>

0800b798 <__swhatbuf_r>:
 800b798:	b570      	push	{r4, r5, r6, lr}
 800b79a:	460c      	mov	r4, r1
 800b79c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a0:	2900      	cmp	r1, #0
 800b7a2:	b096      	sub	sp, #88	@ 0x58
 800b7a4:	4615      	mov	r5, r2
 800b7a6:	461e      	mov	r6, r3
 800b7a8:	da0d      	bge.n	800b7c6 <__swhatbuf_r+0x2e>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7b0:	f04f 0100 	mov.w	r1, #0
 800b7b4:	bf14      	ite	ne
 800b7b6:	2340      	movne	r3, #64	@ 0x40
 800b7b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7bc:	2000      	movs	r0, #0
 800b7be:	6031      	str	r1, [r6, #0]
 800b7c0:	602b      	str	r3, [r5, #0]
 800b7c2:	b016      	add	sp, #88	@ 0x58
 800b7c4:	bd70      	pop	{r4, r5, r6, pc}
 800b7c6:	466a      	mov	r2, sp
 800b7c8:	f000 f8d0 	bl	800b96c <_fstat_r>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	dbec      	blt.n	800b7aa <__swhatbuf_r+0x12>
 800b7d0:	9901      	ldr	r1, [sp, #4]
 800b7d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7da:	4259      	negs	r1, r3
 800b7dc:	4159      	adcs	r1, r3
 800b7de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7e2:	e7eb      	b.n	800b7bc <__swhatbuf_r+0x24>

0800b7e4 <__smakebuf_r>:
 800b7e4:	898b      	ldrh	r3, [r1, #12]
 800b7e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7e8:	079d      	lsls	r5, r3, #30
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460c      	mov	r4, r1
 800b7ee:	d507      	bpl.n	800b800 <__smakebuf_r+0x1c>
 800b7f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	6123      	str	r3, [r4, #16]
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	6163      	str	r3, [r4, #20]
 800b7fc:	b003      	add	sp, #12
 800b7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b800:	ab01      	add	r3, sp, #4
 800b802:	466a      	mov	r2, sp
 800b804:	f7ff ffc8 	bl	800b798 <__swhatbuf_r>
 800b808:	9f00      	ldr	r7, [sp, #0]
 800b80a:	4605      	mov	r5, r0
 800b80c:	4639      	mov	r1, r7
 800b80e:	4630      	mov	r0, r6
 800b810:	f000 fe0c 	bl	800c42c <_malloc_r>
 800b814:	b948      	cbnz	r0, 800b82a <__smakebuf_r+0x46>
 800b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81a:	059a      	lsls	r2, r3, #22
 800b81c:	d4ee      	bmi.n	800b7fc <__smakebuf_r+0x18>
 800b81e:	f023 0303 	bic.w	r3, r3, #3
 800b822:	f043 0302 	orr.w	r3, r3, #2
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	e7e2      	b.n	800b7f0 <__smakebuf_r+0xc>
 800b82a:	89a3      	ldrh	r3, [r4, #12]
 800b82c:	6020      	str	r0, [r4, #0]
 800b82e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b832:	81a3      	strh	r3, [r4, #12]
 800b834:	9b01      	ldr	r3, [sp, #4]
 800b836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b83a:	b15b      	cbz	r3, 800b854 <__smakebuf_r+0x70>
 800b83c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b840:	4630      	mov	r0, r6
 800b842:	f000 f8a5 	bl	800b990 <_isatty_r>
 800b846:	b128      	cbz	r0, 800b854 <__smakebuf_r+0x70>
 800b848:	89a3      	ldrh	r3, [r4, #12]
 800b84a:	f023 0303 	bic.w	r3, r3, #3
 800b84e:	f043 0301 	orr.w	r3, r3, #1
 800b852:	81a3      	strh	r3, [r4, #12]
 800b854:	89a3      	ldrh	r3, [r4, #12]
 800b856:	431d      	orrs	r5, r3
 800b858:	81a5      	strh	r5, [r4, #12]
 800b85a:	e7cf      	b.n	800b7fc <__smakebuf_r+0x18>

0800b85c <iprintf>:
 800b85c:	b40f      	push	{r0, r1, r2, r3}
 800b85e:	b507      	push	{r0, r1, r2, lr}
 800b860:	4906      	ldr	r1, [pc, #24]	@ (800b87c <iprintf+0x20>)
 800b862:	ab04      	add	r3, sp, #16
 800b864:	6808      	ldr	r0, [r1, #0]
 800b866:	f853 2b04 	ldr.w	r2, [r3], #4
 800b86a:	6881      	ldr	r1, [r0, #8]
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	f000 fc9b 	bl	800c1a8 <_vfiprintf_r>
 800b872:	b003      	add	sp, #12
 800b874:	f85d eb04 	ldr.w	lr, [sp], #4
 800b878:	b004      	add	sp, #16
 800b87a:	4770      	bx	lr
 800b87c:	20000044 	.word	0x20000044

0800b880 <_puts_r>:
 800b880:	6a03      	ldr	r3, [r0, #32]
 800b882:	b570      	push	{r4, r5, r6, lr}
 800b884:	6884      	ldr	r4, [r0, #8]
 800b886:	4605      	mov	r5, r0
 800b888:	460e      	mov	r6, r1
 800b88a:	b90b      	cbnz	r3, 800b890 <_puts_r+0x10>
 800b88c:	f7ff ff4e 	bl	800b72c <__sinit>
 800b890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b892:	07db      	lsls	r3, r3, #31
 800b894:	d405      	bmi.n	800b8a2 <_puts_r+0x22>
 800b896:	89a3      	ldrh	r3, [r4, #12]
 800b898:	0598      	lsls	r0, r3, #22
 800b89a:	d402      	bmi.n	800b8a2 <_puts_r+0x22>
 800b89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b89e:	f000 f8e8 	bl	800ba72 <__retarget_lock_acquire_recursive>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	0719      	lsls	r1, r3, #28
 800b8a6:	d502      	bpl.n	800b8ae <_puts_r+0x2e>
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d135      	bne.n	800b91a <_puts_r+0x9a>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	f001 fb9b 	bl	800cfec <__swsetup_r>
 800b8b6:	b380      	cbz	r0, 800b91a <_puts_r+0x9a>
 800b8b8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b8bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8be:	07da      	lsls	r2, r3, #31
 800b8c0:	d405      	bmi.n	800b8ce <_puts_r+0x4e>
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	059b      	lsls	r3, r3, #22
 800b8c6:	d402      	bmi.n	800b8ce <_puts_r+0x4e>
 800b8c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8ca:	f000 f8d3 	bl	800ba74 <__retarget_lock_release_recursive>
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	da04      	bge.n	800b8e0 <_puts_r+0x60>
 800b8d6:	69a2      	ldr	r2, [r4, #24]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	dc17      	bgt.n	800b90c <_puts_r+0x8c>
 800b8dc:	290a      	cmp	r1, #10
 800b8de:	d015      	beq.n	800b90c <_puts_r+0x8c>
 800b8e0:	6823      	ldr	r3, [r4, #0]
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	6022      	str	r2, [r4, #0]
 800b8e6:	7019      	strb	r1, [r3, #0]
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	60a3      	str	r3, [r4, #8]
 800b8f2:	2900      	cmp	r1, #0
 800b8f4:	d1ed      	bne.n	800b8d2 <_puts_r+0x52>
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	da11      	bge.n	800b91e <_puts_r+0x9e>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	210a      	movs	r1, #10
 800b8fe:	4628      	mov	r0, r5
 800b900:	f001 fb36 	bl	800cf70 <__swbuf_r>
 800b904:	3001      	adds	r0, #1
 800b906:	d0d7      	beq.n	800b8b8 <_puts_r+0x38>
 800b908:	250a      	movs	r5, #10
 800b90a:	e7d7      	b.n	800b8bc <_puts_r+0x3c>
 800b90c:	4622      	mov	r2, r4
 800b90e:	4628      	mov	r0, r5
 800b910:	f001 fb2e 	bl	800cf70 <__swbuf_r>
 800b914:	3001      	adds	r0, #1
 800b916:	d1e7      	bne.n	800b8e8 <_puts_r+0x68>
 800b918:	e7ce      	b.n	800b8b8 <_puts_r+0x38>
 800b91a:	3e01      	subs	r6, #1
 800b91c:	e7e4      	b.n	800b8e8 <_puts_r+0x68>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	1c5a      	adds	r2, r3, #1
 800b922:	6022      	str	r2, [r4, #0]
 800b924:	220a      	movs	r2, #10
 800b926:	701a      	strb	r2, [r3, #0]
 800b928:	e7ee      	b.n	800b908 <_puts_r+0x88>
	...

0800b92c <puts>:
 800b92c:	4b02      	ldr	r3, [pc, #8]	@ (800b938 <puts+0xc>)
 800b92e:	4601      	mov	r1, r0
 800b930:	6818      	ldr	r0, [r3, #0]
 800b932:	f7ff bfa5 	b.w	800b880 <_puts_r>
 800b936:	bf00      	nop
 800b938:	20000044 	.word	0x20000044

0800b93c <memset>:
 800b93c:	4402      	add	r2, r0
 800b93e:	4603      	mov	r3, r0
 800b940:	4293      	cmp	r3, r2
 800b942:	d100      	bne.n	800b946 <memset+0xa>
 800b944:	4770      	bx	lr
 800b946:	f803 1b01 	strb.w	r1, [r3], #1
 800b94a:	e7f9      	b.n	800b940 <memset+0x4>

0800b94c <_close_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d06      	ldr	r5, [pc, #24]	@ (800b968 <_close_r+0x1c>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	f7f5 fd4b 	bl	80013f2 <_close>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_close_r+0x1a>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_close_r+0x1a>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	2000e510 	.word	0x2000e510

0800b96c <_fstat_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d07      	ldr	r5, [pc, #28]	@ (800b98c <_fstat_r+0x20>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	4611      	mov	r1, r2
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	f7f5 fd46 	bl	800140a <_fstat>
 800b97e:	1c43      	adds	r3, r0, #1
 800b980:	d102      	bne.n	800b988 <_fstat_r+0x1c>
 800b982:	682b      	ldr	r3, [r5, #0]
 800b984:	b103      	cbz	r3, 800b988 <_fstat_r+0x1c>
 800b986:	6023      	str	r3, [r4, #0]
 800b988:	bd38      	pop	{r3, r4, r5, pc}
 800b98a:	bf00      	nop
 800b98c:	2000e510 	.word	0x2000e510

0800b990 <_isatty_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4d06      	ldr	r5, [pc, #24]	@ (800b9ac <_isatty_r+0x1c>)
 800b994:	2300      	movs	r3, #0
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	602b      	str	r3, [r5, #0]
 800b99c:	f7f5 fd45 	bl	800142a <_isatty>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_isatty_r+0x1a>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_isatty_r+0x1a>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	2000e510 	.word	0x2000e510

0800b9b0 <_lseek_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	@ (800b9d0 <_lseek_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f5 fd3e 	bl	8001440 <_lseek>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_lseek_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_lseek_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	2000e510 	.word	0x2000e510

0800b9d4 <_read_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	@ (800b9f4 <_read_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f5 fce8 	bl	80013b8 <_read>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_read_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_read_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	2000e510 	.word	0x2000e510

0800b9f8 <_write_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4d07      	ldr	r5, [pc, #28]	@ (800ba18 <_write_r+0x20>)
 800b9fc:	4604      	mov	r4, r0
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	602a      	str	r2, [r5, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f5 faa6 	bl	8000f58 <_write>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_write_r+0x1e>
 800ba10:	682b      	ldr	r3, [r5, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_write_r+0x1e>
 800ba14:	6023      	str	r3, [r4, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	2000e510 	.word	0x2000e510

0800ba1c <__errno>:
 800ba1c:	4b01      	ldr	r3, [pc, #4]	@ (800ba24 <__errno+0x8>)
 800ba1e:	6818      	ldr	r0, [r3, #0]
 800ba20:	4770      	bx	lr
 800ba22:	bf00      	nop
 800ba24:	20000044 	.word	0x20000044

0800ba28 <__libc_init_array>:
 800ba28:	b570      	push	{r4, r5, r6, lr}
 800ba2a:	4d0d      	ldr	r5, [pc, #52]	@ (800ba60 <__libc_init_array+0x38>)
 800ba2c:	4c0d      	ldr	r4, [pc, #52]	@ (800ba64 <__libc_init_array+0x3c>)
 800ba2e:	1b64      	subs	r4, r4, r5
 800ba30:	10a4      	asrs	r4, r4, #2
 800ba32:	2600      	movs	r6, #0
 800ba34:	42a6      	cmp	r6, r4
 800ba36:	d109      	bne.n	800ba4c <__libc_init_array+0x24>
 800ba38:	4d0b      	ldr	r5, [pc, #44]	@ (800ba68 <__libc_init_array+0x40>)
 800ba3a:	4c0c      	ldr	r4, [pc, #48]	@ (800ba6c <__libc_init_array+0x44>)
 800ba3c:	f001 fb6c 	bl	800d118 <_init>
 800ba40:	1b64      	subs	r4, r4, r5
 800ba42:	10a4      	asrs	r4, r4, #2
 800ba44:	2600      	movs	r6, #0
 800ba46:	42a6      	cmp	r6, r4
 800ba48:	d105      	bne.n	800ba56 <__libc_init_array+0x2e>
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba50:	4798      	blx	r3
 800ba52:	3601      	adds	r6, #1
 800ba54:	e7ee      	b.n	800ba34 <__libc_init_array+0xc>
 800ba56:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba5a:	4798      	blx	r3
 800ba5c:	3601      	adds	r6, #1
 800ba5e:	e7f2      	b.n	800ba46 <__libc_init_array+0x1e>
 800ba60:	0800d5ac 	.word	0x0800d5ac
 800ba64:	0800d5ac 	.word	0x0800d5ac
 800ba68:	0800d5ac 	.word	0x0800d5ac
 800ba6c:	0800d5b0 	.word	0x0800d5b0

0800ba70 <__retarget_lock_init_recursive>:
 800ba70:	4770      	bx	lr

0800ba72 <__retarget_lock_acquire_recursive>:
 800ba72:	4770      	bx	lr

0800ba74 <__retarget_lock_release_recursive>:
 800ba74:	4770      	bx	lr
	...

0800ba78 <_free_r>:
 800ba78:	b538      	push	{r3, r4, r5, lr}
 800ba7a:	4605      	mov	r5, r0
 800ba7c:	2900      	cmp	r1, #0
 800ba7e:	d041      	beq.n	800bb04 <_free_r+0x8c>
 800ba80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba84:	1f0c      	subs	r4, r1, #4
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	bfb8      	it	lt
 800ba8a:	18e4      	addlt	r4, r4, r3
 800ba8c:	f001 f910 	bl	800ccb0 <__malloc_lock>
 800ba90:	4a1d      	ldr	r2, [pc, #116]	@ (800bb08 <_free_r+0x90>)
 800ba92:	6813      	ldr	r3, [r2, #0]
 800ba94:	b933      	cbnz	r3, 800baa4 <_free_r+0x2c>
 800ba96:	6063      	str	r3, [r4, #4]
 800ba98:	6014      	str	r4, [r2, #0]
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa0:	f001 b90c 	b.w	800ccbc <__malloc_unlock>
 800baa4:	42a3      	cmp	r3, r4
 800baa6:	d908      	bls.n	800baba <_free_r+0x42>
 800baa8:	6820      	ldr	r0, [r4, #0]
 800baaa:	1821      	adds	r1, r4, r0
 800baac:	428b      	cmp	r3, r1
 800baae:	bf01      	itttt	eq
 800bab0:	6819      	ldreq	r1, [r3, #0]
 800bab2:	685b      	ldreq	r3, [r3, #4]
 800bab4:	1809      	addeq	r1, r1, r0
 800bab6:	6021      	streq	r1, [r4, #0]
 800bab8:	e7ed      	b.n	800ba96 <_free_r+0x1e>
 800baba:	461a      	mov	r2, r3
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	b10b      	cbz	r3, 800bac4 <_free_r+0x4c>
 800bac0:	42a3      	cmp	r3, r4
 800bac2:	d9fa      	bls.n	800baba <_free_r+0x42>
 800bac4:	6811      	ldr	r1, [r2, #0]
 800bac6:	1850      	adds	r0, r2, r1
 800bac8:	42a0      	cmp	r0, r4
 800baca:	d10b      	bne.n	800bae4 <_free_r+0x6c>
 800bacc:	6820      	ldr	r0, [r4, #0]
 800bace:	4401      	add	r1, r0
 800bad0:	1850      	adds	r0, r2, r1
 800bad2:	4283      	cmp	r3, r0
 800bad4:	6011      	str	r1, [r2, #0]
 800bad6:	d1e0      	bne.n	800ba9a <_free_r+0x22>
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	6053      	str	r3, [r2, #4]
 800bade:	4408      	add	r0, r1
 800bae0:	6010      	str	r0, [r2, #0]
 800bae2:	e7da      	b.n	800ba9a <_free_r+0x22>
 800bae4:	d902      	bls.n	800baec <_free_r+0x74>
 800bae6:	230c      	movs	r3, #12
 800bae8:	602b      	str	r3, [r5, #0]
 800baea:	e7d6      	b.n	800ba9a <_free_r+0x22>
 800baec:	6820      	ldr	r0, [r4, #0]
 800baee:	1821      	adds	r1, r4, r0
 800baf0:	428b      	cmp	r3, r1
 800baf2:	bf04      	itt	eq
 800baf4:	6819      	ldreq	r1, [r3, #0]
 800baf6:	685b      	ldreq	r3, [r3, #4]
 800baf8:	6063      	str	r3, [r4, #4]
 800bafa:	bf04      	itt	eq
 800bafc:	1809      	addeq	r1, r1, r0
 800bafe:	6021      	streq	r1, [r4, #0]
 800bb00:	6054      	str	r4, [r2, #4]
 800bb02:	e7ca      	b.n	800ba9a <_free_r+0x22>
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	2000e51c 	.word	0x2000e51c

0800bb0c <__ssputs_r>:
 800bb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb10:	688e      	ldr	r6, [r1, #8]
 800bb12:	461f      	mov	r7, r3
 800bb14:	42be      	cmp	r6, r7
 800bb16:	680b      	ldr	r3, [r1, #0]
 800bb18:	4682      	mov	sl, r0
 800bb1a:	460c      	mov	r4, r1
 800bb1c:	4690      	mov	r8, r2
 800bb1e:	d82d      	bhi.n	800bb7c <__ssputs_r+0x70>
 800bb20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb28:	d026      	beq.n	800bb78 <__ssputs_r+0x6c>
 800bb2a:	6965      	ldr	r5, [r4, #20]
 800bb2c:	6909      	ldr	r1, [r1, #16]
 800bb2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb32:	eba3 0901 	sub.w	r9, r3, r1
 800bb36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb3a:	1c7b      	adds	r3, r7, #1
 800bb3c:	444b      	add	r3, r9
 800bb3e:	106d      	asrs	r5, r5, #1
 800bb40:	429d      	cmp	r5, r3
 800bb42:	bf38      	it	cc
 800bb44:	461d      	movcc	r5, r3
 800bb46:	0553      	lsls	r3, r2, #21
 800bb48:	d527      	bpl.n	800bb9a <__ssputs_r+0x8e>
 800bb4a:	4629      	mov	r1, r5
 800bb4c:	f000 fc6e 	bl	800c42c <_malloc_r>
 800bb50:	4606      	mov	r6, r0
 800bb52:	b360      	cbz	r0, 800bbae <__ssputs_r+0xa2>
 800bb54:	6921      	ldr	r1, [r4, #16]
 800bb56:	464a      	mov	r2, r9
 800bb58:	f001 fac8 	bl	800d0ec <memcpy>
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	6126      	str	r6, [r4, #16]
 800bb6a:	6165      	str	r5, [r4, #20]
 800bb6c:	444e      	add	r6, r9
 800bb6e:	eba5 0509 	sub.w	r5, r5, r9
 800bb72:	6026      	str	r6, [r4, #0]
 800bb74:	60a5      	str	r5, [r4, #8]
 800bb76:	463e      	mov	r6, r7
 800bb78:	42be      	cmp	r6, r7
 800bb7a:	d900      	bls.n	800bb7e <__ssputs_r+0x72>
 800bb7c:	463e      	mov	r6, r7
 800bb7e:	6820      	ldr	r0, [r4, #0]
 800bb80:	4632      	mov	r2, r6
 800bb82:	4641      	mov	r1, r8
 800bb84:	f001 fa88 	bl	800d098 <memmove>
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	1b9b      	subs	r3, r3, r6
 800bb8c:	60a3      	str	r3, [r4, #8]
 800bb8e:	6823      	ldr	r3, [r4, #0]
 800bb90:	4433      	add	r3, r6
 800bb92:	6023      	str	r3, [r4, #0]
 800bb94:	2000      	movs	r0, #0
 800bb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	f001 f8ce 	bl	800cd3c <_realloc_r>
 800bba0:	4606      	mov	r6, r0
 800bba2:	2800      	cmp	r0, #0
 800bba4:	d1e0      	bne.n	800bb68 <__ssputs_r+0x5c>
 800bba6:	6921      	ldr	r1, [r4, #16]
 800bba8:	4650      	mov	r0, sl
 800bbaa:	f7ff ff65 	bl	800ba78 <_free_r>
 800bbae:	230c      	movs	r3, #12
 800bbb0:	f8ca 3000 	str.w	r3, [sl]
 800bbb4:	89a3      	ldrh	r3, [r4, #12]
 800bbb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbc0:	e7e9      	b.n	800bb96 <__ssputs_r+0x8a>
	...

0800bbc4 <_svfiprintf_r>:
 800bbc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc8:	4698      	mov	r8, r3
 800bbca:	898b      	ldrh	r3, [r1, #12]
 800bbcc:	061b      	lsls	r3, r3, #24
 800bbce:	b09d      	sub	sp, #116	@ 0x74
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	460d      	mov	r5, r1
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	d510      	bpl.n	800bbfa <_svfiprintf_r+0x36>
 800bbd8:	690b      	ldr	r3, [r1, #16]
 800bbda:	b973      	cbnz	r3, 800bbfa <_svfiprintf_r+0x36>
 800bbdc:	2140      	movs	r1, #64	@ 0x40
 800bbde:	f000 fc25 	bl	800c42c <_malloc_r>
 800bbe2:	6028      	str	r0, [r5, #0]
 800bbe4:	6128      	str	r0, [r5, #16]
 800bbe6:	b930      	cbnz	r0, 800bbf6 <_svfiprintf_r+0x32>
 800bbe8:	230c      	movs	r3, #12
 800bbea:	603b      	str	r3, [r7, #0]
 800bbec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbf0:	b01d      	add	sp, #116	@ 0x74
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	2340      	movs	r3, #64	@ 0x40
 800bbf8:	616b      	str	r3, [r5, #20]
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfe:	2320      	movs	r3, #32
 800bc00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc04:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc08:	2330      	movs	r3, #48	@ 0x30
 800bc0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bda8 <_svfiprintf_r+0x1e4>
 800bc0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc12:	f04f 0901 	mov.w	r9, #1
 800bc16:	4623      	mov	r3, r4
 800bc18:	469a      	mov	sl, r3
 800bc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc1e:	b10a      	cbz	r2, 800bc24 <_svfiprintf_r+0x60>
 800bc20:	2a25      	cmp	r2, #37	@ 0x25
 800bc22:	d1f9      	bne.n	800bc18 <_svfiprintf_r+0x54>
 800bc24:	ebba 0b04 	subs.w	fp, sl, r4
 800bc28:	d00b      	beq.n	800bc42 <_svfiprintf_r+0x7e>
 800bc2a:	465b      	mov	r3, fp
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	4629      	mov	r1, r5
 800bc30:	4638      	mov	r0, r7
 800bc32:	f7ff ff6b 	bl	800bb0c <__ssputs_r>
 800bc36:	3001      	adds	r0, #1
 800bc38:	f000 80a7 	beq.w	800bd8a <_svfiprintf_r+0x1c6>
 800bc3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc3e:	445a      	add	r2, fp
 800bc40:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc42:	f89a 3000 	ldrb.w	r3, [sl]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f000 809f 	beq.w	800bd8a <_svfiprintf_r+0x1c6>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc56:	f10a 0a01 	add.w	sl, sl, #1
 800bc5a:	9304      	str	r3, [sp, #16]
 800bc5c:	9307      	str	r3, [sp, #28]
 800bc5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc62:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc64:	4654      	mov	r4, sl
 800bc66:	2205      	movs	r2, #5
 800bc68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc6c:	484e      	ldr	r0, [pc, #312]	@ (800bda8 <_svfiprintf_r+0x1e4>)
 800bc6e:	f7f4 fac7 	bl	8000200 <memchr>
 800bc72:	9a04      	ldr	r2, [sp, #16]
 800bc74:	b9d8      	cbnz	r0, 800bcae <_svfiprintf_r+0xea>
 800bc76:	06d0      	lsls	r0, r2, #27
 800bc78:	bf44      	itt	mi
 800bc7a:	2320      	movmi	r3, #32
 800bc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc80:	0711      	lsls	r1, r2, #28
 800bc82:	bf44      	itt	mi
 800bc84:	232b      	movmi	r3, #43	@ 0x2b
 800bc86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800bc8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc90:	d015      	beq.n	800bcbe <_svfiprintf_r+0xfa>
 800bc92:	9a07      	ldr	r2, [sp, #28]
 800bc94:	4654      	mov	r4, sl
 800bc96:	2000      	movs	r0, #0
 800bc98:	f04f 0c0a 	mov.w	ip, #10
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca2:	3b30      	subs	r3, #48	@ 0x30
 800bca4:	2b09      	cmp	r3, #9
 800bca6:	d94b      	bls.n	800bd40 <_svfiprintf_r+0x17c>
 800bca8:	b1b0      	cbz	r0, 800bcd8 <_svfiprintf_r+0x114>
 800bcaa:	9207      	str	r2, [sp, #28]
 800bcac:	e014      	b.n	800bcd8 <_svfiprintf_r+0x114>
 800bcae:	eba0 0308 	sub.w	r3, r0, r8
 800bcb2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	9304      	str	r3, [sp, #16]
 800bcba:	46a2      	mov	sl, r4
 800bcbc:	e7d2      	b.n	800bc64 <_svfiprintf_r+0xa0>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	1d19      	adds	r1, r3, #4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	9103      	str	r1, [sp, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	bfbb      	ittet	lt
 800bcca:	425b      	neglt	r3, r3
 800bccc:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd0:	9307      	strge	r3, [sp, #28]
 800bcd2:	9307      	strlt	r3, [sp, #28]
 800bcd4:	bfb8      	it	lt
 800bcd6:	9204      	strlt	r2, [sp, #16]
 800bcd8:	7823      	ldrb	r3, [r4, #0]
 800bcda:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcdc:	d10a      	bne.n	800bcf4 <_svfiprintf_r+0x130>
 800bcde:	7863      	ldrb	r3, [r4, #1]
 800bce0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bce2:	d132      	bne.n	800bd4a <_svfiprintf_r+0x186>
 800bce4:	9b03      	ldr	r3, [sp, #12]
 800bce6:	1d1a      	adds	r2, r3, #4
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	9203      	str	r2, [sp, #12]
 800bcec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcf0:	3402      	adds	r4, #2
 800bcf2:	9305      	str	r3, [sp, #20]
 800bcf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdb8 <_svfiprintf_r+0x1f4>
 800bcf8:	7821      	ldrb	r1, [r4, #0]
 800bcfa:	2203      	movs	r2, #3
 800bcfc:	4650      	mov	r0, sl
 800bcfe:	f7f4 fa7f 	bl	8000200 <memchr>
 800bd02:	b138      	cbz	r0, 800bd14 <_svfiprintf_r+0x150>
 800bd04:	9b04      	ldr	r3, [sp, #16]
 800bd06:	eba0 000a 	sub.w	r0, r0, sl
 800bd0a:	2240      	movs	r2, #64	@ 0x40
 800bd0c:	4082      	lsls	r2, r0
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	3401      	adds	r4, #1
 800bd12:	9304      	str	r3, [sp, #16]
 800bd14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd18:	4824      	ldr	r0, [pc, #144]	@ (800bdac <_svfiprintf_r+0x1e8>)
 800bd1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd1e:	2206      	movs	r2, #6
 800bd20:	f7f4 fa6e 	bl	8000200 <memchr>
 800bd24:	2800      	cmp	r0, #0
 800bd26:	d036      	beq.n	800bd96 <_svfiprintf_r+0x1d2>
 800bd28:	4b21      	ldr	r3, [pc, #132]	@ (800bdb0 <_svfiprintf_r+0x1ec>)
 800bd2a:	bb1b      	cbnz	r3, 800bd74 <_svfiprintf_r+0x1b0>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	3307      	adds	r3, #7
 800bd30:	f023 0307 	bic.w	r3, r3, #7
 800bd34:	3308      	adds	r3, #8
 800bd36:	9303      	str	r3, [sp, #12]
 800bd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd3a:	4433      	add	r3, r6
 800bd3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd3e:	e76a      	b.n	800bc16 <_svfiprintf_r+0x52>
 800bd40:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd44:	460c      	mov	r4, r1
 800bd46:	2001      	movs	r0, #1
 800bd48:	e7a8      	b.n	800bc9c <_svfiprintf_r+0xd8>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	3401      	adds	r4, #1
 800bd4e:	9305      	str	r3, [sp, #20]
 800bd50:	4619      	mov	r1, r3
 800bd52:	f04f 0c0a 	mov.w	ip, #10
 800bd56:	4620      	mov	r0, r4
 800bd58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd5c:	3a30      	subs	r2, #48	@ 0x30
 800bd5e:	2a09      	cmp	r2, #9
 800bd60:	d903      	bls.n	800bd6a <_svfiprintf_r+0x1a6>
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0c6      	beq.n	800bcf4 <_svfiprintf_r+0x130>
 800bd66:	9105      	str	r1, [sp, #20]
 800bd68:	e7c4      	b.n	800bcf4 <_svfiprintf_r+0x130>
 800bd6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd6e:	4604      	mov	r4, r0
 800bd70:	2301      	movs	r3, #1
 800bd72:	e7f0      	b.n	800bd56 <_svfiprintf_r+0x192>
 800bd74:	ab03      	add	r3, sp, #12
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	462a      	mov	r2, r5
 800bd7a:	4b0e      	ldr	r3, [pc, #56]	@ (800bdb4 <_svfiprintf_r+0x1f0>)
 800bd7c:	a904      	add	r1, sp, #16
 800bd7e:	4638      	mov	r0, r7
 800bd80:	f3af 8000 	nop.w
 800bd84:	1c42      	adds	r2, r0, #1
 800bd86:	4606      	mov	r6, r0
 800bd88:	d1d6      	bne.n	800bd38 <_svfiprintf_r+0x174>
 800bd8a:	89ab      	ldrh	r3, [r5, #12]
 800bd8c:	065b      	lsls	r3, r3, #25
 800bd8e:	f53f af2d 	bmi.w	800bbec <_svfiprintf_r+0x28>
 800bd92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd94:	e72c      	b.n	800bbf0 <_svfiprintf_r+0x2c>
 800bd96:	ab03      	add	r3, sp, #12
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	462a      	mov	r2, r5
 800bd9c:	4b05      	ldr	r3, [pc, #20]	@ (800bdb4 <_svfiprintf_r+0x1f0>)
 800bd9e:	a904      	add	r1, sp, #16
 800bda0:	4638      	mov	r0, r7
 800bda2:	f000 fc31 	bl	800c608 <_printf_i>
 800bda6:	e7ed      	b.n	800bd84 <_svfiprintf_r+0x1c0>
 800bda8:	0800d454 	.word	0x0800d454
 800bdac:	0800d45e 	.word	0x0800d45e
 800bdb0:	00000000 	.word	0x00000000
 800bdb4:	0800bb0d 	.word	0x0800bb0d
 800bdb8:	0800d45a 	.word	0x0800d45a

0800bdbc <_sungetc_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	1c4b      	adds	r3, r1, #1
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	d103      	bne.n	800bdcc <_sungetc_r+0x10>
 800bdc4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bdc8:	4628      	mov	r0, r5
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	8993      	ldrh	r3, [r2, #12]
 800bdce:	f023 0320 	bic.w	r3, r3, #32
 800bdd2:	8193      	strh	r3, [r2, #12]
 800bdd4:	6853      	ldr	r3, [r2, #4]
 800bdd6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bdd8:	b2cd      	uxtb	r5, r1
 800bdda:	b18a      	cbz	r2, 800be00 <_sungetc_r+0x44>
 800bddc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bdde:	429a      	cmp	r2, r3
 800bde0:	dd08      	ble.n	800bdf4 <_sungetc_r+0x38>
 800bde2:	6823      	ldr	r3, [r4, #0]
 800bde4:	1e5a      	subs	r2, r3, #1
 800bde6:	6022      	str	r2, [r4, #0]
 800bde8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bdec:	6863      	ldr	r3, [r4, #4]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	e7e9      	b.n	800bdc8 <_sungetc_r+0xc>
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	f000 ff67 	bl	800ccc8 <__submore>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d0f1      	beq.n	800bde2 <_sungetc_r+0x26>
 800bdfe:	e7e1      	b.n	800bdc4 <_sungetc_r+0x8>
 800be00:	6921      	ldr	r1, [r4, #16]
 800be02:	6822      	ldr	r2, [r4, #0]
 800be04:	b141      	cbz	r1, 800be18 <_sungetc_r+0x5c>
 800be06:	4291      	cmp	r1, r2
 800be08:	d206      	bcs.n	800be18 <_sungetc_r+0x5c>
 800be0a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800be0e:	42a9      	cmp	r1, r5
 800be10:	d102      	bne.n	800be18 <_sungetc_r+0x5c>
 800be12:	3a01      	subs	r2, #1
 800be14:	6022      	str	r2, [r4, #0]
 800be16:	e7ea      	b.n	800bdee <_sungetc_r+0x32>
 800be18:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800be1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be20:	6363      	str	r3, [r4, #52]	@ 0x34
 800be22:	2303      	movs	r3, #3
 800be24:	63a3      	str	r3, [r4, #56]	@ 0x38
 800be26:	4623      	mov	r3, r4
 800be28:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	2301      	movs	r3, #1
 800be30:	e7de      	b.n	800bdf0 <_sungetc_r+0x34>

0800be32 <__ssrefill_r>:
 800be32:	b510      	push	{r4, lr}
 800be34:	460c      	mov	r4, r1
 800be36:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800be38:	b169      	cbz	r1, 800be56 <__ssrefill_r+0x24>
 800be3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be3e:	4299      	cmp	r1, r3
 800be40:	d001      	beq.n	800be46 <__ssrefill_r+0x14>
 800be42:	f7ff fe19 	bl	800ba78 <_free_r>
 800be46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be48:	6063      	str	r3, [r4, #4]
 800be4a:	2000      	movs	r0, #0
 800be4c:	6360      	str	r0, [r4, #52]	@ 0x34
 800be4e:	b113      	cbz	r3, 800be56 <__ssrefill_r+0x24>
 800be50:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be52:	6023      	str	r3, [r4, #0]
 800be54:	bd10      	pop	{r4, pc}
 800be56:	6923      	ldr	r3, [r4, #16]
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	2300      	movs	r3, #0
 800be5c:	6063      	str	r3, [r4, #4]
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	f043 0320 	orr.w	r3, r3, #32
 800be64:	81a3      	strh	r3, [r4, #12]
 800be66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be6a:	e7f3      	b.n	800be54 <__ssrefill_r+0x22>

0800be6c <__ssvfiscanf_r>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	460c      	mov	r4, r1
 800be72:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800be76:	2100      	movs	r1, #0
 800be78:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800be7c:	49a5      	ldr	r1, [pc, #660]	@ (800c114 <__ssvfiscanf_r+0x2a8>)
 800be7e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800be80:	f10d 0804 	add.w	r8, sp, #4
 800be84:	49a4      	ldr	r1, [pc, #656]	@ (800c118 <__ssvfiscanf_r+0x2ac>)
 800be86:	4fa5      	ldr	r7, [pc, #660]	@ (800c11c <__ssvfiscanf_r+0x2b0>)
 800be88:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800be8c:	4606      	mov	r6, r0
 800be8e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800be90:	9300      	str	r3, [sp, #0]
 800be92:	7813      	ldrb	r3, [r2, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	f000 8158 	beq.w	800c14a <__ssvfiscanf_r+0x2de>
 800be9a:	5cf9      	ldrb	r1, [r7, r3]
 800be9c:	f011 0108 	ands.w	r1, r1, #8
 800bea0:	f102 0501 	add.w	r5, r2, #1
 800bea4:	d019      	beq.n	800beda <__ssvfiscanf_r+0x6e>
 800bea6:	6863      	ldr	r3, [r4, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	dd0f      	ble.n	800becc <__ssvfiscanf_r+0x60>
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	781a      	ldrb	r2, [r3, #0]
 800beb0:	5cba      	ldrb	r2, [r7, r2]
 800beb2:	0712      	lsls	r2, r2, #28
 800beb4:	d401      	bmi.n	800beba <__ssvfiscanf_r+0x4e>
 800beb6:	462a      	mov	r2, r5
 800beb8:	e7eb      	b.n	800be92 <__ssvfiscanf_r+0x26>
 800beba:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bebc:	3201      	adds	r2, #1
 800bebe:	9245      	str	r2, [sp, #276]	@ 0x114
 800bec0:	6862      	ldr	r2, [r4, #4]
 800bec2:	3301      	adds	r3, #1
 800bec4:	3a01      	subs	r2, #1
 800bec6:	6062      	str	r2, [r4, #4]
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	e7ec      	b.n	800bea6 <__ssvfiscanf_r+0x3a>
 800becc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bece:	4621      	mov	r1, r4
 800bed0:	4630      	mov	r0, r6
 800bed2:	4798      	blx	r3
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d0e9      	beq.n	800beac <__ssvfiscanf_r+0x40>
 800bed8:	e7ed      	b.n	800beb6 <__ssvfiscanf_r+0x4a>
 800beda:	2b25      	cmp	r3, #37	@ 0x25
 800bedc:	d012      	beq.n	800bf04 <__ssvfiscanf_r+0x98>
 800bede:	4699      	mov	r9, r3
 800bee0:	6863      	ldr	r3, [r4, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f340 8093 	ble.w	800c00e <__ssvfiscanf_r+0x1a2>
 800bee8:	6822      	ldr	r2, [r4, #0]
 800beea:	7813      	ldrb	r3, [r2, #0]
 800beec:	454b      	cmp	r3, r9
 800beee:	f040 812c 	bne.w	800c14a <__ssvfiscanf_r+0x2de>
 800bef2:	6863      	ldr	r3, [r4, #4]
 800bef4:	3b01      	subs	r3, #1
 800bef6:	6063      	str	r3, [r4, #4]
 800bef8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800befa:	3201      	adds	r2, #1
 800befc:	3301      	adds	r3, #1
 800befe:	6022      	str	r2, [r4, #0]
 800bf00:	9345      	str	r3, [sp, #276]	@ 0x114
 800bf02:	e7d8      	b.n	800beb6 <__ssvfiscanf_r+0x4a>
 800bf04:	9141      	str	r1, [sp, #260]	@ 0x104
 800bf06:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bf08:	7853      	ldrb	r3, [r2, #1]
 800bf0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf0c:	bf02      	ittt	eq
 800bf0e:	2310      	moveq	r3, #16
 800bf10:	1c95      	addeq	r5, r2, #2
 800bf12:	9341      	streq	r3, [sp, #260]	@ 0x104
 800bf14:	220a      	movs	r2, #10
 800bf16:	46a9      	mov	r9, r5
 800bf18:	f819 1b01 	ldrb.w	r1, [r9], #1
 800bf1c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800bf20:	2b09      	cmp	r3, #9
 800bf22:	d91e      	bls.n	800bf62 <__ssvfiscanf_r+0xf6>
 800bf24:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c120 <__ssvfiscanf_r+0x2b4>
 800bf28:	2203      	movs	r2, #3
 800bf2a:	4650      	mov	r0, sl
 800bf2c:	f7f4 f968 	bl	8000200 <memchr>
 800bf30:	b138      	cbz	r0, 800bf42 <__ssvfiscanf_r+0xd6>
 800bf32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf34:	eba0 000a 	sub.w	r0, r0, sl
 800bf38:	2301      	movs	r3, #1
 800bf3a:	4083      	lsls	r3, r0
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	9341      	str	r3, [sp, #260]	@ 0x104
 800bf40:	464d      	mov	r5, r9
 800bf42:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bf46:	2b78      	cmp	r3, #120	@ 0x78
 800bf48:	d806      	bhi.n	800bf58 <__ssvfiscanf_r+0xec>
 800bf4a:	2b57      	cmp	r3, #87	@ 0x57
 800bf4c:	d810      	bhi.n	800bf70 <__ssvfiscanf_r+0x104>
 800bf4e:	2b25      	cmp	r3, #37	@ 0x25
 800bf50:	d0c5      	beq.n	800bede <__ssvfiscanf_r+0x72>
 800bf52:	d857      	bhi.n	800c004 <__ssvfiscanf_r+0x198>
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d065      	beq.n	800c024 <__ssvfiscanf_r+0x1b8>
 800bf58:	2303      	movs	r3, #3
 800bf5a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bf5c:	230a      	movs	r3, #10
 800bf5e:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf60:	e078      	b.n	800c054 <__ssvfiscanf_r+0x1e8>
 800bf62:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bf64:	fb02 1103 	mla	r1, r2, r3, r1
 800bf68:	3930      	subs	r1, #48	@ 0x30
 800bf6a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bf6c:	464d      	mov	r5, r9
 800bf6e:	e7d2      	b.n	800bf16 <__ssvfiscanf_r+0xaa>
 800bf70:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bf74:	2a20      	cmp	r2, #32
 800bf76:	d8ef      	bhi.n	800bf58 <__ssvfiscanf_r+0xec>
 800bf78:	a101      	add	r1, pc, #4	@ (adr r1, 800bf80 <__ssvfiscanf_r+0x114>)
 800bf7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bf7e:	bf00      	nop
 800bf80:	0800c033 	.word	0x0800c033
 800bf84:	0800bf59 	.word	0x0800bf59
 800bf88:	0800bf59 	.word	0x0800bf59
 800bf8c:	0800c08d 	.word	0x0800c08d
 800bf90:	0800bf59 	.word	0x0800bf59
 800bf94:	0800bf59 	.word	0x0800bf59
 800bf98:	0800bf59 	.word	0x0800bf59
 800bf9c:	0800bf59 	.word	0x0800bf59
 800bfa0:	0800bf59 	.word	0x0800bf59
 800bfa4:	0800bf59 	.word	0x0800bf59
 800bfa8:	0800bf59 	.word	0x0800bf59
 800bfac:	0800c0a3 	.word	0x0800c0a3
 800bfb0:	0800c089 	.word	0x0800c089
 800bfb4:	0800c00b 	.word	0x0800c00b
 800bfb8:	0800c00b 	.word	0x0800c00b
 800bfbc:	0800c00b 	.word	0x0800c00b
 800bfc0:	0800bf59 	.word	0x0800bf59
 800bfc4:	0800c045 	.word	0x0800c045
 800bfc8:	0800bf59 	.word	0x0800bf59
 800bfcc:	0800bf59 	.word	0x0800bf59
 800bfd0:	0800bf59 	.word	0x0800bf59
 800bfd4:	0800bf59 	.word	0x0800bf59
 800bfd8:	0800c0b3 	.word	0x0800c0b3
 800bfdc:	0800c04d 	.word	0x0800c04d
 800bfe0:	0800c02b 	.word	0x0800c02b
 800bfe4:	0800bf59 	.word	0x0800bf59
 800bfe8:	0800bf59 	.word	0x0800bf59
 800bfec:	0800c0af 	.word	0x0800c0af
 800bff0:	0800bf59 	.word	0x0800bf59
 800bff4:	0800c089 	.word	0x0800c089
 800bff8:	0800bf59 	.word	0x0800bf59
 800bffc:	0800bf59 	.word	0x0800bf59
 800c000:	0800c033 	.word	0x0800c033
 800c004:	3b45      	subs	r3, #69	@ 0x45
 800c006:	2b02      	cmp	r3, #2
 800c008:	d8a6      	bhi.n	800bf58 <__ssvfiscanf_r+0xec>
 800c00a:	2305      	movs	r3, #5
 800c00c:	e021      	b.n	800c052 <__ssvfiscanf_r+0x1e6>
 800c00e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c010:	4621      	mov	r1, r4
 800c012:	4630      	mov	r0, r6
 800c014:	4798      	blx	r3
 800c016:	2800      	cmp	r0, #0
 800c018:	f43f af66 	beq.w	800bee8 <__ssvfiscanf_r+0x7c>
 800c01c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c01e:	2800      	cmp	r0, #0
 800c020:	f040 808b 	bne.w	800c13a <__ssvfiscanf_r+0x2ce>
 800c024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c028:	e08b      	b.n	800c142 <__ssvfiscanf_r+0x2d6>
 800c02a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c02c:	f042 0220 	orr.w	r2, r2, #32
 800c030:	9241      	str	r2, [sp, #260]	@ 0x104
 800c032:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c034:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c038:	9241      	str	r2, [sp, #260]	@ 0x104
 800c03a:	2210      	movs	r2, #16
 800c03c:	2b6e      	cmp	r3, #110	@ 0x6e
 800c03e:	9242      	str	r2, [sp, #264]	@ 0x108
 800c040:	d902      	bls.n	800c048 <__ssvfiscanf_r+0x1dc>
 800c042:	e005      	b.n	800c050 <__ssvfiscanf_r+0x1e4>
 800c044:	2300      	movs	r3, #0
 800c046:	9342      	str	r3, [sp, #264]	@ 0x108
 800c048:	2303      	movs	r3, #3
 800c04a:	e002      	b.n	800c052 <__ssvfiscanf_r+0x1e6>
 800c04c:	2308      	movs	r3, #8
 800c04e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c050:	2304      	movs	r3, #4
 800c052:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c054:	6863      	ldr	r3, [r4, #4]
 800c056:	2b00      	cmp	r3, #0
 800c058:	dd39      	ble.n	800c0ce <__ssvfiscanf_r+0x262>
 800c05a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c05c:	0659      	lsls	r1, r3, #25
 800c05e:	d404      	bmi.n	800c06a <__ssvfiscanf_r+0x1fe>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	781a      	ldrb	r2, [r3, #0]
 800c064:	5cba      	ldrb	r2, [r7, r2]
 800c066:	0712      	lsls	r2, r2, #28
 800c068:	d438      	bmi.n	800c0dc <__ssvfiscanf_r+0x270>
 800c06a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c06c:	2b02      	cmp	r3, #2
 800c06e:	dc47      	bgt.n	800c100 <__ssvfiscanf_r+0x294>
 800c070:	466b      	mov	r3, sp
 800c072:	4622      	mov	r2, r4
 800c074:	a941      	add	r1, sp, #260	@ 0x104
 800c076:	4630      	mov	r0, r6
 800c078:	f000 fbe6 	bl	800c848 <_scanf_chars>
 800c07c:	2801      	cmp	r0, #1
 800c07e:	d064      	beq.n	800c14a <__ssvfiscanf_r+0x2de>
 800c080:	2802      	cmp	r0, #2
 800c082:	f47f af18 	bne.w	800beb6 <__ssvfiscanf_r+0x4a>
 800c086:	e7c9      	b.n	800c01c <__ssvfiscanf_r+0x1b0>
 800c088:	220a      	movs	r2, #10
 800c08a:	e7d7      	b.n	800c03c <__ssvfiscanf_r+0x1d0>
 800c08c:	4629      	mov	r1, r5
 800c08e:	4640      	mov	r0, r8
 800c090:	f000 fd28 	bl	800cae4 <__sccl>
 800c094:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c09a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c09c:	4605      	mov	r5, r0
 800c09e:	2301      	movs	r3, #1
 800c0a0:	e7d7      	b.n	800c052 <__ssvfiscanf_r+0x1e6>
 800c0a2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c0a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0a8:	9341      	str	r3, [sp, #260]	@ 0x104
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	e7d1      	b.n	800c052 <__ssvfiscanf_r+0x1e6>
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	e7cf      	b.n	800c052 <__ssvfiscanf_r+0x1e6>
 800c0b2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c0b4:	06c3      	lsls	r3, r0, #27
 800c0b6:	f53f aefe 	bmi.w	800beb6 <__ssvfiscanf_r+0x4a>
 800c0ba:	9b00      	ldr	r3, [sp, #0]
 800c0bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c0be:	1d19      	adds	r1, r3, #4
 800c0c0:	9100      	str	r1, [sp, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	07c0      	lsls	r0, r0, #31
 800c0c6:	bf4c      	ite	mi
 800c0c8:	801a      	strhmi	r2, [r3, #0]
 800c0ca:	601a      	strpl	r2, [r3, #0]
 800c0cc:	e6f3      	b.n	800beb6 <__ssvfiscanf_r+0x4a>
 800c0ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	4798      	blx	r3
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d0bf      	beq.n	800c05a <__ssvfiscanf_r+0x1ee>
 800c0da:	e79f      	b.n	800c01c <__ssvfiscanf_r+0x1b0>
 800c0dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c0de:	3201      	adds	r2, #1
 800c0e0:	9245      	str	r2, [sp, #276]	@ 0x114
 800c0e2:	6862      	ldr	r2, [r4, #4]
 800c0e4:	3a01      	subs	r2, #1
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	6062      	str	r2, [r4, #4]
 800c0ea:	dd02      	ble.n	800c0f2 <__ssvfiscanf_r+0x286>
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	6023      	str	r3, [r4, #0]
 800c0f0:	e7b6      	b.n	800c060 <__ssvfiscanf_r+0x1f4>
 800c0f2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c0f4:	4621      	mov	r1, r4
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	4798      	blx	r3
 800c0fa:	2800      	cmp	r0, #0
 800c0fc:	d0b0      	beq.n	800c060 <__ssvfiscanf_r+0x1f4>
 800c0fe:	e78d      	b.n	800c01c <__ssvfiscanf_r+0x1b0>
 800c100:	2b04      	cmp	r3, #4
 800c102:	dc0f      	bgt.n	800c124 <__ssvfiscanf_r+0x2b8>
 800c104:	466b      	mov	r3, sp
 800c106:	4622      	mov	r2, r4
 800c108:	a941      	add	r1, sp, #260	@ 0x104
 800c10a:	4630      	mov	r0, r6
 800c10c:	f000 fbf6 	bl	800c8fc <_scanf_i>
 800c110:	e7b4      	b.n	800c07c <__ssvfiscanf_r+0x210>
 800c112:	bf00      	nop
 800c114:	0800bdbd 	.word	0x0800bdbd
 800c118:	0800be33 	.word	0x0800be33
 800c11c:	0800d4a3 	.word	0x0800d4a3
 800c120:	0800d45a 	.word	0x0800d45a
 800c124:	4b0a      	ldr	r3, [pc, #40]	@ (800c150 <__ssvfiscanf_r+0x2e4>)
 800c126:	2b00      	cmp	r3, #0
 800c128:	f43f aec5 	beq.w	800beb6 <__ssvfiscanf_r+0x4a>
 800c12c:	466b      	mov	r3, sp
 800c12e:	4622      	mov	r2, r4
 800c130:	a941      	add	r1, sp, #260	@ 0x104
 800c132:	4630      	mov	r0, r6
 800c134:	f3af 8000 	nop.w
 800c138:	e7a0      	b.n	800c07c <__ssvfiscanf_r+0x210>
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	065b      	lsls	r3, r3, #25
 800c13e:	f53f af71 	bmi.w	800c024 <__ssvfiscanf_r+0x1b8>
 800c142:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c14a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c14c:	e7f9      	b.n	800c142 <__ssvfiscanf_r+0x2d6>
 800c14e:	bf00      	nop
 800c150:	00000000 	.word	0x00000000

0800c154 <__sfputc_r>:
 800c154:	6893      	ldr	r3, [r2, #8]
 800c156:	3b01      	subs	r3, #1
 800c158:	2b00      	cmp	r3, #0
 800c15a:	b410      	push	{r4}
 800c15c:	6093      	str	r3, [r2, #8]
 800c15e:	da08      	bge.n	800c172 <__sfputc_r+0x1e>
 800c160:	6994      	ldr	r4, [r2, #24]
 800c162:	42a3      	cmp	r3, r4
 800c164:	db01      	blt.n	800c16a <__sfputc_r+0x16>
 800c166:	290a      	cmp	r1, #10
 800c168:	d103      	bne.n	800c172 <__sfputc_r+0x1e>
 800c16a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c16e:	f000 beff 	b.w	800cf70 <__swbuf_r>
 800c172:	6813      	ldr	r3, [r2, #0]
 800c174:	1c58      	adds	r0, r3, #1
 800c176:	6010      	str	r0, [r2, #0]
 800c178:	7019      	strb	r1, [r3, #0]
 800c17a:	4608      	mov	r0, r1
 800c17c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <__sfputs_r>:
 800c182:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c184:	4606      	mov	r6, r0
 800c186:	460f      	mov	r7, r1
 800c188:	4614      	mov	r4, r2
 800c18a:	18d5      	adds	r5, r2, r3
 800c18c:	42ac      	cmp	r4, r5
 800c18e:	d101      	bne.n	800c194 <__sfputs_r+0x12>
 800c190:	2000      	movs	r0, #0
 800c192:	e007      	b.n	800c1a4 <__sfputs_r+0x22>
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	463a      	mov	r2, r7
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7ff ffda 	bl	800c154 <__sfputc_r>
 800c1a0:	1c43      	adds	r3, r0, #1
 800c1a2:	d1f3      	bne.n	800c18c <__sfputs_r+0xa>
 800c1a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c1a8 <_vfiprintf_r>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	460d      	mov	r5, r1
 800c1ae:	b09d      	sub	sp, #116	@ 0x74
 800c1b0:	4614      	mov	r4, r2
 800c1b2:	4698      	mov	r8, r3
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	b118      	cbz	r0, 800c1c0 <_vfiprintf_r+0x18>
 800c1b8:	6a03      	ldr	r3, [r0, #32]
 800c1ba:	b90b      	cbnz	r3, 800c1c0 <_vfiprintf_r+0x18>
 800c1bc:	f7ff fab6 	bl	800b72c <__sinit>
 800c1c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1c2:	07d9      	lsls	r1, r3, #31
 800c1c4:	d405      	bmi.n	800c1d2 <_vfiprintf_r+0x2a>
 800c1c6:	89ab      	ldrh	r3, [r5, #12]
 800c1c8:	059a      	lsls	r2, r3, #22
 800c1ca:	d402      	bmi.n	800c1d2 <_vfiprintf_r+0x2a>
 800c1cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1ce:	f7ff fc50 	bl	800ba72 <__retarget_lock_acquire_recursive>
 800c1d2:	89ab      	ldrh	r3, [r5, #12]
 800c1d4:	071b      	lsls	r3, r3, #28
 800c1d6:	d501      	bpl.n	800c1dc <_vfiprintf_r+0x34>
 800c1d8:	692b      	ldr	r3, [r5, #16]
 800c1da:	b99b      	cbnz	r3, 800c204 <_vfiprintf_r+0x5c>
 800c1dc:	4629      	mov	r1, r5
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f000 ff04 	bl	800cfec <__swsetup_r>
 800c1e4:	b170      	cbz	r0, 800c204 <_vfiprintf_r+0x5c>
 800c1e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c1e8:	07dc      	lsls	r4, r3, #31
 800c1ea:	d504      	bpl.n	800c1f6 <_vfiprintf_r+0x4e>
 800c1ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1f0:	b01d      	add	sp, #116	@ 0x74
 800c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1f6:	89ab      	ldrh	r3, [r5, #12]
 800c1f8:	0598      	lsls	r0, r3, #22
 800c1fa:	d4f7      	bmi.n	800c1ec <_vfiprintf_r+0x44>
 800c1fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c1fe:	f7ff fc39 	bl	800ba74 <__retarget_lock_release_recursive>
 800c202:	e7f3      	b.n	800c1ec <_vfiprintf_r+0x44>
 800c204:	2300      	movs	r3, #0
 800c206:	9309      	str	r3, [sp, #36]	@ 0x24
 800c208:	2320      	movs	r3, #32
 800c20a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c20e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c212:	2330      	movs	r3, #48	@ 0x30
 800c214:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c3c4 <_vfiprintf_r+0x21c>
 800c218:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c21c:	f04f 0901 	mov.w	r9, #1
 800c220:	4623      	mov	r3, r4
 800c222:	469a      	mov	sl, r3
 800c224:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c228:	b10a      	cbz	r2, 800c22e <_vfiprintf_r+0x86>
 800c22a:	2a25      	cmp	r2, #37	@ 0x25
 800c22c:	d1f9      	bne.n	800c222 <_vfiprintf_r+0x7a>
 800c22e:	ebba 0b04 	subs.w	fp, sl, r4
 800c232:	d00b      	beq.n	800c24c <_vfiprintf_r+0xa4>
 800c234:	465b      	mov	r3, fp
 800c236:	4622      	mov	r2, r4
 800c238:	4629      	mov	r1, r5
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ffa1 	bl	800c182 <__sfputs_r>
 800c240:	3001      	adds	r0, #1
 800c242:	f000 80a7 	beq.w	800c394 <_vfiprintf_r+0x1ec>
 800c246:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c248:	445a      	add	r2, fp
 800c24a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c24c:	f89a 3000 	ldrb.w	r3, [sl]
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 809f 	beq.w	800c394 <_vfiprintf_r+0x1ec>
 800c256:	2300      	movs	r3, #0
 800c258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c25c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c260:	f10a 0a01 	add.w	sl, sl, #1
 800c264:	9304      	str	r3, [sp, #16]
 800c266:	9307      	str	r3, [sp, #28]
 800c268:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c26c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c26e:	4654      	mov	r4, sl
 800c270:	2205      	movs	r2, #5
 800c272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c276:	4853      	ldr	r0, [pc, #332]	@ (800c3c4 <_vfiprintf_r+0x21c>)
 800c278:	f7f3 ffc2 	bl	8000200 <memchr>
 800c27c:	9a04      	ldr	r2, [sp, #16]
 800c27e:	b9d8      	cbnz	r0, 800c2b8 <_vfiprintf_r+0x110>
 800c280:	06d1      	lsls	r1, r2, #27
 800c282:	bf44      	itt	mi
 800c284:	2320      	movmi	r3, #32
 800c286:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c28a:	0713      	lsls	r3, r2, #28
 800c28c:	bf44      	itt	mi
 800c28e:	232b      	movmi	r3, #43	@ 0x2b
 800c290:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c294:	f89a 3000 	ldrb.w	r3, [sl]
 800c298:	2b2a      	cmp	r3, #42	@ 0x2a
 800c29a:	d015      	beq.n	800c2c8 <_vfiprintf_r+0x120>
 800c29c:	9a07      	ldr	r2, [sp, #28]
 800c29e:	4654      	mov	r4, sl
 800c2a0:	2000      	movs	r0, #0
 800c2a2:	f04f 0c0a 	mov.w	ip, #10
 800c2a6:	4621      	mov	r1, r4
 800c2a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2ac:	3b30      	subs	r3, #48	@ 0x30
 800c2ae:	2b09      	cmp	r3, #9
 800c2b0:	d94b      	bls.n	800c34a <_vfiprintf_r+0x1a2>
 800c2b2:	b1b0      	cbz	r0, 800c2e2 <_vfiprintf_r+0x13a>
 800c2b4:	9207      	str	r2, [sp, #28]
 800c2b6:	e014      	b.n	800c2e2 <_vfiprintf_r+0x13a>
 800c2b8:	eba0 0308 	sub.w	r3, r0, r8
 800c2bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	9304      	str	r3, [sp, #16]
 800c2c4:	46a2      	mov	sl, r4
 800c2c6:	e7d2      	b.n	800c26e <_vfiprintf_r+0xc6>
 800c2c8:	9b03      	ldr	r3, [sp, #12]
 800c2ca:	1d19      	adds	r1, r3, #4
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	9103      	str	r1, [sp, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	bfbb      	ittet	lt
 800c2d4:	425b      	neglt	r3, r3
 800c2d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c2da:	9307      	strge	r3, [sp, #28]
 800c2dc:	9307      	strlt	r3, [sp, #28]
 800c2de:	bfb8      	it	lt
 800c2e0:	9204      	strlt	r2, [sp, #16]
 800c2e2:	7823      	ldrb	r3, [r4, #0]
 800c2e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2e6:	d10a      	bne.n	800c2fe <_vfiprintf_r+0x156>
 800c2e8:	7863      	ldrb	r3, [r4, #1]
 800c2ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800c2ec:	d132      	bne.n	800c354 <_vfiprintf_r+0x1ac>
 800c2ee:	9b03      	ldr	r3, [sp, #12]
 800c2f0:	1d1a      	adds	r2, r3, #4
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	9203      	str	r2, [sp, #12]
 800c2f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c2fa:	3402      	adds	r4, #2
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c3d4 <_vfiprintf_r+0x22c>
 800c302:	7821      	ldrb	r1, [r4, #0]
 800c304:	2203      	movs	r2, #3
 800c306:	4650      	mov	r0, sl
 800c308:	f7f3 ff7a 	bl	8000200 <memchr>
 800c30c:	b138      	cbz	r0, 800c31e <_vfiprintf_r+0x176>
 800c30e:	9b04      	ldr	r3, [sp, #16]
 800c310:	eba0 000a 	sub.w	r0, r0, sl
 800c314:	2240      	movs	r2, #64	@ 0x40
 800c316:	4082      	lsls	r2, r0
 800c318:	4313      	orrs	r3, r2
 800c31a:	3401      	adds	r4, #1
 800c31c:	9304      	str	r3, [sp, #16]
 800c31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c322:	4829      	ldr	r0, [pc, #164]	@ (800c3c8 <_vfiprintf_r+0x220>)
 800c324:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c328:	2206      	movs	r2, #6
 800c32a:	f7f3 ff69 	bl	8000200 <memchr>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d03f      	beq.n	800c3b2 <_vfiprintf_r+0x20a>
 800c332:	4b26      	ldr	r3, [pc, #152]	@ (800c3cc <_vfiprintf_r+0x224>)
 800c334:	bb1b      	cbnz	r3, 800c37e <_vfiprintf_r+0x1d6>
 800c336:	9b03      	ldr	r3, [sp, #12]
 800c338:	3307      	adds	r3, #7
 800c33a:	f023 0307 	bic.w	r3, r3, #7
 800c33e:	3308      	adds	r3, #8
 800c340:	9303      	str	r3, [sp, #12]
 800c342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c344:	443b      	add	r3, r7
 800c346:	9309      	str	r3, [sp, #36]	@ 0x24
 800c348:	e76a      	b.n	800c220 <_vfiprintf_r+0x78>
 800c34a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c34e:	460c      	mov	r4, r1
 800c350:	2001      	movs	r0, #1
 800c352:	e7a8      	b.n	800c2a6 <_vfiprintf_r+0xfe>
 800c354:	2300      	movs	r3, #0
 800c356:	3401      	adds	r4, #1
 800c358:	9305      	str	r3, [sp, #20]
 800c35a:	4619      	mov	r1, r3
 800c35c:	f04f 0c0a 	mov.w	ip, #10
 800c360:	4620      	mov	r0, r4
 800c362:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c366:	3a30      	subs	r2, #48	@ 0x30
 800c368:	2a09      	cmp	r2, #9
 800c36a:	d903      	bls.n	800c374 <_vfiprintf_r+0x1cc>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d0c6      	beq.n	800c2fe <_vfiprintf_r+0x156>
 800c370:	9105      	str	r1, [sp, #20]
 800c372:	e7c4      	b.n	800c2fe <_vfiprintf_r+0x156>
 800c374:	fb0c 2101 	mla	r1, ip, r1, r2
 800c378:	4604      	mov	r4, r0
 800c37a:	2301      	movs	r3, #1
 800c37c:	e7f0      	b.n	800c360 <_vfiprintf_r+0x1b8>
 800c37e:	ab03      	add	r3, sp, #12
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	462a      	mov	r2, r5
 800c384:	4b12      	ldr	r3, [pc, #72]	@ (800c3d0 <_vfiprintf_r+0x228>)
 800c386:	a904      	add	r1, sp, #16
 800c388:	4630      	mov	r0, r6
 800c38a:	f3af 8000 	nop.w
 800c38e:	4607      	mov	r7, r0
 800c390:	1c78      	adds	r0, r7, #1
 800c392:	d1d6      	bne.n	800c342 <_vfiprintf_r+0x19a>
 800c394:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c396:	07d9      	lsls	r1, r3, #31
 800c398:	d405      	bmi.n	800c3a6 <_vfiprintf_r+0x1fe>
 800c39a:	89ab      	ldrh	r3, [r5, #12]
 800c39c:	059a      	lsls	r2, r3, #22
 800c39e:	d402      	bmi.n	800c3a6 <_vfiprintf_r+0x1fe>
 800c3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3a2:	f7ff fb67 	bl	800ba74 <__retarget_lock_release_recursive>
 800c3a6:	89ab      	ldrh	r3, [r5, #12]
 800c3a8:	065b      	lsls	r3, r3, #25
 800c3aa:	f53f af1f 	bmi.w	800c1ec <_vfiprintf_r+0x44>
 800c3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c3b0:	e71e      	b.n	800c1f0 <_vfiprintf_r+0x48>
 800c3b2:	ab03      	add	r3, sp, #12
 800c3b4:	9300      	str	r3, [sp, #0]
 800c3b6:	462a      	mov	r2, r5
 800c3b8:	4b05      	ldr	r3, [pc, #20]	@ (800c3d0 <_vfiprintf_r+0x228>)
 800c3ba:	a904      	add	r1, sp, #16
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f000 f923 	bl	800c608 <_printf_i>
 800c3c2:	e7e4      	b.n	800c38e <_vfiprintf_r+0x1e6>
 800c3c4:	0800d454 	.word	0x0800d454
 800c3c8:	0800d45e 	.word	0x0800d45e
 800c3cc:	00000000 	.word	0x00000000
 800c3d0:	0800c183 	.word	0x0800c183
 800c3d4:	0800d45a 	.word	0x0800d45a

0800c3d8 <malloc>:
 800c3d8:	4b02      	ldr	r3, [pc, #8]	@ (800c3e4 <malloc+0xc>)
 800c3da:	4601      	mov	r1, r0
 800c3dc:	6818      	ldr	r0, [r3, #0]
 800c3de:	f000 b825 	b.w	800c42c <_malloc_r>
 800c3e2:	bf00      	nop
 800c3e4:	20000044 	.word	0x20000044

0800c3e8 <sbrk_aligned>:
 800c3e8:	b570      	push	{r4, r5, r6, lr}
 800c3ea:	4e0f      	ldr	r6, [pc, #60]	@ (800c428 <sbrk_aligned+0x40>)
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	6831      	ldr	r1, [r6, #0]
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	b911      	cbnz	r1, 800c3fa <sbrk_aligned+0x12>
 800c3f4:	f000 fe6a 	bl	800d0cc <_sbrk_r>
 800c3f8:	6030      	str	r0, [r6, #0]
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	4628      	mov	r0, r5
 800c3fe:	f000 fe65 	bl	800d0cc <_sbrk_r>
 800c402:	1c43      	adds	r3, r0, #1
 800c404:	d103      	bne.n	800c40e <sbrk_aligned+0x26>
 800c406:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c40a:	4620      	mov	r0, r4
 800c40c:	bd70      	pop	{r4, r5, r6, pc}
 800c40e:	1cc4      	adds	r4, r0, #3
 800c410:	f024 0403 	bic.w	r4, r4, #3
 800c414:	42a0      	cmp	r0, r4
 800c416:	d0f8      	beq.n	800c40a <sbrk_aligned+0x22>
 800c418:	1a21      	subs	r1, r4, r0
 800c41a:	4628      	mov	r0, r5
 800c41c:	f000 fe56 	bl	800d0cc <_sbrk_r>
 800c420:	3001      	adds	r0, #1
 800c422:	d1f2      	bne.n	800c40a <sbrk_aligned+0x22>
 800c424:	e7ef      	b.n	800c406 <sbrk_aligned+0x1e>
 800c426:	bf00      	nop
 800c428:	2000e518 	.word	0x2000e518

0800c42c <_malloc_r>:
 800c42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c430:	1ccd      	adds	r5, r1, #3
 800c432:	f025 0503 	bic.w	r5, r5, #3
 800c436:	3508      	adds	r5, #8
 800c438:	2d0c      	cmp	r5, #12
 800c43a:	bf38      	it	cc
 800c43c:	250c      	movcc	r5, #12
 800c43e:	2d00      	cmp	r5, #0
 800c440:	4606      	mov	r6, r0
 800c442:	db01      	blt.n	800c448 <_malloc_r+0x1c>
 800c444:	42a9      	cmp	r1, r5
 800c446:	d904      	bls.n	800c452 <_malloc_r+0x26>
 800c448:	230c      	movs	r3, #12
 800c44a:	6033      	str	r3, [r6, #0]
 800c44c:	2000      	movs	r0, #0
 800c44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c528 <_malloc_r+0xfc>
 800c456:	f000 fc2b 	bl	800ccb0 <__malloc_lock>
 800c45a:	f8d8 3000 	ldr.w	r3, [r8]
 800c45e:	461c      	mov	r4, r3
 800c460:	bb44      	cbnz	r4, 800c4b4 <_malloc_r+0x88>
 800c462:	4629      	mov	r1, r5
 800c464:	4630      	mov	r0, r6
 800c466:	f7ff ffbf 	bl	800c3e8 <sbrk_aligned>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	4604      	mov	r4, r0
 800c46e:	d158      	bne.n	800c522 <_malloc_r+0xf6>
 800c470:	f8d8 4000 	ldr.w	r4, [r8]
 800c474:	4627      	mov	r7, r4
 800c476:	2f00      	cmp	r7, #0
 800c478:	d143      	bne.n	800c502 <_malloc_r+0xd6>
 800c47a:	2c00      	cmp	r4, #0
 800c47c:	d04b      	beq.n	800c516 <_malloc_r+0xea>
 800c47e:	6823      	ldr	r3, [r4, #0]
 800c480:	4639      	mov	r1, r7
 800c482:	4630      	mov	r0, r6
 800c484:	eb04 0903 	add.w	r9, r4, r3
 800c488:	f000 fe20 	bl	800d0cc <_sbrk_r>
 800c48c:	4581      	cmp	r9, r0
 800c48e:	d142      	bne.n	800c516 <_malloc_r+0xea>
 800c490:	6821      	ldr	r1, [r4, #0]
 800c492:	1a6d      	subs	r5, r5, r1
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f7ff ffa6 	bl	800c3e8 <sbrk_aligned>
 800c49c:	3001      	adds	r0, #1
 800c49e:	d03a      	beq.n	800c516 <_malloc_r+0xea>
 800c4a0:	6823      	ldr	r3, [r4, #0]
 800c4a2:	442b      	add	r3, r5
 800c4a4:	6023      	str	r3, [r4, #0]
 800c4a6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4aa:	685a      	ldr	r2, [r3, #4]
 800c4ac:	bb62      	cbnz	r2, 800c508 <_malloc_r+0xdc>
 800c4ae:	f8c8 7000 	str.w	r7, [r8]
 800c4b2:	e00f      	b.n	800c4d4 <_malloc_r+0xa8>
 800c4b4:	6822      	ldr	r2, [r4, #0]
 800c4b6:	1b52      	subs	r2, r2, r5
 800c4b8:	d420      	bmi.n	800c4fc <_malloc_r+0xd0>
 800c4ba:	2a0b      	cmp	r2, #11
 800c4bc:	d917      	bls.n	800c4ee <_malloc_r+0xc2>
 800c4be:	1961      	adds	r1, r4, r5
 800c4c0:	42a3      	cmp	r3, r4
 800c4c2:	6025      	str	r5, [r4, #0]
 800c4c4:	bf18      	it	ne
 800c4c6:	6059      	strne	r1, [r3, #4]
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	bf08      	it	eq
 800c4cc:	f8c8 1000 	streq.w	r1, [r8]
 800c4d0:	5162      	str	r2, [r4, r5]
 800c4d2:	604b      	str	r3, [r1, #4]
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f000 fbf1 	bl	800ccbc <__malloc_unlock>
 800c4da:	f104 000b 	add.w	r0, r4, #11
 800c4de:	1d23      	adds	r3, r4, #4
 800c4e0:	f020 0007 	bic.w	r0, r0, #7
 800c4e4:	1ac2      	subs	r2, r0, r3
 800c4e6:	bf1c      	itt	ne
 800c4e8:	1a1b      	subne	r3, r3, r0
 800c4ea:	50a3      	strne	r3, [r4, r2]
 800c4ec:	e7af      	b.n	800c44e <_malloc_r+0x22>
 800c4ee:	6862      	ldr	r2, [r4, #4]
 800c4f0:	42a3      	cmp	r3, r4
 800c4f2:	bf0c      	ite	eq
 800c4f4:	f8c8 2000 	streq.w	r2, [r8]
 800c4f8:	605a      	strne	r2, [r3, #4]
 800c4fa:	e7eb      	b.n	800c4d4 <_malloc_r+0xa8>
 800c4fc:	4623      	mov	r3, r4
 800c4fe:	6864      	ldr	r4, [r4, #4]
 800c500:	e7ae      	b.n	800c460 <_malloc_r+0x34>
 800c502:	463c      	mov	r4, r7
 800c504:	687f      	ldr	r7, [r7, #4]
 800c506:	e7b6      	b.n	800c476 <_malloc_r+0x4a>
 800c508:	461a      	mov	r2, r3
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	42a3      	cmp	r3, r4
 800c50e:	d1fb      	bne.n	800c508 <_malloc_r+0xdc>
 800c510:	2300      	movs	r3, #0
 800c512:	6053      	str	r3, [r2, #4]
 800c514:	e7de      	b.n	800c4d4 <_malloc_r+0xa8>
 800c516:	230c      	movs	r3, #12
 800c518:	6033      	str	r3, [r6, #0]
 800c51a:	4630      	mov	r0, r6
 800c51c:	f000 fbce 	bl	800ccbc <__malloc_unlock>
 800c520:	e794      	b.n	800c44c <_malloc_r+0x20>
 800c522:	6005      	str	r5, [r0, #0]
 800c524:	e7d6      	b.n	800c4d4 <_malloc_r+0xa8>
 800c526:	bf00      	nop
 800c528:	2000e51c 	.word	0x2000e51c

0800c52c <_printf_common>:
 800c52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c530:	4616      	mov	r6, r2
 800c532:	4698      	mov	r8, r3
 800c534:	688a      	ldr	r2, [r1, #8]
 800c536:	690b      	ldr	r3, [r1, #16]
 800c538:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c53c:	4293      	cmp	r3, r2
 800c53e:	bfb8      	it	lt
 800c540:	4613      	movlt	r3, r2
 800c542:	6033      	str	r3, [r6, #0]
 800c544:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c548:	4607      	mov	r7, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	b10a      	cbz	r2, 800c552 <_printf_common+0x26>
 800c54e:	3301      	adds	r3, #1
 800c550:	6033      	str	r3, [r6, #0]
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	0699      	lsls	r1, r3, #26
 800c556:	bf42      	ittt	mi
 800c558:	6833      	ldrmi	r3, [r6, #0]
 800c55a:	3302      	addmi	r3, #2
 800c55c:	6033      	strmi	r3, [r6, #0]
 800c55e:	6825      	ldr	r5, [r4, #0]
 800c560:	f015 0506 	ands.w	r5, r5, #6
 800c564:	d106      	bne.n	800c574 <_printf_common+0x48>
 800c566:	f104 0a19 	add.w	sl, r4, #25
 800c56a:	68e3      	ldr	r3, [r4, #12]
 800c56c:	6832      	ldr	r2, [r6, #0]
 800c56e:	1a9b      	subs	r3, r3, r2
 800c570:	42ab      	cmp	r3, r5
 800c572:	dc26      	bgt.n	800c5c2 <_printf_common+0x96>
 800c574:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c578:	6822      	ldr	r2, [r4, #0]
 800c57a:	3b00      	subs	r3, #0
 800c57c:	bf18      	it	ne
 800c57e:	2301      	movne	r3, #1
 800c580:	0692      	lsls	r2, r2, #26
 800c582:	d42b      	bmi.n	800c5dc <_printf_common+0xb0>
 800c584:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c588:	4641      	mov	r1, r8
 800c58a:	4638      	mov	r0, r7
 800c58c:	47c8      	blx	r9
 800c58e:	3001      	adds	r0, #1
 800c590:	d01e      	beq.n	800c5d0 <_printf_common+0xa4>
 800c592:	6823      	ldr	r3, [r4, #0]
 800c594:	6922      	ldr	r2, [r4, #16]
 800c596:	f003 0306 	and.w	r3, r3, #6
 800c59a:	2b04      	cmp	r3, #4
 800c59c:	bf02      	ittt	eq
 800c59e:	68e5      	ldreq	r5, [r4, #12]
 800c5a0:	6833      	ldreq	r3, [r6, #0]
 800c5a2:	1aed      	subeq	r5, r5, r3
 800c5a4:	68a3      	ldr	r3, [r4, #8]
 800c5a6:	bf0c      	ite	eq
 800c5a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5ac:	2500      	movne	r5, #0
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	bfc4      	itt	gt
 800c5b2:	1a9b      	subgt	r3, r3, r2
 800c5b4:	18ed      	addgt	r5, r5, r3
 800c5b6:	2600      	movs	r6, #0
 800c5b8:	341a      	adds	r4, #26
 800c5ba:	42b5      	cmp	r5, r6
 800c5bc:	d11a      	bne.n	800c5f4 <_printf_common+0xc8>
 800c5be:	2000      	movs	r0, #0
 800c5c0:	e008      	b.n	800c5d4 <_printf_common+0xa8>
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	4652      	mov	r2, sl
 800c5c6:	4641      	mov	r1, r8
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	47c8      	blx	r9
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d103      	bne.n	800c5d8 <_printf_common+0xac>
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d8:	3501      	adds	r5, #1
 800c5da:	e7c6      	b.n	800c56a <_printf_common+0x3e>
 800c5dc:	18e1      	adds	r1, r4, r3
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	2030      	movs	r0, #48	@ 0x30
 800c5e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c5e6:	4422      	add	r2, r4
 800c5e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c5ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c5f0:	3302      	adds	r3, #2
 800c5f2:	e7c7      	b.n	800c584 <_printf_common+0x58>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4622      	mov	r2, r4
 800c5f8:	4641      	mov	r1, r8
 800c5fa:	4638      	mov	r0, r7
 800c5fc:	47c8      	blx	r9
 800c5fe:	3001      	adds	r0, #1
 800c600:	d0e6      	beq.n	800c5d0 <_printf_common+0xa4>
 800c602:	3601      	adds	r6, #1
 800c604:	e7d9      	b.n	800c5ba <_printf_common+0x8e>
	...

0800c608 <_printf_i>:
 800c608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c60c:	7e0f      	ldrb	r7, [r1, #24]
 800c60e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c610:	2f78      	cmp	r7, #120	@ 0x78
 800c612:	4691      	mov	r9, r2
 800c614:	4680      	mov	r8, r0
 800c616:	460c      	mov	r4, r1
 800c618:	469a      	mov	sl, r3
 800c61a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c61e:	d807      	bhi.n	800c630 <_printf_i+0x28>
 800c620:	2f62      	cmp	r7, #98	@ 0x62
 800c622:	d80a      	bhi.n	800c63a <_printf_i+0x32>
 800c624:	2f00      	cmp	r7, #0
 800c626:	f000 80d2 	beq.w	800c7ce <_printf_i+0x1c6>
 800c62a:	2f58      	cmp	r7, #88	@ 0x58
 800c62c:	f000 80b9 	beq.w	800c7a2 <_printf_i+0x19a>
 800c630:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c634:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c638:	e03a      	b.n	800c6b0 <_printf_i+0xa8>
 800c63a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c63e:	2b15      	cmp	r3, #21
 800c640:	d8f6      	bhi.n	800c630 <_printf_i+0x28>
 800c642:	a101      	add	r1, pc, #4	@ (adr r1, 800c648 <_printf_i+0x40>)
 800c644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c648:	0800c6a1 	.word	0x0800c6a1
 800c64c:	0800c6b5 	.word	0x0800c6b5
 800c650:	0800c631 	.word	0x0800c631
 800c654:	0800c631 	.word	0x0800c631
 800c658:	0800c631 	.word	0x0800c631
 800c65c:	0800c631 	.word	0x0800c631
 800c660:	0800c6b5 	.word	0x0800c6b5
 800c664:	0800c631 	.word	0x0800c631
 800c668:	0800c631 	.word	0x0800c631
 800c66c:	0800c631 	.word	0x0800c631
 800c670:	0800c631 	.word	0x0800c631
 800c674:	0800c7b5 	.word	0x0800c7b5
 800c678:	0800c6df 	.word	0x0800c6df
 800c67c:	0800c76f 	.word	0x0800c76f
 800c680:	0800c631 	.word	0x0800c631
 800c684:	0800c631 	.word	0x0800c631
 800c688:	0800c7d7 	.word	0x0800c7d7
 800c68c:	0800c631 	.word	0x0800c631
 800c690:	0800c6df 	.word	0x0800c6df
 800c694:	0800c631 	.word	0x0800c631
 800c698:	0800c631 	.word	0x0800c631
 800c69c:	0800c777 	.word	0x0800c777
 800c6a0:	6833      	ldr	r3, [r6, #0]
 800c6a2:	1d1a      	adds	r2, r3, #4
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6032      	str	r2, [r6, #0]
 800c6a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e09d      	b.n	800c7f0 <_printf_i+0x1e8>
 800c6b4:	6833      	ldr	r3, [r6, #0]
 800c6b6:	6820      	ldr	r0, [r4, #0]
 800c6b8:	1d19      	adds	r1, r3, #4
 800c6ba:	6031      	str	r1, [r6, #0]
 800c6bc:	0606      	lsls	r6, r0, #24
 800c6be:	d501      	bpl.n	800c6c4 <_printf_i+0xbc>
 800c6c0:	681d      	ldr	r5, [r3, #0]
 800c6c2:	e003      	b.n	800c6cc <_printf_i+0xc4>
 800c6c4:	0645      	lsls	r5, r0, #25
 800c6c6:	d5fb      	bpl.n	800c6c0 <_printf_i+0xb8>
 800c6c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c6cc:	2d00      	cmp	r5, #0
 800c6ce:	da03      	bge.n	800c6d8 <_printf_i+0xd0>
 800c6d0:	232d      	movs	r3, #45	@ 0x2d
 800c6d2:	426d      	negs	r5, r5
 800c6d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6d8:	4859      	ldr	r0, [pc, #356]	@ (800c840 <_printf_i+0x238>)
 800c6da:	230a      	movs	r3, #10
 800c6dc:	e011      	b.n	800c702 <_printf_i+0xfa>
 800c6de:	6821      	ldr	r1, [r4, #0]
 800c6e0:	6833      	ldr	r3, [r6, #0]
 800c6e2:	0608      	lsls	r0, r1, #24
 800c6e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800c6e8:	d402      	bmi.n	800c6f0 <_printf_i+0xe8>
 800c6ea:	0649      	lsls	r1, r1, #25
 800c6ec:	bf48      	it	mi
 800c6ee:	b2ad      	uxthmi	r5, r5
 800c6f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800c6f2:	4853      	ldr	r0, [pc, #332]	@ (800c840 <_printf_i+0x238>)
 800c6f4:	6033      	str	r3, [r6, #0]
 800c6f6:	bf14      	ite	ne
 800c6f8:	230a      	movne	r3, #10
 800c6fa:	2308      	moveq	r3, #8
 800c6fc:	2100      	movs	r1, #0
 800c6fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c702:	6866      	ldr	r6, [r4, #4]
 800c704:	60a6      	str	r6, [r4, #8]
 800c706:	2e00      	cmp	r6, #0
 800c708:	bfa2      	ittt	ge
 800c70a:	6821      	ldrge	r1, [r4, #0]
 800c70c:	f021 0104 	bicge.w	r1, r1, #4
 800c710:	6021      	strge	r1, [r4, #0]
 800c712:	b90d      	cbnz	r5, 800c718 <_printf_i+0x110>
 800c714:	2e00      	cmp	r6, #0
 800c716:	d04b      	beq.n	800c7b0 <_printf_i+0x1a8>
 800c718:	4616      	mov	r6, r2
 800c71a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c71e:	fb03 5711 	mls	r7, r3, r1, r5
 800c722:	5dc7      	ldrb	r7, [r0, r7]
 800c724:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c728:	462f      	mov	r7, r5
 800c72a:	42bb      	cmp	r3, r7
 800c72c:	460d      	mov	r5, r1
 800c72e:	d9f4      	bls.n	800c71a <_printf_i+0x112>
 800c730:	2b08      	cmp	r3, #8
 800c732:	d10b      	bne.n	800c74c <_printf_i+0x144>
 800c734:	6823      	ldr	r3, [r4, #0]
 800c736:	07df      	lsls	r7, r3, #31
 800c738:	d508      	bpl.n	800c74c <_printf_i+0x144>
 800c73a:	6923      	ldr	r3, [r4, #16]
 800c73c:	6861      	ldr	r1, [r4, #4]
 800c73e:	4299      	cmp	r1, r3
 800c740:	bfde      	ittt	le
 800c742:	2330      	movle	r3, #48	@ 0x30
 800c744:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c748:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c74c:	1b92      	subs	r2, r2, r6
 800c74e:	6122      	str	r2, [r4, #16]
 800c750:	f8cd a000 	str.w	sl, [sp]
 800c754:	464b      	mov	r3, r9
 800c756:	aa03      	add	r2, sp, #12
 800c758:	4621      	mov	r1, r4
 800c75a:	4640      	mov	r0, r8
 800c75c:	f7ff fee6 	bl	800c52c <_printf_common>
 800c760:	3001      	adds	r0, #1
 800c762:	d14a      	bne.n	800c7fa <_printf_i+0x1f2>
 800c764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c768:	b004      	add	sp, #16
 800c76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76e:	6823      	ldr	r3, [r4, #0]
 800c770:	f043 0320 	orr.w	r3, r3, #32
 800c774:	6023      	str	r3, [r4, #0]
 800c776:	4833      	ldr	r0, [pc, #204]	@ (800c844 <_printf_i+0x23c>)
 800c778:	2778      	movs	r7, #120	@ 0x78
 800c77a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	6831      	ldr	r1, [r6, #0]
 800c782:	061f      	lsls	r7, r3, #24
 800c784:	f851 5b04 	ldr.w	r5, [r1], #4
 800c788:	d402      	bmi.n	800c790 <_printf_i+0x188>
 800c78a:	065f      	lsls	r7, r3, #25
 800c78c:	bf48      	it	mi
 800c78e:	b2ad      	uxthmi	r5, r5
 800c790:	6031      	str	r1, [r6, #0]
 800c792:	07d9      	lsls	r1, r3, #31
 800c794:	bf44      	itt	mi
 800c796:	f043 0320 	orrmi.w	r3, r3, #32
 800c79a:	6023      	strmi	r3, [r4, #0]
 800c79c:	b11d      	cbz	r5, 800c7a6 <_printf_i+0x19e>
 800c79e:	2310      	movs	r3, #16
 800c7a0:	e7ac      	b.n	800c6fc <_printf_i+0xf4>
 800c7a2:	4827      	ldr	r0, [pc, #156]	@ (800c840 <_printf_i+0x238>)
 800c7a4:	e7e9      	b.n	800c77a <_printf_i+0x172>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	f023 0320 	bic.w	r3, r3, #32
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	e7f6      	b.n	800c79e <_printf_i+0x196>
 800c7b0:	4616      	mov	r6, r2
 800c7b2:	e7bd      	b.n	800c730 <_printf_i+0x128>
 800c7b4:	6833      	ldr	r3, [r6, #0]
 800c7b6:	6825      	ldr	r5, [r4, #0]
 800c7b8:	6961      	ldr	r1, [r4, #20]
 800c7ba:	1d18      	adds	r0, r3, #4
 800c7bc:	6030      	str	r0, [r6, #0]
 800c7be:	062e      	lsls	r6, r5, #24
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	d501      	bpl.n	800c7c8 <_printf_i+0x1c0>
 800c7c4:	6019      	str	r1, [r3, #0]
 800c7c6:	e002      	b.n	800c7ce <_printf_i+0x1c6>
 800c7c8:	0668      	lsls	r0, r5, #25
 800c7ca:	d5fb      	bpl.n	800c7c4 <_printf_i+0x1bc>
 800c7cc:	8019      	strh	r1, [r3, #0]
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	6123      	str	r3, [r4, #16]
 800c7d2:	4616      	mov	r6, r2
 800c7d4:	e7bc      	b.n	800c750 <_printf_i+0x148>
 800c7d6:	6833      	ldr	r3, [r6, #0]
 800c7d8:	1d1a      	adds	r2, r3, #4
 800c7da:	6032      	str	r2, [r6, #0]
 800c7dc:	681e      	ldr	r6, [r3, #0]
 800c7de:	6862      	ldr	r2, [r4, #4]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7f3 fd0c 	bl	8000200 <memchr>
 800c7e8:	b108      	cbz	r0, 800c7ee <_printf_i+0x1e6>
 800c7ea:	1b80      	subs	r0, r0, r6
 800c7ec:	6060      	str	r0, [r4, #4]
 800c7ee:	6863      	ldr	r3, [r4, #4]
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7f8:	e7aa      	b.n	800c750 <_printf_i+0x148>
 800c7fa:	6923      	ldr	r3, [r4, #16]
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	4649      	mov	r1, r9
 800c800:	4640      	mov	r0, r8
 800c802:	47d0      	blx	sl
 800c804:	3001      	adds	r0, #1
 800c806:	d0ad      	beq.n	800c764 <_printf_i+0x15c>
 800c808:	6823      	ldr	r3, [r4, #0]
 800c80a:	079b      	lsls	r3, r3, #30
 800c80c:	d413      	bmi.n	800c836 <_printf_i+0x22e>
 800c80e:	68e0      	ldr	r0, [r4, #12]
 800c810:	9b03      	ldr	r3, [sp, #12]
 800c812:	4298      	cmp	r0, r3
 800c814:	bfb8      	it	lt
 800c816:	4618      	movlt	r0, r3
 800c818:	e7a6      	b.n	800c768 <_printf_i+0x160>
 800c81a:	2301      	movs	r3, #1
 800c81c:	4632      	mov	r2, r6
 800c81e:	4649      	mov	r1, r9
 800c820:	4640      	mov	r0, r8
 800c822:	47d0      	blx	sl
 800c824:	3001      	adds	r0, #1
 800c826:	d09d      	beq.n	800c764 <_printf_i+0x15c>
 800c828:	3501      	adds	r5, #1
 800c82a:	68e3      	ldr	r3, [r4, #12]
 800c82c:	9903      	ldr	r1, [sp, #12]
 800c82e:	1a5b      	subs	r3, r3, r1
 800c830:	42ab      	cmp	r3, r5
 800c832:	dcf2      	bgt.n	800c81a <_printf_i+0x212>
 800c834:	e7eb      	b.n	800c80e <_printf_i+0x206>
 800c836:	2500      	movs	r5, #0
 800c838:	f104 0619 	add.w	r6, r4, #25
 800c83c:	e7f5      	b.n	800c82a <_printf_i+0x222>
 800c83e:	bf00      	nop
 800c840:	0800d465 	.word	0x0800d465
 800c844:	0800d476 	.word	0x0800d476

0800c848 <_scanf_chars>:
 800c848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c84c:	4615      	mov	r5, r2
 800c84e:	688a      	ldr	r2, [r1, #8]
 800c850:	4680      	mov	r8, r0
 800c852:	460c      	mov	r4, r1
 800c854:	b932      	cbnz	r2, 800c864 <_scanf_chars+0x1c>
 800c856:	698a      	ldr	r2, [r1, #24]
 800c858:	2a00      	cmp	r2, #0
 800c85a:	bf14      	ite	ne
 800c85c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800c860:	2201      	moveq	r2, #1
 800c862:	608a      	str	r2, [r1, #8]
 800c864:	6822      	ldr	r2, [r4, #0]
 800c866:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c8f8 <_scanf_chars+0xb0>
 800c86a:	06d1      	lsls	r1, r2, #27
 800c86c:	bf5f      	itttt	pl
 800c86e:	681a      	ldrpl	r2, [r3, #0]
 800c870:	1d11      	addpl	r1, r2, #4
 800c872:	6019      	strpl	r1, [r3, #0]
 800c874:	6816      	ldrpl	r6, [r2, #0]
 800c876:	2700      	movs	r7, #0
 800c878:	69a0      	ldr	r0, [r4, #24]
 800c87a:	b188      	cbz	r0, 800c8a0 <_scanf_chars+0x58>
 800c87c:	2801      	cmp	r0, #1
 800c87e:	d107      	bne.n	800c890 <_scanf_chars+0x48>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	6963      	ldr	r3, [r4, #20]
 800c886:	5c9b      	ldrb	r3, [r3, r2]
 800c888:	b953      	cbnz	r3, 800c8a0 <_scanf_chars+0x58>
 800c88a:	2f00      	cmp	r7, #0
 800c88c:	d031      	beq.n	800c8f2 <_scanf_chars+0xaa>
 800c88e:	e022      	b.n	800c8d6 <_scanf_chars+0x8e>
 800c890:	2802      	cmp	r0, #2
 800c892:	d120      	bne.n	800c8d6 <_scanf_chars+0x8e>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c89c:	071b      	lsls	r3, r3, #28
 800c89e:	d41a      	bmi.n	800c8d6 <_scanf_chars+0x8e>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	06da      	lsls	r2, r3, #27
 800c8a4:	bf5e      	ittt	pl
 800c8a6:	682b      	ldrpl	r3, [r5, #0]
 800c8a8:	781b      	ldrbpl	r3, [r3, #0]
 800c8aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c8ae:	682a      	ldr	r2, [r5, #0]
 800c8b0:	686b      	ldr	r3, [r5, #4]
 800c8b2:	3201      	adds	r2, #1
 800c8b4:	602a      	str	r2, [r5, #0]
 800c8b6:	68a2      	ldr	r2, [r4, #8]
 800c8b8:	3b01      	subs	r3, #1
 800c8ba:	3a01      	subs	r2, #1
 800c8bc:	606b      	str	r3, [r5, #4]
 800c8be:	3701      	adds	r7, #1
 800c8c0:	60a2      	str	r2, [r4, #8]
 800c8c2:	b142      	cbz	r2, 800c8d6 <_scanf_chars+0x8e>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	dcd7      	bgt.n	800c878 <_scanf_chars+0x30>
 800c8c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	4798      	blx	r3
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d0d0      	beq.n	800c878 <_scanf_chars+0x30>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	f013 0310 	ands.w	r3, r3, #16
 800c8dc:	d105      	bne.n	800c8ea <_scanf_chars+0xa2>
 800c8de:	68e2      	ldr	r2, [r4, #12]
 800c8e0:	3201      	adds	r2, #1
 800c8e2:	60e2      	str	r2, [r4, #12]
 800c8e4:	69a2      	ldr	r2, [r4, #24]
 800c8e6:	b102      	cbz	r2, 800c8ea <_scanf_chars+0xa2>
 800c8e8:	7033      	strb	r3, [r6, #0]
 800c8ea:	6923      	ldr	r3, [r4, #16]
 800c8ec:	443b      	add	r3, r7
 800c8ee:	6123      	str	r3, [r4, #16]
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8f6:	bf00      	nop
 800c8f8:	0800d4a3 	.word	0x0800d4a3

0800c8fc <_scanf_i>:
 800c8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c900:	4698      	mov	r8, r3
 800c902:	4b74      	ldr	r3, [pc, #464]	@ (800cad4 <_scanf_i+0x1d8>)
 800c904:	460c      	mov	r4, r1
 800c906:	4682      	mov	sl, r0
 800c908:	4616      	mov	r6, r2
 800c90a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c90e:	b087      	sub	sp, #28
 800c910:	ab03      	add	r3, sp, #12
 800c912:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c916:	4b70      	ldr	r3, [pc, #448]	@ (800cad8 <_scanf_i+0x1dc>)
 800c918:	69a1      	ldr	r1, [r4, #24]
 800c91a:	4a70      	ldr	r2, [pc, #448]	@ (800cadc <_scanf_i+0x1e0>)
 800c91c:	2903      	cmp	r1, #3
 800c91e:	bf08      	it	eq
 800c920:	461a      	moveq	r2, r3
 800c922:	68a3      	ldr	r3, [r4, #8]
 800c924:	9201      	str	r2, [sp, #4]
 800c926:	1e5a      	subs	r2, r3, #1
 800c928:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c92c:	bf88      	it	hi
 800c92e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c932:	4627      	mov	r7, r4
 800c934:	bf82      	ittt	hi
 800c936:	eb03 0905 	addhi.w	r9, r3, r5
 800c93a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c93e:	60a3      	strhi	r3, [r4, #8]
 800c940:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c944:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c948:	bf98      	it	ls
 800c94a:	f04f 0900 	movls.w	r9, #0
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	463d      	mov	r5, r7
 800c952:	f04f 0b00 	mov.w	fp, #0
 800c956:	6831      	ldr	r1, [r6, #0]
 800c958:	ab03      	add	r3, sp, #12
 800c95a:	7809      	ldrb	r1, [r1, #0]
 800c95c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c960:	2202      	movs	r2, #2
 800c962:	f7f3 fc4d 	bl	8000200 <memchr>
 800c966:	b328      	cbz	r0, 800c9b4 <_scanf_i+0xb8>
 800c968:	f1bb 0f01 	cmp.w	fp, #1
 800c96c:	d159      	bne.n	800ca22 <_scanf_i+0x126>
 800c96e:	6862      	ldr	r2, [r4, #4]
 800c970:	b92a      	cbnz	r2, 800c97e <_scanf_i+0x82>
 800c972:	6822      	ldr	r2, [r4, #0]
 800c974:	2108      	movs	r1, #8
 800c976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c97a:	6061      	str	r1, [r4, #4]
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	6822      	ldr	r2, [r4, #0]
 800c980:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	68a2      	ldr	r2, [r4, #8]
 800c988:	1e51      	subs	r1, r2, #1
 800c98a:	60a1      	str	r1, [r4, #8]
 800c98c:	b192      	cbz	r2, 800c9b4 <_scanf_i+0xb8>
 800c98e:	6832      	ldr	r2, [r6, #0]
 800c990:	1c51      	adds	r1, r2, #1
 800c992:	6031      	str	r1, [r6, #0]
 800c994:	7812      	ldrb	r2, [r2, #0]
 800c996:	f805 2b01 	strb.w	r2, [r5], #1
 800c99a:	6872      	ldr	r2, [r6, #4]
 800c99c:	3a01      	subs	r2, #1
 800c99e:	2a00      	cmp	r2, #0
 800c9a0:	6072      	str	r2, [r6, #4]
 800c9a2:	dc07      	bgt.n	800c9b4 <_scanf_i+0xb8>
 800c9a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c9a8:	4631      	mov	r1, r6
 800c9aa:	4650      	mov	r0, sl
 800c9ac:	4790      	blx	r2
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f040 8085 	bne.w	800cabe <_scanf_i+0x1c2>
 800c9b4:	f10b 0b01 	add.w	fp, fp, #1
 800c9b8:	f1bb 0f03 	cmp.w	fp, #3
 800c9bc:	d1cb      	bne.n	800c956 <_scanf_i+0x5a>
 800c9be:	6863      	ldr	r3, [r4, #4]
 800c9c0:	b90b      	cbnz	r3, 800c9c6 <_scanf_i+0xca>
 800c9c2:	230a      	movs	r3, #10
 800c9c4:	6063      	str	r3, [r4, #4]
 800c9c6:	6863      	ldr	r3, [r4, #4]
 800c9c8:	4945      	ldr	r1, [pc, #276]	@ (800cae0 <_scanf_i+0x1e4>)
 800c9ca:	6960      	ldr	r0, [r4, #20]
 800c9cc:	1ac9      	subs	r1, r1, r3
 800c9ce:	f000 f889 	bl	800cae4 <__sccl>
 800c9d2:	f04f 0b00 	mov.w	fp, #0
 800c9d6:	68a3      	ldr	r3, [r4, #8]
 800c9d8:	6822      	ldr	r2, [r4, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d03d      	beq.n	800ca5a <_scanf_i+0x15e>
 800c9de:	6831      	ldr	r1, [r6, #0]
 800c9e0:	6960      	ldr	r0, [r4, #20]
 800c9e2:	f891 c000 	ldrb.w	ip, [r1]
 800c9e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d035      	beq.n	800ca5a <_scanf_i+0x15e>
 800c9ee:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c9f2:	d124      	bne.n	800ca3e <_scanf_i+0x142>
 800c9f4:	0510      	lsls	r0, r2, #20
 800c9f6:	d522      	bpl.n	800ca3e <_scanf_i+0x142>
 800c9f8:	f10b 0b01 	add.w	fp, fp, #1
 800c9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ca00:	d003      	beq.n	800ca0a <_scanf_i+0x10e>
 800ca02:	3301      	adds	r3, #1
 800ca04:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ca08:	60a3      	str	r3, [r4, #8]
 800ca0a:	6873      	ldr	r3, [r6, #4]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	6073      	str	r3, [r6, #4]
 800ca12:	dd1b      	ble.n	800ca4c <_scanf_i+0x150>
 800ca14:	6833      	ldr	r3, [r6, #0]
 800ca16:	3301      	adds	r3, #1
 800ca18:	6033      	str	r3, [r6, #0]
 800ca1a:	68a3      	ldr	r3, [r4, #8]
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	60a3      	str	r3, [r4, #8]
 800ca20:	e7d9      	b.n	800c9d6 <_scanf_i+0xda>
 800ca22:	f1bb 0f02 	cmp.w	fp, #2
 800ca26:	d1ae      	bne.n	800c986 <_scanf_i+0x8a>
 800ca28:	6822      	ldr	r2, [r4, #0]
 800ca2a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ca2e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ca32:	d1bf      	bne.n	800c9b4 <_scanf_i+0xb8>
 800ca34:	2110      	movs	r1, #16
 800ca36:	6061      	str	r1, [r4, #4]
 800ca38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ca3c:	e7a2      	b.n	800c984 <_scanf_i+0x88>
 800ca3e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ca42:	6022      	str	r2, [r4, #0]
 800ca44:	780b      	ldrb	r3, [r1, #0]
 800ca46:	f805 3b01 	strb.w	r3, [r5], #1
 800ca4a:	e7de      	b.n	800ca0a <_scanf_i+0x10e>
 800ca4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ca50:	4631      	mov	r1, r6
 800ca52:	4650      	mov	r0, sl
 800ca54:	4798      	blx	r3
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d0df      	beq.n	800ca1a <_scanf_i+0x11e>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	05d9      	lsls	r1, r3, #23
 800ca5e:	d50d      	bpl.n	800ca7c <_scanf_i+0x180>
 800ca60:	42bd      	cmp	r5, r7
 800ca62:	d909      	bls.n	800ca78 <_scanf_i+0x17c>
 800ca64:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ca68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ca6c:	4632      	mov	r2, r6
 800ca6e:	4650      	mov	r0, sl
 800ca70:	4798      	blx	r3
 800ca72:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ca76:	464d      	mov	r5, r9
 800ca78:	42bd      	cmp	r5, r7
 800ca7a:	d028      	beq.n	800cace <_scanf_i+0x1d2>
 800ca7c:	6822      	ldr	r2, [r4, #0]
 800ca7e:	f012 0210 	ands.w	r2, r2, #16
 800ca82:	d113      	bne.n	800caac <_scanf_i+0x1b0>
 800ca84:	702a      	strb	r2, [r5, #0]
 800ca86:	6863      	ldr	r3, [r4, #4]
 800ca88:	9e01      	ldr	r6, [sp, #4]
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	4650      	mov	r0, sl
 800ca8e:	47b0      	blx	r6
 800ca90:	f8d8 3000 	ldr.w	r3, [r8]
 800ca94:	6821      	ldr	r1, [r4, #0]
 800ca96:	1d1a      	adds	r2, r3, #4
 800ca98:	f8c8 2000 	str.w	r2, [r8]
 800ca9c:	f011 0f20 	tst.w	r1, #32
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	d00f      	beq.n	800cac4 <_scanf_i+0x1c8>
 800caa4:	6018      	str	r0, [r3, #0]
 800caa6:	68e3      	ldr	r3, [r4, #12]
 800caa8:	3301      	adds	r3, #1
 800caaa:	60e3      	str	r3, [r4, #12]
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	1bed      	subs	r5, r5, r7
 800cab0:	445d      	add	r5, fp
 800cab2:	442b      	add	r3, r5
 800cab4:	6123      	str	r3, [r4, #16]
 800cab6:	2000      	movs	r0, #0
 800cab8:	b007      	add	sp, #28
 800caba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cabe:	f04f 0b00 	mov.w	fp, #0
 800cac2:	e7ca      	b.n	800ca5a <_scanf_i+0x15e>
 800cac4:	07ca      	lsls	r2, r1, #31
 800cac6:	bf4c      	ite	mi
 800cac8:	8018      	strhmi	r0, [r3, #0]
 800caca:	6018      	strpl	r0, [r3, #0]
 800cacc:	e7eb      	b.n	800caa6 <_scanf_i+0x1aa>
 800cace:	2001      	movs	r0, #1
 800cad0:	e7f2      	b.n	800cab8 <_scanf_i+0x1bc>
 800cad2:	bf00      	nop
 800cad4:	0800d36c 	.word	0x0800d36c
 800cad8:	0800ce8d 	.word	0x0800ce8d
 800cadc:	0800cf6d 	.word	0x0800cf6d
 800cae0:	0800d497 	.word	0x0800d497

0800cae4 <__sccl>:
 800cae4:	b570      	push	{r4, r5, r6, lr}
 800cae6:	780b      	ldrb	r3, [r1, #0]
 800cae8:	4604      	mov	r4, r0
 800caea:	2b5e      	cmp	r3, #94	@ 0x5e
 800caec:	bf0b      	itete	eq
 800caee:	784b      	ldrbeq	r3, [r1, #1]
 800caf0:	1c4a      	addne	r2, r1, #1
 800caf2:	1c8a      	addeq	r2, r1, #2
 800caf4:	2100      	movne	r1, #0
 800caf6:	bf08      	it	eq
 800caf8:	2101      	moveq	r1, #1
 800cafa:	3801      	subs	r0, #1
 800cafc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800cb00:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cb04:	42a8      	cmp	r0, r5
 800cb06:	d1fb      	bne.n	800cb00 <__sccl+0x1c>
 800cb08:	b90b      	cbnz	r3, 800cb0e <__sccl+0x2a>
 800cb0a:	1e50      	subs	r0, r2, #1
 800cb0c:	bd70      	pop	{r4, r5, r6, pc}
 800cb0e:	f081 0101 	eor.w	r1, r1, #1
 800cb12:	54e1      	strb	r1, [r4, r3]
 800cb14:	4610      	mov	r0, r2
 800cb16:	4602      	mov	r2, r0
 800cb18:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb1c:	2d2d      	cmp	r5, #45	@ 0x2d
 800cb1e:	d005      	beq.n	800cb2c <__sccl+0x48>
 800cb20:	2d5d      	cmp	r5, #93	@ 0x5d
 800cb22:	d016      	beq.n	800cb52 <__sccl+0x6e>
 800cb24:	2d00      	cmp	r5, #0
 800cb26:	d0f1      	beq.n	800cb0c <__sccl+0x28>
 800cb28:	462b      	mov	r3, r5
 800cb2a:	e7f2      	b.n	800cb12 <__sccl+0x2e>
 800cb2c:	7846      	ldrb	r6, [r0, #1]
 800cb2e:	2e5d      	cmp	r6, #93	@ 0x5d
 800cb30:	d0fa      	beq.n	800cb28 <__sccl+0x44>
 800cb32:	42b3      	cmp	r3, r6
 800cb34:	dcf8      	bgt.n	800cb28 <__sccl+0x44>
 800cb36:	3002      	adds	r0, #2
 800cb38:	461a      	mov	r2, r3
 800cb3a:	3201      	adds	r2, #1
 800cb3c:	4296      	cmp	r6, r2
 800cb3e:	54a1      	strb	r1, [r4, r2]
 800cb40:	dcfb      	bgt.n	800cb3a <__sccl+0x56>
 800cb42:	1af2      	subs	r2, r6, r3
 800cb44:	3a01      	subs	r2, #1
 800cb46:	1c5d      	adds	r5, r3, #1
 800cb48:	42b3      	cmp	r3, r6
 800cb4a:	bfa8      	it	ge
 800cb4c:	2200      	movge	r2, #0
 800cb4e:	18ab      	adds	r3, r5, r2
 800cb50:	e7e1      	b.n	800cb16 <__sccl+0x32>
 800cb52:	4610      	mov	r0, r2
 800cb54:	e7da      	b.n	800cb0c <__sccl+0x28>
	...

0800cb58 <__sflush_r>:
 800cb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb60:	0716      	lsls	r6, r2, #28
 800cb62:	4605      	mov	r5, r0
 800cb64:	460c      	mov	r4, r1
 800cb66:	d454      	bmi.n	800cc12 <__sflush_r+0xba>
 800cb68:	684b      	ldr	r3, [r1, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	dc02      	bgt.n	800cb74 <__sflush_r+0x1c>
 800cb6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	dd48      	ble.n	800cc06 <__sflush_r+0xae>
 800cb74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb76:	2e00      	cmp	r6, #0
 800cb78:	d045      	beq.n	800cc06 <__sflush_r+0xae>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb80:	682f      	ldr	r7, [r5, #0]
 800cb82:	6a21      	ldr	r1, [r4, #32]
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	d030      	beq.n	800cbea <__sflush_r+0x92>
 800cb88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	0759      	lsls	r1, r3, #29
 800cb8e:	d505      	bpl.n	800cb9c <__sflush_r+0x44>
 800cb90:	6863      	ldr	r3, [r4, #4]
 800cb92:	1ad2      	subs	r2, r2, r3
 800cb94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb96:	b10b      	cbz	r3, 800cb9c <__sflush_r+0x44>
 800cb98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb9a:	1ad2      	subs	r2, r2, r3
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cba0:	6a21      	ldr	r1, [r4, #32]
 800cba2:	4628      	mov	r0, r5
 800cba4:	47b0      	blx	r6
 800cba6:	1c43      	adds	r3, r0, #1
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	d106      	bne.n	800cbba <__sflush_r+0x62>
 800cbac:	6829      	ldr	r1, [r5, #0]
 800cbae:	291d      	cmp	r1, #29
 800cbb0:	d82b      	bhi.n	800cc0a <__sflush_r+0xb2>
 800cbb2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc5c <__sflush_r+0x104>)
 800cbb4:	410a      	asrs	r2, r1
 800cbb6:	07d6      	lsls	r6, r2, #31
 800cbb8:	d427      	bmi.n	800cc0a <__sflush_r+0xb2>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	6062      	str	r2, [r4, #4]
 800cbbe:	04d9      	lsls	r1, r3, #19
 800cbc0:	6922      	ldr	r2, [r4, #16]
 800cbc2:	6022      	str	r2, [r4, #0]
 800cbc4:	d504      	bpl.n	800cbd0 <__sflush_r+0x78>
 800cbc6:	1c42      	adds	r2, r0, #1
 800cbc8:	d101      	bne.n	800cbce <__sflush_r+0x76>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	b903      	cbnz	r3, 800cbd0 <__sflush_r+0x78>
 800cbce:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbd2:	602f      	str	r7, [r5, #0]
 800cbd4:	b1b9      	cbz	r1, 800cc06 <__sflush_r+0xae>
 800cbd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbda:	4299      	cmp	r1, r3
 800cbdc:	d002      	beq.n	800cbe4 <__sflush_r+0x8c>
 800cbde:	4628      	mov	r0, r5
 800cbe0:	f7fe ff4a 	bl	800ba78 <_free_r>
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbe8:	e00d      	b.n	800cc06 <__sflush_r+0xae>
 800cbea:	2301      	movs	r3, #1
 800cbec:	4628      	mov	r0, r5
 800cbee:	47b0      	blx	r6
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	1c50      	adds	r0, r2, #1
 800cbf4:	d1c9      	bne.n	800cb8a <__sflush_r+0x32>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0c6      	beq.n	800cb8a <__sflush_r+0x32>
 800cbfc:	2b1d      	cmp	r3, #29
 800cbfe:	d001      	beq.n	800cc04 <__sflush_r+0xac>
 800cc00:	2b16      	cmp	r3, #22
 800cc02:	d11e      	bne.n	800cc42 <__sflush_r+0xea>
 800cc04:	602f      	str	r7, [r5, #0]
 800cc06:	2000      	movs	r0, #0
 800cc08:	e022      	b.n	800cc50 <__sflush_r+0xf8>
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc0e:	b21b      	sxth	r3, r3
 800cc10:	e01b      	b.n	800cc4a <__sflush_r+0xf2>
 800cc12:	690f      	ldr	r7, [r1, #16]
 800cc14:	2f00      	cmp	r7, #0
 800cc16:	d0f6      	beq.n	800cc06 <__sflush_r+0xae>
 800cc18:	0793      	lsls	r3, r2, #30
 800cc1a:	680e      	ldr	r6, [r1, #0]
 800cc1c:	bf08      	it	eq
 800cc1e:	694b      	ldreq	r3, [r1, #20]
 800cc20:	600f      	str	r7, [r1, #0]
 800cc22:	bf18      	it	ne
 800cc24:	2300      	movne	r3, #0
 800cc26:	eba6 0807 	sub.w	r8, r6, r7
 800cc2a:	608b      	str	r3, [r1, #8]
 800cc2c:	f1b8 0f00 	cmp.w	r8, #0
 800cc30:	dde9      	ble.n	800cc06 <__sflush_r+0xae>
 800cc32:	6a21      	ldr	r1, [r4, #32]
 800cc34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc36:	4643      	mov	r3, r8
 800cc38:	463a      	mov	r2, r7
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	47b0      	blx	r6
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	dc08      	bgt.n	800cc54 <__sflush_r+0xfc>
 800cc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc54:	4407      	add	r7, r0
 800cc56:	eba8 0800 	sub.w	r8, r8, r0
 800cc5a:	e7e7      	b.n	800cc2c <__sflush_r+0xd4>
 800cc5c:	dfbffffe 	.word	0xdfbffffe

0800cc60 <_fflush_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	690b      	ldr	r3, [r1, #16]
 800cc64:	4605      	mov	r5, r0
 800cc66:	460c      	mov	r4, r1
 800cc68:	b913      	cbnz	r3, 800cc70 <_fflush_r+0x10>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	b118      	cbz	r0, 800cc7a <_fflush_r+0x1a>
 800cc72:	6a03      	ldr	r3, [r0, #32]
 800cc74:	b90b      	cbnz	r3, 800cc7a <_fflush_r+0x1a>
 800cc76:	f7fe fd59 	bl	800b72c <__sinit>
 800cc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d0f3      	beq.n	800cc6a <_fflush_r+0xa>
 800cc82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc84:	07d0      	lsls	r0, r2, #31
 800cc86:	d404      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc88:	0599      	lsls	r1, r3, #22
 800cc8a:	d402      	bmi.n	800cc92 <_fflush_r+0x32>
 800cc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc8e:	f7fe fef0 	bl	800ba72 <__retarget_lock_acquire_recursive>
 800cc92:	4628      	mov	r0, r5
 800cc94:	4621      	mov	r1, r4
 800cc96:	f7ff ff5f 	bl	800cb58 <__sflush_r>
 800cc9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc9c:	07da      	lsls	r2, r3, #31
 800cc9e:	4605      	mov	r5, r0
 800cca0:	d4e4      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca2:	89a3      	ldrh	r3, [r4, #12]
 800cca4:	059b      	lsls	r3, r3, #22
 800cca6:	d4e1      	bmi.n	800cc6c <_fflush_r+0xc>
 800cca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccaa:	f7fe fee3 	bl	800ba74 <__retarget_lock_release_recursive>
 800ccae:	e7dd      	b.n	800cc6c <_fflush_r+0xc>

0800ccb0 <__malloc_lock>:
 800ccb0:	4801      	ldr	r0, [pc, #4]	@ (800ccb8 <__malloc_lock+0x8>)
 800ccb2:	f7fe bede 	b.w	800ba72 <__retarget_lock_acquire_recursive>
 800ccb6:	bf00      	nop
 800ccb8:	2000e514 	.word	0x2000e514

0800ccbc <__malloc_unlock>:
 800ccbc:	4801      	ldr	r0, [pc, #4]	@ (800ccc4 <__malloc_unlock+0x8>)
 800ccbe:	f7fe bed9 	b.w	800ba74 <__retarget_lock_release_recursive>
 800ccc2:	bf00      	nop
 800ccc4:	2000e514 	.word	0x2000e514

0800ccc8 <__submore>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ccd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccd4:	4299      	cmp	r1, r3
 800ccd6:	d11d      	bne.n	800cd14 <__submore+0x4c>
 800ccd8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ccdc:	f7ff fba6 	bl	800c42c <_malloc_r>
 800cce0:	b918      	cbnz	r0, 800ccea <__submore+0x22>
 800cce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ccee:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ccf0:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ccf4:	6360      	str	r0, [r4, #52]	@ 0x34
 800ccf6:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ccfa:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ccfe:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800cd02:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cd06:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cd0a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cd0e:	6020      	str	r0, [r4, #0]
 800cd10:	2000      	movs	r0, #0
 800cd12:	e7e8      	b.n	800cce6 <__submore+0x1e>
 800cd14:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cd16:	0077      	lsls	r7, r6, #1
 800cd18:	463a      	mov	r2, r7
 800cd1a:	f000 f80f 	bl	800cd3c <_realloc_r>
 800cd1e:	4605      	mov	r5, r0
 800cd20:	2800      	cmp	r0, #0
 800cd22:	d0de      	beq.n	800cce2 <__submore+0x1a>
 800cd24:	eb00 0806 	add.w	r8, r0, r6
 800cd28:	4601      	mov	r1, r0
 800cd2a:	4632      	mov	r2, r6
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	f000 f9dd 	bl	800d0ec <memcpy>
 800cd32:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cd36:	f8c4 8000 	str.w	r8, [r4]
 800cd3a:	e7e9      	b.n	800cd10 <__submore+0x48>

0800cd3c <_realloc_r>:
 800cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd40:	4680      	mov	r8, r0
 800cd42:	4615      	mov	r5, r2
 800cd44:	460c      	mov	r4, r1
 800cd46:	b921      	cbnz	r1, 800cd52 <_realloc_r+0x16>
 800cd48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd4c:	4611      	mov	r1, r2
 800cd4e:	f7ff bb6d 	b.w	800c42c <_malloc_r>
 800cd52:	b92a      	cbnz	r2, 800cd60 <_realloc_r+0x24>
 800cd54:	f7fe fe90 	bl	800ba78 <_free_r>
 800cd58:	2400      	movs	r4, #0
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd60:	f000 f9d2 	bl	800d108 <_malloc_usable_size_r>
 800cd64:	4285      	cmp	r5, r0
 800cd66:	4606      	mov	r6, r0
 800cd68:	d802      	bhi.n	800cd70 <_realloc_r+0x34>
 800cd6a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd6e:	d8f4      	bhi.n	800cd5a <_realloc_r+0x1e>
 800cd70:	4629      	mov	r1, r5
 800cd72:	4640      	mov	r0, r8
 800cd74:	f7ff fb5a 	bl	800c42c <_malloc_r>
 800cd78:	4607      	mov	r7, r0
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d0ec      	beq.n	800cd58 <_realloc_r+0x1c>
 800cd7e:	42b5      	cmp	r5, r6
 800cd80:	462a      	mov	r2, r5
 800cd82:	4621      	mov	r1, r4
 800cd84:	bf28      	it	cs
 800cd86:	4632      	movcs	r2, r6
 800cd88:	f000 f9b0 	bl	800d0ec <memcpy>
 800cd8c:	4621      	mov	r1, r4
 800cd8e:	4640      	mov	r0, r8
 800cd90:	f7fe fe72 	bl	800ba78 <_free_r>
 800cd94:	463c      	mov	r4, r7
 800cd96:	e7e0      	b.n	800cd5a <_realloc_r+0x1e>

0800cd98 <_strtol_l.constprop.0>:
 800cd98:	2b24      	cmp	r3, #36	@ 0x24
 800cd9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd9e:	4686      	mov	lr, r0
 800cda0:	4690      	mov	r8, r2
 800cda2:	d801      	bhi.n	800cda8 <_strtol_l.constprop.0+0x10>
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d106      	bne.n	800cdb6 <_strtol_l.constprop.0+0x1e>
 800cda8:	f7fe fe38 	bl	800ba1c <__errno>
 800cdac:	2316      	movs	r3, #22
 800cdae:	6003      	str	r3, [r0, #0]
 800cdb0:	2000      	movs	r0, #0
 800cdb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdb6:	4834      	ldr	r0, [pc, #208]	@ (800ce88 <_strtol_l.constprop.0+0xf0>)
 800cdb8:	460d      	mov	r5, r1
 800cdba:	462a      	mov	r2, r5
 800cdbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdc0:	5d06      	ldrb	r6, [r0, r4]
 800cdc2:	f016 0608 	ands.w	r6, r6, #8
 800cdc6:	d1f8      	bne.n	800cdba <_strtol_l.constprop.0+0x22>
 800cdc8:	2c2d      	cmp	r4, #45	@ 0x2d
 800cdca:	d12d      	bne.n	800ce28 <_strtol_l.constprop.0+0x90>
 800cdcc:	782c      	ldrb	r4, [r5, #0]
 800cdce:	2601      	movs	r6, #1
 800cdd0:	1c95      	adds	r5, r2, #2
 800cdd2:	f033 0210 	bics.w	r2, r3, #16
 800cdd6:	d109      	bne.n	800cdec <_strtol_l.constprop.0+0x54>
 800cdd8:	2c30      	cmp	r4, #48	@ 0x30
 800cdda:	d12a      	bne.n	800ce32 <_strtol_l.constprop.0+0x9a>
 800cddc:	782a      	ldrb	r2, [r5, #0]
 800cdde:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cde2:	2a58      	cmp	r2, #88	@ 0x58
 800cde4:	d125      	bne.n	800ce32 <_strtol_l.constprop.0+0x9a>
 800cde6:	786c      	ldrb	r4, [r5, #1]
 800cde8:	2310      	movs	r3, #16
 800cdea:	3502      	adds	r5, #2
 800cdec:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cdf0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	fbbc f9f3 	udiv	r9, ip, r3
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	fb03 ca19 	mls	sl, r3, r9, ip
 800ce00:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ce04:	2f09      	cmp	r7, #9
 800ce06:	d81b      	bhi.n	800ce40 <_strtol_l.constprop.0+0xa8>
 800ce08:	463c      	mov	r4, r7
 800ce0a:	42a3      	cmp	r3, r4
 800ce0c:	dd27      	ble.n	800ce5e <_strtol_l.constprop.0+0xc6>
 800ce0e:	1c57      	adds	r7, r2, #1
 800ce10:	d007      	beq.n	800ce22 <_strtol_l.constprop.0+0x8a>
 800ce12:	4581      	cmp	r9, r0
 800ce14:	d320      	bcc.n	800ce58 <_strtol_l.constprop.0+0xc0>
 800ce16:	d101      	bne.n	800ce1c <_strtol_l.constprop.0+0x84>
 800ce18:	45a2      	cmp	sl, r4
 800ce1a:	db1d      	blt.n	800ce58 <_strtol_l.constprop.0+0xc0>
 800ce1c:	fb00 4003 	mla	r0, r0, r3, r4
 800ce20:	2201      	movs	r2, #1
 800ce22:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce26:	e7eb      	b.n	800ce00 <_strtol_l.constprop.0+0x68>
 800ce28:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce2a:	bf04      	itt	eq
 800ce2c:	782c      	ldrbeq	r4, [r5, #0]
 800ce2e:	1c95      	addeq	r5, r2, #2
 800ce30:	e7cf      	b.n	800cdd2 <_strtol_l.constprop.0+0x3a>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1da      	bne.n	800cdec <_strtol_l.constprop.0+0x54>
 800ce36:	2c30      	cmp	r4, #48	@ 0x30
 800ce38:	bf0c      	ite	eq
 800ce3a:	2308      	moveq	r3, #8
 800ce3c:	230a      	movne	r3, #10
 800ce3e:	e7d5      	b.n	800cdec <_strtol_l.constprop.0+0x54>
 800ce40:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ce44:	2f19      	cmp	r7, #25
 800ce46:	d801      	bhi.n	800ce4c <_strtol_l.constprop.0+0xb4>
 800ce48:	3c37      	subs	r4, #55	@ 0x37
 800ce4a:	e7de      	b.n	800ce0a <_strtol_l.constprop.0+0x72>
 800ce4c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ce50:	2f19      	cmp	r7, #25
 800ce52:	d804      	bhi.n	800ce5e <_strtol_l.constprop.0+0xc6>
 800ce54:	3c57      	subs	r4, #87	@ 0x57
 800ce56:	e7d8      	b.n	800ce0a <_strtol_l.constprop.0+0x72>
 800ce58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ce5c:	e7e1      	b.n	800ce22 <_strtol_l.constprop.0+0x8a>
 800ce5e:	1c53      	adds	r3, r2, #1
 800ce60:	d108      	bne.n	800ce74 <_strtol_l.constprop.0+0xdc>
 800ce62:	2322      	movs	r3, #34	@ 0x22
 800ce64:	f8ce 3000 	str.w	r3, [lr]
 800ce68:	4660      	mov	r0, ip
 800ce6a:	f1b8 0f00 	cmp.w	r8, #0
 800ce6e:	d0a0      	beq.n	800cdb2 <_strtol_l.constprop.0+0x1a>
 800ce70:	1e69      	subs	r1, r5, #1
 800ce72:	e006      	b.n	800ce82 <_strtol_l.constprop.0+0xea>
 800ce74:	b106      	cbz	r6, 800ce78 <_strtol_l.constprop.0+0xe0>
 800ce76:	4240      	negs	r0, r0
 800ce78:	f1b8 0f00 	cmp.w	r8, #0
 800ce7c:	d099      	beq.n	800cdb2 <_strtol_l.constprop.0+0x1a>
 800ce7e:	2a00      	cmp	r2, #0
 800ce80:	d1f6      	bne.n	800ce70 <_strtol_l.constprop.0+0xd8>
 800ce82:	f8c8 1000 	str.w	r1, [r8]
 800ce86:	e794      	b.n	800cdb2 <_strtol_l.constprop.0+0x1a>
 800ce88:	0800d4a3 	.word	0x0800d4a3

0800ce8c <_strtol_r>:
 800ce8c:	f7ff bf84 	b.w	800cd98 <_strtol_l.constprop.0>

0800ce90 <_strtoul_l.constprop.0>:
 800ce90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce94:	4e34      	ldr	r6, [pc, #208]	@ (800cf68 <_strtoul_l.constprop.0+0xd8>)
 800ce96:	4686      	mov	lr, r0
 800ce98:	460d      	mov	r5, r1
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cea0:	5d37      	ldrb	r7, [r6, r4]
 800cea2:	f017 0708 	ands.w	r7, r7, #8
 800cea6:	d1f8      	bne.n	800ce9a <_strtoul_l.constprop.0+0xa>
 800cea8:	2c2d      	cmp	r4, #45	@ 0x2d
 800ceaa:	d12f      	bne.n	800cf0c <_strtoul_l.constprop.0+0x7c>
 800ceac:	782c      	ldrb	r4, [r5, #0]
 800ceae:	2701      	movs	r7, #1
 800ceb0:	1c85      	adds	r5, r0, #2
 800ceb2:	f033 0010 	bics.w	r0, r3, #16
 800ceb6:	d109      	bne.n	800cecc <_strtoul_l.constprop.0+0x3c>
 800ceb8:	2c30      	cmp	r4, #48	@ 0x30
 800ceba:	d12c      	bne.n	800cf16 <_strtoul_l.constprop.0+0x86>
 800cebc:	7828      	ldrb	r0, [r5, #0]
 800cebe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cec2:	2858      	cmp	r0, #88	@ 0x58
 800cec4:	d127      	bne.n	800cf16 <_strtoul_l.constprop.0+0x86>
 800cec6:	786c      	ldrb	r4, [r5, #1]
 800cec8:	2310      	movs	r3, #16
 800ceca:	3502      	adds	r5, #2
 800cecc:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ced0:	2600      	movs	r6, #0
 800ced2:	fbb8 f8f3 	udiv	r8, r8, r3
 800ced6:	fb03 f908 	mul.w	r9, r3, r8
 800ceda:	ea6f 0909 	mvn.w	r9, r9
 800cede:	4630      	mov	r0, r6
 800cee0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cee4:	f1bc 0f09 	cmp.w	ip, #9
 800cee8:	d81c      	bhi.n	800cf24 <_strtoul_l.constprop.0+0x94>
 800ceea:	4664      	mov	r4, ip
 800ceec:	42a3      	cmp	r3, r4
 800ceee:	dd2a      	ble.n	800cf46 <_strtoul_l.constprop.0+0xb6>
 800cef0:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800cef4:	d007      	beq.n	800cf06 <_strtoul_l.constprop.0+0x76>
 800cef6:	4580      	cmp	r8, r0
 800cef8:	d322      	bcc.n	800cf40 <_strtoul_l.constprop.0+0xb0>
 800cefa:	d101      	bne.n	800cf00 <_strtoul_l.constprop.0+0x70>
 800cefc:	45a1      	cmp	r9, r4
 800cefe:	db1f      	blt.n	800cf40 <_strtoul_l.constprop.0+0xb0>
 800cf00:	fb00 4003 	mla	r0, r0, r3, r4
 800cf04:	2601      	movs	r6, #1
 800cf06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf0a:	e7e9      	b.n	800cee0 <_strtoul_l.constprop.0+0x50>
 800cf0c:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf0e:	bf04      	itt	eq
 800cf10:	782c      	ldrbeq	r4, [r5, #0]
 800cf12:	1c85      	addeq	r5, r0, #2
 800cf14:	e7cd      	b.n	800ceb2 <_strtoul_l.constprop.0+0x22>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1d8      	bne.n	800cecc <_strtoul_l.constprop.0+0x3c>
 800cf1a:	2c30      	cmp	r4, #48	@ 0x30
 800cf1c:	bf0c      	ite	eq
 800cf1e:	2308      	moveq	r3, #8
 800cf20:	230a      	movne	r3, #10
 800cf22:	e7d3      	b.n	800cecc <_strtoul_l.constprop.0+0x3c>
 800cf24:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cf28:	f1bc 0f19 	cmp.w	ip, #25
 800cf2c:	d801      	bhi.n	800cf32 <_strtoul_l.constprop.0+0xa2>
 800cf2e:	3c37      	subs	r4, #55	@ 0x37
 800cf30:	e7dc      	b.n	800ceec <_strtoul_l.constprop.0+0x5c>
 800cf32:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cf36:	f1bc 0f19 	cmp.w	ip, #25
 800cf3a:	d804      	bhi.n	800cf46 <_strtoul_l.constprop.0+0xb6>
 800cf3c:	3c57      	subs	r4, #87	@ 0x57
 800cf3e:	e7d5      	b.n	800ceec <_strtoul_l.constprop.0+0x5c>
 800cf40:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800cf44:	e7df      	b.n	800cf06 <_strtoul_l.constprop.0+0x76>
 800cf46:	1c73      	adds	r3, r6, #1
 800cf48:	d106      	bne.n	800cf58 <_strtoul_l.constprop.0+0xc8>
 800cf4a:	2322      	movs	r3, #34	@ 0x22
 800cf4c:	f8ce 3000 	str.w	r3, [lr]
 800cf50:	4630      	mov	r0, r6
 800cf52:	b932      	cbnz	r2, 800cf62 <_strtoul_l.constprop.0+0xd2>
 800cf54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf58:	b107      	cbz	r7, 800cf5c <_strtoul_l.constprop.0+0xcc>
 800cf5a:	4240      	negs	r0, r0
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	d0f9      	beq.n	800cf54 <_strtoul_l.constprop.0+0xc4>
 800cf60:	b106      	cbz	r6, 800cf64 <_strtoul_l.constprop.0+0xd4>
 800cf62:	1e69      	subs	r1, r5, #1
 800cf64:	6011      	str	r1, [r2, #0]
 800cf66:	e7f5      	b.n	800cf54 <_strtoul_l.constprop.0+0xc4>
 800cf68:	0800d4a3 	.word	0x0800d4a3

0800cf6c <_strtoul_r>:
 800cf6c:	f7ff bf90 	b.w	800ce90 <_strtoul_l.constprop.0>

0800cf70 <__swbuf_r>:
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	460e      	mov	r6, r1
 800cf74:	4614      	mov	r4, r2
 800cf76:	4605      	mov	r5, r0
 800cf78:	b118      	cbz	r0, 800cf82 <__swbuf_r+0x12>
 800cf7a:	6a03      	ldr	r3, [r0, #32]
 800cf7c:	b90b      	cbnz	r3, 800cf82 <__swbuf_r+0x12>
 800cf7e:	f7fe fbd5 	bl	800b72c <__sinit>
 800cf82:	69a3      	ldr	r3, [r4, #24]
 800cf84:	60a3      	str	r3, [r4, #8]
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	071a      	lsls	r2, r3, #28
 800cf8a:	d501      	bpl.n	800cf90 <__swbuf_r+0x20>
 800cf8c:	6923      	ldr	r3, [r4, #16]
 800cf8e:	b943      	cbnz	r3, 800cfa2 <__swbuf_r+0x32>
 800cf90:	4621      	mov	r1, r4
 800cf92:	4628      	mov	r0, r5
 800cf94:	f000 f82a 	bl	800cfec <__swsetup_r>
 800cf98:	b118      	cbz	r0, 800cfa2 <__swbuf_r+0x32>
 800cf9a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cf9e:	4638      	mov	r0, r7
 800cfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	6922      	ldr	r2, [r4, #16]
 800cfa6:	1a98      	subs	r0, r3, r2
 800cfa8:	6963      	ldr	r3, [r4, #20]
 800cfaa:	b2f6      	uxtb	r6, r6
 800cfac:	4283      	cmp	r3, r0
 800cfae:	4637      	mov	r7, r6
 800cfb0:	dc05      	bgt.n	800cfbe <__swbuf_r+0x4e>
 800cfb2:	4621      	mov	r1, r4
 800cfb4:	4628      	mov	r0, r5
 800cfb6:	f7ff fe53 	bl	800cc60 <_fflush_r>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d1ed      	bne.n	800cf9a <__swbuf_r+0x2a>
 800cfbe:	68a3      	ldr	r3, [r4, #8]
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	60a3      	str	r3, [r4, #8]
 800cfc4:	6823      	ldr	r3, [r4, #0]
 800cfc6:	1c5a      	adds	r2, r3, #1
 800cfc8:	6022      	str	r2, [r4, #0]
 800cfca:	701e      	strb	r6, [r3, #0]
 800cfcc:	6962      	ldr	r2, [r4, #20]
 800cfce:	1c43      	adds	r3, r0, #1
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d004      	beq.n	800cfde <__swbuf_r+0x6e>
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	07db      	lsls	r3, r3, #31
 800cfd8:	d5e1      	bpl.n	800cf9e <__swbuf_r+0x2e>
 800cfda:	2e0a      	cmp	r6, #10
 800cfdc:	d1df      	bne.n	800cf9e <__swbuf_r+0x2e>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f7ff fe3d 	bl	800cc60 <_fflush_r>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d0d9      	beq.n	800cf9e <__swbuf_r+0x2e>
 800cfea:	e7d6      	b.n	800cf9a <__swbuf_r+0x2a>

0800cfec <__swsetup_r>:
 800cfec:	b538      	push	{r3, r4, r5, lr}
 800cfee:	4b29      	ldr	r3, [pc, #164]	@ (800d094 <__swsetup_r+0xa8>)
 800cff0:	4605      	mov	r5, r0
 800cff2:	6818      	ldr	r0, [r3, #0]
 800cff4:	460c      	mov	r4, r1
 800cff6:	b118      	cbz	r0, 800d000 <__swsetup_r+0x14>
 800cff8:	6a03      	ldr	r3, [r0, #32]
 800cffa:	b90b      	cbnz	r3, 800d000 <__swsetup_r+0x14>
 800cffc:	f7fe fb96 	bl	800b72c <__sinit>
 800d000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d004:	0719      	lsls	r1, r3, #28
 800d006:	d422      	bmi.n	800d04e <__swsetup_r+0x62>
 800d008:	06da      	lsls	r2, r3, #27
 800d00a:	d407      	bmi.n	800d01c <__swsetup_r+0x30>
 800d00c:	2209      	movs	r2, #9
 800d00e:	602a      	str	r2, [r5, #0]
 800d010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d01a:	e033      	b.n	800d084 <__swsetup_r+0x98>
 800d01c:	0758      	lsls	r0, r3, #29
 800d01e:	d512      	bpl.n	800d046 <__swsetup_r+0x5a>
 800d020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d022:	b141      	cbz	r1, 800d036 <__swsetup_r+0x4a>
 800d024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d028:	4299      	cmp	r1, r3
 800d02a:	d002      	beq.n	800d032 <__swsetup_r+0x46>
 800d02c:	4628      	mov	r0, r5
 800d02e:	f7fe fd23 	bl	800ba78 <_free_r>
 800d032:	2300      	movs	r3, #0
 800d034:	6363      	str	r3, [r4, #52]	@ 0x34
 800d036:	89a3      	ldrh	r3, [r4, #12]
 800d038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d03c:	81a3      	strh	r3, [r4, #12]
 800d03e:	2300      	movs	r3, #0
 800d040:	6063      	str	r3, [r4, #4]
 800d042:	6923      	ldr	r3, [r4, #16]
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	89a3      	ldrh	r3, [r4, #12]
 800d048:	f043 0308 	orr.w	r3, r3, #8
 800d04c:	81a3      	strh	r3, [r4, #12]
 800d04e:	6923      	ldr	r3, [r4, #16]
 800d050:	b94b      	cbnz	r3, 800d066 <__swsetup_r+0x7a>
 800d052:	89a3      	ldrh	r3, [r4, #12]
 800d054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d05c:	d003      	beq.n	800d066 <__swsetup_r+0x7a>
 800d05e:	4621      	mov	r1, r4
 800d060:	4628      	mov	r0, r5
 800d062:	f7fe fbbf 	bl	800b7e4 <__smakebuf_r>
 800d066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d06a:	f013 0201 	ands.w	r2, r3, #1
 800d06e:	d00a      	beq.n	800d086 <__swsetup_r+0x9a>
 800d070:	2200      	movs	r2, #0
 800d072:	60a2      	str	r2, [r4, #8]
 800d074:	6962      	ldr	r2, [r4, #20]
 800d076:	4252      	negs	r2, r2
 800d078:	61a2      	str	r2, [r4, #24]
 800d07a:	6922      	ldr	r2, [r4, #16]
 800d07c:	b942      	cbnz	r2, 800d090 <__swsetup_r+0xa4>
 800d07e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d082:	d1c5      	bne.n	800d010 <__swsetup_r+0x24>
 800d084:	bd38      	pop	{r3, r4, r5, pc}
 800d086:	0799      	lsls	r1, r3, #30
 800d088:	bf58      	it	pl
 800d08a:	6962      	ldrpl	r2, [r4, #20]
 800d08c:	60a2      	str	r2, [r4, #8]
 800d08e:	e7f4      	b.n	800d07a <__swsetup_r+0x8e>
 800d090:	2000      	movs	r0, #0
 800d092:	e7f7      	b.n	800d084 <__swsetup_r+0x98>
 800d094:	20000044 	.word	0x20000044

0800d098 <memmove>:
 800d098:	4288      	cmp	r0, r1
 800d09a:	b510      	push	{r4, lr}
 800d09c:	eb01 0402 	add.w	r4, r1, r2
 800d0a0:	d902      	bls.n	800d0a8 <memmove+0x10>
 800d0a2:	4284      	cmp	r4, r0
 800d0a4:	4623      	mov	r3, r4
 800d0a6:	d807      	bhi.n	800d0b8 <memmove+0x20>
 800d0a8:	1e43      	subs	r3, r0, #1
 800d0aa:	42a1      	cmp	r1, r4
 800d0ac:	d008      	beq.n	800d0c0 <memmove+0x28>
 800d0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0b6:	e7f8      	b.n	800d0aa <memmove+0x12>
 800d0b8:	4402      	add	r2, r0
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	428a      	cmp	r2, r1
 800d0be:	d100      	bne.n	800d0c2 <memmove+0x2a>
 800d0c0:	bd10      	pop	{r4, pc}
 800d0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0ca:	e7f7      	b.n	800d0bc <memmove+0x24>

0800d0cc <_sbrk_r>:
 800d0cc:	b538      	push	{r3, r4, r5, lr}
 800d0ce:	4d06      	ldr	r5, [pc, #24]	@ (800d0e8 <_sbrk_r+0x1c>)
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	4604      	mov	r4, r0
 800d0d4:	4608      	mov	r0, r1
 800d0d6:	602b      	str	r3, [r5, #0]
 800d0d8:	f7f4 f9c0 	bl	800145c <_sbrk>
 800d0dc:	1c43      	adds	r3, r0, #1
 800d0de:	d102      	bne.n	800d0e6 <_sbrk_r+0x1a>
 800d0e0:	682b      	ldr	r3, [r5, #0]
 800d0e2:	b103      	cbz	r3, 800d0e6 <_sbrk_r+0x1a>
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	2000e510 	.word	0x2000e510

0800d0ec <memcpy>:
 800d0ec:	440a      	add	r2, r1
 800d0ee:	4291      	cmp	r1, r2
 800d0f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d0f4:	d100      	bne.n	800d0f8 <memcpy+0xc>
 800d0f6:	4770      	bx	lr
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d102:	4291      	cmp	r1, r2
 800d104:	d1f9      	bne.n	800d0fa <memcpy+0xe>
 800d106:	bd10      	pop	{r4, pc}

0800d108 <_malloc_usable_size_r>:
 800d108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d10c:	1f18      	subs	r0, r3, #4
 800d10e:	2b00      	cmp	r3, #0
 800d110:	bfbc      	itt	lt
 800d112:	580b      	ldrlt	r3, [r1, r0]
 800d114:	18c0      	addlt	r0, r0, r3
 800d116:	4770      	bx	lr

0800d118 <_init>:
 800d118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11a:	bf00      	nop
 800d11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11e:	bc08      	pop	{r3}
 800d120:	469e      	mov	lr, r3
 800d122:	4770      	bx	lr

0800d124 <_fini>:
 800d124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d126:	bf00      	nop
 800d128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12a:	bc08      	pop	{r3}
 800d12c:	469e      	mov	lr, r3
 800d12e:	4770      	bx	lr
