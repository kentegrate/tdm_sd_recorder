
tdm_sd_recorder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800d0a0  0800d0a0  0000e0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d8  0800d4d8  0000f094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d8  0800d4d8  0000e4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4e0  0800d4e0  0000f094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4e0  0800d4e0  0000e4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4e4  0800d4e4  0000e4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  0800d4e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000268c  20000094  0800d57c  0000f094  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20002720  0800d57c  0000f720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bac  00000000  00000000  0000f0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003665  00000000  00000000  00025c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  000292d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee3  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4be  00000000  00000000  0002b52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196ad  00000000  00000000  000559e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3b23  00000000  00000000  0006f096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf8  00000000  00000000  00162bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001687f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d088 	.word	0x0800d088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800d088 	.word	0x0800d088

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <sd_card_init>:
static FATFS sdCard;
static FIL wavFile;
static uint32_t wav_file_size;
static uint8_t first_time = 0;
void sd_card_init()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//	mounting an sd card
	sd_result = f_mount(&sdCard,SDPath, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	490f      	ldr	r1, [pc, #60]	@ (80005d4 <sd_card_init+0x44>)
 8000598:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <sd_card_init+0x48>)
 800059a:	f009 ffc9 	bl	800a530 <f_mount>
 800059e:	4603      	mov	r3, r0
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <sd_card_init+0x4c>)
 80005a4:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <sd_card_init+0x4c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d007      	beq.n	80005be <sd_card_init+0x2e>
	{
		printf("error in mounting an sd card: %d \n", sd_result);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <sd_card_init+0x4c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <sd_card_init+0x50>)
 80005b6:	f00b f909 	bl	800b7cc <iprintf>
		while(1);
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <sd_card_init+0x2a>
	}
	else
	{
		printf("succeded in mounting an sd card \n");
 80005be:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <sd_card_init+0x54>)
 80005c0:	f00b f96c 	bl	800b89c <puts>
	    printf("sdCard.fs_type = %d\n", sdCard.fs_type); // Check if fs_type is set
 80005c4:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <sd_card_init+0x48>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	4619      	mov	r1, r3
 80005ca:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <sd_card_init+0x58>)
 80005cc:	f00b f8fe 	bl	800b7cc <iprintf>

	}
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000259c 	.word	0x2000259c
 80005d8:	200000b4 	.word	0x200000b4
 80005dc:	200000b0 	.word	0x200000b0
 80005e0:	0800d0a0 	.word	0x0800d0a0
 80005e4:	0800d0c4 	.word	0x0800d0c4
 80005e8:	0800d0e8 	.word	0x0800d0e8

080005ec <start_recording>:

void start_recording(uint32_t fs, char* file_name, uint8_t n_channels)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	//static char file_name[] = "w_000.wav";
	static uint8_t file_counter = 10;
	//int file_number_digits = file_counter;
	uint32_t byte_rate = fs * 4 * n_channels; // fs * 32 bit (4 bytes) x n_channels
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	fb02 f303 	mul.w	r3, r2, r3
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	617b      	str	r3, [r7, #20]
	wav_file_header[22] = (uint8_t)n_channels;
 8000606:	4a2a      	ldr	r2, [pc, #168]	@ (80006b0 <start_recording+0xc4>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7593      	strb	r3, [r2, #22]

	wav_file_header[24] = (uint8_t)fs;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <start_recording+0xc4>)
 8000612:	761a      	strb	r2, [r3, #24]
	wav_file_header[25] = (uint8_t)(fs >> 8);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	0a1b      	lsrs	r3, r3, #8
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <start_recording+0xc4>)
 800061c:	765a      	strb	r2, [r3, #25]
	wav_file_header[26] = (uint8_t)(fs >> 16);
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	0c1b      	lsrs	r3, r3, #16
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <start_recording+0xc4>)
 8000626:	769a      	strb	r2, [r3, #26]
	wav_file_header[27] = (uint8_t)(fs >> 24);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	0e1b      	lsrs	r3, r3, #24
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <start_recording+0xc4>)
 8000630:	76da      	strb	r2, [r3, #27]

	wav_file_header[28] = (uint8_t)byte_rate;
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <start_recording+0xc4>)
 8000638:	771a      	strb	r2, [r3, #28]
	wav_file_header[29] = (uint8_t)(byte_rate >> 8);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <start_recording+0xc4>)
 8000642:	775a      	strb	r2, [r3, #29]
	wav_file_header[30] = (uint8_t)(byte_rate >> 16);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	0c1b      	lsrs	r3, r3, #16
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <start_recording+0xc4>)
 800064c:	779a      	strb	r2, [r3, #30]
	wav_file_header[31] = (uint8_t)(byte_rate >> 24);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	0e1b      	lsrs	r3, r3, #24
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <start_recording+0xc4>)
 8000656:	77da      	strb	r2, [r3, #31]

	wav_file_header[32] = (uint8_t)(4 * n_channels); // 32 bit (4 bytes) x n_channels
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <start_recording+0xc4>)
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
	//file_name[4] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[3] = file_number_digits%10 + 48;
	//file_number_digits /= 10;
	//file_name[2] = file_number_digits%10 + 48;
	printf("file name %s \n", file_name);
 8000664:	68b9      	ldr	r1, [r7, #8]
 8000666:	4813      	ldr	r0, [pc, #76]	@ (80006b4 <start_recording+0xc8>)
 8000668:	f00b f8b0 	bl	800b7cc <iprintf>
	//file_counter++;

	// creating a file
	sd_result = f_open(&wavFile ,"0:/test2.wav", FA_WRITE|FA_CREATE_ALWAYS);
 800066c:	220a      	movs	r2, #10
 800066e:	4912      	ldr	r1, [pc, #72]	@ (80006b8 <start_recording+0xcc>)
 8000670:	4812      	ldr	r0, [pc, #72]	@ (80006bc <start_recording+0xd0>)
 8000672:	f009 ffa3 	bl	800a5bc <f_open>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <start_recording+0xd4>)
 800067c:	701a      	strb	r2, [r3, #0]
	if(sd_result != 0)
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <start_recording+0xd4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d007      	beq.n	8000696 <start_recording+0xaa>
	{
		printf("error in creating a file: %d \n", sd_result);
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <start_recording+0xd4>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	4619      	mov	r1, r3
 800068c:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <start_recording+0xd8>)
 800068e:	f00b f89d 	bl	800b7cc <iprintf>
		while(1);
 8000692:	bf00      	nop
 8000694:	e7fd      	b.n	8000692 <start_recording+0xa6>
	}
	else
	{
		printf("succeeded in opening a file \n");
 8000696:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <start_recording+0xdc>)
 8000698:	f00b f900 	bl	800b89c <puts>
	}
	wav_file_size = 0;
 800069c:	4b0b      	ldr	r3, [pc, #44]	@ (80006cc <start_recording+0xe0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 80006a2:	2064      	movs	r0, #100	@ 0x64
 80006a4:	f000 ff8e 	bl	80015c4 <HAL_Delay>


}
 80006a8:	bf00      	nop
 80006aa:	3718      	adds	r7, #24
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	0800d100 	.word	0x0800d100
 80006b8:	0800d110 	.word	0x0800d110
 80006bc:	200010e8 	.word	0x200010e8
 80006c0:	200000b0 	.word	0x200000b0
 80006c4:	0800d120 	.word	0x0800d120
 80006c8:	0800d140 	.word	0x0800d140
 80006cc:	20002118 	.word	0x20002118

080006d0 <write2wave_file>:

void write2wave_file(uint8_t *data, uint16_t data_size) // data size is in bytes.
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	807b      	strh	r3, [r7, #2]
	uint32_t temp_number;
	printf("w\n");
 80006dc:	481d      	ldr	r0, [pc, #116]	@ (8000754 <write2wave_file+0x84>)
 80006de:	f00b f8dd 	bl	800b89c <puts>
	if(first_time == 0)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <write2wave_file+0x88>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d113      	bne.n	8000712 <write2wave_file+0x42>
	{
		for(int i = 0; i < 44; i++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	e00a      	b.n	8000706 <write2wave_file+0x36>
		{
			*(data + i) = wav_file_header[i];
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4919      	ldr	r1, [pc, #100]	@ (800075c <write2wave_file+0x8c>)
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	440a      	add	r2, r1
 80006fc:	7812      	ldrb	r2, [r2, #0]
 80006fe:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < 44; i++)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b2b      	cmp	r3, #43	@ 0x2b
 800070a:	ddf1      	ble.n	80006f0 <write2wave_file+0x20>
		}
		first_time = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <write2wave_file+0x88>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
	}

	sd_result = f_write(&wavFile,(void *)data, data_size,(UINT*)&temp_number);
 8000712:	887a      	ldrh	r2, [r7, #2]
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	6879      	ldr	r1, [r7, #4]
 800071a:	4811      	ldr	r0, [pc, #68]	@ (8000760 <write2wave_file+0x90>)
 800071c:	f00a f916 	bl	800a94c <f_write>
 8000720:	4603      	mov	r3, r0
 8000722:	461a      	mov	r2, r3
 8000724:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <write2wave_file+0x94>)
 8000726:	701a      	strb	r2, [r3, #0]

	if(sd_result != 0)
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <write2wave_file+0x94>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d007      	beq.n	8000740 <write2wave_file+0x70>
	{
		printf("error in writing to the file: %d \n", sd_result);
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <write2wave_file+0x94>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	480c      	ldr	r0, [pc, #48]	@ (8000768 <write2wave_file+0x98>)
 8000738:	f00b f848 	bl	800b7cc <iprintf>
		while(1);
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <write2wave_file+0x6c>
	}
	wav_file_size += data_size;
 8000740:	887a      	ldrh	r2, [r7, #2]
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <write2wave_file+0x9c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4413      	add	r3, r2
 8000748:	4a08      	ldr	r2, [pc, #32]	@ (800076c <write2wave_file+0x9c>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800d160 	.word	0x0800d160
 8000758:	2000211c 	.word	0x2000211c
 800075c:	20000000 	.word	0x20000000
 8000760:	200010e8 	.word	0x200010e8
 8000764:	200000b0 	.word	0x200000b0
 8000768:	0800d164 	.word	0x0800d164
 800076c:	20002118 	.word	0x20002118

08000770 <stop_recording>:

void stop_recording()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
	uint16_t temp_number;
	// updating data size sector
	wav_file_size -= 8;
 8000776:	4b2f      	ldr	r3, [pc, #188]	@ (8000834 <stop_recording+0xc4>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3b08      	subs	r3, #8
 800077c:	4a2d      	ldr	r2, [pc, #180]	@ (8000834 <stop_recording+0xc4>)
 800077e:	6013      	str	r3, [r2, #0]
	wav_file_header[4] = (uint8_t)wav_file_size;
 8000780:	4b2c      	ldr	r3, [pc, #176]	@ (8000834 <stop_recording+0xc4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b2c      	ldr	r3, [pc, #176]	@ (8000838 <stop_recording+0xc8>)
 8000788:	711a      	strb	r2, [r3, #4]
	wav_file_header[5] = (uint8_t)(wav_file_size >> 8);
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <stop_recording+0xc4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4b29      	ldr	r3, [pc, #164]	@ (8000838 <stop_recording+0xc8>)
 8000794:	715a      	strb	r2, [r3, #5]
	wav_file_header[6] = (uint8_t)(wav_file_size >> 16);
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <stop_recording+0xc4>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	0c1b      	lsrs	r3, r3, #16
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <stop_recording+0xc8>)
 80007a0:	719a      	strb	r2, [r3, #6]
	wav_file_header[7] = (uint8_t)(wav_file_size >> 24);
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <stop_recording+0xc4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	0e1b      	lsrs	r3, r3, #24
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b23      	ldr	r3, [pc, #140]	@ (8000838 <stop_recording+0xc8>)
 80007ac:	71da      	strb	r2, [r3, #7]
	wav_file_size -= 36;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <stop_recording+0xc4>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3b24      	subs	r3, #36	@ 0x24
 80007b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <stop_recording+0xc4>)
 80007b6:	6013      	str	r3, [r2, #0]
	wav_file_header[40] = (uint8_t)wav_file_size;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <stop_recording+0xc4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <stop_recording+0xc8>)
 80007c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	wav_file_header[41] = (uint8_t)(wav_file_size >> 8);
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <stop_recording+0xc4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	0a1b      	lsrs	r3, r3, #8
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <stop_recording+0xc8>)
 80007ce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	wav_file_header[42] = (uint8_t)(wav_file_size >> 16);
 80007d2:	4b18      	ldr	r3, [pc, #96]	@ (8000834 <stop_recording+0xc4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	0c1b      	lsrs	r3, r3, #16
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <stop_recording+0xc8>)
 80007dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	wav_file_header[43] = (uint8_t)(wav_file_size >> 24);
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <stop_recording+0xc4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	0e1b      	lsrs	r3, r3, #24
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <stop_recording+0xc8>)
 80007ea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

	// moving to the beginning of the file to update the file format
	f_lseek(&wavFile, 0);
 80007ee:	2100      	movs	r1, #0
 80007f0:	4812      	ldr	r0, [pc, #72]	@ (800083c <stop_recording+0xcc>)
 80007f2:	f00a fae7 	bl	800adc4 <f_lseek>
	f_write(&wavFile,(void *)wav_file_header, sizeof(wav_file_header),(UINT*)&temp_number);
 80007f6:	1dbb      	adds	r3, r7, #6
 80007f8:	222c      	movs	r2, #44	@ 0x2c
 80007fa:	490f      	ldr	r1, [pc, #60]	@ (8000838 <stop_recording+0xc8>)
 80007fc:	480f      	ldr	r0, [pc, #60]	@ (800083c <stop_recording+0xcc>)
 80007fe:	f00a f8a5 	bl	800a94c <f_write>
	if(sd_result != 0)
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <stop_recording+0xd0>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <stop_recording+0xaa>
	{
		printf("error in updating the first sector: %d \n", sd_result);
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <stop_recording+0xd0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	@ (8000844 <stop_recording+0xd4>)
 8000812:	f00a ffdb 	bl	800b7cc <iprintf>
		while(1);
 8000816:	bf00      	nop
 8000818:	e7fd      	b.n	8000816 <stop_recording+0xa6>
	}
	f_close(&wavFile);
 800081a:	4808      	ldr	r0, [pc, #32]	@ (800083c <stop_recording+0xcc>)
 800081c:	f00a faa8 	bl	800ad70 <f_close>
	first_time = 0;
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <stop_recording+0xd8>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
	printf("closed the file \n");
 8000826:	4809      	ldr	r0, [pc, #36]	@ (800084c <stop_recording+0xdc>)
 8000828:	f00b f838 	bl	800b89c <puts>
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20002118 	.word	0x20002118
 8000838:	20000000 	.word	0x20000000
 800083c:	200010e8 	.word	0x200010e8
 8000840:	200000b0 	.word	0x200000b0
 8000844:	0800d188 	.word	0x0800d188
 8000848:	2000211c 	.word	0x2000211c
 800084c:	0800d1b4 	.word	0x0800d1b4

08000850 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1b      	ldr	r2, [pc, #108]	@ (80008cc <HAL_UART_RxCpltCallback+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d130      	bne.n	80008c4 <HAL_UART_RxCpltCallback+0x74>

        if (uart_rx_buffer[uart_rx_index] == '\n') {
 8000862:	4b1b      	ldr	r3, [pc, #108]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <HAL_UART_RxCpltCallback+0x84>)
 800086c:	5c9b      	ldrb	r3, [r3, r2]
 800086e:	2b0a      	cmp	r3, #10
 8000870:	d10d      	bne.n	800088e <HAL_UART_RxCpltCallback+0x3e>
            uart_rx_buffer[uart_rx_index] = '\0';
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b2db      	uxtb	r3, r3
 8000878:	461a      	mov	r2, r3
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <HAL_UART_RxCpltCallback+0x84>)
 800087c:	2100      	movs	r1, #0
 800087e:	5499      	strb	r1, [r3, r2]
            command_received = 1;
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_UART_RxCpltCallback+0x88>)
 8000882:	2201      	movs	r2, #1
 8000884:	601a      	str	r2, [r3, #0]
            uart_rx_index = 0;
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	e00f      	b.n	80008ae <HAL_UART_RxCpltCallback+0x5e>
        } else if (uart_rx_index < CMD_BUFFER_SIZE - 1) {
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b3e      	cmp	r3, #62	@ 0x3e
 8000896:	d807      	bhi.n	80008a8 <HAL_UART_RxCpltCallback+0x58>
            uart_rx_index = uart_rx_index + 1;
 8000898:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	4b0b      	ldr	r3, [pc, #44]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 80008a4:	701a      	strb	r2, [r3, #0]
 80008a6:	e002      	b.n	80008ae <HAL_UART_RxCpltCallback+0x5e>



        } else {
            uart_rx_index = 0; // Reset index on overflow
 80008a8:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80008ae:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <HAL_UART_RxCpltCallback+0x80>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <HAL_UART_RxCpltCallback+0x84>)
 80008b8:	4413      	add	r3, r2
 80008ba:	2201      	movs	r2, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	4807      	ldr	r0, [pc, #28]	@ (80008dc <HAL_UART_RxCpltCallback+0x8c>)
 80008c0:	f005 fdee 	bl	80064a0 <HAL_UART_Receive_IT>
    }
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40004400 	.word	0x40004400
 80008d0:	20002580 	.word	0x20002580
 80008d4:	20002500 	.word	0x20002500
 80008d8:	20002584 	.word	0x20002584
 80008dc:	20002270 	.word	0x20002270

080008e0 <process_command>:

void process_command(char *command) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b092      	sub	sp, #72	@ 0x48
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
    if (command[0] == 's' && command[1] == ' ') {
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b73      	cmp	r3, #115	@ 0x73
 80008ee:	d115      	bne.n	800091c <process_command+0x3c>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b20      	cmp	r3, #32
 80008f8:	d110      	bne.n	800091c <process_command+0x3c>
        char filename[CMD_BUFFER_SIZE];
        sscanf(command, "s %s", filename);
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	461a      	mov	r2, r3
 8000900:	4915      	ldr	r1, [pc, #84]	@ (8000958 <process_command+0x78>)
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f00a fdce 	bl	800b4a4 <siscanf>
        StartRecording(filename);
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fa9b 	bl	8000e48 <StartRecording>
        recording_state = 1;
 8000912:	4b12      	ldr	r3, [pc, #72]	@ (800095c <process_command+0x7c>)
 8000914:	2201      	movs	r2, #1
 8000916:	601a      	str	r2, [r3, #0]
    if (command[0] == 's' && command[1] == ' ') {
 8000918:	bf00      	nop
    } else if (strcmp(command, "c") == 0) {
        SendCurrentStatus();
    } else {
        IndicateInvalidCommand();
    }
}
 800091a:	e018      	b.n	800094e <process_command+0x6e>
    } else if (strcmp(command, "e") == 0) {
 800091c:	4910      	ldr	r1, [pc, #64]	@ (8000960 <process_command+0x80>)
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fc5e 	bl	80001e0 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d105      	bne.n	8000936 <process_command+0x56>
        recording_state = 0;
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <process_command+0x7c>)
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
        StopRecording();
 8000930:	f000 fab4 	bl	8000e9c <StopRecording>
}
 8000934:	e00b      	b.n	800094e <process_command+0x6e>
    } else if (strcmp(command, "c") == 0) {
 8000936:	490b      	ldr	r1, [pc, #44]	@ (8000964 <process_command+0x84>)
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fc51 	bl	80001e0 <strcmp>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <process_command+0x6a>
        SendCurrentStatus();
 8000944:	f000 fabe 	bl	8000ec4 <SendCurrentStatus>
}
 8000948:	e001      	b.n	800094e <process_command+0x6e>
        IndicateInvalidCommand();
 800094a:	f000 fad5 	bl	8000ef8 <IndicateInvalidCommand>
}
 800094e:	bf00      	nop
 8000950:	3748      	adds	r7, #72	@ 0x48
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	0800d1c8 	.word	0x0800d1c8
 800095c:	20002588 	.word	0x20002588
 8000960:	0800d1d0 	.word	0x0800d1d0
 8000964:	0800d1d4 	.word	0x0800d1d4

08000968 <UART_SendString>:

void UART_SendString(UART_HandleTypeDef *huart, char *str) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8000972:	6838      	ldr	r0, [r7, #0]
 8000974:	f7ff fc2c 	bl	80001d0 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000980:	6839      	ldr	r1, [r7, #0]
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f005 fd02 	bl	800638c <HAL_UART_Transmit>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  setbuf(stdout, NULL);
 8000994:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <main+0xb0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f00a fc90 	bl	800b2c2 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a2:	f000 fd93 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a6:	f000 f85f 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009aa:	f000 f97b 	bl	8000ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009ae:	f000 f95b 	bl	8000c68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009b2:	f000 f929 	bl	8000c08 <MX_USART2_UART_Init>
  MX_SDMMC1_SD_Init();
 80009b6:	f000 f903 	bl	8000bc0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80009ba:	f007 fdf9 	bl	80085b0 <MX_FATFS_Init>
  MX_SAI2_Init();
 80009be:	f000 f8a5 	bl	8000b0c <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  sd_card_init();
 80009c2:	f7ff fde5 	bl	8000590 <sd_card_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uart_rx_index = 0;
 80009c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <main+0xb4>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t*)&uart_rx_buffer[uart_rx_index], 1);
 80009cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a44 <main+0xb4>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	461a      	mov	r2, r3
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <main+0xb8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	2201      	movs	r2, #1
 80009da:	4619      	mov	r1, r3
 80009dc:	481b      	ldr	r0, [pc, #108]	@ (8000a4c <main+0xbc>)
 80009de:	f005 fd5f 	bl	80064a0 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (command_received) {
 80009e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <main+0xc0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d005      	beq.n	80009f6 <main+0x66>
          process_command(uart_rx_buffer);
 80009ea:	4817      	ldr	r0, [pc, #92]	@ (8000a48 <main+0xb8>)
 80009ec:	f7ff ff78 	bl	80008e0 <process_command>
          command_received = 0;
 80009f0:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <main+0xc0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
      }

	  if(recording_state && half_tdm)
 80009f6:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <main+0xc4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d00c      	beq.n	8000a18 <main+0x88>
 80009fe:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <main+0xc8>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d007      	beq.n	8000a18 <main+0x88>
	  {
		  write2wave_file(((uint8_t*)data_tdm),	 sizeof(data_tdm)/2); // half count * 4 byte per sample
 8000a08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0c:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <main+0xcc>)
 8000a0e:	f7ff fe5f 	bl	80006d0 <write2wave_file>
		  half_tdm = 0;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <main+0xc8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
	  }
	  if(recording_state && full_tdm)
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <main+0xc4>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0e0      	beq.n	80009e2 <main+0x52>
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <main+0xd0>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0db      	beq.n	80009e2 <main+0x52>
	  {
		  write2wave_file(((uint8_t*)data_tdm) + sizeof(data_tdm)/2, sizeof(data_tdm)/2);
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <main+0xd4>)
 8000a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe4d 	bl	80006d0 <write2wave_file>
		  full_tdm = 0;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <main+0xd0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
      if (command_received) {
 8000a3c:	e7d1      	b.n	80009e2 <main+0x52>
 8000a3e:	bf00      	nop
 8000a40:	20000044 	.word	0x20000044
 8000a44:	20002580 	.word	0x20002580
 8000a48:	20002500 	.word	0x20002500
 8000a4c:	20002270 	.word	0x20002270
 8000a50:	20002584 	.word	0x20002584
 8000a54:	20002588 	.word	0x20002588
 8000a58:	200024fc 	.word	0x200024fc
 8000a5c:	200022f8 	.word	0x200022f8
 8000a60:	200024fd 	.word	0x200024fd
 8000a64:	200023f8 	.word	0x200023f8

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b096      	sub	sp, #88	@ 0x58
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	2244      	movs	r2, #68	@ 0x44
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00a ff18 	bl	800b8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a8e:	f001 fb2d 	bl	80020ec <HAL_PWREx_ControlVoltageScaling>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a98:	f000 fa50 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2310      	movs	r3, #16
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ab6:	230a      	movs	r3, #10
 8000ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aba:	2307      	movs	r3, #7
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fb64 	bl	8002198 <HAL_RCC_OscConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ad6:	f000 fa31 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ada:	230f      	movs	r3, #15
 8000adc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aee:	463b      	mov	r3, r7
 8000af0:	2104      	movs	r1, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 ff2c 	bl	8002950 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afe:	f000 fa1d 	bl	8000f3c <Error_Handler>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3758      	adds	r7, #88	@ 0x58
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000b10:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b12:	4a2a      	ldr	r2, [pc, #168]	@ (8000bbc <MX_SAI2_Init+0xb0>)
 8000b14:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b16:	4b28      	ldr	r3, [pc, #160]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b1c:	4b26      	ldr	r3, [pc, #152]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_32;
 8000b22:	4b25      	ldr	r3, [pc, #148]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b24:	22e0      	movs	r2, #224	@ 0xe0
 8000b26:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b28:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8000b2e:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b34:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b40:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b4e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000b52:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.FrameInit.FrameLength = 256;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b7c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000b88:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b90:	2280      	movs	r2, #128	@ 0x80
 8000b92:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 8;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b96:	2208      	movs	r2, #8
 8000b98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x0000FFFF;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000b9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba0:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_SAI2_Init+0xac>)
 8000ba4:	f003 fc12 	bl	80043cc <HAL_SAI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SAI2_Init+0xa6>
  {
    Error_Handler();
 8000bae:	f000 f9c5 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20002120 	.word	0x20002120
 8000bbc:	40015804 	.word	0x40015804

08000bc0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <MX_SDMMC1_SD_Init+0x44>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000bca:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bea:	2208      	movs	r2, #8
 8000bec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000bee:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <MX_SDMMC1_SD_Init+0x40>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200021ec 	.word	0x200021ec
 8000c04:	40012800 	.word	0x40012800

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <MX_USART2_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f005 fb50 	bl	80062f0 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f000 f971 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20002270 	.word	0x20002270
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_DMA_Init+0x38>)
 8000c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c72:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca0 <MX_DMA_Init+0x38>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6493      	str	r3, [r2, #72]	@ 0x48
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_DMA_Init+0x38>)
 8000c7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2010      	movs	r0, #16
 8000c8c:	f000 fd99 	bl	80017c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000c90:	2010      	movs	r0, #16
 8000c92:	f000 fdb2 	bl	80017fa <HAL_NVIC_EnableIRQ>

}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08a      	sub	sp, #40	@ 0x28
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b48      	ldr	r3, [pc, #288]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	4a47      	ldr	r2, [pc, #284]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc6:	4b45      	ldr	r3, [pc, #276]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd2:	4b42      	ldr	r3, [pc, #264]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd6:	4a41      	ldr	r2, [pc, #260]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cde:	4b3f      	ldr	r3, [pc, #252]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b3c      	ldr	r3, [pc, #240]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	4a3b      	ldr	r2, [pc, #236]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf6:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	4a35      	ldr	r2, [pc, #212]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0e:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <MX_GPIO_Init+0x138>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2120      	movs	r1, #32
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3a:	f001 f9b1 	bl	80020a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d44:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4822      	ldr	r0, [pc, #136]	@ (8000de0 <MX_GPIO_Init+0x13c>)
 8000d56:	f000 ffe1 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d78:	f000 ffd0 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d96:	f000 ffc1 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000dac:	230d      	movs	r3, #13
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480a      	ldr	r0, [pc, #40]	@ (8000de0 <MX_GPIO_Init+0x13c>)
 8000db8:	f000 ffb0 	bl	8001d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_GPIO_Init+0x140>)
 8000dd0:	f000 ffa4 	bl	8001d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	@ 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	48000800 	.word	0x48000800
 8000de4:	48000400 	.word	0x48000400

08000de8 <HAL_SAI_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]

	full_tdm = 1;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_SAI_RxCpltCallback+0x24>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[0];
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_SAI_RxCpltCallback+0x28>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a06      	ldr	r2, [pc, #24]	@ (8000e14 <HAL_SAI_RxCpltCallback+0x2c>)
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200024fd 	.word	0x200024fd
 8000e10:	200022f8 	.word	0x200022f8
 8000e14:	200024f8 	.word	0x200024f8

08000e18 <HAL_SAI_RxHalfCpltCallback>:
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	//sample_i2s = data_i2s[0];
	half_tdm= 1;
 8000e20:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <HAL_SAI_RxHalfCpltCallback+0x24>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
	sample_tdm = data_tdm[WAV_WRITE_SAMPLE_COUNT/2];
 8000e26:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8000e28:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000e2c:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <HAL_SAI_RxHalfCpltCallback+0x2c>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	200024fc 	.word	0x200024fc
 8000e40:	200022f8 	.word	0x200022f8
 8000e44:	200024f8 	.word	0x200024f8

08000e48 <StartRecording>:

void StartRecording(char *filename) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    snprintf(uart_tx_buffer, sizeof(uart_tx_buffer), "Starting recording to file: %s\r\n", filename);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <StartRecording+0x40>)
 8000e54:	2140      	movs	r1, #64	@ 0x40
 8000e56:	480d      	ldr	r0, [pc, #52]	@ (8000e8c <StartRecording+0x44>)
 8000e58:	f00a faf0 	bl	800b43c <sniprintf>
    UART_SendString(&huart2, uart_tx_buffer);
 8000e5c:	490b      	ldr	r1, [pc, #44]	@ (8000e8c <StartRecording+0x44>)
 8000e5e:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <StartRecording+0x48>)
 8000e60:	f7ff fd82 	bl	8000968 <UART_SendString>
    // Implement file opening/creation here
    start_recording(SAI_AUDIO_FREQUENCY_48K, filename, (uint8_t)hsai_BlockA2.SlotInit.SlotNumber);
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <StartRecording+0x4c>)
 8000e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	f64b 3080 	movw	r0, #48000	@ 0xbb80
 8000e72:	f7ff fbbb 	bl	80005ec <start_recording>
    HAL_SAI_Receive_DMA(&hsai_BlockA2, (uint8_t *)data_tdm, WAV_WRITE_SAMPLE_COUNT);
 8000e76:	2280      	movs	r2, #128	@ 0x80
 8000e78:	4907      	ldr	r1, [pc, #28]	@ (8000e98 <StartRecording+0x50>)
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <StartRecording+0x4c>)
 8000e7c:	f003 fc6c 	bl	8004758 <HAL_SAI_Receive_DMA>

}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	0800d1d8 	.word	0x0800d1d8
 8000e8c:	20002540 	.word	0x20002540
 8000e90:	20002270 	.word	0x20002270
 8000e94:	20002120 	.word	0x20002120
 8000e98:	200022f8 	.word	0x200022f8

08000e9c <StopRecording>:

void StopRecording() {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_SAI_DMAStop(&hsai_BlockA2);
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <StopRecording+0x1c>)
 8000ea2:	f003 fc05 	bl	80046b0 <HAL_SAI_DMAStop>
    UART_SendString(&huart2, "Stopping recording\r\n");
 8000ea6:	4905      	ldr	r1, [pc, #20]	@ (8000ebc <StopRecording+0x20>)
 8000ea8:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <StopRecording+0x24>)
 8000eaa:	f7ff fd5d 	bl	8000968 <UART_SendString>
    // Implement file closing and clean-up here
    stop_recording();
 8000eae:	f7ff fc5f 	bl	8000770 <stop_recording>
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20002120 	.word	0x20002120
 8000ebc:	0800d1fc 	.word	0x0800d1fc
 8000ec0:	20002270 	.word	0x20002270

08000ec4 <SendCurrentStatus>:

void SendCurrentStatus() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
    if (recording_state == 1) {
 8000ec8:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <SendCurrentStatus+0x24>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d104      	bne.n	8000eda <SendCurrentStatus+0x16>
        UART_SendString(&huart2, "Recording in progress\r\n");
 8000ed0:	4906      	ldr	r1, [pc, #24]	@ (8000eec <SendCurrentStatus+0x28>)
 8000ed2:	4807      	ldr	r0, [pc, #28]	@ (8000ef0 <SendCurrentStatus+0x2c>)
 8000ed4:	f7ff fd48 	bl	8000968 <UART_SendString>
    } else {
        UART_SendString(&huart2, "Recording stopped\r\n");
    }
}
 8000ed8:	e003      	b.n	8000ee2 <SendCurrentStatus+0x1e>
        UART_SendString(&huart2, "Recording stopped\r\n");
 8000eda:	4906      	ldr	r1, [pc, #24]	@ (8000ef4 <SendCurrentStatus+0x30>)
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <SendCurrentStatus+0x2c>)
 8000ede:	f7ff fd43 	bl	8000968 <UART_SendString>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20002588 	.word	0x20002588
 8000eec:	0800d214 	.word	0x0800d214
 8000ef0:	20002270 	.word	0x20002270
 8000ef4:	0800d22c 	.word	0x0800d22c

08000ef8 <IndicateInvalidCommand>:

void IndicateInvalidCommand() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
    UART_SendString(&huart2, "Invalid command received\r\n");
 8000efc:	4902      	ldr	r1, [pc, #8]	@ (8000f08 <IndicateInvalidCommand+0x10>)
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <IndicateInvalidCommand+0x14>)
 8000f00:	f7ff fd32 	bl	8000968 <UART_SendString>
}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	0800d240 	.word	0x0800d240
 8000f0c:	20002270 	.word	0x20002270

08000f10 <_write>:
int _write(int file, char *ptr, int len)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len, HAL_MAX_DELAY);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f24:	68b9      	ldr	r1, [r7, #8]
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <_write+0x28>)
 8000f28:	f005 fa30 	bl	800638c <HAL_UART_Transmit>
  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20002270 	.word	0x20002270

08000f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f6a:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x44>)
 8000f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ac      	sub	sp, #176	@ 0xb0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2288      	movs	r2, #136	@ 0x88
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f00a fc7b 	bl	800b8ac <memset>
  if(hsd->Instance==SDMMC1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a37      	ldr	r2, [pc, #220]	@ (8001098 <HAL_SD_MspInit+0x108>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d167      	bne.n	8001090 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000fc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8000fc4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLL;
 8000fc6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fee0 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000fde:	f7ff ffad 	bl	8000f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8000fe8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	4b28      	ldr	r3, [pc, #160]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a27      	ldr	r2, [pc, #156]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b25      	ldr	r3, [pc, #148]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b22      	ldr	r3, [pc, #136]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a21      	ldr	r2, [pc, #132]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <HAL_SD_MspInit+0x10c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800102a:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800102e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001044:	230c      	movs	r3, #12
 8001046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800104e:	4619      	mov	r1, r3
 8001050:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <HAL_SD_MspInit+0x110>)
 8001052:	f000 fe63 	bl	8001d1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001056:	2304      	movs	r3, #4
 8001058:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800106e:	230c      	movs	r3, #12
 8001070:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001078:	4619      	mov	r1, r3
 800107a:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <HAL_SD_MspInit+0x114>)
 800107c:	f000 fe4e 	bl	8001d1c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2031      	movs	r0, #49	@ 0x31
 8001086:	f000 fb9c 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800108a:	2031      	movs	r0, #49	@ 0x31
 800108c:	f000 fbb5 	bl	80017fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001090:	bf00      	nop
 8001092:	37b0      	adds	r7, #176	@ 0xb0
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40012800 	.word	0x40012800
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000c00 	.word	0x48000c00

080010a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b0ac      	sub	sp, #176	@ 0xb0
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	2288      	movs	r2, #136	@ 0x88
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00a fbef 	bl	800b8ac <memset>
  if(huart->Instance==USART2)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a25      	ldr	r2, [pc, #148]	@ (8001168 <HAL_UART_MspInit+0xc0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d143      	bne.n	8001160 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010d8:	2302      	movs	r3, #2
 80010da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010dc:	2300      	movs	r3, #0
 80010de:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 fe57 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f0:	f7ff ff24 	bl	8000f3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f4:	4b1d      	ldr	r3, [pc, #116]	@ (800116c <HAL_UART_MspInit+0xc4>)
 80010f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010f8:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <HAL_UART_MspInit+0xc4>)
 80010fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8001100:	4b1a      	ldr	r3, [pc, #104]	@ (800116c <HAL_UART_MspInit+0xc4>)
 8001102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_UART_MspInit+0xc4>)
 800110e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001110:	4a16      	ldr	r2, [pc, #88]	@ (800116c <HAL_UART_MspInit+0xc4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_UART_MspInit+0xc4>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001124:	230c      	movs	r3, #12
 8001126:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113c:	2307      	movs	r3, #7
 800113e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f000 fde6 	bl	8001d1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2026      	movs	r0, #38	@ 0x26
 8001156:	f000 fb34 	bl	80017c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800115a:	2026      	movs	r0, #38	@ 0x26
 800115c:	f000 fb4d 	bl	80017fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001160:	bf00      	nop
 8001162:	37b0      	adds	r7, #176	@ 0xb0
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40004400 	.word	0x40004400
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_a;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0aa      	sub	sp, #168	@ 0xa8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	2288      	movs	r2, #136	@ 0x88
 800117e:	2100      	movs	r1, #0
 8001180:	4618      	mov	r0, r3
 8001182:	f00a fb93 	bl	800b8ac <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a41      	ldr	r2, [pc, #260]	@ (8001290 <HAL_SAI_MspInit+0x120>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d17a      	bne.n	8001286 <HAL_SAI_MspInit+0x116>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8001190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001194:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001196:	2300      	movs	r3, #0
 8001198:	677b      	str	r3, [r7, #116]	@ 0x74
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 80011a2:	230d      	movs	r3, #13
 80011a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80011a6:	2311      	movs	r3, #17
 80011a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 80011b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fdeb 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 80011c8:	f7ff feb8 	bl	8000f3c <Error_Handler>
    }

    if (SAI2_client == 0)
 80011cc:	4b31      	ldr	r3, [pc, #196]	@ (8001294 <HAL_SAI_MspInit+0x124>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10b      	bne.n	80011ec <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <HAL_SAI_MspInit+0x128>)
 80011d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011d8:	4a2f      	ldr	r2, [pc, #188]	@ (8001298 <HAL_SAI_MspInit+0x128>)
 80011da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011de:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <HAL_SAI_MspInit+0x128>)
 80011e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <HAL_SAI_MspInit+0x124>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a28      	ldr	r2, [pc, #160]	@ (8001294 <HAL_SAI_MspInit+0x124>)
 80011f4:	6013      	str	r3, [r2, #0]
    /**SAI2_A_Block_A GPIO Configuration
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80011f6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80011fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001210:	230d      	movs	r3, #13
 8001212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001216:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800121a:	4619      	mov	r1, r3
 800121c:	481f      	ldr	r0, [pc, #124]	@ (800129c <HAL_SAI_MspInit+0x12c>)
 800121e:	f000 fd7d 	bl	8001d1c <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001224:	4a1f      	ldr	r2, [pc, #124]	@ (80012a4 <HAL_SAI_MspInit+0x134>)
 8001226:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 800122a:	2201      	movs	r2, #1
 800122c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800122e:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001234:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800123a:	4b19      	ldr	r3, [pc, #100]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001240:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001242:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001246:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 800124a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800124e:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001252:	2220      	movs	r2, #32
 8001254:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_HIGH;
 8001256:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001258:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800125c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800125e:	4810      	ldr	r0, [pc, #64]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001260:	f000 fae6 	bl	8001830 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_SAI_MspInit+0xfe>
    {
      Error_Handler();
 800126a:	f7ff fe67 	bl	8000f3c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001272:	671a      	str	r2, [r3, #112]	@ 0x70
 8001274:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a08      	ldr	r2, [pc, #32]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 800127e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <HAL_SAI_MspInit+0x130>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6293      	str	r3, [r2, #40]	@ 0x28

    }
}
 8001286:	bf00      	nop
 8001288:	37a8      	adds	r7, #168	@ 0xa8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40015804 	.word	0x40015804
 8001294:	2000258c 	.word	0x2000258c
 8001298:	40021000 	.word	0x40021000
 800129c:	48000400 	.word	0x48000400
 80012a0:	200021a4 	.word	0x200021a4
 80012a4:	4002006c 	.word	0x4002006c

080012a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <NMI_Handler+0x4>

080012b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <MemManage_Handler+0x4>

080012c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c4:	bf00      	nop
 80012c6:	e7fd      	b.n	80012c4 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <UsageFault_Handler+0x4>

080012d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fe:	f000 f941 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <DMA1_Channel6_IRQHandler+0x10>)
 800130e:	f000 fc26 	bl	8001b5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200021a4 	.word	0x200021a4

0800131c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <USART2_IRQHandler+0x10>)
 8001322:	f005 f909 	bl	8006538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20002270 	.word	0x20002270

08001330 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <SDMMC1_IRQHandler+0x10>)
 8001336:	f003 ffc5 	bl	80052c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200021ec 	.word	0x200021ec

08001344 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e00a      	b.n	800136c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001356:	f3af 8000 	nop.w
 800135a:	4601      	mov	r1, r0
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	60ba      	str	r2, [r7, #8]
 8001362:	b2ca      	uxtb	r2, r1
 8001364:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	3301      	adds	r3, #1
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697a      	ldr	r2, [r7, #20]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	dbf0      	blt.n	8001356 <_read+0x12>
  }

  return len;
 8001374:	687b      	ldr	r3, [r7, #4]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <_close>:
  }
  return len;
}

int _close(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001386:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a6:	605a      	str	r2, [r3, #4]
  return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <_isatty>:

int _isatty(int file)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f00a fab8 	bl	800b98c <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20018000 	.word	0x20018000
 8001448:	00006000 	.word	0x00006000
 800144c:	20002590 	.word	0x20002590
 8001450:	20002720 	.word	0x20002720

08001454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff ffea 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	@ (80014c4 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f00a fa77 	bl	800b998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff fa71 	bl	8000990 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80014bc:	0800d4e8 	.word	0x0800d4e8
  ldr r2, =_sbss
 80014c0:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80014c4:	20002720 	.word	0x20002720

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>
	...

080014cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <HAL_Init+0x3c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_Init+0x3c>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 f962 	bl	80017ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 f80f 	bl	800150c <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	e001      	b.n	80014fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fa:	f7ff fd25 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40022000 	.word	0x40022000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001518:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d023      	beq.n	8001568 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <HAL_InitTick+0x70>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <HAL_InitTick+0x6c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f96d 	bl	8001816 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10f      	bne.n	8001562 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d809      	bhi.n	800155c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001550:	f000 f937 	bl	80017c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_InitTick+0x74>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e007      	b.n	800156c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e001      	b.n	800156c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000034 	.word	0x20000034
 800157c:	2000002c 	.word	0x2000002c
 8001580:	20000030 	.word	0x20000030

08001584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_IncTick+0x20>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_IncTick+0x24>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <HAL_IncTick+0x24>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000034 	.word	0x20000034
 80015a8:	20002594 	.word	0x20002594

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20002594 	.word	0x20002594

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015dc:	d005      	beq.n	80015ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015de:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <HAL_Delay+0x44>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ea:	bf00      	nop
 80015ec:	f7ff ffde 	bl	80015ac <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d8f7      	bhi.n	80015ec <HAL_Delay+0x28>
  {
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000034 	.word	0x20000034

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4907      	ldr	r1, [pc, #28]	@ (80016a8 <__NVIC_EnableIRQ+0x38>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100

080016ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	6039      	str	r1, [r7, #0]
 80016b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	db0a      	blt.n	80016d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	490c      	ldr	r1, [pc, #48]	@ (80016f8 <__NVIC_SetPriority+0x4c>)
 80016c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ca:	0112      	lsls	r2, r2, #4
 80016cc:	b2d2      	uxtb	r2, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d4:	e00a      	b.n	80016ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4908      	ldr	r1, [pc, #32]	@ (80016fc <__NVIC_SetPriority+0x50>)
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	f003 030f 	and.w	r3, r3, #15
 80016e2:	3b04      	subs	r3, #4
 80016e4:	0112      	lsls	r2, r2, #4
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	440b      	add	r3, r1
 80016ea:	761a      	strb	r2, [r3, #24]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	e000e100 	.word	0xe000e100
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	@ 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f1c3 0307 	rsb	r3, r3, #7
 800171a:	2b04      	cmp	r3, #4
 800171c:	bf28      	it	cs
 800171e:	2304      	movcs	r3, #4
 8001720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3304      	adds	r3, #4
 8001726:	2b06      	cmp	r3, #6
 8001728:	d902      	bls.n	8001730 <NVIC_EncodePriority+0x30>
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3b03      	subs	r3, #3
 800172e:	e000      	b.n	8001732 <NVIC_EncodePriority+0x32>
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	401a      	ands	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001748:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43d9      	mvns	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	4313      	orrs	r3, r2
         );
}
 800175a:	4618      	mov	r0, r3
 800175c:	3724      	adds	r7, #36	@ 0x24
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001778:	d301      	bcc.n	800177e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800177a:	2301      	movs	r3, #1
 800177c:	e00f      	b.n	800179e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177e:	4a0a      	ldr	r2, [pc, #40]	@ (80017a8 <SysTick_Config+0x40>)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001786:	210f      	movs	r1, #15
 8001788:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800178c:	f7ff ff8e 	bl	80016ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <SysTick_Config+0x40>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <SysTick_Config+0x40>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ff29 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017d4:	f7ff ff3e 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	68b9      	ldr	r1, [r7, #8]
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff ff8e 	bl	8001700 <NVIC_EncodePriority>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff5d 	bl	80016ac <__NVIC_SetPriority>
}
 80017f2:	bf00      	nop
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	4603      	mov	r3, r0
 8001802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff31 	bl	8001670 <__NVIC_EnableIRQ>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff ffa2 	bl	8001768 <SysTick_Config>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e098      	b.n	8001974 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	4b4d      	ldr	r3, [pc, #308]	@ (8001980 <HAL_DMA_Init+0x150>)
 800184a:	429a      	cmp	r2, r3
 800184c:	d80f      	bhi.n	800186e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <HAL_DMA_Init+0x154>)
 8001856:	4413      	add	r3, r2
 8001858:	4a4b      	ldr	r2, [pc, #300]	@ (8001988 <HAL_DMA_Init+0x158>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	091b      	lsrs	r3, r3, #4
 8001860:	009a      	lsls	r2, r3, #2
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a48      	ldr	r2, [pc, #288]	@ (800198c <HAL_DMA_Init+0x15c>)
 800186a:	641a      	str	r2, [r3, #64]	@ 0x40
 800186c:	e00e      	b.n	800188c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <HAL_DMA_Init+0x160>)
 8001876:	4413      	add	r3, r2
 8001878:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <HAL_DMA_Init+0x158>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	009a      	lsls	r2, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a42      	ldr	r2, [pc, #264]	@ (8001994 <HAL_DMA_Init+0x164>)
 800188a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80018a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80018a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018e6:	d039      	beq.n	800195c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ec:	4a27      	ldr	r2, [pc, #156]	@ (800198c <HAL_DMA_Init+0x15c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d11a      	bne.n	8001928 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_DMA_Init+0x168>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	f003 031c 	and.w	r3, r3, #28
 80018fe:	210f      	movs	r1, #15
 8001900:	fa01 f303 	lsl.w	r3, r1, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	4924      	ldr	r1, [pc, #144]	@ (8001998 <HAL_DMA_Init+0x168>)
 8001908:	4013      	ands	r3, r2
 800190a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <HAL_DMA_Init+0x168>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001918:	f003 031c 	and.w	r3, r3, #28
 800191c:	fa01 f303 	lsl.w	r3, r1, r3
 8001920:	491d      	ldr	r1, [pc, #116]	@ (8001998 <HAL_DMA_Init+0x168>)
 8001922:	4313      	orrs	r3, r2
 8001924:	600b      	str	r3, [r1, #0]
 8001926:	e019      	b.n	800195c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001928:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_DMA_Init+0x16c>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	f003 031c 	and.w	r3, r3, #28
 8001934:	210f      	movs	r1, #15
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	4917      	ldr	r1, [pc, #92]	@ (800199c <HAL_DMA_Init+0x16c>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001942:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_DMA_Init+0x16c>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6859      	ldr	r1, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	f003 031c 	and.w	r3, r3, #28
 8001952:	fa01 f303 	lsl.w	r3, r1, r3
 8001956:	4911      	ldr	r1, [pc, #68]	@ (800199c <HAL_DMA_Init+0x16c>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40020407 	.word	0x40020407
 8001984:	bffdfff8 	.word	0xbffdfff8
 8001988:	cccccccd 	.word	0xcccccccd
 800198c:	40020000 	.word	0x40020000
 8001990:	bffdfbf8 	.word	0xbffdfbf8
 8001994:	40020400 	.word	0x40020400
 8001998:	400200a8 	.word	0x400200a8
 800199c:	400204a8 	.word	0x400204a8

080019a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
 80019ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Start_IT+0x20>
 80019bc:	2302      	movs	r3, #2
 80019be:	e04b      	b.n	8001a58 <HAL_DMA_Start_IT+0xb8>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d13a      	bne.n	8001a4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f95f 	bl	8001cbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d008      	beq.n	8001a18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 020e 	orr.w	r2, r2, #14
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e00f      	b.n	8001a38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0204 	bic.w	r2, r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 020a 	orr.w	r2, r2, #10
 8001a36:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e005      	b.n	8001a56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a52:	2302      	movs	r3, #2
 8001a54:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d008      	beq.n	8001a8a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e022      	b.n	8001ad0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 020e 	bic.w	r2, r2, #14
 8001a98:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 0201 	bic.w	r2, r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f003 021c 	and.w	r2, r3, #28
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d005      	beq.n	8001b00 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2204      	movs	r2, #4
 8001af8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e029      	b.n	8001b54 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 020e 	bic.w	r2, r2, #14
 8001b0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b24:	f003 021c 	and.w	r2, r3, #28
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
    }
  }
  return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b084      	sub	sp, #16
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f003 031c 	and.w	r3, r3, #28
 8001b7e:	2204      	movs	r2, #4
 8001b80:	409a      	lsls	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d026      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x7a>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d021      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d107      	bne.n	8001bb2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0204 	bic.w	r2, r2, #4
 8001bb0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f003 021c 	and.w	r2, r3, #28
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d071      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001bd6:	e06c      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bdc:	f003 031c 	and.w	r3, r3, #28
 8001be0:	2202      	movs	r2, #2
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d02e      	beq.n	8001c4a <HAL_DMA_IRQHandler+0xec>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d029      	beq.n	8001c4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10b      	bne.n	8001c1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 020a 	bic.w	r2, r2, #10
 8001c12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c20:	f003 021c 	and.w	r2, r3, #28
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2102      	movs	r1, #2
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d038      	beq.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001c48:	e033      	b.n	8001cb2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f003 031c 	and.w	r3, r3, #28
 8001c52:	2208      	movs	r2, #8
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d02a      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x156>
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d025      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020e 	bic.w	r2, r2, #14
 8001c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f003 021c 	and.w	r2, r3, #28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	2101      	movs	r1, #1
 8001c86:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cb2:	bf00      	nop
 8001cb4:	bf00      	nop
}
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f003 021c 	and.w	r2, r3, #28
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001cdc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b10      	cmp	r3, #16
 8001cec:	d108      	bne.n	8001d00 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cfe:	e007      	b.n	8001d10 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68ba      	ldr	r2, [r7, #8]
 8001d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2a:	e17f      	b.n	800202c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	4013      	ands	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 8171 	beq.w	8002026 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d005      	beq.n	8001d5c <HAL_GPIO_Init+0x40>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d130      	bne.n	8001dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d92:	2201      	movs	r2, #1
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0201 	and.w	r2, r3, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d118      	bne.n	8001dfc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	6939      	ldr	r1, [r7, #16]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80ac 	beq.w	8002026 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	4b5f      	ldr	r3, [pc, #380]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed2:	4a5e      	ldr	r2, [pc, #376]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eda:	4b5c      	ldr	r3, [pc, #368]	@ (800204c <HAL_GPIO_Init+0x330>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ee6:	4a5a      	ldr	r2, [pc, #360]	@ (8002050 <HAL_GPIO_Init+0x334>)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f10:	d025      	beq.n	8001f5e <HAL_GPIO_Init+0x242>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a4f      	ldr	r2, [pc, #316]	@ (8002054 <HAL_GPIO_Init+0x338>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d01f      	beq.n	8001f5a <HAL_GPIO_Init+0x23e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002058 <HAL_GPIO_Init+0x33c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d019      	beq.n	8001f56 <HAL_GPIO_Init+0x23a>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a4d      	ldr	r2, [pc, #308]	@ (800205c <HAL_GPIO_Init+0x340>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d013      	beq.n	8001f52 <HAL_GPIO_Init+0x236>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4c      	ldr	r2, [pc, #304]	@ (8002060 <HAL_GPIO_Init+0x344>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00d      	beq.n	8001f4e <HAL_GPIO_Init+0x232>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_GPIO_Init+0x348>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002068 <HAL_GPIO_Init+0x34c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d101      	bne.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001f42:	2306      	movs	r3, #6
 8001f44:	e00c      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f46:	2307      	movs	r3, #7
 8001f48:	e00a      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f4a:	2305      	movs	r3, #5
 8001f4c:	e008      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f4e:	2304      	movs	r3, #4
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f52:	2303      	movs	r3, #3
 8001f54:	e004      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e002      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x244>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	f002 0203 	and.w	r2, r2, #3
 8001f66:	0092      	lsls	r2, r2, #2
 8001f68:	4093      	lsls	r3, r2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f70:	4937      	ldr	r1, [pc, #220]	@ (8002050 <HAL_GPIO_Init+0x334>)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	3302      	adds	r3, #2
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa2:	4a32      	ldr	r2, [pc, #200]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fcc:	4a27      	ldr	r2, [pc, #156]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_GPIO_Init+0x350>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002020:	4a12      	ldr	r2, [pc, #72]	@ (800206c <HAL_GPIO_Init+0x350>)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	3301      	adds	r3, #1
 800202a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae78 	bne.w	8001d2c <HAL_GPIO_Init+0x10>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	371c      	adds	r7, #28
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000
 8002054:	48000400 	.word	0x48000400
 8002058:	48000800 	.word	0x48000800
 800205c:	48000c00 	.word	0x48000c00
 8002060:	48001000 	.word	0x48001000
 8002064:	48001400 	.word	0x48001400
 8002068:	48001800 	.word	0x48001800
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d002      	beq.n	800208e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e001      	b.n	8002092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	807b      	strh	r3, [r7, #2]
 80020ac:	4613      	mov	r3, r2
 80020ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b0:	787b      	ldrb	r3, [r7, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020b6:	887a      	ldrh	r2, [r7, #2]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020d4:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40007000 	.word	0x40007000

080020ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020fa:	d130      	bne.n	800215e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fc:	4b23      	ldr	r3, [pc, #140]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002108:	d038      	beq.n	800217c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800210a:	4b20      	ldr	r3, [pc, #128]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002112:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2232      	movs	r2, #50	@ 0x32
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	4a1b      	ldr	r2, [pc, #108]	@ (8002194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002126:	fba2 2303 	umull	r2, r3, r2, r3
 800212a:	0c9b      	lsrs	r3, r3, #18
 800212c:	3301      	adds	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002130:	e002      	b.n	8002138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3b01      	subs	r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002138:	4b14      	ldr	r3, [pc, #80]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002144:	d102      	bne.n	800214c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f2      	bne.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800214c:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002158:	d110      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e00f      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216a:	d007      	beq.n	800217c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800216c:	4b07      	ldr	r3, [pc, #28]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002174:	4a05      	ldr	r2, [pc, #20]	@ (800218c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800217a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40007000 	.word	0x40007000
 8002190:	2000002c 	.word	0x2000002c
 8002194:	431bde83 	.word	0x431bde83

08002198 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e3ca      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021aa:	4b97      	ldr	r3, [pc, #604]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021b4:	4b94      	ldr	r3, [pc, #592]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 80e4 	beq.w	8002394 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d007      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4a>
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	f040 808b 	bne.w	80022f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	f040 8087 	bne.w	80022f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021e2:	4b89      	ldr	r3, [pc, #548]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <HAL_RCC_OscConfig+0x62>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e3a2      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1a      	ldr	r2, [r3, #32]
 80021fe:	4b82      	ldr	r3, [pc, #520]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <HAL_RCC_OscConfig+0x7c>
 800220a:	4b7f      	ldr	r3, [pc, #508]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002212:	e005      	b.n	8002220 <HAL_RCC_OscConfig+0x88>
 8002214:	4b7c      	ldr	r3, [pc, #496]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002220:	4293      	cmp	r3, r2
 8002222:	d223      	bcs.n	800226c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fd55 	bl	8002cd8 <RCC_SetFlashLatencyFromMSIRange>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e383      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002238:	4b73      	ldr	r3, [pc, #460]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a72      	ldr	r2, [pc, #456]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b70      	ldr	r3, [pc, #448]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	496d      	ldr	r1, [pc, #436]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002256:	4b6c      	ldr	r3, [pc, #432]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	4968      	ldr	r1, [pc, #416]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
 800226a:	e025      	b.n	80022b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226c:	4b66      	ldr	r3, [pc, #408]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a65      	ldr	r2, [pc, #404]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b63      	ldr	r3, [pc, #396]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4960      	ldr	r1, [pc, #384]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228a:	4b5f      	ldr	r3, [pc, #380]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	495b      	ldr	r1, [pc, #364]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d109      	bne.n	80022b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fd15 	bl	8002cd8 <RCC_SetFlashLatencyFromMSIRange>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e343      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b8:	f000 fc4a 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b52      	ldr	r3, [pc, #328]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	091b      	lsrs	r3, r3, #4
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	4950      	ldr	r1, [pc, #320]	@ (800240c <HAL_RCC_OscConfig+0x274>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	4a4e      	ldr	r2, [pc, #312]	@ (8002410 <HAL_RCC_OscConfig+0x278>)
 80022d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022d8:	4b4e      	ldr	r3, [pc, #312]	@ (8002414 <HAL_RCC_OscConfig+0x27c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff f915 	bl	800150c <HAL_InitTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d052      	beq.n	8002392 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	e327      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d032      	beq.n	800235e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022f8:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a42      	ldr	r2, [pc, #264]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002304:	f7ff f952 	bl	80015ac <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800230c:	f7ff f94e 	bl	80015ac <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e310      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800231e:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d0f0      	beq.n	800230c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232a:	4b37      	ldr	r3, [pc, #220]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a36      	ldr	r2, [pc, #216]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002330:	f043 0308 	orr.w	r3, r3, #8
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	4b34      	ldr	r3, [pc, #208]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	4931      	ldr	r1, [pc, #196]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002344:	4313      	orrs	r3, r2
 8002346:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002348:	4b2f      	ldr	r3, [pc, #188]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	492c      	ldr	r1, [pc, #176]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
 800235c:	e01a      	b.n	8002394 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800235e:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a29      	ldr	r2, [pc, #164]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800236a:	f7ff f91f 	bl	80015ac <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002372:	f7ff f91b 	bl	80015ac <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e2dd      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002384:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x1da>
 8002390:	e000      	b.n	8002394 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002392:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d074      	beq.n	800248a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d005      	beq.n	80023b2 <HAL_RCC_OscConfig+0x21a>
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	2b0c      	cmp	r3, #12
 80023aa:	d10e      	bne.n	80023ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b2:	4b15      	ldr	r3, [pc, #84]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d064      	beq.n	8002488 <HAL_RCC_OscConfig+0x2f0>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d160      	bne.n	8002488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e2ba      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x24a>
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0b      	ldr	r2, [pc, #44]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e026      	b.n	8002430 <HAL_RCC_OscConfig+0x298>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_OscConfig+0x280>
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a02      	ldr	r2, [pc, #8]	@ (8002408 <HAL_RCC_OscConfig+0x270>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e014      	b.n	8002430 <HAL_RCC_OscConfig+0x298>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	0800d2ac 	.word	0x0800d2ac
 8002410:	2000002c 	.word	0x2000002c
 8002414:	20000030 	.word	0x20000030
 8002418:	4ba0      	ldr	r3, [pc, #640]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a9f      	ldr	r2, [pc, #636]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b9d      	ldr	r3, [pc, #628]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a9c      	ldr	r2, [pc, #624]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7ff f8b8 	bl	80015ac <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff f8b4 	bl	80015ac <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e276      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	4b92      	ldr	r3, [pc, #584]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x2a8>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7ff f8a4 	bl	80015ac <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff f8a0 	bl	80015ac <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	@ 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e262      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x2d0>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d060      	beq.n	8002558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	2b04      	cmp	r3, #4
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x310>
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d119      	bne.n	80024d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d116      	bne.n	80024d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a8:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x328>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e23f      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b76      	ldr	r3, [pc, #472]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	4973      	ldr	r1, [pc, #460]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024d4:	e040      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d023      	beq.n	8002526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024de:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80024e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7ff f85f 	bl	80015ac <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff f85b 	bl	80015ac <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e21d      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	4b65      	ldr	r3, [pc, #404]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b62      	ldr	r3, [pc, #392]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	061b      	lsls	r3, r3, #24
 800251e:	495f      	ldr	r1, [pc, #380]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
 8002524:	e018      	b.n	8002558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b5d      	ldr	r3, [pc, #372]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a5c      	ldr	r2, [pc, #368]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800252c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7ff f83b 	bl	80015ac <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800253a:	f7ff f837 	bl	80015ac <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1f9      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800254c:	4b53      	ldr	r3, [pc, #332]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d03c      	beq.n	80025de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d01c      	beq.n	80025a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256c:	4b4b      	ldr	r3, [pc, #300]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800256e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002572:	4a4a      	ldr	r2, [pc, #296]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7ff f816 	bl	80015ac <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002584:	f7ff f812 	bl	80015ac <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e1d4      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ef      	beq.n	8002584 <HAL_RCC_OscConfig+0x3ec>
 80025a4:	e01b      	b.n	80025de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b3d      	ldr	r3, [pc, #244]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025ac:	4a3b      	ldr	r2, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025ae:	f023 0301 	bic.w	r3, r3, #1
 80025b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe fff9 	bl	80015ac <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7fe fff5 	bl	80015ac <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1b7      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	4b32      	ldr	r3, [pc, #200]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1ef      	bne.n	80025be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80a6 	beq.w	8002738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ec:	2300      	movs	r3, #0
 80025ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025f0:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10d      	bne.n	8002618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	@ 0x58
 8002608:	4b24      	ldr	r3, [pc, #144]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002614:	2301      	movs	r3, #1
 8002616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002618:	4b21      	ldr	r3, [pc, #132]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	2b00      	cmp	r3, #0
 8002622:	d118      	bne.n	8002656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002624:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1d      	ldr	r2, [pc, #116]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 800262a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002630:	f7fe ffbc 	bl	80015ac <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002638:	f7fe ffb8 	bl	80015ac <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e17a      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_RCC_OscConfig+0x508>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d108      	bne.n	8002670 <HAL_RCC_OscConfig+0x4d8>
 800265e:	4b0f      	ldr	r3, [pc, #60]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	4a0d      	ldr	r2, [pc, #52]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800266e:	e029      	b.n	80026c4 <HAL_RCC_OscConfig+0x52c>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2b05      	cmp	r3, #5
 8002676:	d115      	bne.n	80026a4 <HAL_RCC_OscConfig+0x50c>
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800267e:	4a07      	ldr	r2, [pc, #28]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800268e:	4a03      	ldr	r2, [pc, #12]	@ (800269c <HAL_RCC_OscConfig+0x504>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002698:	e014      	b.n	80026c4 <HAL_RCC_OscConfig+0x52c>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80026b4:	4b98      	ldr	r3, [pc, #608]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ba:	4a97      	ldr	r2, [pc, #604]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d016      	beq.n	80026fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026cc:	f7fe ff6e 	bl	80015ac <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7fe ff6a 	bl	80015ac <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e12a      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0ed      	beq.n	80026d4 <HAL_RCC_OscConfig+0x53c>
 80026f8:	e015      	b.n	8002726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe ff57 	bl	80015ac <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002700:	e00a      	b.n	8002718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe ff53 	bl	80015ac <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e113      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	4b7f      	ldr	r3, [pc, #508]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800271a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ed      	bne.n	8002702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002726:	7ffb      	ldrb	r3, [r7, #31]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b7a      	ldr	r3, [pc, #488]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	4a79      	ldr	r2, [pc, #484]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80fe 	beq.w	800293e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002746:	2b02      	cmp	r3, #2
 8002748:	f040 80d0 	bne.w	80028ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800274c:	4b72      	ldr	r3, [pc, #456]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	429a      	cmp	r2, r3
 800275e:	d130      	bne.n	80027c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	3b01      	subs	r3, #1
 800276c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	429a      	cmp	r2, r3
 8002770:	d127      	bne.n	80027c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800277c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800277e:	429a      	cmp	r2, r3
 8002780:	d11f      	bne.n	80027c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800278c:	2a07      	cmp	r2, #7
 800278e:	bf14      	ite	ne
 8002790:	2201      	movne	r2, #1
 8002792:	2200      	moveq	r2, #0
 8002794:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002796:	4293      	cmp	r3, r2
 8002798:	d113      	bne.n	80027c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d06e      	beq.n	80028a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b0c      	cmp	r3, #12
 80027c6:	d069      	beq.n	800289c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027d4:	4b50      	ldr	r3, [pc, #320]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0ad      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027f0:	f7fe fedc 	bl	80015ac <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fed8 	bl	80015ac <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e09a      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280a:	4b43      	ldr	r3, [pc, #268]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002816:	4b40      	ldr	r3, [pc, #256]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	4b40      	ldr	r3, [pc, #256]	@ (800291c <HAL_RCC_OscConfig+0x784>)
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002826:	3a01      	subs	r2, #1
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	4311      	orrs	r1, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002830:	0212      	lsls	r2, r2, #8
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002838:	0852      	lsrs	r2, r2, #1
 800283a:	3a01      	subs	r2, #1
 800283c:	0552      	lsls	r2, r2, #21
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002844:	0852      	lsrs	r2, r2, #1
 8002846:	3a01      	subs	r2, #1
 8002848:	0652      	lsls	r2, r2, #25
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002850:	0912      	lsrs	r2, r2, #4
 8002852:	0452      	lsls	r2, r2, #17
 8002854:	430a      	orrs	r2, r1
 8002856:	4930      	ldr	r1, [pc, #192]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800285c:	4b2e      	ldr	r3, [pc, #184]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2d      	ldr	r2, [pc, #180]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 8002862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002866:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002868:	4b2b      	ldr	r3, [pc, #172]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a2a      	ldr	r2, [pc, #168]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 800286e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002872:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002874:	f7fe fe9a 	bl	80015ac <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fe96 	bl	80015ac <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e058      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0f0      	beq.n	800287c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800289a:	e050      	b.n	800293e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e04f      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d148      	bne.n	800293e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a19      	ldr	r2, [pc, #100]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b8:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	4a16      	ldr	r2, [pc, #88]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028c4:	f7fe fe72 	bl	80015ac <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fe6e 	bl	80015ac <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e030      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028de:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x734>
 80028ea:	e028      	b.n	800293e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2b0c      	cmp	r3, #12
 80028f0:	d023      	beq.n	800293a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f2:	4b09      	ldr	r3, [pc, #36]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a08      	ldr	r2, [pc, #32]	@ (8002918 <HAL_RCC_OscConfig+0x780>)
 80028f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fe55 	bl	80015ac <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	e00c      	b.n	8002920 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002906:	f7fe fe51 	bl	80015ac <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d905      	bls.n	8002920 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e013      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
 8002918:	40021000 	.word	0x40021000
 800291c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	4b09      	ldr	r3, [pc, #36]	@ (8002948 <HAL_RCC_OscConfig+0x7b0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ec      	bne.n	8002906 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800292c:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_RCC_OscConfig+0x7b0>)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	4905      	ldr	r1, [pc, #20]	@ (8002948 <HAL_RCC_OscConfig+0x7b0>)
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_RCC_OscConfig+0x7b4>)
 8002934:	4013      	ands	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
 8002938:	e001      	b.n	800293e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3720      	adds	r7, #32
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40021000 	.word	0x40021000
 800294c:	feeefffc 	.word	0xfeeefffc

08002950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0e7      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002964:	4b75      	ldr	r3, [pc, #468]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d910      	bls.n	8002994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b72      	ldr	r3, [pc, #456]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 0207 	bic.w	r2, r3, #7
 800297a:	4970      	ldr	r1, [pc, #448]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b6e      	ldr	r3, [pc, #440]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0cf      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b66      	ldr	r3, [pc, #408]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d908      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029b0:	4b63      	ldr	r3, [pc, #396]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4960      	ldr	r1, [pc, #384]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d04c      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d107      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d121      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e0a6      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d107      	bne.n	80029fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ee:	4b54      	ldr	r3, [pc, #336]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d115      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e09a      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a06:	4b4e      	ldr	r3, [pc, #312]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e08e      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a16:	4b4a      	ldr	r3, [pc, #296]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e086      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a26:	4b46      	ldr	r3, [pc, #280]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f023 0203 	bic.w	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4943      	ldr	r1, [pc, #268]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a38:	f7fe fdb8 	bl	80015ac <HAL_GetTick>
 8002a3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3e:	e00a      	b.n	8002a56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a40:	f7fe fdb4 	bl	80015ac <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e06e      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a56:	4b3a      	ldr	r3, [pc, #232]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 020c 	and.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d1eb      	bne.n	8002a40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	4b31      	ldr	r3, [pc, #196]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d208      	bcs.n	8002a96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a84:	4b2e      	ldr	r3, [pc, #184]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	492b      	ldr	r1, [pc, #172]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a96:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d210      	bcs.n	8002ac6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa4:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 0207 	bic.w	r2, r3, #7
 8002aac:	4923      	ldr	r1, [pc, #140]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab4:	4b21      	ldr	r3, [pc, #132]	@ (8002b3c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d001      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e036      	b.n	8002b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d008      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	4918      	ldr	r1, [pc, #96]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af0:	4b13      	ldr	r3, [pc, #76]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4910      	ldr	r1, [pc, #64]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b04:	f000 f824 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <HAL_RCC_ClockConfig+0x1f0>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	490b      	ldr	r1, [pc, #44]	@ (8002b44 <HAL_RCC_ClockConfig+0x1f4>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	4a09      	ldr	r2, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1f8>)
 8002b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b24:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1fc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fe fcef 	bl	800150c <HAL_InitTick>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b32:	7afb      	ldrb	r3, [r7, #11]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	0800d2ac 	.word	0x0800d2ac
 8002b48:	2000002c 	.word	0x2000002c
 8002b4c:	20000030 	.word	0x20000030

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b089      	sub	sp, #36	@ 0x24
 8002b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b68:	4b3b      	ldr	r3, [pc, #236]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0303 	and.w	r3, r3, #3
 8002b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d121      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d11e      	bne.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b84:	4b34      	ldr	r3, [pc, #208]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b90:	4b31      	ldr	r3, [pc, #196]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	f003 030f 	and.w	r3, r3, #15
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	091b      	lsrs	r3, r3, #4
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bac:	4a2b      	ldr	r2, [pc, #172]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10d      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc0:	e00a      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d102      	bne.n	8002bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bc8:	4b25      	ldr	r3, [pc, #148]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bca:	61bb      	str	r3, [r7, #24]
 8002bcc:	e004      	b.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bd4:	4b23      	ldr	r3, [pc, #140]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d134      	bne.n	8002c48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bde:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d003      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0xac>
 8002bf4:	e005      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bf8:	617b      	str	r3, [r7, #20]
      break;
 8002bfa:	e005      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8002bfe:	617b      	str	r3, [r7, #20]
      break;
 8002c00:	e002      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	617b      	str	r3, [r7, #20]
      break;
 8002c06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	091b      	lsrs	r3, r3, #4
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	3301      	adds	r3, #1
 8002c14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	fb03 f202 	mul.w	r2, r3, r2
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	0e5b      	lsrs	r3, r3, #25
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c48:	69bb      	ldr	r3, [r7, #24]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3724      	adds	r7, #36	@ 0x24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	0800d2c4 	.word	0x0800d2c4
 8002c60:	00f42400 	.word	0x00f42400
 8002c64:	01770000 	.word	0x01770000

08002c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	@ (8002c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000002c 	.word	0x2000002c

08002c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c84:	f7ff fff0 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4904      	ldr	r1, [pc, #16]	@ (8002ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	0800d2bc 	.word	0x0800d2bc

08002cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cb0:	f7ff ffda 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	0adb      	lsrs	r3, r3, #11
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	4904      	ldr	r1, [pc, #16]	@ (8002cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	0800d2bc 	.word	0x0800d2bc

08002cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002cf0:	f7ff f9ee 	bl	80020d0 <HAL_PWREx_GetVoltageRange>
 8002cf4:	6178      	str	r0, [r7, #20]
 8002cf6:	e014      	b.n	8002d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4a24      	ldr	r2, [pc, #144]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d04:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d10:	f7ff f9de 	bl	80020d0 <HAL_PWREx_GetVoltageRange>
 8002d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d16:	4b1e      	ldr	r3, [pc, #120]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d28:	d10b      	bne.n	8002d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b80      	cmp	r3, #128	@ 0x80
 8002d2e:	d919      	bls.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d34:	d902      	bls.n	8002d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d36:	2302      	movs	r3, #2
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	e013      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e010      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b80      	cmp	r3, #128	@ 0x80
 8002d46:	d902      	bls.n	8002d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d48:	2303      	movs	r3, #3
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e00a      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b80      	cmp	r3, #128	@ 0x80
 8002d52:	d102      	bne.n	8002d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d54:	2302      	movs	r3, #2
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	e004      	b.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b70      	cmp	r3, #112	@ 0x70
 8002d5e:	d101      	bne.n	8002d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d60:	2301      	movs	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 0207 	bic.w	r2, r3, #7
 8002d6c:	4909      	ldr	r1, [pc, #36]	@ (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d74:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40022000 	.word	0x40022000

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002da0:	2300      	movs	r3, #0
 8002da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002da4:	2300      	movs	r3, #0
 8002da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d041      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dbc:	d02a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002dbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002dc2:	d824      	bhi.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002dca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002dce:	d81e      	bhi.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002dda:	e018      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ddc:	4b86      	ldr	r3, [pc, #536]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a85      	ldr	r2, [pc, #532]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de8:	e015      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f829 	bl	8003e48 <RCCEx_PLLSAI1_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dfa:	e00c      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3320      	adds	r3, #32
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 f914 	bl	8004030 <RCCEx_PLLSAI2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e0c:	e003      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	74fb      	strb	r3, [r7, #19]
      break;
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e1c:	4b76      	ldr	r3, [pc, #472]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e2a:	4973      	ldr	r1, [pc, #460]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002e32:	e001      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d041      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e4c:	d02a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e52:	d824      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e58:	d008      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e5e:	d81e      	bhi.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e68:	d010      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e6a:	e018      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e6c:	4b62      	ldr	r3, [pc, #392]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a61      	ldr	r2, [pc, #388]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e78:	e015      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f000 ffe1 	bl	8003e48 <RCCEx_PLLSAI1_Config>
 8002e86:	4603      	mov	r3, r0
 8002e88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8a:	e00c      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3320      	adds	r3, #32
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 f8cc 	bl	8004030 <RCCEx_PLLSAI2_Config>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e9c:	e003      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ea2:	e000      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eac:	4b52      	ldr	r3, [pc, #328]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002eba:	494f      	ldr	r1, [pc, #316]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	7cfb      	ldrb	r3, [r7, #19]
 8002ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 80a0 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eda:	4b47      	ldr	r3, [pc, #284]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002eea:	2300      	movs	r3, #0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00d      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef0:	4b41      	ldr	r3, [pc, #260]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef4:	4a40      	ldr	r2, [pc, #256]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002efc:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a3a      	ldr	r2, [pc, #232]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f18:	f7fe fb48 	bl	80015ac <HAL_GetTick>
 8002f1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f1e:	e009      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f20:	f7fe fb44 	bl	80015ac <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	74fb      	strb	r3, [r7, #19]
        break;
 8002f32:	e005      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f34:	4b31      	ldr	r3, [pc, #196]	@ (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ef      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d15c      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01f      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d019      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f64:	4b24      	ldr	r3, [pc, #144]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f70:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	4a20      	ldr	r2, [pc, #128]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f90:	4a19      	ldr	r2, [pc, #100]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d016      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa2:	f7fe fb03 	bl	80015ac <HAL_GetTick>
 8002fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa8:	e00b      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe faff 	bl	80015ac <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d902      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ec      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002fd0:	7cfb      	ldrb	r3, [r7, #19]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fe6:	4904      	ldr	r1, [pc, #16]	@ (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fee:	e009      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003004:	7c7b      	ldrb	r3, [r7, #17]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d105      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800300a:	4b9e      	ldr	r3, [pc, #632]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300e:	4a9d      	ldr	r2, [pc, #628]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003014:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003022:	4b98      	ldr	r3, [pc, #608]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f023 0203 	bic.w	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003030:	4994      	ldr	r1, [pc, #592]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003044:	4b8f      	ldr	r3, [pc, #572]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f023 020c 	bic.w	r2, r3, #12
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003052:	498c      	ldr	r1, [pc, #560]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003066:	4b87      	ldr	r3, [pc, #540]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	4983      	ldr	r1, [pc, #524]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003088:	4b7e      	ldr	r3, [pc, #504]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800308a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003096:	497b      	ldr	r1, [pc, #492]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030aa:	4b76      	ldr	r3, [pc, #472]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b8:	4972      	ldr	r1, [pc, #456]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	496a      	ldr	r1, [pc, #424]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ee:	4b65      	ldr	r3, [pc, #404]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030fc:	4961      	ldr	r1, [pc, #388]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003110:	4b5c      	ldr	r3, [pc, #368]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800311e:	4959      	ldr	r1, [pc, #356]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003132:	4b54      	ldr	r3, [pc, #336]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003138:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003140:	4950      	ldr	r1, [pc, #320]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003154:	4b4b      	ldr	r3, [pc, #300]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003162:	4948      	ldr	r1, [pc, #288]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003176:	4b43      	ldr	r3, [pc, #268]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003184:	493f      	ldr	r1, [pc, #252]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d028      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003198:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031a6:	4937      	ldr	r1, [pc, #220]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80031b6:	d106      	bne.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	4b32      	ldr	r3, [pc, #200]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a31      	ldr	r2, [pc, #196]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031c2:	60d3      	str	r3, [r2, #12]
 80031c4:	e011      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80031ce:	d10c      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	2101      	movs	r1, #1
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fe36 	bl	8003e48 <RCCEx_PLLSAI1_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031e0:	7cfb      	ldrb	r3, [r7, #19]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d028      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031f6:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003204:	491f      	ldr	r1, [pc, #124]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003214:	d106      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003216:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a1a      	ldr	r2, [pc, #104]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800321c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003220:	60d3      	str	r3, [r2, #12]
 8003222:	e011      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800322c:	d10c      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2101      	movs	r1, #1
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fe07 	bl	8003e48 <RCCEx_PLLSAI1_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02b      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003262:	4908      	ldr	r1, [pc, #32]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003272:	d109      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a02      	ldr	r2, [pc, #8]	@ (8003284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327e:	60d3      	str	r3, [r2, #12]
 8003280:	e014      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003290:	d10c      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3304      	adds	r3, #4
 8003296:	2101      	movs	r1, #1
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fdd5 	bl	8003e48 <RCCEx_PLLSAI1_Config>
 800329e:	4603      	mov	r3, r0
 80032a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032a2:	7cfb      	ldrb	r3, [r7, #19]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032a8:	7cfb      	ldrb	r3, [r7, #19]
 80032aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d02f      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032c6:	4928      	ldr	r1, [pc, #160]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032d6:	d10d      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3304      	adds	r3, #4
 80032dc:	2102      	movs	r1, #2
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fdb2 	bl	8003e48 <RCCEx_PLLSAI1_Config>
 80032e4:	4603      	mov	r3, r0
 80032e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e8:	7cfb      	ldrb	r3, [r7, #19]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d014      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	74bb      	strb	r3, [r7, #18]
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80032f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3320      	adds	r3, #32
 8003302:	2102      	movs	r1, #2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fe93 	bl	8004030 <RCCEx_PLLSAI2_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003324:	4b10      	ldr	r3, [pc, #64]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003332:	490d      	ldr	r1, [pc, #52]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00b      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003346:	4b08      	ldr	r3, [pc, #32]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003356:	4904      	ldr	r1, [pc, #16]	@ (8003368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800335e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40021000 	.word	0x40021000

0800336c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800337e:	d13e      	bne.n	80033fe <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003380:	4bb2      	ldr	r3, [pc, #712]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003392:	d028      	beq.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800339a:	f200 8542 	bhi.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033a4:	d005      	beq.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ac:	d00e      	beq.n	80033cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80033ae:	f000 bd38 	b.w	8003e22 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80033b2:	4ba6      	ldr	r3, [pc, #664]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f040 8532 	bne.w	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 80033c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c6:	61fb      	str	r3, [r7, #28]
      break;
 80033c8:	f000 bd2d 	b.w	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80033cc:	4b9f      	ldr	r3, [pc, #636]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80033ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	f040 8527 	bne.w	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80033dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80033e0:	61fb      	str	r3, [r7, #28]
      break;
 80033e2:	f000 bd22 	b.w	8003e2a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80033e6:	4b99      	ldr	r3, [pc, #612]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033f2:	f040 851c 	bne.w	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80033f6:	4b96      	ldr	r3, [pc, #600]	@ (8003650 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80033f8:	61fb      	str	r3, [r7, #28]
      break;
 80033fa:	f000 bd18 	b.w	8003e2e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033fe:	4b93      	ldr	r3, [pc, #588]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d036      	beq.n	800347c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b03      	cmp	r3, #3
 8003412:	d840      	bhi.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d020      	beq.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003420:	e039      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003422:	4b8a      	ldr	r3, [pc, #552]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d116      	bne.n	800345c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800342e:	4b87      	ldr	r3, [pc, #540]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800343a:	4b84      	ldr	r3, [pc, #528]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	e005      	b.n	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003446:	4b81      	ldr	r3, [pc, #516]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003448:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a80      	ldr	r2, [pc, #512]	@ (8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003458:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800345a:	e01f      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
      break;
 8003460:	e01c      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003462:	4b7a      	ldr	r3, [pc, #488]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346e:	d102      	bne.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003470:	4b79      	ldr	r3, [pc, #484]	@ (8003658 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003472:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003474:	e012      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	61bb      	str	r3, [r7, #24]
      break;
 800347a:	e00f      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800347c:	4b73      	ldr	r3, [pc, #460]	@ (800364c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003488:	d102      	bne.n	8003490 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800348a:	4b74      	ldr	r3, [pc, #464]	@ (800365c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800348c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800348e:	e005      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	61bb      	str	r3, [r7, #24]
      break;
 8003494:	e002      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	61bb      	str	r3, [r7, #24]
      break;
 800349a:	bf00      	nop
    }

    switch(PeriphClk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034a2:	f000 80dd 	beq.w	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034ac:	f200 84c1 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034b6:	f000 80d3 	beq.w	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034c0:	f200 84b7 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034ca:	f000 835f 	beq.w	8003b8c <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d4:	f200 84ad 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034de:	f000 847e 	beq.w	8003dde <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e8:	f200 84a3 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034f2:	f000 82cd 	beq.w	8003a90 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034fc:	f200 8499 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003506:	f000 80ab 	beq.w	8003660 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003510:	f200 848f 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351a:	f000 8090 	beq.w	800363e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003524:	f200 8485 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352e:	d07f      	beq.n	8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003536:	f200 847c 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003540:	f000 8403 	beq.w	8003d4a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800354a:	f200 8472 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003554:	f000 83af 	beq.w	8003cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800355e:	f200 8468 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003568:	f000 8379 	beq.w	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003572:	f200 845e 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	@ 0x80
 800357a:	f000 8344 	beq.w	8003c06 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b80      	cmp	r3, #128	@ 0x80
 8003582:	f200 8456 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b20      	cmp	r3, #32
 800358a:	d84b      	bhi.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 844f 	beq.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	2b1f      	cmp	r3, #31
 800359a:	f200 844a 	bhi.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800359e:	a201      	add	r2, pc, #4	@ (adr r2, 80035a4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 80035a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a4:	0800378d 	.word	0x0800378d
 80035a8:	080037fb 	.word	0x080037fb
 80035ac:	08003e33 	.word	0x08003e33
 80035b0:	0800388f 	.word	0x0800388f
 80035b4:	08003e33 	.word	0x08003e33
 80035b8:	08003e33 	.word	0x08003e33
 80035bc:	08003e33 	.word	0x08003e33
 80035c0:	08003915 	.word	0x08003915
 80035c4:	08003e33 	.word	0x08003e33
 80035c8:	08003e33 	.word	0x08003e33
 80035cc:	08003e33 	.word	0x08003e33
 80035d0:	08003e33 	.word	0x08003e33
 80035d4:	08003e33 	.word	0x08003e33
 80035d8:	08003e33 	.word	0x08003e33
 80035dc:	08003e33 	.word	0x08003e33
 80035e0:	0800398d 	.word	0x0800398d
 80035e4:	08003e33 	.word	0x08003e33
 80035e8:	08003e33 	.word	0x08003e33
 80035ec:	08003e33 	.word	0x08003e33
 80035f0:	08003e33 	.word	0x08003e33
 80035f4:	08003e33 	.word	0x08003e33
 80035f8:	08003e33 	.word	0x08003e33
 80035fc:	08003e33 	.word	0x08003e33
 8003600:	08003e33 	.word	0x08003e33
 8003604:	08003e33 	.word	0x08003e33
 8003608:	08003e33 	.word	0x08003e33
 800360c:	08003e33 	.word	0x08003e33
 8003610:	08003e33 	.word	0x08003e33
 8003614:	08003e33 	.word	0x08003e33
 8003618:	08003e33 	.word	0x08003e33
 800361c:	08003e33 	.word	0x08003e33
 8003620:	08003a0f 	.word	0x08003a0f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b40      	cmp	r3, #64	@ 0x40
 8003628:	f000 82c1 	beq.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800362c:	f000 bc01 	b.w	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003636:	f000 fdd9 	bl	80041ec <RCCEx_GetSAIxPeriphCLKFreq>
 800363a:	61f8      	str	r0, [r7, #28]
      break;
 800363c:	e3fa      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800363e:	69b9      	ldr	r1, [r7, #24]
 8003640:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003644:	f000 fdd2 	bl	80041ec <RCCEx_GetSAIxPeriphCLKFreq>
 8003648:	61f8      	str	r0, [r7, #28]
      break;
 800364a:	e3f3      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800364c:	40021000 	.word	0x40021000
 8003650:	000bb800 	.word	0x000bb800
 8003654:	0800d2c4 	.word	0x0800d2c4
 8003658:	00f42400 	.word	0x00f42400
 800365c:	01770000 	.word	0x01770000
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003660:	4ba9      	ldr	r3, [pc, #676]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003672:	d00c      	beq.n	800368e <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800367a:	d87f      	bhi.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003682:	d04e      	beq.n	8003722 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800368a:	d01d      	beq.n	80036c8 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 800368c:	e076      	b.n	800377c <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800368e:	4b9e      	ldr	r3, [pc, #632]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b02      	cmp	r3, #2
 8003698:	d172      	bne.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800369a:	4b9b      	ldr	r3, [pc, #620]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d005      	beq.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80036a6:	4b98      	ldr	r3, [pc, #608]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	e005      	b.n	80036be <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 80036b2:	4b95      	ldr	r3, [pc, #596]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	4a93      	ldr	r2, [pc, #588]	@ (800390c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80036c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c4:	61fb      	str	r3, [r7, #28]
          break;
 80036c6:	e05b      	b.n	8003780 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80036c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036d4:	d156      	bne.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80036d6:	4b8c      	ldr	r3, [pc, #560]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036e2:	d14f      	bne.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80036e4:	4b88      	ldr	r3, [pc, #544]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036ee:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	fb03 f202 	mul.w	r2, r3, r2
 80036f8:	4b83      	ldr	r3, [pc, #524]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	3301      	adds	r3, #1
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800370a:	4b7f      	ldr	r3, [pc, #508]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	0d5b      	lsrs	r3, r3, #21
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	3301      	adds	r3, #1
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	61fb      	str	r3, [r7, #28]
          break;
 8003720:	e030      	b.n	8003784 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003722:	4b79      	ldr	r3, [pc, #484]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372e:	d12b      	bne.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003730:	4b75      	ldr	r3, [pc, #468]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003738:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800373c:	d124      	bne.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800373e:	4b72      	ldr	r3, [pc, #456]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	0a1b      	lsrs	r3, r3, #8
 8003744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003748:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	fb03 f202 	mul.w	r2, r3, r2
 8003752:	4b6d      	ldr	r3, [pc, #436]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	f003 0307 	and.w	r3, r3, #7
 800375c:	3301      	adds	r3, #1
 800375e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003762:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003764:	4b68      	ldr	r3, [pc, #416]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	0d5b      	lsrs	r3, r3, #21
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	3301      	adds	r3, #1
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	61fb      	str	r3, [r7, #28]
          break;
 800377a:	e005      	b.n	8003788 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 800377c:	bf00      	nop
 800377e:	e359      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003780:	bf00      	nop
 8003782:	e357      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003784:	bf00      	nop
 8003786:	e355      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003788:	bf00      	nop
        break;
 800378a:	e353      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800378c:	4b5e      	ldr	r3, [pc, #376]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d827      	bhi.n	80037ee <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800379e:	a201      	add	r2, pc, #4	@ (adr r2, 80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bd 	.word	0x080037bd
 80037ac:	080037c5 	.word	0x080037c5
 80037b0:	080037d9 	.word	0x080037d9
          frequency = HAL_RCC_GetPCLK2Freq();
 80037b4:	f7ff fa7a 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 80037b8:	61f8      	str	r0, [r7, #28]
          break;
 80037ba:	e01d      	b.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 80037bc:	f7ff f9c8 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 80037c0:	61f8      	str	r0, [r7, #28]
          break;
 80037c2:	e019      	b.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80037c4:	4b50      	ldr	r3, [pc, #320]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d0:	d10f      	bne.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 80037d2:	4b4f      	ldr	r3, [pc, #316]	@ (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80037d4:	61fb      	str	r3, [r7, #28]
          break;
 80037d6:	e00c      	b.n	80037f2 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80037d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 80037e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037ea:	61fb      	str	r3, [r7, #28]
          break;
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 80037ee:	bf00      	nop
 80037f0:	e320      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037f2:	bf00      	nop
 80037f4:	e31e      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80037f6:	bf00      	nop
        break;
 80037f8:	e31c      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80037fa:	4b43      	ldr	r3, [pc, #268]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	613b      	str	r3, [r7, #16]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d83a      	bhi.n	8003882 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800380c:	a201      	add	r2, pc, #4	@ (adr r2, 8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003849 	.word	0x08003849
 8003818:	08003883 	.word	0x08003883
 800381c:	08003883 	.word	0x08003883
 8003820:	08003883 	.word	0x08003883
 8003824:	08003851 	.word	0x08003851
 8003828:	08003883 	.word	0x08003883
 800382c:	08003883 	.word	0x08003883
 8003830:	08003883 	.word	0x08003883
 8003834:	08003859 	.word	0x08003859
 8003838:	08003883 	.word	0x08003883
 800383c:	08003883 	.word	0x08003883
 8003840:	08003883 	.word	0x08003883
 8003844:	0800386d 	.word	0x0800386d
          frequency = HAL_RCC_GetPCLK1Freq();
 8003848:	f7ff fa1a 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 800384c:	61f8      	str	r0, [r7, #28]
          break;
 800384e:	e01d      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003850:	f7ff f97e 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003854:	61f8      	str	r0, [r7, #28]
          break;
 8003856:	e019      	b.n	800388c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003858:	4b2b      	ldr	r3, [pc, #172]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003864:	d10f      	bne.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003866:	4b2a      	ldr	r3, [pc, #168]	@ (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003868:	61fb      	str	r3, [r7, #28]
          break;
 800386a:	e00c      	b.n	8003886 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800386c:	4b26      	ldr	r3, [pc, #152]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d107      	bne.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 800387a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387e:	61fb      	str	r3, [r7, #28]
          break;
 8003880:	e003      	b.n	800388a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003882:	bf00      	nop
 8003884:	e2d6      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003886:	bf00      	nop
 8003888:	e2d4      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800388a:	bf00      	nop
        break;
 800388c:	e2d2      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003894:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b30      	cmp	r3, #48	@ 0x30
 800389e:	d021      	beq.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	2b30      	cmp	r3, #48	@ 0x30
 80038a4:	d829      	bhi.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d011      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d823      	bhi.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	2b10      	cmp	r3, #16
 80038bc:	d004      	beq.n	80038c8 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 80038be:	e01c      	b.n	80038fa <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80038c0:	f7ff f9de 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 80038c4:	61f8      	str	r0, [r7, #28]
          break;
 80038c6:	e01d      	b.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 80038c8:	f7ff f942 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 80038cc:	61f8      	str	r0, [r7, #28]
          break;
 80038ce:	e019      	b.n	8003904 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80038d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038dc:	d10f      	bne.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 80038de:	4b0c      	ldr	r3, [pc, #48]	@ (8003910 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80038e0:	61fb      	str	r3, [r7, #28]
          break;
 80038e2:	e00c      	b.n	80038fe <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80038e4:	4b08      	ldr	r3, [pc, #32]	@ (8003908 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 80038f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038f6:	61fb      	str	r3, [r7, #28]
          break;
 80038f8:	e003      	b.n	8003902 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 80038fa:	bf00      	nop
 80038fc:	e29a      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80038fe:	bf00      	nop
 8003900:	e298      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003902:	bf00      	nop
        break;
 8003904:	e296      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	0800d2c4 	.word	0x0800d2c4
 8003910:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003914:	4b9b      	ldr	r3, [pc, #620]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2bc0      	cmp	r3, #192	@ 0xc0
 8003924:	d021      	beq.n	800396a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2bc0      	cmp	r3, #192	@ 0xc0
 800392a:	d829      	bhi.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b80      	cmp	r3, #128	@ 0x80
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	2b80      	cmp	r3, #128	@ 0x80
 8003936:	d823      	bhi.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d004      	beq.n	800394e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003944:	e01c      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003946:	f7ff f99b 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 800394a:	61f8      	str	r0, [r7, #28]
          break;
 800394c:	e01d      	b.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800394e:	f7ff f8ff 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003952:	61f8      	str	r0, [r7, #28]
          break;
 8003954:	e019      	b.n	800398a <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003956:	4b8b      	ldr	r3, [pc, #556]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003962:	d10f      	bne.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003964:	4b88      	ldr	r3, [pc, #544]	@ (8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003966:	61fb      	str	r3, [r7, #28]
          break;
 8003968:	e00c      	b.n	8003984 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800396a:	4b86      	ldr	r3, [pc, #536]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800396c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d107      	bne.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800397c:	61fb      	str	r3, [r7, #28]
          break;
 800397e:	e003      	b.n	8003988 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003980:	bf00      	nop
 8003982:	e257      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003984:	bf00      	nop
 8003986:	e255      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003988:	bf00      	nop
        break;
 800398a:	e253      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800398c:	4b7d      	ldr	r3, [pc, #500]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003996:	613b      	str	r3, [r7, #16]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800399e:	d025      	beq.n	80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039a6:	d82c      	bhi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ae:	d013      	beq.n	80039d8 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b6:	d824      	bhi.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c4:	d004      	beq.n	80039d0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 80039c6:	e01c      	b.n	8003a02 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 80039c8:	f7ff f95a 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 80039cc:	61f8      	str	r0, [r7, #28]
          break;
 80039ce:	e01d      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80039d0:	f7ff f8be 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 80039d4:	61f8      	str	r0, [r7, #28]
          break;
 80039d6:	e019      	b.n	8003a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039d8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e4:	d10f      	bne.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 80039e6:	4b68      	ldr	r3, [pc, #416]	@ (8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80039e8:	61fb      	str	r3, [r7, #28]
          break;
 80039ea:	e00c      	b.n	8003a06 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80039ec:	4b65      	ldr	r3, [pc, #404]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 80039fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fe:	61fb      	str	r3, [r7, #28]
          break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003a02:	bf00      	nop
 8003a04:	e216      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a06:	bf00      	nop
 8003a08:	e214      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a0a:	bf00      	nop
        break;
 8003a0c:	e212      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003a0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003a18:	613b      	str	r3, [r7, #16]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a20:	d025      	beq.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003a28:	d82c      	bhi.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a30:	d013      	beq.n	8003a5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a38:	d824      	bhi.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a46:	d004      	beq.n	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8003a48:	e01c      	b.n	8003a84 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003a4a:	f7ff f919 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003a4e:	61f8      	str	r0, [r7, #28]
          break;
 8003a50:	e01d      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8003a52:	f7ff f87d 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003a56:	61f8      	str	r0, [r7, #28]
          break;
 8003a58:	e019      	b.n	8003a8e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a66:	d10f      	bne.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8003a68:	4b47      	ldr	r3, [pc, #284]	@ (8003b88 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003a6a:	61fb      	str	r3, [r7, #28]
          break;
 8003a6c:	e00c      	b.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003a6e:	4b45      	ldr	r3, [pc, #276]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d107      	bne.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8003a7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a80:	61fb      	str	r3, [r7, #28]
          break;
 8003a82:	e003      	b.n	8003a8c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8003a84:	bf00      	nop
 8003a86:	e1d5      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a88:	bf00      	nop
 8003a8a:	e1d3      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003a8c:	bf00      	nop
        break;
 8003a8e:	e1d1      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003a90:	4b3c      	ldr	r3, [pc, #240]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aa2:	d00c      	beq.n	8003abe <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aaa:	d864      	bhi.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ab2:	d008      	beq.n	8003ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aba:	d030      	beq.n	8003b1e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8003abc:	e05b      	b.n	8003b76 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8003abe:	f7ff f847 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003ac2:	61f8      	str	r0, [r7, #28]
          break;
 8003ac4:	e05c      	b.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ad2:	d152      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d04c      	beq.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003ae0:	4b28      	ldr	r3, [pc, #160]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003aea:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fb03 f202 	mul.w	r2, r3, r2
 8003af4:	4b23      	ldr	r3, [pc, #140]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	091b      	lsrs	r3, r3, #4
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	3301      	adds	r3, #1
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8003b06:	4b1f      	ldr	r3, [pc, #124]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	0e5b      	lsrs	r3, r3, #25
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	3301      	adds	r3, #1
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	61fb      	str	r3, [r7, #28]
          break;
 8003b1c:	e02d      	b.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8003b1e:	4b19      	ldr	r3, [pc, #100]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b2a:	d128      	bne.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8003b2c:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d022      	beq.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8003b38:	4b12      	ldr	r3, [pc, #72]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b42:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	fb03 f202 	mul.w	r2, r3, r2
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	3301      	adds	r3, #1
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	0e5b      	lsrs	r3, r3, #25
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b72:	61fb      	str	r3, [r7, #28]
          break;
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8003b76:	bf00      	nop
 8003b78:	e15c      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b7a:	bf00      	nop
 8003b7c:	e15a      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003b7e:	bf00      	nop
        break;
 8003b80:	e158      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003b82:	bf00      	nop
 8003b84:	40021000 	.word	0x40021000
 8003b88:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8003b8c:	4b9d      	ldr	r3, [pc, #628]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b96:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8003b9e:	f7ff f885 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8003ba2:	61f8      	str	r0, [r7, #28]
        break;
 8003ba4:	e146      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8003ba6:	f7fe ffd3 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003baa:	61f8      	str	r0, [r7, #28]
        break;
 8003bac:	e142      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8003bae:	4b95      	ldr	r3, [pc, #596]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc0:	d013      	beq.n	8003bea <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bc8:	d819      	bhi.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d004      	beq.n	8003bda <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd6:	d004      	beq.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8003bd8:	e011      	b.n	8003bfe <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003bda:	f7ff f851 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003bde:	61f8      	str	r0, [r7, #28]
          break;
 8003be0:	e010      	b.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8003be2:	f7fe ffb5 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003be6:	61f8      	str	r0, [r7, #28]
          break;
 8003be8:	e00c      	b.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003bea:	4b86      	ldr	r3, [pc, #536]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf6:	d104      	bne.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8003bf8:	4b83      	ldr	r3, [pc, #524]	@ (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003bfa:	61fb      	str	r3, [r7, #28]
          break;
 8003bfc:	e001      	b.n	8003c02 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8003bfe:	bf00      	nop
 8003c00:	e118      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c02:	bf00      	nop
        break;
 8003c04:	e116      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8003c06:	4b7f      	ldr	r3, [pc, #508]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c18:	d013      	beq.n	8003c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c20:	d819      	bhi.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c2e:	d004      	beq.n	8003c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8003c30:	e011      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c32:	f7ff f825 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003c36:	61f8      	str	r0, [r7, #28]
          break;
 8003c38:	e010      	b.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c3a:	f7fe ff89 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003c3e:	61f8      	str	r0, [r7, #28]
          break;
 8003c40:	e00c      	b.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c42:	4b70      	ldr	r3, [pc, #448]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c4e:	d104      	bne.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8003c50:	4b6d      	ldr	r3, [pc, #436]	@ (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003c52:	61fb      	str	r3, [r7, #28]
          break;
 8003c54:	e001      	b.n	8003c5a <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8003c56:	bf00      	nop
 8003c58:	e0ec      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003c5a:	bf00      	nop
        break;
 8003c5c:	e0ea      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8003c5e:	4b69      	ldr	r3, [pc, #420]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c68:	613b      	str	r3, [r7, #16]
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c70:	d013      	beq.n	8003c9a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c78:	d819      	bhi.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d004      	beq.n	8003c8a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c86:	d004      	beq.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8003c88:	e011      	b.n	8003cae <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003c8a:	f7fe fff9 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003c8e:	61f8      	str	r0, [r7, #28]
          break;
 8003c90:	e010      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8003c92:	f7fe ff5d 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8003c96:	61f8      	str	r0, [r7, #28]
          break;
 8003c98:	e00c      	b.n	8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003c9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ca6:	d104      	bne.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8003ca8:	4b57      	ldr	r3, [pc, #348]	@ (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003caa:	61fb      	str	r3, [r7, #28]
          break;
 8003cac:	e001      	b.n	8003cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8003cae:	bf00      	nop
 8003cb0:	e0c0      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003cb2:	bf00      	nop
        break;
 8003cb4:	e0be      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003cb6:	4b53      	ldr	r3, [pc, #332]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003cc0:	613b      	str	r3, [r7, #16]
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003cc8:	d02c      	beq.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003cd0:	d833      	bhi.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003cd8:	d01a      	beq.n	8003d10 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ce0:	d82b      	bhi.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003cee:	d004      	beq.n	8003cfa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8003cf0:	e023      	b.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003cf2:	f7fe ffc5 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003cf6:	61f8      	str	r0, [r7, #28]
          break;
 8003cf8:	e026      	b.n	8003d48 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003cfa:	4b42      	ldr	r3, [pc, #264]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003cfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d11a      	bne.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8003d08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003d0c:	61fb      	str	r3, [r7, #28]
          break;
 8003d0e:	e016      	b.n	8003d3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d10:	4b3c      	ldr	r3, [pc, #240]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1c:	d111      	bne.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8003d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003d20:	61fb      	str	r3, [r7, #28]
          break;
 8003d22:	e00e      	b.n	8003d42 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003d24:	4b37      	ldr	r3, [pc, #220]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d109      	bne.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8003d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d36:	61fb      	str	r3, [r7, #28]
          break;
 8003d38:	e005      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8003d3a:	bf00      	nop
 8003d3c:	e07a      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d3e:	bf00      	nop
 8003d40:	e078      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d42:	bf00      	nop
 8003d44:	e076      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d46:	bf00      	nop
        break;
 8003d48:	e074      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d50:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003d54:	613b      	str	r3, [r7, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d5c:	d02c      	beq.n	8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d64:	d833      	bhi.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d6c:	d01a      	beq.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d74:	d82b      	bhi.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d82:	d004      	beq.n	8003d8e <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8003d84:	e023      	b.n	8003dce <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003d86:	f7fe ff7b 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003d8a:	61f8      	str	r0, [r7, #28]
          break;
 8003d8c:	e026      	b.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d11a      	bne.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8003d9c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003da0:	61fb      	str	r3, [r7, #28]
          break;
 8003da2:	e016      	b.n	8003dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003da4:	4b17      	ldr	r3, [pc, #92]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db0:	d111      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8003db4:	61fb      	str	r3, [r7, #28]
          break;
 8003db6:	e00e      	b.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d109      	bne.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8003dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dca:	61fb      	str	r3, [r7, #28]
          break;
 8003dcc:	e005      	b.n	8003dda <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8003dce:	bf00      	nop
 8003dd0:	e030      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dd2:	bf00      	nop
 8003dd4:	e02e      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dd6:	bf00      	nop
 8003dd8:	e02c      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dda:	bf00      	nop
        break;
 8003ddc:	e02a      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8003dde:	4b09      	ldr	r3, [pc, #36]	@ (8003e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d004      	beq.n	8003dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df6:	d009      	beq.n	8003e0c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8003df8:	e012      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003dfa:	f7fe ff41 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003dfe:	61f8      	str	r0, [r7, #28]
          break;
 8003e00:	e00e      	b.n	8003e20 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000
 8003e08:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e18:	d101      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8003e1c:	61fb      	str	r3, [r7, #28]
          break;
 8003e1e:	bf00      	nop
        break;
 8003e20:	e008      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e22:	bf00      	nop
 8003e24:	e006      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e26:	bf00      	nop
 8003e28:	e004      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e002      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e000      	b.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8003e32:	bf00      	nop
    }
  }

  return(frequency);
 8003e34:	69fb      	ldr	r3, [r7, #28]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	00f42400 	.word	0x00f42400

08003e48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e56:	4b75      	ldr	r3, [pc, #468]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d018      	beq.n	8003e94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e62:	4b72      	ldr	r3, [pc, #456]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f003 0203 	and.w	r2, r3, #3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d10d      	bne.n	8003e8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
       ||
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d009      	beq.n	8003e8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e7a:	4b6c      	ldr	r3, [pc, #432]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
       ||
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d047      	beq.n	8003f1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	e044      	b.n	8003f1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d018      	beq.n	8003ece <RCCEx_PLLSAI1_Config+0x86>
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d825      	bhi.n	8003eec <RCCEx_PLLSAI1_Config+0xa4>
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d002      	beq.n	8003eaa <RCCEx_PLLSAI1_Config+0x62>
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d009      	beq.n	8003ebc <RCCEx_PLLSAI1_Config+0x74>
 8003ea8:	e020      	b.n	8003eec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eaa:	4b60      	ldr	r3, [pc, #384]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11d      	bne.n	8003ef2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eba:	e01a      	b.n	8003ef2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ebc:	4b5b      	ldr	r3, [pc, #364]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d116      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ecc:	e013      	b.n	8003ef6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ece:	4b57      	ldr	r3, [pc, #348]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eda:	4b54      	ldr	r3, [pc, #336]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d109      	bne.n	8003efa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eea:	e006      	b.n	8003efa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef0:	e004      	b.n	8003efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e002      	b.n	8003efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003efa:	bf00      	nop
    }

    if(status == HAL_OK)
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10d      	bne.n	8003f1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f02:	4b4a      	ldr	r3, [pc, #296]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6819      	ldr	r1, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	430b      	orrs	r3, r1
 8003f18:	4944      	ldr	r1, [pc, #272]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d17d      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f24:	4b41      	ldr	r3, [pc, #260]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a40      	ldr	r2, [pc, #256]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f30:	f7fd fb3c 	bl	80015ac <HAL_GetTick>
 8003f34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f36:	e009      	b.n	8003f4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f38:	f7fd fb38 	bl	80015ac <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d902      	bls.n	8003f4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	73fb      	strb	r3, [r7, #15]
        break;
 8003f4a:	e005      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f4c:	4b37      	ldr	r3, [pc, #220]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ef      	bne.n	8003f38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d160      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d111      	bne.n	8003f88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f64:	4b31      	ldr	r3, [pc, #196]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6892      	ldr	r2, [r2, #8]
 8003f74:	0211      	lsls	r1, r2, #8
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68d2      	ldr	r2, [r2, #12]
 8003f7a:	0912      	lsrs	r2, r2, #4
 8003f7c:	0452      	lsls	r2, r2, #17
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	492a      	ldr	r1, [pc, #168]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	610b      	str	r3, [r1, #16]
 8003f86:	e027      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d112      	bne.n	8003fb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f8e:	4b27      	ldr	r3, [pc, #156]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	0211      	lsls	r1, r2, #8
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	6912      	ldr	r2, [r2, #16]
 8003fa4:	0852      	lsrs	r2, r2, #1
 8003fa6:	3a01      	subs	r2, #1
 8003fa8:	0552      	lsls	r2, r2, #21
 8003faa:	430a      	orrs	r2, r1
 8003fac:	491f      	ldr	r1, [pc, #124]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	610b      	str	r3, [r1, #16]
 8003fb2:	e011      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6892      	ldr	r2, [r2, #8]
 8003fc4:	0211      	lsls	r1, r2, #8
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6952      	ldr	r2, [r2, #20]
 8003fca:	0852      	lsrs	r2, r2, #1
 8003fcc:	3a01      	subs	r2, #1
 8003fce:	0652      	lsls	r2, r2, #25
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	4916      	ldr	r1, [pc, #88]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fd8:	4b14      	ldr	r3, [pc, #80]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a13      	ldr	r2, [pc, #76]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fd fae2 	bl	80015ac <HAL_GetTick>
 8003fe8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fea:	e009      	b.n	8004000 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fec:	f7fd fade 	bl	80015ac <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	73fb      	strb	r3, [r7, #15]
          break;
 8003ffe:	e005      	b.n	800400c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004000:	4b0a      	ldr	r3, [pc, #40]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004012:	4b06      	ldr	r3, [pc, #24]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	4904      	ldr	r1, [pc, #16]	@ (800402c <RCCEx_PLLSAI1_Config+0x1e4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800403e:	4b6a      	ldr	r3, [pc, #424]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d018      	beq.n	800407c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800404a:	4b67      	ldr	r3, [pc, #412]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f003 0203 	and.w	r2, r3, #3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d10d      	bne.n	8004076 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
       ||
 800405e:	2b00      	cmp	r3, #0
 8004060:	d009      	beq.n	8004076 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004062:	4b61      	ldr	r3, [pc, #388]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	091b      	lsrs	r3, r3, #4
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
       ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d047      	beq.n	8004106 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e044      	b.n	8004106 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b03      	cmp	r3, #3
 8004082:	d018      	beq.n	80040b6 <RCCEx_PLLSAI2_Config+0x86>
 8004084:	2b03      	cmp	r3, #3
 8004086:	d825      	bhi.n	80040d4 <RCCEx_PLLSAI2_Config+0xa4>
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <RCCEx_PLLSAI2_Config+0x62>
 800408c:	2b02      	cmp	r3, #2
 800408e:	d009      	beq.n	80040a4 <RCCEx_PLLSAI2_Config+0x74>
 8004090:	e020      	b.n	80040d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004092:	4b55      	ldr	r3, [pc, #340]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d11d      	bne.n	80040da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a2:	e01a      	b.n	80040da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040a4:	4b50      	ldr	r3, [pc, #320]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d116      	bne.n	80040de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e013      	b.n	80040de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040b6:	4b4c      	ldr	r3, [pc, #304]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10f      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040c2:	4b49      	ldr	r3, [pc, #292]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040d2:	e006      	b.n	80040e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      break;
 80040d8:	e004      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040da:	bf00      	nop
 80040dc:	e002      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040de:	bf00      	nop
 80040e0:	e000      	b.n	80040e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10d      	bne.n	8004106 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ea:	4b3f      	ldr	r3, [pc, #252]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	430b      	orrs	r3, r1
 8004100:	4939      	ldr	r1, [pc, #228]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004102:	4313      	orrs	r3, r2
 8004104:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d167      	bne.n	80041dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800410c:	4b36      	ldr	r3, [pc, #216]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a35      	ldr	r2, [pc, #212]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004116:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004118:	f7fd fa48 	bl	80015ac <HAL_GetTick>
 800411c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800411e:	e009      	b.n	8004134 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004120:	f7fd fa44 	bl	80015ac <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d902      	bls.n	8004134 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	73fb      	strb	r3, [r7, #15]
        break;
 8004132:	e005      	b.n	8004140 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004134:	4b2c      	ldr	r3, [pc, #176]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1ef      	bne.n	8004120 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d14a      	bne.n	80041dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800414c:	4b26      	ldr	r3, [pc, #152]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6892      	ldr	r2, [r2, #8]
 800415c:	0211      	lsls	r1, r2, #8
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	68d2      	ldr	r2, [r2, #12]
 8004162:	0912      	lsrs	r2, r2, #4
 8004164:	0452      	lsls	r2, r2, #17
 8004166:	430a      	orrs	r2, r1
 8004168:	491f      	ldr	r1, [pc, #124]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	4313      	orrs	r3, r2
 800416c:	614b      	str	r3, [r1, #20]
 800416e:	e011      	b.n	8004194 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004170:	4b1d      	ldr	r3, [pc, #116]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004178:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6892      	ldr	r2, [r2, #8]
 8004180:	0211      	lsls	r1, r2, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6912      	ldr	r2, [r2, #16]
 8004186:	0852      	lsrs	r2, r2, #1
 8004188:	3a01      	subs	r2, #1
 800418a:	0652      	lsls	r2, r2, #25
 800418c:	430a      	orrs	r2, r1
 800418e:	4916      	ldr	r1, [pc, #88]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004190:	4313      	orrs	r3, r2
 8004192:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a13      	ldr	r2, [pc, #76]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd fa04 	bl	80015ac <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041a6:	e009      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041a8:	f7fd fa00 	bl	80015ac <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	73fb      	strb	r3, [r7, #15]
          break;
 80041ba:	e005      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80041bc:	4b0a      	ldr	r3, [pc, #40]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0ef      	beq.n	80041a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041ce:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4904      	ldr	r1, [pc, #16]	@ (80041e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	40021000 	.word	0x40021000

080041ec <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80041fe:	2300      	movs	r3, #0
 8004200:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004208:	d10c      	bne.n	8004224 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800420a:	4b6e      	ldr	r3, [pc, #440]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004210:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004214:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800421c:	d112      	bne.n	8004244 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800421e:	4b6a      	ldr	r3, [pc, #424]	@ (80043c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e00f      	b.n	8004244 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422a:	d10b      	bne.n	8004244 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800422c:	4b65      	ldr	r3, [pc, #404]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004232:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004236:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800423e:	d101      	bne.n	8004244 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004240:	4b61      	ldr	r3, [pc, #388]	@ (80043c8 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004242:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 80b4 	bne.w	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004256:	d003      	beq.n	8004260 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800425e:	d135      	bne.n	80042cc <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004260:	4b58      	ldr	r3, [pc, #352]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004268:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800426c:	f040 80a1 	bne.w	80043b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004270:	4b54      	ldr	r3, [pc, #336]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 809a 	beq.w	80043b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800427e:	4b51      	ldr	r3, [pc, #324]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	3301      	adds	r3, #1
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004292:	4b4c      	ldr	r3, [pc, #304]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	0a1b      	lsrs	r3, r3, #8
 8004298:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800429c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80042a4:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80042b0:	2311      	movs	r3, #17
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e001      	b.n	80042ba <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80042b6:	2307      	movs	r3, #7
 80042b8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	fb03 f202 	mul.w	r2, r3, r2
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c8:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80042ca:	e072      	b.n	80043b2 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d133      	bne.n	800433a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80042d2:	4b3c      	ldr	r3, [pc, #240]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042de:	d169      	bne.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80042e0:	4b38      	ldr	r3, [pc, #224]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d063      	beq.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80042ec:	4b35      	ldr	r3, [pc, #212]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	3301      	adds	r3, #1
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004300:	4b30      	ldr	r3, [pc, #192]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	0a1b      	lsrs	r3, r3, #8
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004312:	4b2c      	ldr	r3, [pc, #176]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800431e:	2311      	movs	r3, #17
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e001      	b.n	8004328 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004324:	2307      	movs	r3, #7
 8004326:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	fb03 f202 	mul.w	r2, r3, r2
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	61fb      	str	r3, [r7, #28]
 8004338:	e03c      	b.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004340:	d003      	beq.n	800434a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004348:	d134      	bne.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800434a:	4b1e      	ldr	r3, [pc, #120]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004356:	d12d      	bne.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004358:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d027      	beq.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004364:	4b17      	ldr	r3, [pc, #92]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	3301      	adds	r3, #1
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004378:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004382:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800438a:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004396:	2311      	movs	r3, #17
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e001      	b.n	80043a0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 800439c:	2307      	movs	r3, #7
 800439e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	fb03 f202 	mul.w	r2, r3, r2
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ae:	61fb      	str	r3, [r7, #28]
 80043b0:	e000      	b.n	80043b4 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80043b2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80043b4:	69fb      	ldr	r3, [r7, #28]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3724      	adds	r7, #36	@ 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	01770000 	.word	0x01770000

080043cc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e155      	b.n	800468a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d106      	bne.n	80043f8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f7fc febc 	bl	8001170 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fa7d 	bl	80048f8 <SAI_Disable>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e140      	b.n	800468a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d00c      	beq.n	8004432 <HAL_SAI_Init+0x66>
 8004418:	2b02      	cmp	r3, #2
 800441a:	d80d      	bhi.n	8004438 <HAL_SAI_Init+0x6c>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_SAI_Init+0x5a>
 8004420:	2b01      	cmp	r3, #1
 8004422:	d003      	beq.n	800442c <HAL_SAI_Init+0x60>
 8004424:	e008      	b.n	8004438 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
      break;
 800442a:	e008      	b.n	800443e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800442c:	2310      	movs	r3, #16
 800442e:	61fb      	str	r3, [r7, #28]
      break;
 8004430:	e005      	b.n	800443e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004432:	2320      	movs	r3, #32
 8004434:	61fb      	str	r3, [r7, #28]
      break;
 8004436:	e002      	b.n	800443e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
      break;
 800443c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d81d      	bhi.n	8004482 <HAL_SAI_Init+0xb6>
 8004446:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <HAL_SAI_Init+0x80>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	0800445d 	.word	0x0800445d
 8004450:	08004463 	.word	0x08004463
 8004454:	0800446b 	.word	0x0800446b
 8004458:	08004473 	.word	0x08004473
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
      break;
 8004460:	e012      	b.n	8004488 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004466:	617b      	str	r3, [r7, #20]
      break;
 8004468:	e00e      	b.n	8004488 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800446a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800446e:	617b      	str	r3, [r7, #20]
      break;
 8004470:	e00a      	b.n	8004488 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004472:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004476:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
      break;
 8004480:	e002      	b.n	8004488 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
      break;
 8004486:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a81      	ldr	r2, [pc, #516]	@ (8004694 <HAL_SAI_Init+0x2c8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_SAI_Init+0xd0>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a80      	ldr	r2, [pc, #512]	@ (8004698 <HAL_SAI_Init+0x2cc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d103      	bne.n	80044a4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 800449c:	4a7f      	ldr	r2, [pc, #508]	@ (800469c <HAL_SAI_Init+0x2d0>)
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e002      	b.n	80044aa <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80044a4:	4a7e      	ldr	r2, [pc, #504]	@ (80046a0 <HAL_SAI_Init+0x2d4>)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d041      	beq.n	8004536 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a77      	ldr	r2, [pc, #476]	@ (8004694 <HAL_SAI_Init+0x2c8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d004      	beq.n	80044c6 <HAL_SAI_Init+0xfa>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a75      	ldr	r2, [pc, #468]	@ (8004698 <HAL_SAI_Init+0x2cc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d105      	bne.n	80044d2 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80044c6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80044ca:	f7fe ff4f 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 80044ce:	6138      	str	r0, [r7, #16]
 80044d0:	e004      	b.n	80044dc <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80044d2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80044d6:	f7fe ff49 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 80044da:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	025b      	lsls	r3, r3, #9
 80044ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a6b      	ldr	r2, [pc, #428]	@ (80046a4 <HAL_SAI_Init+0x2d8>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	08da      	lsrs	r2, r3, #3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	4b67      	ldr	r3, [pc, #412]	@ (80046a4 <HAL_SAI_Init+0x2d8>)
 8004506:	fba3 2301 	umull	r2, r3, r3, r1
 800450a:	08da      	lsrs	r2, r3, #3
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	1aca      	subs	r2, r1, r3
 8004516:	2a08      	cmp	r2, #8
 8004518:	d904      	bls.n	8004524 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	1c5a      	adds	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	085a      	lsrs	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_SAI_Init+0x17a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d109      	bne.n	800455a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_SAI_Init+0x186>
 800454e:	2300      	movs	r3, #0
 8004550:	e001      	b.n	8004556 <HAL_SAI_Init+0x18a>
 8004552:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	e008      	b.n	800456c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d102      	bne.n	8004568 <HAL_SAI_Init+0x19c>
 8004562:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004566:	e000      	b.n	800456a <HAL_SAI_Init+0x19e>
 8004568:	2300      	movs	r3, #0
 800456a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6819      	ldr	r1, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b4c      	ldr	r3, [pc, #304]	@ (80046a8 <HAL_SAI_Init+0x2dc>)
 8004578:	400b      	ands	r3, r1
 800457a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6819      	ldr	r1, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004590:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004596:	431a      	orrs	r2, r3
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 80045a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80045b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	051b      	lsls	r3, r3, #20
 80045b8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80045d0:	f023 030f 	bic.w	r3, r3, #15
 80045d4:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6899      	ldr	r1, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	4b2b      	ldr	r3, [pc, #172]	@ (80046ac <HAL_SAI_Init+0x2e0>)
 8004600:	400b      	ands	r3, r1
 8004602:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004614:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800461a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004620:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	3b01      	subs	r3, #1
 8004628:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800462a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68d9      	ldr	r1, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004642:	400b      	ands	r3, r1
 8004644:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68d9      	ldr	r1, [r3, #12]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800465c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004662:	3b01      	subs	r3, #1
 8004664:	021b      	lsls	r3, r3, #8
 8004666:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40015404 	.word	0x40015404
 8004698:	40015424 	.word	0x40015424
 800469c:	40015400 	.word	0x40015400
 80046a0:	40015800 	.word	0x40015800
 80046a4:	cccccccd 	.word	0xcccccccd
 80046a8:	ff05c010 	.word	0xff05c010
 80046ac:	fff88000 	.word	0xfff88000

080046b0 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_SAI_DMAStop+0x1a>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e042      	b.n	8004750 <HAL_SAI_DMAStop+0xa0>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f910 	bl	80048f8 <SAI_Disable>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80046f0:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d108      	bne.n	8004710 <HAL_SAI_DMAStop+0x60>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <HAL_SAI_DMAStop+0x60>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmatx);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd f9a8 	bl	8001a60 <HAL_DMA_Abort>
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b22      	cmp	r3, #34	@ 0x22
 800471a:	d108      	bne.n	800472e <HAL_SAI_DMAStop+0x7e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004720:	2b00      	cmp	r3, #0
 8004722:	d004      	beq.n	800472e <HAL_SAI_DMAStop+0x7e>
  {
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
    (void) HAL_DMA_Abort(hsai->hdmarx);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	4618      	mov	r0, r3
 800472a:	f7fd f999 	bl	8001a60 <HAL_DMA_Abort>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0208 	orr.w	r2, r2, #8
 800473c:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <HAL_SAI_Receive_DMA+0x1a>
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e074      	b.n	8004860 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b01      	cmp	r3, #1
 8004780:	d16d      	bne.n	800485e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_SAI_Receive_DMA+0x38>
 800478c:	2302      	movs	r3, #2
 800478e:	e067      	b.n	8004860 <HAL_SAI_Receive_DMA+0x108>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	88fa      	ldrh	r2, [r7, #6]
 80047aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2222      	movs	r2, #34	@ 0x22
 80047ba:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c2:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <HAL_SAI_Receive_DMA+0x110>)
 80047c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ca:	4a28      	ldr	r2, [pc, #160]	@ (800486c <HAL_SAI_Receive_DMA+0x114>)
 80047cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d2:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <HAL_SAI_Receive_DMA+0x118>)
 80047d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	2200      	movs	r2, #0
 80047dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	331c      	adds	r3, #28
 80047e8:	4619      	mov	r1, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80047f6:	f7fd f8d3 	bl	80019a0 <HAL_DMA_Start_IT>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e029      	b.n	8004860 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800480c:	2100      	movs	r1, #0
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f83a 	bl	8004888 <SAI_InterruptFlag>
 8004814:	4601      	mov	r1, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004832:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004850:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	e000      	b.n	8004860 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	080049cb 	.word	0x080049cb
 800486c:	0800496d 	.word	0x0800496d
 8004870:	080049e7 	.word	0x080049e7

08004874 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8004894:	2301      	movs	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d103      	bne.n	80048a6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f043 0308 	orr.w	r3, r3, #8
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d10b      	bne.n	80048c6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d003      	beq.n	80048be <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d103      	bne.n	80048c6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f043 0310 	orr.w	r3, r3, #16
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d003      	beq.n	80048d6 <SAI_InterruptFlag+0x4e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d104      	bne.n	80048e0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	e003      	b.n	80048e8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f043 0304 	orr.w	r3, r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004900:	4b18      	ldr	r3, [pc, #96]	@ (8004964 <SAI_Disable+0x6c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	@ (8004968 <SAI_Disable+0x70>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	0b1b      	lsrs	r3, r3, #12
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004922:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004930:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	72fb      	strb	r3, [r7, #11]
      break;
 800493e:	e009      	b.n	8004954 <SAI_Disable+0x5c>
    }
    count--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3b01      	subs	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e7      	bne.n	8004924 <SAI_Disable+0x2c>

  return status;
 8004954:	7afb      	ldrb	r3, [r7, #11]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	2000002c 	.word	0x2000002c
 8004968:	95cbec1b 	.word	0x95cbec1b

0800496c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	2b20      	cmp	r3, #32
 8004980:	d01c      	beq.n	80049bc <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004990:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800499a:	2100      	movs	r1, #0
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f7ff ff73 	bl	8004888 <SAI_InterruptFlag>
 80049a2:	4603      	mov	r3, r0
 80049a4:	43d9      	mvns	r1, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	400a      	ands	r2, r1
 80049b2:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7fc fa13 	bl	8000de8 <HAL_SAI_RxCpltCallback>
#endif
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b084      	sub	sp, #16
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f7fc fa1d 	bl	8000e18 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004a12:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff ff6f 	bl	80048f8 <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f7ff ff22 	bl	8004874 <HAL_SAI_ErrorCallback>
#endif
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e02d      	b.n	8004aa6 <HAL_SD_Init+0x6e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f7fc fa97 	bl	8000f90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f820 	bl	8004ab0 <HAL_SD_InitCard>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e015      	b.n	8004aa6 <HAL_SD_Init+0x6e>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Configure the bus wide with the specified value in the SD_HandleTypeDef */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 ff6f 	bl	8005964 <HAL_SD_ConfigWideBusOperation>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e00a      	b.n	8004aa6 <HAL_SD_Init+0x6e>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ab0:	b5b0      	push	{r4, r5, r7, lr}
 8004ab2:	b08e      	sub	sp, #56	@ 0x38
 8004ab4:	af04      	add	r7, sp, #16
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8004acc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004ad0:	f7fe fc4c 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 8004ad4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004aea:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e07b      	b.n	8004be8 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	09db      	lsrs	r3, r3, #7
 8004af4:	4a3e      	ldr	r2, [pc, #248]	@ (8004bf0 <HAL_SD_InitCard+0x140>)
 8004af6:	fba2 2303 	umull	r2, r3, r2, r3
 8004afa:	091b      	lsrs	r3, r3, #4
 8004afc:	3b02      	subs	r3, #2
 8004afe:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681d      	ldr	r5, [r3, #0]
 8004b04:	466c      	mov	r4, sp
 8004b06:	f107 0314 	add.w	r3, r7, #20
 8004b0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b12:	f107 0308 	add.w	r3, r7, #8
 8004b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f002 ffd3 	bl	8007ac4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b2c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f003 f811 	bl	8007b5a <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b46:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8004b54:	4a27      	ldr	r2, [pc, #156]	@ (8004bf4 <HAL_SD_InitCard+0x144>)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fd30 	bl	80015c4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 f907 	bl	8005d78 <SD_PowerON>
 8004b6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b7e:	6a3b      	ldr	r3, [r7, #32]
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e02e      	b.n	8004be8 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f001 f834 	bl	8005bf8 <SD_InitCard>
 8004b90:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00b      	beq.n	8004bb0 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e01b      	b.n	8004be8 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f003 f861 	bl	8007c80 <SDMMC_CmdBlockLength>
 8004bbe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00f      	beq.n	8004be6 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf8 <HAL_SD_InitCard+0x148>)
 8004bcc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3728      	adds	r7, #40	@ 0x28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf0:	014f8b59 	.word	0x014f8b59
 8004bf4:	00012110 	.word	0x00012110
 8004bf8:	004005ff 	.word	0x004005ff

08004bfc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b092      	sub	sp, #72	@ 0x48
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
 8004c08:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c0a:	f7fc fccf 	bl	80015ac <HAL_GetTick>
 8004c0e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d107      	bne.n	8004c2e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c22:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e1bd      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	f040 81b0 	bne.w	8004f9c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d907      	bls.n	8004c60 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e1a4      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2203      	movs	r2, #3
 8004c64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d002      	beq.n	8004c7e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	025b      	lsls	r3, r3, #9
 8004c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c82:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	025b      	lsls	r3, r3, #9
 8004c88:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004c8a:	2390      	movs	r3, #144	@ 0x90
 8004c8c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f107 0214 	add.w	r2, r7, #20
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f002 ffbf 	bl	8007c28 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d90a      	bls.n	8004cc6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f003 f823 	bl	8007d08 <SDMMC_CmdReadMultiBlock>
 8004cc2:	6478      	str	r0, [r7, #68]	@ 0x44
 8004cc4:	e009      	b.n	8004cda <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f002 fff6 	bl	8007cc4 <SDMMC_CmdReadSingleBlock>
 8004cd8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d012      	beq.n	8004d06 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a7a      	ldr	r2, [pc, #488]	@ (8004ed0 <HAL_SD_ReadBlocks+0x2d4>)
 8004ce6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e151      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d0a:	e061      	b.n	8004dd0 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d03c      	beq.n	8004d94 <HAL_SD_ReadBlocks+0x198>
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d039      	beq.n	8004d94 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8004d20:	2300      	movs	r3, #0
 8004d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d24:	e033      	b.n	8004d8e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f002 fef7 	bl	8007b1e <SDMMC_ReadFIFO>
 8004d30:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d42:	3b01      	subs	r3, #1
 8004d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d52:	3301      	adds	r3, #1
 8004d54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5e:	0c1b      	lsrs	r3, r3, #16
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d64:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d68:	3301      	adds	r3, #1
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d74:	0e1b      	lsrs	r3, r3, #24
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8004d7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7e:	3301      	adds	r3, #1
 8004d80:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8004d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d84:	3b01      	subs	r3, #1
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8004d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d90:	2b07      	cmp	r3, #7
 8004d92:	d9c8      	bls.n	8004d26 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004d94:	f7fc fc0a 	bl	80015ac <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d902      	bls.n	8004daa <HAL_SD_ReadBlocks+0x1ae>
 8004da4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d112      	bne.n	8004dd0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a48      	ldr	r2, [pc, #288]	@ (8004ed0 <HAL_SD_ReadBlocks+0x2d4>)
 8004db0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e0ec      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d096      	beq.n	8004d0c <HAL_SD_ReadBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d022      	beq.n	8004e32 <HAL_SD_ReadBlocks+0x236>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d91f      	bls.n	8004e32 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	d01b      	beq.n	8004e32 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f002 ffe8 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 8004e04:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d012      	beq.n	8004e32 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed0 <HAL_SD_ReadBlocks+0x2d4>)
 8004e12:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e0bb      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d012      	beq.n	8004e66 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	@ (8004ed0 <HAL_SD_ReadBlocks+0x2d4>)
 8004e46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	f043 0208 	orr.w	r2, r3, #8
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e0a1      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d012      	beq.n	8004e9a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a15      	ldr	r2, [pc, #84]	@ (8004ed0 <HAL_SD_ReadBlocks+0x2d4>)
 8004e7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e80:	f043 0202 	orr.w	r2, r3, #2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e087      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d064      	beq.n	8004f72 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a08      	ldr	r2, [pc, #32]	@ (8004ed0 <HAL_SD_ReadBlocks+0x2d4>)
 8004eae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb4:	f043 0220 	orr.w	r2, r3, #32
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e06d      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
 8004ece:	bf00      	nop
 8004ed0:	004005ff 	.word	0x004005ff

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f002 fe20 	bl	8007b1e <SDMMC_ReadFIFO>
 8004ede:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eea:	3301      	adds	r3, #1
 8004eec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f00:	3301      	adds	r3, #1
 8004f02:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f06:	3b01      	subs	r3, #1
 8004f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f12:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f16:	3301      	adds	r3, #1
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f22:	0e1b      	lsrs	r3, r3, #24
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f28:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8004f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f32:	3b01      	subs	r3, #1
 8004f34:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004f36:	f7fc fb39 	bl	80015ac <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d902      	bls.n	8004f4c <HAL_SD_ReadBlocks+0x350>
 8004f46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d112      	bne.n	8004f72 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a18      	ldr	r2, [pc, #96]	@ (8004fb4 <HAL_SD_ReadBlocks+0x3b8>)
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e01b      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_SD_ReadBlocks+0x38a>
 8004f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1a6      	bne.n	8004ed4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004f8e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e006      	b.n	8004faa <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3748      	adds	r7, #72	@ 0x48
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	004005ff 	.word	0x004005ff

08004fb8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b092      	sub	sp, #72	@ 0x48
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004fc6:	f7fc faf1 	bl	80015ac <HAL_GetTick>
 8004fca:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d107      	bne.n	8004fea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fde:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e165      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	f040 8158 	bne.w	80052a8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ffe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	441a      	add	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	429a      	cmp	r2, r3
 800500a:	d907      	bls.n	800501c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005010:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e14c      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2203      	movs	r2, #3
 8005020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2200      	movs	r2, #0
 800502a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005030:	2b01      	cmp	r3, #1
 8005032:	d002      	beq.n	800503a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005036:	025b      	lsls	r3, r3, #9
 8005038:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800503a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800503e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	025b      	lsls	r3, r3, #9
 8005044:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005046:	2390      	movs	r3, #144	@ 0x90
 8005048:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800504a:	2300      	movs	r3, #0
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800504e:	2300      	movs	r3, #0
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    config.DPSM          = SDMMC_DPSM_DISABLE;
#else
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8005052:	2301      	movs	r3, #1
 8005054:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f107 0218 	add.w	r2, r7, #24
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f002 fde1 	bl	8007c28 <SDMMC_ConfigData>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d90a      	bls.n	8005082 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005078:	4618      	mov	r0, r3
 800507a:	f002 fe89 	bl	8007d90 <SDMMC_CmdWriteMultiBlock>
 800507e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005080:	e009      	b.n	8005096 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2210      	movs	r2, #16
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800508e:	4618      	mov	r0, r3
 8005090:	f002 fe5c 	bl	8007d4c <SDMMC_CmdWriteSingleBlock>
 8005094:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005098:	2b00      	cmp	r3, #0
 800509a:	d012      	beq.n	80050c2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a87      	ldr	r2, [pc, #540]	@ (80052c0 <HAL_SD_WriteBlocks+0x308>)
 80050a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050aa:	431a      	orrs	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0f9      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80050c6:	e065      	b.n	8005194 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d040      	beq.n	8005158 <HAL_SD_WriteBlocks+0x1a0>
 80050d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d03d      	beq.n	8005158 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80050dc:	2300      	movs	r3, #0
 80050de:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e0:	e037      	b.n	8005152 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80050e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80050e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ea:	3301      	adds	r3, #1
 80050ec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80050ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050f0:	3b01      	subs	r3, #1
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80050f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	021a      	lsls	r2, r3, #8
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	3301      	adds	r3, #1
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005108:	3b01      	subs	r3, #1
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800510c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511a:	3301      	adds	r3, #1
 800511c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	3b01      	subs	r3, #1
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	061a      	lsls	r2, r3, #24
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	3301      	adds	r3, #1
 8005134:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005138:	3b01      	subs	r3, #1
 800513a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f107 0214 	add.w	r2, r7, #20
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f002 fcf6 	bl	8007b38 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800514c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800514e:	3301      	adds	r3, #1
 8005150:	643b      	str	r3, [r7, #64]	@ 0x40
 8005152:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005154:	2b07      	cmp	r3, #7
 8005156:	d9c4      	bls.n	80050e2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005158:	f7fc fa28 	bl	80015ac <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005164:	429a      	cmp	r2, r3
 8005166:	d902      	bls.n	800516e <HAL_SD_WriteBlocks+0x1b6>
 8005168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a53      	ldr	r2, [pc, #332]	@ (80052c0 <HAL_SD_WriteBlocks+0x308>)
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800517a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517c:	431a      	orrs	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e090      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519a:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d092      	beq.n	80050c8 <HAL_SD_WriteBlocks+0x110>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d022      	beq.n	80051f6 <HAL_SD_WriteBlocks+0x23e>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d91f      	bls.n	80051f6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d01b      	beq.n	80051f6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f002 fe06 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 80051c8:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80051ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a3a      	ldr	r2, [pc, #232]	@ (80052c0 <HAL_SD_WriteBlocks+0x308>)
 80051d6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051de:	431a      	orrs	r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e05f      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d012      	beq.n	800522a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a2d      	ldr	r2, [pc, #180]	@ (80052c0 <HAL_SD_WriteBlocks+0x308>)
 800520a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005210:	f043 0208 	orr.w	r2, r3, #8
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e045      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d012      	beq.n	800525e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a20      	ldr	r2, [pc, #128]	@ (80052c0 <HAL_SD_WriteBlocks+0x308>)
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005244:	f043 0202 	orr.w	r2, r3, #2
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02b      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b00      	cmp	r3, #0
 800526a:	d012      	beq.n	8005292 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a13      	ldr	r2, [pc, #76]	@ (80052c0 <HAL_SD_WriteBlocks+0x308>)
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	f043 0210 	orr.w	r2, r3, #16
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e011      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f240 523a 	movw	r2, #1338	@ 0x53a
 800529a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e006      	b.n	80052b6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3748      	adds	r7, #72	@ 0x48
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	004005ff 	.word	0x004005ff

080052c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d008      	beq.n	80052f2 <HAL_SD_IRQHandler+0x2e>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 ff5a 	bl	80061a4 <SD_Read_IT>
 80052f0:	e155      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 808f 	beq.w	8005420 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800530a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 800531a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800531e:	63d3      	str	r3, [r2, #60]	@ 0x3c

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
#else
    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 0201 	bic.w	r2, r2, #1
 800532e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

    if((context & SD_CONTEXT_IT) != 0U)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d039      	beq.n	80053ae <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <HAL_SD_IRQHandler+0x8a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d011      	beq.n	8005372 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f002 fd3e 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 8005358:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d008      	beq.n	8005372 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f91f 	bl	80055b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f240 523a 	movw	r2, #1338	@ 0x53a
 800537a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <HAL_SD_IRQHandler+0xda>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f003 f9a6 	bl	80086f0 <HAL_SD_RxCpltCallback>
 80053a4:	e0fb      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f003 f998 	bl	80086dc <HAL_SD_TxCpltCallback>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    /* Nothing to do */
  }
}
 80053ac:	e0f7      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80f2 	beq.w	800559e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d011      	beq.n	80053e8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f002 fd03 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 80053ce:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d008      	beq.n	80053e8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8e4 	bl	80055b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f040 80d5 	bne.w	800559e <HAL_SD_IRQHandler+0x2da>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f040 80cf 	bne.w	800559e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 0208 	bic.w	r2, r2, #8
 800540e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f003 f95f 	bl	80086dc <HAL_SD_TxCpltCallback>
}
 800541e:	e0be      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <HAL_SD_IRQHandler+0x17c>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 ff04 	bl	8006246 <SD_Write_IT>
 800543e:	e0ae      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005446:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80a7 	beq.w	800559e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	f043 0202 	orr.w	r2, r3, #2
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547c:	f043 0208 	orr.w	r2, r3, #8
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d005      	beq.n	800549e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d005      	beq.n	80054b8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	f043 0210 	orr.w	r2, r3, #16
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f240 523a 	movw	r2, #1338	@ 0x53a
 80054c0:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 80054d0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f002 fc7c 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 80054dc:	4602      	mov	r2, r0
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	431a      	orrs	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f855 	bl	80055b0 <HAL_SD_ErrorCallback>
}
 8005506:	e04a      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d045      	beq.n	800559e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <HAL_SD_IRQHandler+0x262>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	d011      	beq.n	800554a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552a:	4a1f      	ldr	r2, [pc, #124]	@ (80055a8 <HAL_SD_IRQHandler+0x2e4>)
 800552c:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005532:	4618      	mov	r0, r3
 8005534:	f7fc fad2 	bl	8001adc <HAL_DMA_Abort_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02f      	beq.n	800559e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005542:	4618      	mov	r0, r3
 8005544:	f000 faea 	bl	8005b1c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005548:	e029      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d104      	bne.n	800555e <HAL_SD_IRQHandler+0x29a>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d011      	beq.n	8005582 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	4a12      	ldr	r2, [pc, #72]	@ (80055ac <HAL_SD_IRQHandler+0x2e8>)
 8005564:	639a      	str	r2, [r3, #56]	@ 0x38
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	4618      	mov	r0, r3
 800556c:	f7fc fab6 	bl	8001adc <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d013      	beq.n	800559e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fb05 	bl	8005b8a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005580:	e00d      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f003 f896 	bl	80086c8 <HAL_SD_AbortCallback>
}
 800559c:	e7ff      	b.n	800559e <HAL_SD_IRQHandler+0x2da>
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	08005b1d 	.word	0x08005b1d
 80055ac:	08005b8b 	.word	0x08005b8b

080055b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055d2:	0f9b      	lsrs	r3, r3, #30
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055de:	0e9b      	lsrs	r3, r3, #26
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f0:	0e1b      	lsrs	r3, r3, #24
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	b2da      	uxtb	r2, r3
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800560e:	0a1b      	lsrs	r3, r3, #8
 8005610:	b2da      	uxtb	r2, r3
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800561a:	b2da      	uxtb	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005624:	0d1b      	lsrs	r3, r3, #20
 8005626:	b29a      	uxth	r2, r3
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	b2da      	uxtb	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005642:	0bdb      	lsrs	r3, r3, #15
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005654:	0b9b      	lsrs	r3, r3, #14
 8005656:	b2db      	uxtb	r3, r3
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	b2da      	uxtb	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005666:	0b5b      	lsrs	r3, r3, #13
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	b2da      	uxtb	r2, r3
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005678:	0b1b      	lsrs	r3, r3, #12
 800567a:	b2db      	uxtb	r3, r3
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2200      	movs	r2, #0
 800568a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005690:	2b00      	cmp	r3, #0
 8005692:	d163      	bne.n	800575c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005698:	009a      	lsls	r2, r3, #2
 800569a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800569e:	4013      	ands	r3, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80056a4:	0f92      	lsrs	r2, r2, #30
 80056a6:	431a      	orrs	r2, r3
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056b0:	0edb      	lsrs	r3, r3, #27
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056c2:	0e1b      	lsrs	r3, r3, #24
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056d4:	0d5b      	lsrs	r3, r3, #21
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	f003 0307 	and.w	r3, r3, #7
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056e6:	0c9b      	lsrs	r3, r3, #18
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f003 0307 	and.w	r3, r3, #7
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056f8:	0bdb      	lsrs	r3, r3, #15
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	b2da      	uxtb	r2, r3
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	7e1b      	ldrb	r3, [r3, #24]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	3302      	adds	r3, #2
 800571c:	2201      	movs	r2, #1
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005726:	fb03 f202 	mul.w	r2, r3, r2
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	7a1b      	ldrb	r3, [r3, #8]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	2201      	movs	r2, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005748:	0a52      	lsrs	r2, r2, #9
 800574a:	fb03 f202 	mul.w	r2, r3, r2
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005758:	661a      	str	r2, [r3, #96]	@ 0x60
 800575a:	e031      	b.n	80057c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005760:	2b01      	cmp	r3, #1
 8005762:	d11d      	bne.n	80057a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005768:	041b      	lsls	r3, r3, #16
 800576a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	431a      	orrs	r2, r3
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	3301      	adds	r3, #1
 8005780:	029a      	lsls	r2, r3, #10
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005794:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	661a      	str	r2, [r3, #96]	@ 0x60
 800579e:	e00f      	b.n	80057c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a58      	ldr	r2, [pc, #352]	@ (8005908 <HAL_SD_GetCardCSD+0x344>)
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e09d      	b.n	80058fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c4:	0b9b      	lsrs	r3, r3, #14
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d6:	09db      	lsrs	r3, r3, #7
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057de:	b2da      	uxtb	r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f8:	0fdb      	lsrs	r3, r3, #31
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005804:	0f5b      	lsrs	r3, r3, #29
 8005806:	b2db      	uxtb	r3, r3
 8005808:	f003 0303 	and.w	r3, r3, #3
 800580c:	b2da      	uxtb	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005816:	0e9b      	lsrs	r3, r3, #26
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 0307 	and.w	r3, r3, #7
 800581e:	b2da      	uxtb	r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	0d9b      	lsrs	r3, r3, #22
 800582a:	b2db      	uxtb	r3, r3
 800582c:	f003 030f 	and.w	r3, r3, #15
 8005830:	b2da      	uxtb	r2, r3
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583a:	0d5b      	lsrs	r3, r3, #21
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	b2da      	uxtb	r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005856:	0c1b      	lsrs	r3, r3, #16
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	b2da      	uxtb	r2, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586a:	0bdb      	lsrs	r3, r3, #15
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	b2da      	uxtb	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	0b9b      	lsrs	r3, r3, #14
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	b2da      	uxtb	r2, r3
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005892:	0b5b      	lsrs	r3, r3, #13
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058a6:	0b1b      	lsrs	r3, r3, #12
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ba:	0a9b      	lsrs	r3, r3, #10
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e2:	085b      	lsrs	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	004005ff 	.word	0x004005ff

0800590c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005964:	b5b0      	push	{r4, r5, r7, lr}
 8005966:	b090      	sub	sp, #64	@ 0x40
 8005968:	af04      	add	r7, sp, #16
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2203      	movs	r2, #3
 8005978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005980:	2b03      	cmp	r3, #3
 8005982:	d02e      	beq.n	80059e2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598a:	d106      	bne.n	800599a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005990:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	@ 0x38
 8005998:	e029      	b.n	80059ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a0:	d10a      	bne.n	80059b8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fa9e 	bl	8005ee4 <SD_WideBus_Enable>
 80059a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80059b6:	e01a      	b.n	80059ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 fadb 	bl	8005f7a <SD_WideBus_Disable>
 80059c4:	62b8      	str	r0, [r7, #40]	@ 0x28

      hsd->ErrorCode |= errorstate;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	431a      	orrs	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80059d2:	e00c      	b.n	80059ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	@ 0x38
 80059e0:	e005      	b.n	80059ee <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a35      	ldr	r2, [pc, #212]	@ (8005ad0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005a04:	e042      	b.n	8005a8c <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005a06:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005a0a:	f7fd fcaf 	bl	800336c <HAL_RCCEx_GetPeriphCLKFreq>
 8005a0e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (sdmmc_clk != 0U)
 8005a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d031      	beq.n	8005a7a <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	3302      	adds	r3, #2
 8005a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3e:	4a25      	ldr	r2, [pc, #148]	@ (8005ad4 <HAL_SD_ConfigWideBusOperation+0x170>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d907      	bls.n	8005a54 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	4a24      	ldr	r2, [pc, #144]	@ (8005ad8 <HAL_SD_ConfigWideBusOperation+0x174>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	0ddb      	lsrs	r3, r3, #23
 8005a4e:	3b02      	subs	r3, #2
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	e002      	b.n	8005a5a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681d      	ldr	r5, [r3, #0]
 8005a5e:	466c      	mov	r4, sp
 8005a60:	f107 0318 	add.w	r3, r7, #24
 8005a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a6c:	f107 030c 	add.w	r3, r7, #12
 8005a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a72:	4628      	mov	r0, r5
 8005a74:	f002 f826 	bl	8007ac4 <SDMMC_Init>
 8005a78:	e008      	b.n	8005a8c <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	639a      	str	r2, [r3, #56]	@ 0x38
      status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a94:	4618      	mov	r0, r3
 8005a96:	f002 f8f3 	bl	8007c80 <SDMMC_CmdBlockLength>
 8005a9a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00c      	beq.n	8005abc <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8005ad0 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8005aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8005ac4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3730      	adds	r7, #48	@ 0x30
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad0:	004005ff 	.word	0x004005ff
 8005ad4:	017d7840 	.word	0x017d7840
 8005ad8:	55e63b89 	.word	0x55e63b89

08005adc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ae8:	f107 030c 	add.w	r3, r7, #12
 8005aec:	4619      	mov	r1, r3
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f9d0 	bl	8005e94 <SD_SendStatus>
 8005af4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	431a      	orrs	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	0a5b      	lsrs	r3, r3, #9
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005b12:	693b      	ldr	r3, [r7, #16]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3718      	adds	r7, #24
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005b32:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ffd1 	bl	8005adc <HAL_SD_GetCardState>
 8005b3a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b06      	cmp	r3, #6
 8005b4e:	d002      	beq.n	8005b56 <SD_DMATxAbort+0x3a>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	d10a      	bne.n	8005b6c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f002 f93a 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	431a      	orrs	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f002 fda7 	bl	80086c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005b7a:	e002      	b.n	8005b82 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fd17 	bl	80055b0 <HAL_SD_ErrorCallback>
}
 8005b82:	bf00      	nop
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f7ff ff9a 	bl	8005adc <HAL_SD_GetCardState>
 8005ba8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d002      	beq.n	8005bc4 <SD_DMARxAbort+0x3a>
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2b05      	cmp	r3, #5
 8005bc2:	d10a      	bne.n	8005bda <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f002 f903 	bl	8007dd4 <SDMMC_CmdStopTransfer>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f002 fd70 	bl	80086c8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005be8:	e002      	b.n	8005bf0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff fce0 	bl	80055b0 <HAL_SD_ErrorCallback>
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005bf8:	b5b0      	push	{r4, r5, r7, lr}
 8005bfa:	b090      	sub	sp, #64	@ 0x40
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005c00:	2301      	movs	r3, #1
 8005c02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 ffb5 	bl	8007b78 <SDMMC_GetPowerState>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d102      	bne.n	8005c1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c14:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005c18:	e0aa      	b.n	8005d70 <SD_InitCard+0x178>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d02f      	beq.n	8005c82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 f9de 	bl	8007fe8 <SDMMC_CmdSendCID>
 8005c2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d001      	beq.n	8005c38 <SD_InitCard+0x40>
    {
      return errorstate;
 8005c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c36:	e09b      	b.n	8005d70 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 ffdf 	bl	8007c02 <SDMMC_GetResponse>
 8005c44:	4602      	mov	r2, r0
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2104      	movs	r1, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f001 ffd6 	bl	8007c02 <SDMMC_GetResponse>
 8005c56:	4602      	mov	r2, r0
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2108      	movs	r1, #8
 8005c62:	4618      	mov	r0, r3
 8005c64:	f001 ffcd 	bl	8007c02 <SDMMC_GetResponse>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	210c      	movs	r1, #12
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 ffc4 	bl	8007c02 <SDMMC_GetResponse>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d00d      	beq.n	8005ca6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f107 020e 	add.w	r2, r7, #14
 8005c92:	4611      	mov	r1, r2
 8005c94:	4618      	mov	r0, r3
 8005c96:	f002 f9e4 	bl	8008062 <SDMMC_CmdSetRelAdd>
 8005c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <SD_InitCard+0xae>
    {
      return errorstate;
 8005ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ca4:	e064      	b.n	8005d70 <SD_InitCard+0x178>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d036      	beq.n	8005d1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005cae:	89fb      	ldrh	r3, [r7, #14]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbe:	041b      	lsls	r3, r3, #16
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f002 f9ae 	bl	8008024 <SDMMC_CmdSendCSD>
 8005cc8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd2:	e04d      	b.n	8005d70 <SD_InitCard+0x178>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 ff91 	bl	8007c02 <SDMMC_GetResponse>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2104      	movs	r1, #4
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 ff88 	bl	8007c02 <SDMMC_GetResponse>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2108      	movs	r1, #8
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 ff7f 	bl	8007c02 <SDMMC_GetResponse>
 8005d04:	4602      	mov	r2, r0
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	210c      	movs	r1, #12
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 ff76 	bl	8007c02 <SDMMC_GetResponse>
 8005d16:	4602      	mov	r2, r0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2104      	movs	r1, #4
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 ff6d 	bl	8007c02 <SDMMC_GetResponse>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	0d1a      	lsrs	r2, r3, #20
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005d30:	f107 0310 	add.w	r3, r7, #16
 8005d34:	4619      	mov	r1, r3
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fc44 	bl	80055c4 <HAL_SD_GetCardCSD>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005d42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005d46:	e013      	b.n	8005d70 <SD_InitCard+0x178>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6819      	ldr	r1, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d50:	041b      	lsls	r3, r3, #16
 8005d52:	2200      	movs	r2, #0
 8005d54:	461c      	mov	r4, r3
 8005d56:	4615      	mov	r5, r2
 8005d58:	4622      	mov	r2, r4
 8005d5a:	462b      	mov	r3, r5
 8005d5c:	4608      	mov	r0, r1
 8005d5e:	f002 f85b 	bl	8007e18 <SDMMC_CmdSelDesel>
 8005d62:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <SD_InitCard+0x176>
  {
    return errorstate;
 8005d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6c:	e000      	b.n	8005d70 <SD_InitCard+0x178>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3740      	adds	r7, #64	@ 0x40
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bdb0      	pop	{r4, r5, r7, pc}

08005d78 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f002 f864 	bl	8007e5e <SDMMC_CmdGoIdleState>
 8005d96:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	e072      	b.n	8005e88 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f002 f877 	bl	8007e9a <SDMMC_CmdOperCond>
 8005dac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00d      	beq.n	8005dd0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f002 f84d 	bl	8007e5e <SDMMC_CmdGoIdleState>
 8005dc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	e05b      	b.n	8005e88 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d137      	bne.n	8005e4e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2100      	movs	r1, #0
 8005de4:	4618      	mov	r0, r3
 8005de6:	f002 f877 	bl	8007ed8 <SDMMC_CmdAppCommand>
 8005dea:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d02d      	beq.n	8005e4e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005df2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005df6:	e047      	b.n	8005e88 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f002 f86a 	bl	8007ed8 <SDMMC_CmdAppCommand>
 8005e04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <SD_PowerON+0x98>
    {
      return errorstate;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e03b      	b.n	8005e88 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	491e      	ldr	r1, [pc, #120]	@ (8005e90 <SD_PowerON+0x118>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f002 f880 	bl	8007f1c <SDMMC_CmdAppOperCommand>
 8005e1c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e24:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8005e28:	e02e      	b.n	8005e88 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 fee6 	bl	8007c02 <SDMMC_GetResponse>
 8005e36:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	0fdb      	lsrs	r3, r3, #31
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <SD_PowerON+0xcc>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <SD_PowerON+0xce>
 8005e44:	2300      	movs	r3, #0
 8005e46:	613b      	str	r3, [r7, #16]

    count++;
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d802      	bhi.n	8005e5e <SD_PowerON+0xe6>
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0cc      	beq.n	8005df8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d902      	bls.n	8005e6e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005e68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e6c:	e00c      	b.n	8005e88 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	645a      	str	r2, [r3, #68]	@ 0x44
 8005e7e:	e002      	b.n	8005e86 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	c1100000 	.word	0xc1100000

08005e94 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d102      	bne.n	8005eaa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005ea4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ea8:	e018      	b.n	8005edc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb2:	041b      	lsls	r3, r3, #16
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	4610      	mov	r0, r2
 8005eb8:	f002 f8f4 	bl	80080a4 <SDMMC_CmdSendStatus>
 8005ebc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	e009      	b.n	8005edc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 fe97 	bl	8007c02 <SDMMC_GetResponse>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 fe81 	bl	8007c02 <SDMMC_GetResponse>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f0a:	d102      	bne.n	8005f12 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005f0c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005f10:	e02f      	b.n	8005f72 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005f12:	f107 030c 	add.w	r3, r7, #12
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f879 	bl	8006010 <SD_FindSCR>
 8005f1e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	e023      	b.n	8005f72 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01c      	beq.n	8005f6e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	4619      	mov	r1, r3
 8005f40:	4610      	mov	r0, r2
 8005f42:	f001 ffc9 	bl	8007ed8 <SDMMC_CmdAppCommand>
 8005f46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	e00f      	b.n	8005f72 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2102      	movs	r1, #2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f002 f802 	bl	8007f62 <SDMMC_CmdBusWidth>
 8005f5e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	e003      	b.n	8005f72 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e001      	b.n	8005f72 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2100      	movs	r1, #0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 fe36 	bl	8007c02 <SDMMC_GetResponse>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fa0:	d102      	bne.n	8005fa8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005fa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005fa6:	e02f      	b.n	8006008 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005fa8:	f107 030c 	add.w	r3, r7, #12
 8005fac:	4619      	mov	r1, r3
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f82e 	bl	8006010 <SD_FindSCR>
 8005fb4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	e023      	b.n	8006008 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01c      	beq.n	8006004 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fd2:	041b      	lsls	r3, r3, #16
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	f001 ff7e 	bl	8007ed8 <SDMMC_CmdAppCommand>
 8005fdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	e00f      	b.n	8006008 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 ffb7 	bl	8007f62 <SDMMC_CmdBusWidth>
 8005ff4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	e003      	b.n	8006008 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006000:	2300      	movs	r3, #0
 8006002:	e001      	b.n	8006008 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006004:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b08f      	sub	sp, #60	@ 0x3c
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800601a:	f7fb fac7 	bl	80015ac <HAL_GetTick>
 800601e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8006024:	2300      	movs	r3, #0
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	2300      	movs	r3, #0
 800602a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2108      	movs	r1, #8
 8006036:	4618      	mov	r0, r3
 8006038:	f001 fe22 	bl	8007c80 <SDMMC_CmdBlockLength>
 800603c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	e0a9      	b.n	800619c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006050:	041b      	lsls	r3, r3, #16
 8006052:	4619      	mov	r1, r3
 8006054:	4610      	mov	r0, r2
 8006056:	f001 ff3f 	bl	8007ed8 <SDMMC_CmdAppCommand>
 800605a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <SD_FindSCR+0x56>
  {
    return errorstate;
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	e09a      	b.n	800619c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800606a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800606c:	2308      	movs	r3, #8
 800606e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006070:	2330      	movs	r3, #48	@ 0x30
 8006072:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006074:	2302      	movs	r3, #2
 8006076:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006078:	2300      	movs	r3, #0
 800607a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800607c:	2301      	movs	r3, #1
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f107 0210 	add.w	r2, r7, #16
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 fdcc 	bl	8007c28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f001 ff86 	bl	8007fa6 <SDMMC_CmdSendSCR>
 800609a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d022      	beq.n	80060e8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80060a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a4:	e07a      	b.n	800619c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00e      	beq.n	80060d2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6819      	ldr	r1, [r3, #0]
 80060b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	f107 0208 	add.w	r2, r7, #8
 80060c0:	18d4      	adds	r4, r2, r3
 80060c2:	4608      	mov	r0, r1
 80060c4:	f001 fd2b 	bl	8007b1e <SDMMC_ReadFIFO>
 80060c8:	4603      	mov	r3, r0
 80060ca:	6023      	str	r3, [r4, #0]
      index++;
 80060cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ce:	3301      	adds	r3, #1
 80060d0:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80060d2:	f7fb fa6b 	bl	80015ac <HAL_GetTick>
 80060d6:	4602      	mov	r2, r0
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060e0:	d102      	bne.n	80060e8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80060e2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80060e6:	e059      	b.n	800619c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	f240 432a 	movw	r3, #1066	@ 0x42a
 80060f2:	4013      	ands	r3, r2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d0d6      	beq.n	80060a6 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2208      	movs	r2, #8
 800610c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800610e:	2308      	movs	r3, #8
 8006110:	e044      	b.n	800619c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2202      	movs	r2, #2
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006128:	2302      	movs	r3, #2
 800612a:	e037      	b.n	800619c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2220      	movs	r2, #32
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006142:	2320      	movs	r3, #32
 8006144:	e02a      	b.n	800619c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	061a      	lsls	r2, r3, #24
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800615c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006166:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	0e1b      	lsrs	r3, r3, #24
 800616c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	601a      	str	r2, [r3, #0]
    scr++;
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	3304      	adds	r3, #4
 8006176:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	061a      	lsls	r2, r3, #24
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006184:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800618e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	0e1b      	lsrs	r3, r3, #24
 8006194:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	373c      	adds	r7, #60	@ 0x3c
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd90      	pop	{r4, r7, pc}

080061a4 <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d03f      	beq.n	800623e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	e033      	b.n	800622c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 fca8 	bl	8007b1e <SDMMC_ReadFIFO>
 80061ce:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	0a1b      	lsrs	r3, r3, #8
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	0c1b      	lsrs	r3, r3, #16
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3b01      	subs	r3, #1
 800620e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	b2da      	uxtb	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	701a      	strb	r2, [r3, #0]
      tmp++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	3301      	adds	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	3301      	adds	r3, #1
 800622a:	617b      	str	r3, [r7, #20]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b07      	cmp	r3, #7
 8006230:	d9c8      	bls.n	80061c4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b086      	sub	sp, #24
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d043      	beq.n	80062e8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006260:	2300      	movs	r3, #0
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e037      	b.n	80062d6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3301      	adds	r3, #1
 8006270:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	3b01      	subs	r3, #1
 8006276:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	021a      	lsls	r2, r3, #8
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4313      	orrs	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	3301      	adds	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	3b01      	subs	r3, #1
 800628e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	041a      	lsls	r2, r3, #16
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4313      	orrs	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3301      	adds	r3, #1
 80062a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	061a      	lsls	r2, r3, #24
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	3b01      	subs	r3, #1
 80062be:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f107 0208 	add.w	r2, r7, #8
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f001 fc34 	bl	8007b38 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	3301      	adds	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	2b07      	cmp	r3, #7
 80062da:	d9c4      	bls.n	8006266 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80062e8:	bf00      	nop
 80062ea:	3718      	adds	r7, #24
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e040      	b.n	8006384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fa fec8 	bl	80010a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2224      	movs	r2, #36	@ 0x24
 800631c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0201 	bic.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fedc 	bl	80070f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fc21 	bl	8006b84 <UART_SetConfig>
 8006342:	4603      	mov	r3, r0
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e01b      	b.n	8006384 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800635a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800636a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 ff5b 	bl	8007238 <UART_CheckIdleState>
 8006382:	4603      	mov	r3, r0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3708      	adds	r7, #8
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	@ 0x28
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d177      	bne.n	8006494 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_UART_Transmit+0x24>
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e070      	b.n	8006496 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2221      	movs	r2, #33	@ 0x21
 80063c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c2:	f7fb f8f3 	bl	80015ac <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e0:	d108      	bne.n	80063f4 <HAL_UART_Transmit+0x68>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d104      	bne.n	80063f4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80063ea:	2300      	movs	r3, #0
 80063ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	e003      	b.n	80063fc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063f8:	2300      	movs	r3, #0
 80063fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063fc:	e02f      	b.n	800645e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2200      	movs	r2, #0
 8006406:	2180      	movs	r1, #128	@ 0x80
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f000 ffbd 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e03b      	b.n	8006496 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006430:	b292      	uxth	r2, r2
 8006432:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	3302      	adds	r3, #2
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e007      	b.n	800644c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	3301      	adds	r3, #1
 800644a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1c9      	bne.n	80063fe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	2140      	movs	r1, #64	@ 0x40
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 ff87 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e005      	b.n	8006496 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	@ 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b4:	2b20      	cmp	r3, #32
 80064b6:	d137      	bne.n	8006528 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_UART_Receive_IT+0x24>
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e030      	b.n	800652a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a18      	ldr	r2, [pc, #96]	@ (8006534 <HAL_UART_Receive_IT+0x94>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d01f      	beq.n	8006518 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d018      	beq.n	8006518 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	e853 3f00 	ldrex	r3, [r3]
 80064f2:	613b      	str	r3, [r7, #16]
   return(result);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	461a      	mov	r2, r3
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	623b      	str	r3, [r7, #32]
 8006506:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006508:	69f9      	ldr	r1, [r7, #28]
 800650a:	6a3a      	ldr	r2, [r7, #32]
 800650c:	e841 2300 	strex	r3, r2, [r1]
 8006510:	61bb      	str	r3, [r7, #24]
   return(result);
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1e6      	bne.n	80064e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	461a      	mov	r2, r3
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f000 ffa0 	bl	8007464 <UART_Start_Receive_IT>
 8006524:	4603      	mov	r3, r0
 8006526:	e000      	b.n	800652a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006528:	2302      	movs	r3, #2
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3728      	adds	r7, #40	@ 0x28
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40008000 	.word	0x40008000

08006538 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b0ba      	sub	sp, #232	@ 0xe8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800655e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006562:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006566:	4013      	ands	r3, r2
 8006568:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800656c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006570:	2b00      	cmp	r3, #0
 8006572:	d115      	bne.n	80065a0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006578:	f003 0320 	and.w	r3, r3, #32
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00f      	beq.n	80065a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006584:	f003 0320 	and.w	r3, r3, #32
 8006588:	2b00      	cmp	r3, #0
 800658a:	d009      	beq.n	80065a0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 82ca 	beq.w	8006b2a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
      }
      return;
 800659e:	e2c4      	b.n	8006b2a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80065a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8117 	beq.w	80067d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80065ba:	4b85      	ldr	r3, [pc, #532]	@ (80067d0 <HAL_UART_IRQHandler+0x298>)
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 810a 	beq.w	80067d8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d011      	beq.n	80065f4 <HAL_UART_IRQHandler+0xbc>
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2201      	movs	r2, #1
 80065e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065ea:	f043 0201 	orr.w	r2, r3, #1
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <HAL_UART_IRQHandler+0xec>
 8006600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00b      	beq.n	8006624 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2202      	movs	r2, #2
 8006612:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800661a:	f043 0204 	orr.w	r2, r3, #4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006628:	f003 0304 	and.w	r3, r3, #4
 800662c:	2b00      	cmp	r3, #0
 800662e:	d011      	beq.n	8006654 <HAL_UART_IRQHandler+0x11c>
 8006630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006634:	f003 0301 	and.w	r3, r3, #1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00b      	beq.n	8006654 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2204      	movs	r2, #4
 8006642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800664a:	f043 0202 	orr.w	r2, r3, #2
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d105      	bne.n	8006678 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800666c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006670:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00b      	beq.n	8006690 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2208      	movs	r2, #8
 800667e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006686:	f043 0208 	orr.w	r2, r3, #8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006698:	2b00      	cmp	r3, #0
 800669a:	d012      	beq.n	80066c2 <HAL_UART_IRQHandler+0x18a>
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00c      	beq.n	80066c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8230 	beq.w	8006b2e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00d      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d007      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d003      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d005      	beq.n	800671a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800670e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006712:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006716:	2b00      	cmp	r3, #0
 8006718:	d04f      	beq.n	80067ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 ff68 	bl	80075f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672a:	2b40      	cmp	r3, #64	@ 0x40
 800672c:	d141      	bne.n	80067b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	3308      	adds	r3, #8
 8006734:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006738:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800674c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3308      	adds	r3, #8
 8006756:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800675a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800675e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006762:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006766:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1d9      	bne.n	800672e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800677e:	2b00      	cmp	r3, #0
 8006780:	d013      	beq.n	80067aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006786:	4a13      	ldr	r2, [pc, #76]	@ (80067d4 <HAL_UART_IRQHandler+0x29c>)
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678e:	4618      	mov	r0, r3
 8006790:	f7fb f9a4 	bl	8001adc <HAL_DMA_Abort_IT>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d017      	beq.n	80067ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80067a4:	4610      	mov	r0, r2
 80067a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	e00f      	b.n	80067ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f9d4 	bl	8006b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b0:	e00b      	b.n	80067ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f9d0 	bl	8006b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	e007      	b.n	80067ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f9cc 	bl	8006b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80067c8:	e1b1      	b.n	8006b2e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ca:	bf00      	nop
    return;
 80067cc:	e1af      	b.n	8006b2e <HAL_UART_IRQHandler+0x5f6>
 80067ce:	bf00      	nop
 80067d0:	04000120 	.word	0x04000120
 80067d4:	080076b9 	.word	0x080076b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067dc:	2b01      	cmp	r3, #1
 80067de:	f040 816a 	bne.w	8006ab6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8163 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f4:	f003 0310 	and.w	r3, r3, #16
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 815c 	beq.w	8006ab6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2210      	movs	r2, #16
 8006804:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006810:	2b40      	cmp	r3, #64	@ 0x40
 8006812:	f040 80d4 	bne.w	80069be <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006822:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80ad 	beq.w	8006986 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006832:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006836:	429a      	cmp	r2, r3
 8006838:	f080 80a5 	bcs.w	8006986 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006842:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 8086 	bne.w	8006964 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800686c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006886:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800688e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800689a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1da      	bne.n	8006858 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80068b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80068c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80068ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80068ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80068d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e1      	bne.n	80068a2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80068ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80068f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006902:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006904:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006908:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006910:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006934:	f023 0310 	bic.w	r3, r3, #16
 8006938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006946:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006948:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800694c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e4      	bne.n	8006924 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800695e:	4618      	mov	r0, r3
 8006960:	f7fb f87e 	bl	8001a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2202      	movs	r2, #2
 8006968:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006976:	b29b      	uxth	r3, r3
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	b29b      	uxth	r3, r3
 800697c:	4619      	mov	r1, r3
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 f8f4 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006984:	e0d5      	b.n	8006b32 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800698c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006990:	429a      	cmp	r2, r3
 8006992:	f040 80ce 	bne.w	8006b32 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	f040 80c5 	bne.w	8006b32 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f8d8 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
      return;
 80069bc:	e0b9      	b.n	8006b32 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80ab 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80069e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80a6 	beq.w	8006b36 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e4      	bne.n	80069ea <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a44:	633a      	str	r2, [r7, #48]	@ 0x30
 8006a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e3      	bne.n	8006a20 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f023 0310 	bic.w	r3, r3, #16
 8006a80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a8e:	61fb      	str	r3, [r7, #28]
 8006a90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	617b      	str	r3, [r7, #20]
   return(result);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e4      	bne.n	8006a6c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006aac:	4619      	mov	r1, r3
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f85c 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ab4:	e03f      	b.n	8006b36 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x5a8>
 8006ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d008      	beq.n	8006ae0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ad6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 ffe9 	bl	8007ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ade:	e02d      	b.n	8006b3c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00e      	beq.n	8006b0a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d008      	beq.n	8006b0a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d01c      	beq.n	8006b3a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
    }
    return;
 8006b08:	e017      	b.n	8006b3a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d012      	beq.n	8006b3c <HAL_UART_IRQHandler+0x604>
 8006b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fdde 	bl	80076e4 <UART_EndTransmit_IT>
    return;
 8006b28:	e008      	b.n	8006b3c <HAL_UART_IRQHandler+0x604>
      return;
 8006b2a:	bf00      	nop
 8006b2c:	e006      	b.n	8006b3c <HAL_UART_IRQHandler+0x604>
    return;
 8006b2e:	bf00      	nop
 8006b30:	e004      	b.n	8006b3c <HAL_UART_IRQHandler+0x604>
      return;
 8006b32:	bf00      	nop
 8006b34:	e002      	b.n	8006b3c <HAL_UART_IRQHandler+0x604>
      return;
 8006b36:	bf00      	nop
 8006b38:	e000      	b.n	8006b3c <HAL_UART_IRQHandler+0x604>
    return;
 8006b3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006b3c:	37e8      	adds	r7, #232	@ 0xe8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop

08006b44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b88:	b08a      	sub	sp, #40	@ 0x28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689a      	ldr	r2, [r3, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	431a      	orrs	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4ba4      	ldr	r3, [pc, #656]	@ (8006e44 <UART_SetConfig+0x2c0>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	6812      	ldr	r2, [r2, #0]
 8006bba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bbc:	430b      	orrs	r3, r1
 8006bbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a99      	ldr	r2, [pc, #612]	@ (8006e48 <UART_SetConfig+0x2c4>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d004      	beq.n	8006bf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bec:	4313      	orrs	r3, r2
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	430a      	orrs	r2, r1
 8006c02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a90      	ldr	r2, [pc, #576]	@ (8006e4c <UART_SetConfig+0x2c8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d126      	bne.n	8006c5c <UART_SetConfig+0xd8>
 8006c0e:	4b90      	ldr	r3, [pc, #576]	@ (8006e50 <UART_SetConfig+0x2cc>)
 8006c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d81b      	bhi.n	8006c54 <UART_SetConfig+0xd0>
 8006c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <UART_SetConfig+0xa0>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c35 	.word	0x08006c35
 8006c28:	08006c45 	.word	0x08006c45
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c4d 	.word	0x08006c4d
 8006c34:	2301      	movs	r3, #1
 8006c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3a:	e116      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c42:	e112      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006c44:	2304      	movs	r3, #4
 8006c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4a:	e10e      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006c4c:	2308      	movs	r3, #8
 8006c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c52:	e10a      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006c54:	2310      	movs	r3, #16
 8006c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5a:	e106      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a7c      	ldr	r2, [pc, #496]	@ (8006e54 <UART_SetConfig+0x2d0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d138      	bne.n	8006cd8 <UART_SetConfig+0x154>
 8006c66:	4b7a      	ldr	r3, [pc, #488]	@ (8006e50 <UART_SetConfig+0x2cc>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c6c:	f003 030c 	and.w	r3, r3, #12
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	d82d      	bhi.n	8006cd0 <UART_SetConfig+0x14c>
 8006c74:	a201      	add	r2, pc, #4	@ (adr r2, 8006c7c <UART_SetConfig+0xf8>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006cb1 	.word	0x08006cb1
 8006c80:	08006cd1 	.word	0x08006cd1
 8006c84:	08006cd1 	.word	0x08006cd1
 8006c88:	08006cd1 	.word	0x08006cd1
 8006c8c:	08006cc1 	.word	0x08006cc1
 8006c90:	08006cd1 	.word	0x08006cd1
 8006c94:	08006cd1 	.word	0x08006cd1
 8006c98:	08006cd1 	.word	0x08006cd1
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006cd1 	.word	0x08006cd1
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cc9 	.word	0x08006cc9
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cb6:	e0d8      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cbe:	e0d4      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006cc0:	2304      	movs	r3, #4
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc6:	e0d0      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cce:	e0cc      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006cd0:	2310      	movs	r3, #16
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd6:	e0c8      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8006e58 <UART_SetConfig+0x2d4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d125      	bne.n	8006d2e <UART_SetConfig+0x1aa>
 8006ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e50 <UART_SetConfig+0x2cc>)
 8006ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006cec:	2b30      	cmp	r3, #48	@ 0x30
 8006cee:	d016      	beq.n	8006d1e <UART_SetConfig+0x19a>
 8006cf0:	2b30      	cmp	r3, #48	@ 0x30
 8006cf2:	d818      	bhi.n	8006d26 <UART_SetConfig+0x1a2>
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d00a      	beq.n	8006d0e <UART_SetConfig+0x18a>
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d814      	bhi.n	8006d26 <UART_SetConfig+0x1a2>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d002      	beq.n	8006d06 <UART_SetConfig+0x182>
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d008      	beq.n	8006d16 <UART_SetConfig+0x192>
 8006d04:	e00f      	b.n	8006d26 <UART_SetConfig+0x1a2>
 8006d06:	2300      	movs	r3, #0
 8006d08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d0c:	e0ad      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d14:	e0a9      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d16:	2304      	movs	r3, #4
 8006d18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1c:	e0a5      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d1e:	2308      	movs	r3, #8
 8006d20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d24:	e0a1      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d26:	2310      	movs	r3, #16
 8006d28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2c:	e09d      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a4a      	ldr	r2, [pc, #296]	@ (8006e5c <UART_SetConfig+0x2d8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d125      	bne.n	8006d84 <UART_SetConfig+0x200>
 8006d38:	4b45      	ldr	r3, [pc, #276]	@ (8006e50 <UART_SetConfig+0x2cc>)
 8006d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d44:	d016      	beq.n	8006d74 <UART_SetConfig+0x1f0>
 8006d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d48:	d818      	bhi.n	8006d7c <UART_SetConfig+0x1f8>
 8006d4a:	2b80      	cmp	r3, #128	@ 0x80
 8006d4c:	d00a      	beq.n	8006d64 <UART_SetConfig+0x1e0>
 8006d4e:	2b80      	cmp	r3, #128	@ 0x80
 8006d50:	d814      	bhi.n	8006d7c <UART_SetConfig+0x1f8>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <UART_SetConfig+0x1d8>
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	d008      	beq.n	8006d6c <UART_SetConfig+0x1e8>
 8006d5a:	e00f      	b.n	8006d7c <UART_SetConfig+0x1f8>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d62:	e082      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d64:	2302      	movs	r3, #2
 8006d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d6a:	e07e      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d72:	e07a      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d74:	2308      	movs	r3, #8
 8006d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d7a:	e076      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d82:	e072      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a35      	ldr	r2, [pc, #212]	@ (8006e60 <UART_SetConfig+0x2dc>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d12a      	bne.n	8006de4 <UART_SetConfig+0x260>
 8006d8e:	4b30      	ldr	r3, [pc, #192]	@ (8006e50 <UART_SetConfig+0x2cc>)
 8006d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d9c:	d01a      	beq.n	8006dd4 <UART_SetConfig+0x250>
 8006d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006da2:	d81b      	bhi.n	8006ddc <UART_SetConfig+0x258>
 8006da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da8:	d00c      	beq.n	8006dc4 <UART_SetConfig+0x240>
 8006daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dae:	d815      	bhi.n	8006ddc <UART_SetConfig+0x258>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <UART_SetConfig+0x238>
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006db8:	d008      	beq.n	8006dcc <UART_SetConfig+0x248>
 8006dba:	e00f      	b.n	8006ddc <UART_SetConfig+0x258>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dc2:	e052      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dca:	e04e      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006dcc:	2304      	movs	r3, #4
 8006dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dd2:	e04a      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006dd4:	2308      	movs	r3, #8
 8006dd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006dda:	e046      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006de2:	e042      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a17      	ldr	r2, [pc, #92]	@ (8006e48 <UART_SetConfig+0x2c4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d13a      	bne.n	8006e64 <UART_SetConfig+0x2e0>
 8006dee:	4b18      	ldr	r3, [pc, #96]	@ (8006e50 <UART_SetConfig+0x2cc>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006df8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006dfc:	d01a      	beq.n	8006e34 <UART_SetConfig+0x2b0>
 8006dfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006e02:	d81b      	bhi.n	8006e3c <UART_SetConfig+0x2b8>
 8006e04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e08:	d00c      	beq.n	8006e24 <UART_SetConfig+0x2a0>
 8006e0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e0e:	d815      	bhi.n	8006e3c <UART_SetConfig+0x2b8>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d003      	beq.n	8006e1c <UART_SetConfig+0x298>
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e18:	d008      	beq.n	8006e2c <UART_SetConfig+0x2a8>
 8006e1a:	e00f      	b.n	8006e3c <UART_SetConfig+0x2b8>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e22:	e022      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006e24:	2302      	movs	r3, #2
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e2a:	e01e      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e32:	e01a      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e3a:	e016      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e42:	e012      	b.n	8006e6a <UART_SetConfig+0x2e6>
 8006e44:	efff69f3 	.word	0xefff69f3
 8006e48:	40008000 	.word	0x40008000
 8006e4c:	40013800 	.word	0x40013800
 8006e50:	40021000 	.word	0x40021000
 8006e54:	40004400 	.word	0x40004400
 8006e58:	40004800 	.word	0x40004800
 8006e5c:	40004c00 	.word	0x40004c00
 8006e60:	40005000 	.word	0x40005000
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a9f      	ldr	r2, [pc, #636]	@ (80070ec <UART_SetConfig+0x568>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d17a      	bne.n	8006f6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d824      	bhi.n	8006ec6 <UART_SetConfig+0x342>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <UART_SetConfig+0x300>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006ec7 	.word	0x08006ec7
 8006e8c:	08006eb1 	.word	0x08006eb1
 8006e90:	08006ec7 	.word	0x08006ec7
 8006e94:	08006eb7 	.word	0x08006eb7
 8006e98:	08006ec7 	.word	0x08006ec7
 8006e9c:	08006ec7 	.word	0x08006ec7
 8006ea0:	08006ec7 	.word	0x08006ec7
 8006ea4:	08006ebf 	.word	0x08006ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea8:	f7fb feea 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8006eac:	61f8      	str	r0, [r7, #28]
        break;
 8006eae:	e010      	b.n	8006ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006eb0:	4b8f      	ldr	r3, [pc, #572]	@ (80070f0 <UART_SetConfig+0x56c>)
 8006eb2:	61fb      	str	r3, [r7, #28]
        break;
 8006eb4:	e00d      	b.n	8006ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eb6:	f7fb fe4b 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8006eba:	61f8      	str	r0, [r7, #28]
        break;
 8006ebc:	e009      	b.n	8006ed2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ec2:	61fb      	str	r3, [r7, #28]
        break;
 8006ec4:	e005      	b.n	8006ed2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80fb 	beq.w	80070d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	4413      	add	r3, r2
 8006ee4:	69fa      	ldr	r2, [r7, #28]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d305      	bcc.n	8006ef6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ef0:	69fa      	ldr	r2, [r7, #28]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d903      	bls.n	8006efe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006efc:	e0e8      	b.n	80070d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	2200      	movs	r2, #0
 8006f02:	461c      	mov	r4, r3
 8006f04:	4615      	mov	r5, r2
 8006f06:	f04f 0200 	mov.w	r2, #0
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	022b      	lsls	r3, r5, #8
 8006f10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f14:	0222      	lsls	r2, r4, #8
 8006f16:	68f9      	ldr	r1, [r7, #12]
 8006f18:	6849      	ldr	r1, [r1, #4]
 8006f1a:	0849      	lsrs	r1, r1, #1
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	4688      	mov	r8, r1
 8006f20:	4681      	mov	r9, r0
 8006f22:	eb12 0a08 	adds.w	sl, r2, r8
 8006f26:	eb43 0b09 	adc.w	fp, r3, r9
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	603b      	str	r3, [r7, #0]
 8006f32:	607a      	str	r2, [r7, #4]
 8006f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f38:	4650      	mov	r0, sl
 8006f3a:	4659      	mov	r1, fp
 8006f3c:	f7f9 f9b0 	bl	80002a0 <__aeabi_uldivmod>
 8006f40:	4602      	mov	r2, r0
 8006f42:	460b      	mov	r3, r1
 8006f44:	4613      	mov	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f4e:	d308      	bcc.n	8006f62 <UART_SetConfig+0x3de>
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f56:	d204      	bcs.n	8006f62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	e0b6      	b.n	80070d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f68:	e0b2      	b.n	80070d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f72:	d15e      	bne.n	8007032 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006f74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d828      	bhi.n	8006fce <UART_SetConfig+0x44a>
 8006f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f84 <UART_SetConfig+0x400>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fb1 	.word	0x08006fb1
 8006f8c:	08006fb9 	.word	0x08006fb9
 8006f90:	08006fcf 	.word	0x08006fcf
 8006f94:	08006fbf 	.word	0x08006fbf
 8006f98:	08006fcf 	.word	0x08006fcf
 8006f9c:	08006fcf 	.word	0x08006fcf
 8006fa0:	08006fcf 	.word	0x08006fcf
 8006fa4:	08006fc7 	.word	0x08006fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fb fe6a 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8006fac:	61f8      	str	r0, [r7, #28]
        break;
 8006fae:	e014      	b.n	8006fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fb0:	f7fb fe7c 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8006fb4:	61f8      	str	r0, [r7, #28]
        break;
 8006fb6:	e010      	b.n	8006fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80070f0 <UART_SetConfig+0x56c>)
 8006fba:	61fb      	str	r3, [r7, #28]
        break;
 8006fbc:	e00d      	b.n	8006fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fbe:	f7fb fdc7 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8006fc2:	61f8      	str	r0, [r7, #28]
        break;
 8006fc4:	e009      	b.n	8006fda <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fca:	61fb      	str	r3, [r7, #28]
        break;
 8006fcc:	e005      	b.n	8006fda <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d077      	beq.n	80070d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	005a      	lsls	r2, r3, #1
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	085b      	lsrs	r3, r3, #1
 8006fea:	441a      	add	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b0f      	cmp	r3, #15
 8006ffa:	d916      	bls.n	800702a <UART_SetConfig+0x4a6>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007002:	d212      	bcs.n	800702a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	b29b      	uxth	r3, r3
 8007008:	f023 030f 	bic.w	r3, r3, #15
 800700c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	b29b      	uxth	r3, r3
 8007014:	f003 0307 	and.w	r3, r3, #7
 8007018:	b29a      	uxth	r2, r3
 800701a:	8afb      	ldrh	r3, [r7, #22]
 800701c:	4313      	orrs	r3, r2
 800701e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	8afa      	ldrh	r2, [r7, #22]
 8007026:	60da      	str	r2, [r3, #12]
 8007028:	e052      	b.n	80070d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007030:	e04e      	b.n	80070d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007032:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007036:	2b08      	cmp	r3, #8
 8007038:	d827      	bhi.n	800708a <UART_SetConfig+0x506>
 800703a:	a201      	add	r2, pc, #4	@ (adr r2, 8007040 <UART_SetConfig+0x4bc>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	08007065 	.word	0x08007065
 8007044:	0800706d 	.word	0x0800706d
 8007048:	08007075 	.word	0x08007075
 800704c:	0800708b 	.word	0x0800708b
 8007050:	0800707b 	.word	0x0800707b
 8007054:	0800708b 	.word	0x0800708b
 8007058:	0800708b 	.word	0x0800708b
 800705c:	0800708b 	.word	0x0800708b
 8007060:	08007083 	.word	0x08007083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fb fe0c 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8007068:	61f8      	str	r0, [r7, #28]
        break;
 800706a:	e014      	b.n	8007096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800706c:	f7fb fe1e 	bl	8002cac <HAL_RCC_GetPCLK2Freq>
 8007070:	61f8      	str	r0, [r7, #28]
        break;
 8007072:	e010      	b.n	8007096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007074:	4b1e      	ldr	r3, [pc, #120]	@ (80070f0 <UART_SetConfig+0x56c>)
 8007076:	61fb      	str	r3, [r7, #28]
        break;
 8007078:	e00d      	b.n	8007096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800707a:	f7fb fd69 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 800707e:	61f8      	str	r0, [r7, #28]
        break;
 8007080:	e009      	b.n	8007096 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007086:	61fb      	str	r3, [r7, #28]
        break;
 8007088:	e005      	b.n	8007096 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007094:	bf00      	nop
    }

    if (pclk != 0U)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d019      	beq.n	80070d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	085a      	lsrs	r2, r3, #1
 80070a2:	69fb      	ldr	r3, [r7, #28]
 80070a4:	441a      	add	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b0f      	cmp	r3, #15
 80070b4:	d909      	bls.n	80070ca <UART_SetConfig+0x546>
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070bc:	d205      	bcs.n	80070ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60da      	str	r2, [r3, #12]
 80070c8:	e002      	b.n	80070d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80070dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3728      	adds	r7, #40	@ 0x28
 80070e4:	46bd      	mov	sp, r7
 80070e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ea:	bf00      	nop
 80070ec:	40008000 	.word	0x40008000
 80070f0:	00f42400 	.word	0x00f42400

080070f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007100:	f003 0308 	and.w	r3, r3, #8
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01a      	beq.n	800720a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f2:	d10a      	bne.n	800720a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800720e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	605a      	str	r2, [r3, #4]
  }
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b098      	sub	sp, #96	@ 0x60
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007248:	f7fa f9b0 	bl	80015ac <HAL_GetTick>
 800724c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b08      	cmp	r3, #8
 800725a:	d12e      	bne.n	80072ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007264:	2200      	movs	r2, #0
 8007266:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f88c 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d021      	beq.n	80072ba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800727e:	e853 3f00 	ldrex	r3, [r3]
 8007282:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728a:	653b      	str	r3, [r7, #80]	@ 0x50
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007294:	647b      	str	r3, [r7, #68]	@ 0x44
 8007296:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800729a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800729c:	e841 2300 	strex	r3, r2, [r1]
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d1e6      	bne.n	8007276 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e062      	b.n	8007380 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	d149      	bne.n	800735c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d0:	2200      	movs	r2, #0
 80072d2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f856 	bl	8007388 <UART_WaitOnFlagUntilTimeout>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d03c      	beq.n	800735c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	e853 3f00 	ldrex	r3, [r3]
 80072ee:	623b      	str	r3, [r7, #32]
   return(result);
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007300:	633b      	str	r3, [r7, #48]	@ 0x30
 8007302:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007304:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007308:	e841 2300 	strex	r3, r2, [r1]
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800730e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1e6      	bne.n	80072e2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3308      	adds	r3, #8
 800731a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	60fb      	str	r3, [r7, #12]
   return(result);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0301 	bic.w	r3, r3, #1
 800732a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007334:	61fa      	str	r2, [r7, #28]
 8007336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	69b9      	ldr	r1, [r7, #24]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	617b      	str	r3, [r7, #20]
   return(result);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e5      	bne.n	8007314 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e011      	b.n	8007380 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3758      	adds	r7, #88	@ 0x58
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	e04f      	b.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073a0:	d04b      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073a2:	f7fa f903 	bl	80015ac <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d302      	bcc.n	80073b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e04e      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0304 	and.w	r3, r3, #4
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d037      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	2b80      	cmp	r3, #128	@ 0x80
 80073ce:	d034      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2b40      	cmp	r3, #64	@ 0x40
 80073d4:	d031      	beq.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d110      	bne.n	8007406 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2208      	movs	r2, #8
 80073ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f8ff 	bl	80075f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2208      	movs	r2, #8
 80073f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e029      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007410:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007414:	d111      	bne.n	800743a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800741e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f8e5 	bl	80075f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e00f      	b.n	800745a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	69da      	ldr	r2, [r3, #28]
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4013      	ands	r3, r2
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	429a      	cmp	r2, r3
 8007448:	bf0c      	ite	eq
 800744a:	2301      	moveq	r3, #1
 800744c:	2300      	movne	r3, #0
 800744e:	b2db      	uxtb	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	429a      	cmp	r2, r3
 8007456:	d0a0      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007464:	b480      	push	{r7}
 8007466:	b097      	sub	sp, #92	@ 0x5c
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	4613      	mov	r3, r2
 8007470:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	88fa      	ldrh	r2, [r7, #6]
 800747c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007496:	d10e      	bne.n	80074b6 <UART_Start_Receive_IT+0x52>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d105      	bne.n	80074ac <UART_Start_Receive_IT+0x48>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80074a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074aa:	e02d      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	22ff      	movs	r2, #255	@ 0xff
 80074b0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074b4:	e028      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10d      	bne.n	80074da <UART_Start_Receive_IT+0x76>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d104      	bne.n	80074d0 <UART_Start_Receive_IT+0x6c>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	22ff      	movs	r2, #255	@ 0xff
 80074ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074ce:	e01b      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	227f      	movs	r2, #127	@ 0x7f
 80074d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074d8:	e016      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074e2:	d10d      	bne.n	8007500 <UART_Start_Receive_IT+0x9c>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <UART_Start_Receive_IT+0x92>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	227f      	movs	r2, #127	@ 0x7f
 80074f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074f4:	e008      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	223f      	movs	r2, #63	@ 0x3f
 80074fa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80074fe:	e003      	b.n	8007508 <UART_Start_Receive_IT+0xa4>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2222      	movs	r2, #34	@ 0x22
 8007514:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007538:	64ba      	str	r2, [r7, #72]	@ 0x48
 800753a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800753e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007554:	d107      	bne.n	8007566 <UART_Start_Receive_IT+0x102>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4a21      	ldr	r2, [pc, #132]	@ (80075e8 <UART_Start_Receive_IT+0x184>)
 8007562:	669a      	str	r2, [r3, #104]	@ 0x68
 8007564:	e002      	b.n	800756c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4a20      	ldr	r2, [pc, #128]	@ (80075ec <UART_Start_Receive_IT+0x188>)
 800756a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d019      	beq.n	80075a8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
 8007594:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007598:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_Start_Receive_IT+0x110>
 80075a6:	e018      	b.n	80075da <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	613b      	str	r3, [r7, #16]
   return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f043 0320 	orr.w	r3, r3, #32
 80075bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075c6:	623b      	str	r3, [r7, #32]
 80075c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	69f9      	ldr	r1, [r7, #28]
 80075cc:	6a3a      	ldr	r2, [r7, #32]
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e6      	bne.n	80075a8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	375c      	adds	r7, #92	@ 0x5c
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	080078f5 	.word	0x080078f5
 80075ec:	08007739 	.word	0x08007739

080075f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b095      	sub	sp, #84	@ 0x54
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007600:	e853 3f00 	ldrex	r3, [r3]
 8007604:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800760c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	461a      	mov	r2, r3
 8007614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007616:	643b      	str	r3, [r7, #64]	@ 0x40
 8007618:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800761c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1e6      	bne.n	80075f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	3308      	adds	r3, #8
 8007630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	61fb      	str	r3, [r7, #28]
   return(result);
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	f023 0301 	bic.w	r3, r3, #1
 8007640:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800764a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800764c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007652:	e841 2300 	strex	r3, r2, [r1]
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1e5      	bne.n	800762a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007662:	2b01      	cmp	r3, #1
 8007664:	d118      	bne.n	8007698 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	60bb      	str	r3, [r7, #8]
   return(result);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 0310 	bic.w	r3, r3, #16
 800767a:	647b      	str	r3, [r7, #68]	@ 0x44
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007684:	61bb      	str	r3, [r7, #24]
 8007686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6979      	ldr	r1, [r7, #20]
 800768a:	69ba      	ldr	r2, [r7, #24]
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	613b      	str	r3, [r7, #16]
   return(result);
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e6      	bne.n	8007666 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80076ac:	bf00      	nop
 80076ae:	3754      	adds	r7, #84	@ 0x54
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f7ff fa3e 	bl	8006b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076dc:	bf00      	nop
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b088      	sub	sp, #32
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6979      	ldr	r1, [r7, #20]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	613b      	str	r3, [r7, #16]
   return(result);
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e6      	bne.n	80076ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff fa0a 	bl	8006b44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007730:	bf00      	nop
 8007732:	3720      	adds	r7, #32
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b09c      	sub	sp, #112	@ 0x70
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007746:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007750:	2b22      	cmp	r3, #34	@ 0x22
 8007752:	f040 80be 	bne.w	80078d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800775c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007760:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007764:	b2d9      	uxtb	r1, r3
 8007766:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800776a:	b2da      	uxtb	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007770:	400a      	ands	r2, r1
 8007772:	b2d2      	uxtb	r2, r2
 8007774:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800777a:	1c5a      	adds	r2, r3, #1
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007786:	b29b      	uxth	r3, r3
 8007788:	3b01      	subs	r3, #1
 800778a:	b29a      	uxth	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007798:	b29b      	uxth	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	f040 80a3 	bne.w	80078e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077c6:	e841 2300 	strex	r3, r2, [r1]
 80077ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1e6      	bne.n	80077a0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3308      	adds	r3, #8
 80077d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e4:	f023 0301 	bic.w	r3, r3, #1
 80077e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80077f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80077f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e5      	bne.n	80077d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a34      	ldr	r2, [pc, #208]	@ (80078f0 <UART_RxISR_8BIT+0x1b8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d01f      	beq.n	8007864 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	e853 3f00 	ldrex	r3, [r3]
 800783e:	623b      	str	r3, [r7, #32]
   return(result);
 8007840:	6a3b      	ldr	r3, [r7, #32]
 8007842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007846:	663b      	str	r3, [r7, #96]	@ 0x60
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007850:	633b      	str	r3, [r7, #48]	@ 0x30
 8007852:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007854:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007858:	e841 2300 	strex	r3, r2, [r1]
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007868:	2b01      	cmp	r3, #1
 800786a:	d12e      	bne.n	80078ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	617b      	str	r3, [r7, #20]
   return(result);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d103      	bne.n	80078ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2210      	movs	r2, #16
 80078b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff f952 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078c8:	e00d      	b.n	80078e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7f8 ffc0 	bl	8000850 <HAL_UART_RxCpltCallback>
}
 80078d0:	e009      	b.n	80078e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	8b1b      	ldrh	r3, [r3, #24]
 80078d8:	b29a      	uxth	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f042 0208 	orr.w	r2, r2, #8
 80078e2:	b292      	uxth	r2, r2
 80078e4:	831a      	strh	r2, [r3, #24]
}
 80078e6:	bf00      	nop
 80078e8:	3770      	adds	r7, #112	@ 0x70
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40008000 	.word	0x40008000

080078f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b09c      	sub	sp, #112	@ 0x70
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007902:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790c:	2b22      	cmp	r3, #34	@ 0x22
 800790e:	f040 80be 	bne.w	8007a8e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007918:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007920:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007922:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007926:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800792a:	4013      	ands	r3, r2
 800792c:	b29a      	uxth	r2, r3
 800792e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007930:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007936:	1c9a      	adds	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007954:	b29b      	uxth	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80a3 	bne.w	8007aa2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800796a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800796c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007970:	667b      	str	r3, [r7, #100]	@ 0x64
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800797a:	657b      	str	r3, [r7, #84]	@ 0x54
 800797c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007980:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e6      	bne.n	800795c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800799e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a0:	f023 0301 	bic.w	r3, r3, #1
 80079a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80079b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e5      	bne.n	800798e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2220      	movs	r2, #32
 80079c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a34      	ldr	r2, [pc, #208]	@ (8007aac <UART_RxISR_16BIT+0x1b8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d01f      	beq.n	8007a20 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d018      	beq.n	8007a20 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e6      	bne.n	80079ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d12e      	bne.n	8007a86 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f023 0310 	bic.w	r3, r3, #16
 8007a42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6979      	ldr	r1, [r7, #20]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	613b      	str	r3, [r7, #16]
   return(result);
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f003 0310 	and.w	r3, r3, #16
 8007a6a:	2b10      	cmp	r3, #16
 8007a6c:	d103      	bne.n	8007a76 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2210      	movs	r2, #16
 8007a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7ff f874 	bl	8006b6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a84:	e00d      	b.n	8007aa2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7f8 fee2 	bl	8000850 <HAL_UART_RxCpltCallback>
}
 8007a8c:	e009      	b.n	8007aa2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	8b1b      	ldrh	r3, [r3, #24]
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0208 	orr.w	r2, r2, #8
 8007a9e:	b292      	uxth	r2, r2
 8007aa0:	831a      	strh	r2, [r3, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	3770      	adds	r7, #112	@ 0x70
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40008000 	.word	0x40008000

08007ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	f107 001c 	add.w	r0, r7, #28
 8007ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8007ae2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  tmpreg |= (Init.ClockEdge           |\
 8007ae6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8007aea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007aee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8007af2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8007b02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	b004      	add	sp, #16
 8007b1c:	4770      	bx	lr

08007b1e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b082      	sub	sp, #8
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2203      	movs	r2, #3
 8007b66:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007b68:	2002      	movs	r0, #2
 8007b6a:	f7f9 fd2b 	bl	80015c4 <HAL_Delay>

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0303 	and.w	r3, r3, #3
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007bb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007bb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007bbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007bce:	f023 030f 	bic.w	r3, r3, #15
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	b2db      	uxtb	r3, r3
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b085      	sub	sp, #20
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
 8007c0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3314      	adds	r3, #20
 8007c10:	461a      	mov	r2, r3
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	4413      	add	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007c4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007c54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007c5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c66:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0

}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b088      	sub	sp, #32
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007c8e:	2310      	movs	r3, #16
 8007c90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c92:	2340      	movs	r3, #64	@ 0x40
 8007c94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c96:	2300      	movs	r3, #0
 8007c98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ca0:	f107 0308 	add.w	r3, r7, #8
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7ff ff74 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cb0:	2110      	movs	r1, #16
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fa18 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cba:	69fb      	ldr	r3, [r7, #28]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3720      	adds	r7, #32
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007cd2:	2311      	movs	r3, #17
 8007cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007cd6:	2340      	movs	r3, #64	@ 0x40
 8007cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ce4:	f107 0308 	add.w	r3, r7, #8
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff52 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cf4:	2111      	movs	r1, #17
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f9f6 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b088      	sub	sp, #32
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007d16:	2312      	movs	r3, #18
 8007d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d1a:	2340      	movs	r3, #64	@ 0x40
 8007d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f7ff ff30 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d38:	2112      	movs	r1, #18
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 f9d4 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007d40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d42:	69fb      	ldr	r3, [r7, #28]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3720      	adds	r7, #32
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b088      	sub	sp, #32
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007d5a:	2318      	movs	r3, #24
 8007d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007d5e:	2340      	movs	r3, #64	@ 0x40
 8007d60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007d6c:	f107 0308 	add.w	r3, r7, #8
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ff0e 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d7c:	2118      	movs	r1, #24
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f9b2 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007d84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d86:	69fb      	ldr	r3, [r7, #28]
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3720      	adds	r7, #32
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b088      	sub	sp, #32
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007d9e:	2319      	movs	r3, #25
 8007da0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007da2:	2340      	movs	r3, #64	@ 0x40
 8007da4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007da6:	2300      	movs	r3, #0
 8007da8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f7ff feec 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dc0:	2119      	movs	r1, #25
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f990 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007dc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dca:	69fb      	ldr	r3, [r7, #28]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3720      	adds	r7, #32
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007de0:	230c      	movs	r3, #12
 8007de2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007de4:	2340      	movs	r3, #64	@ 0x40
 8007de6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007de8:	2300      	movs	r3, #0
 8007dea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007dec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007df0:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007df2:	f107 0308 	add.w	r3, r7, #8
 8007df6:	4619      	mov	r1, r3
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f7ff fecb 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007dfe:	4a05      	ldr	r2, [pc, #20]	@ (8007e14 <SDMMC_CmdStopTransfer+0x40>)
 8007e00:	210c      	movs	r1, #12
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f970 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007e08:	61f8      	str	r0, [r7, #28]

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  return errorstate;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3720      	adds	r7, #32
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	05f5e100 	.word	0x05f5e100

08007e18 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b08a      	sub	sp, #40	@ 0x28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007e28:	2307      	movs	r3, #7
 8007e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007e2c:	2340      	movs	r3, #64	@ 0x40
 8007e2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e38:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e3a:	f107 0310 	add.w	r3, r7, #16
 8007e3e:	4619      	mov	r1, r3
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff fea7 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007e46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e4a:	2107      	movs	r1, #7
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f94b 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007e52:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3728      	adds	r7, #40	@ 0x28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b088      	sub	sp, #32
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007e72:	2300      	movs	r3, #0
 8007e74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007e7c:	f107 0308 	add.w	r3, r7, #8
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fe86 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fb65 	bl	8008558 <SDMMC_GetCmdError>
 8007e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e90:	69fb      	ldr	r3, [r7, #28]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3720      	adds	r7, #32
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b088      	sub	sp, #32
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007ea2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007ea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eac:	2340      	movs	r3, #64	@ 0x40
 8007eae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007eb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fe67 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 faf8 	bl	80084bc <SDMMC_GetCmdResp7>
 8007ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ece:	69fb      	ldr	r3, [r7, #28]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ee6:	2337      	movs	r3, #55	@ 0x37
 8007ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007eea:	2340      	movs	r3, #64	@ 0x40
 8007eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ef6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ef8:	f107 0308 	add.w	r3, r7, #8
 8007efc:	4619      	mov	r1, r3
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f7ff fe48 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007f04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f08:	2137      	movs	r1, #55	@ 0x37
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f8ec 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3720      	adds	r7, #32
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f30:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007f32:	2329      	movs	r3, #41	@ 0x29
 8007f34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f36:	2340      	movs	r3, #64	@ 0x40
 8007f38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f44:	f107 0308 	add.w	r3, r7, #8
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fe22 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f9ff 	bl	8008354 <SDMMC_GetCmdResp3>
 8007f56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f58:	69fb      	ldr	r3, [r7, #28]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b088      	sub	sp, #32
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007f70:	2306      	movs	r3, #6
 8007f72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f74:	2340      	movs	r3, #64	@ 0x40
 8007f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f82:	f107 0308 	add.w	r3, r7, #8
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff fe03 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f92:	2106      	movs	r1, #6
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f8a7 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3720      	adds	r7, #32
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b088      	sub	sp, #32
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007fb2:	2333      	movs	r3, #51	@ 0x33
 8007fb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fb6:	2340      	movs	r3, #64	@ 0x40
 8007fb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fc4:	f107 0308 	add.w	r3, r7, #8
 8007fc8:	4619      	mov	r1, r3
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff fde2 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fd4:	2133      	movs	r1, #51	@ 0x33
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f886 	bl	80080e8 <SDMMC_GetCmdResp1>
 8007fdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fde:	69fb      	ldr	r3, [r7, #28]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007ff8:	23c0      	movs	r3, #192	@ 0xc0
 8007ffa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008004:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008006:	f107 0308 	add.w	r3, r7, #8
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff fdc1 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f956 	bl	80082c4 <SDMMC_GetCmdResp2>
 8008018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800801a:	69fb      	ldr	r3, [r7, #28]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3720      	adds	r7, #32
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008032:	2309      	movs	r3, #9
 8008034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008036:	23c0      	movs	r3, #192	@ 0xc0
 8008038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800803e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008044:	f107 0308 	add.w	r3, r7, #8
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7ff fda2 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f937 	bl	80082c4 <SDMMC_GetCmdResp2>
 8008056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008058:	69fb      	ldr	r3, [r7, #28]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b088      	sub	sp, #32
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008070:	2303      	movs	r3, #3
 8008072:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008074:	2340      	movs	r3, #64	@ 0x40
 8008076:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008078:	2300      	movs	r3, #0
 800807a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800807c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008080:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008082:	f107 0308 	add.w	r3, r7, #8
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fd83 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	2103      	movs	r1, #3
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f99c 	bl	80083d0 <SDMMC_GetCmdResp6>
 8008098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800809a:	69fb      	ldr	r3, [r7, #28]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80080b2:	230d      	movs	r3, #13
 80080b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080b6:	2340      	movs	r3, #64	@ 0x40
 80080b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080c4:	f107 0308 	add.w	r3, r7, #8
 80080c8:	4619      	mov	r1, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f7ff fd62 	bl	8007b94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80080d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080d4:	210d      	movs	r1, #13
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f806 	bl	80080e8 <SDMMC_GetCmdResp1>
 80080dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080de:	69fb      	ldr	r3, [r7, #28]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	460b      	mov	r3, r1
 80080f2:	607a      	str	r2, [r7, #4]
 80080f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80080f6:	4b70      	ldr	r3, [pc, #448]	@ (80082b8 <SDMMC_GetCmdResp1+0x1d0>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a70      	ldr	r2, [pc, #448]	@ (80082bc <SDMMC_GetCmdResp1+0x1d4>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	0a5a      	lsrs	r2, r3, #9
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	fb02 f303 	mul.w	r3, r2, r3
 8008108:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	1e5a      	subs	r2, r3, #1
 800810e:	61fa      	str	r2, [r7, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008118:	e0c9      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0ef      	beq.n	800810a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1ea      	bne.n	800810a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d004      	beq.n	800814a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2204      	movs	r2, #4
 8008144:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008146:	2304      	movs	r3, #4
 8008148:	e0b1      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2201      	movs	r2, #1
 800815a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800815c:	2301      	movs	r3, #1
 800815e:	e0a6      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	22c5      	movs	r2, #197	@ 0xc5
 8008164:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f7ff fd3e 	bl	8007be8 <SDMMC_GetCommandResponse>
 800816c:	4603      	mov	r3, r0
 800816e:	461a      	mov	r2, r3
 8008170:	7afb      	ldrb	r3, [r7, #11]
 8008172:	4293      	cmp	r3, r2
 8008174:	d001      	beq.n	800817a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008176:	2301      	movs	r3, #1
 8008178:	e099      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800817a:	2100      	movs	r1, #0
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff fd40 	bl	8007c02 <SDMMC_GetResponse>
 8008182:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4b4e      	ldr	r3, [pc, #312]	@ (80082c0 <SDMMC_GetCmdResp1+0x1d8>)
 8008188:	4013      	ands	r3, r2
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800818e:	2300      	movs	r3, #0
 8008190:	e08d      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da02      	bge.n	800819e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800819c:	e087      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80081a8:	2340      	movs	r3, #64	@ 0x40
 80081aa:	e080      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80081b6:	2380      	movs	r3, #128	@ 0x80
 80081b8:	e079      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80081c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80081c8:	e071      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80081d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80081d8:	e069      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80081e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081e8:	e061      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80081f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80081f8:	e059      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008204:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008208:	e051      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d002      	beq.n	800821a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008214:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008218:	e049      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d002      	beq.n	800822a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008224:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008228:	e041      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008234:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008238:	e039      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008244:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008248:	e031      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d002      	beq.n	800825a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008254:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8008258:	e029      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008264:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008268:	e021      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008274:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008278:	e019      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008284:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8008288:	e011      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008290:	2b00      	cmp	r3, #0
 8008292:	d002      	beq.n	800829a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008294:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008298:	e009      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f003 0308 	and.w	r3, r3, #8
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d002      	beq.n	80082aa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80082a4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80082a8:	e001      	b.n	80082ae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80082aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3720      	adds	r7, #32
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	2000002c 	.word	0x2000002c
 80082bc:	10624dd3 	.word	0x10624dd3
 80082c0:	fdffe008 	.word	0xfdffe008

080082c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082cc:	4b1f      	ldr	r3, [pc, #124]	@ (800834c <SDMMC_GetCmdResp2+0x88>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008350 <SDMMC_GetCmdResp2+0x8c>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	0a5b      	lsrs	r3, r3, #9
 80082d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082dc:	fb02 f303 	mul.w	r3, r2, r3
 80082e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	1e5a      	subs	r2, r3, #1
 80082e6:	60fa      	str	r2, [r7, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d102      	bne.n	80082f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80082f0:	e026      	b.n	8008340 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d0ef      	beq.n	80082e2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1ea      	bne.n	80082e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d004      	beq.n	8008322 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2204      	movs	r2, #4
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800831e:	2304      	movs	r3, #4
 8008320:	e00e      	b.n	8008340 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008334:	2301      	movs	r3, #1
 8008336:	e003      	b.n	8008340 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	22c5      	movs	r2, #197	@ 0xc5
 800833c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	2000002c 	.word	0x2000002c
 8008350:	10624dd3 	.word	0x10624dd3

08008354 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800835c:	4b1a      	ldr	r3, [pc, #104]	@ (80083c8 <SDMMC_GetCmdResp3+0x74>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1a      	ldr	r2, [pc, #104]	@ (80083cc <SDMMC_GetCmdResp3+0x78>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0a5b      	lsrs	r3, r3, #9
 8008368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800836c:	fb02 f303 	mul.w	r3, r2, r3
 8008370:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1e5a      	subs	r2, r3, #1
 8008376:	60fa      	str	r2, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d102      	bne.n	8008382 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800837c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008380:	e01b      	b.n	80083ba <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008386:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0ef      	beq.n	8008372 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1ea      	bne.n	8008372 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083a0:	f003 0304 	and.w	r3, r3, #4
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2204      	movs	r2, #4
 80083ac:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80083ae:	2304      	movs	r3, #4
 80083b0:	e003      	b.n	80083ba <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	22c5      	movs	r2, #197	@ 0xc5
 80083b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	2000002c 	.word	0x2000002c
 80083cc:	10624dd3 	.word	0x10624dd3

080083d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b088      	sub	sp, #32
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	460b      	mov	r3, r1
 80083da:	607a      	str	r2, [r7, #4]
 80083dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083de:	4b35      	ldr	r3, [pc, #212]	@ (80084b4 <SDMMC_GetCmdResp6+0xe4>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a35      	ldr	r2, [pc, #212]	@ (80084b8 <SDMMC_GetCmdResp6+0xe8>)
 80083e4:	fba2 2303 	umull	r2, r3, r2, r3
 80083e8:	0a5b      	lsrs	r3, r3, #9
 80083ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	1e5a      	subs	r2, r3, #1
 80083f8:	61fa      	str	r2, [r7, #28]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008402:	e052      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008408:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008410:	2b00      	cmp	r3, #0
 8008412:	d0ef      	beq.n	80083f4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1ea      	bne.n	80083f4 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2204      	movs	r2, #4
 800842e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008430:	2304      	movs	r3, #4
 8008432:	e03a      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d004      	beq.n	800844a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2201      	movs	r2, #1
 8008444:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008446:	2301      	movs	r3, #1
 8008448:	e02f      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f7ff fbcc 	bl	8007be8 <SDMMC_GetCommandResponse>
 8008450:	4603      	mov	r3, r0
 8008452:	461a      	mov	r2, r3
 8008454:	7afb      	ldrb	r3, [r7, #11]
 8008456:	4293      	cmp	r3, r2
 8008458:	d001      	beq.n	800845e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800845a:	2301      	movs	r3, #1
 800845c:	e025      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	22c5      	movs	r2, #197	@ 0xc5
 8008462:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008464:	2100      	movs	r1, #0
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff fbcb 	bl	8007c02 <SDMMC_GetResponse>
 800846c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	0c1b      	lsrs	r3, r3, #16
 800847c:	b29a      	uxth	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8008482:	2300      	movs	r3, #0
 8008484:	e011      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008490:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008494:	e009      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80084a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80084a4:	e001      	b.n	80084aa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80084a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3720      	adds	r7, #32
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	2000002c 	.word	0x2000002c
 80084b8:	10624dd3 	.word	0x10624dd3

080084bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80084c4:	4b22      	ldr	r3, [pc, #136]	@ (8008550 <SDMMC_GetCmdResp7+0x94>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a22      	ldr	r2, [pc, #136]	@ (8008554 <SDMMC_GetCmdResp7+0x98>)
 80084ca:	fba2 2303 	umull	r2, r3, r2, r3
 80084ce:	0a5b      	lsrs	r3, r3, #9
 80084d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084d4:	fb02 f303 	mul.w	r3, r2, r3
 80084d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	1e5a      	subs	r2, r3, #1
 80084de:	60fa      	str	r2, [r7, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80084e4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80084e8:	e02c      	b.n	8008544 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0ef      	beq.n	80084da <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008500:	2b00      	cmp	r3, #0
 8008502:	d1ea      	bne.n	80084da <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008508:	f003 0304 	and.w	r3, r3, #4
 800850c:	2b00      	cmp	r3, #0
 800850e:	d004      	beq.n	800851a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008516:	2304      	movs	r3, #4
 8008518:	e014      	b.n	8008544 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d004      	beq.n	8008530 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800852c:	2301      	movs	r3, #1
 800852e:	e009      	b.n	8008544 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2240      	movs	r2, #64	@ 0x40
 8008540:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8008542:	2300      	movs	r3, #0

}
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	2000002c 	.word	0x2000002c
 8008554:	10624dd3 	.word	0x10624dd3

08008558 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008560:	4b11      	ldr	r3, [pc, #68]	@ (80085a8 <SDMMC_GetCmdError+0x50>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a11      	ldr	r2, [pc, #68]	@ (80085ac <SDMMC_GetCmdError+0x54>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	0a5b      	lsrs	r3, r3, #9
 800856c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008570:	fb02 f303 	mul.w	r3, r2, r3
 8008574:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	1e5a      	subs	r2, r3, #1
 800857a:	60fa      	str	r2, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d102      	bne.n	8008586 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008580:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008584:	e009      	b.n	800859a <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800858a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800858e:	2b00      	cmp	r3, #0
 8008590:	d0f1      	beq.n	8008576 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	22c5      	movs	r2, #197	@ 0xc5
 8008596:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	2000002c 	.word	0x2000002c
 80085ac:	10624dd3 	.word	0x10624dd3

080085b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80085b4:	4904      	ldr	r1, [pc, #16]	@ (80085c8 <MX_FATFS_Init+0x18>)
 80085b6:	4805      	ldr	r0, [pc, #20]	@ (80085cc <MX_FATFS_Init+0x1c>)
 80085b8:	f002 fe74 	bl	800b2a4 <FATFS_LinkDriver>
 80085bc:	4603      	mov	r3, r0
 80085be:	461a      	mov	r2, r3
 80085c0:	4b03      	ldr	r3, [pc, #12]	@ (80085d0 <MX_FATFS_Init+0x20>)
 80085c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80085c4:	bf00      	nop
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	2000259c 	.word	0x2000259c
 80085cc:	0800d2f4 	.word	0x0800d2f4
 80085d0:	20002598 	.word	0x20002598

080085d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80085d4:	b480      	push	{r7}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80085d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80085da:	4618      	mov	r0, r3
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80085ee:	f000 f89e 	bl	800872e <BSP_SD_IsDetected>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d001      	beq.n	80085fc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80085f8:	2302      	movs	r3, #2
 80085fa:	e005      	b.n	8008608 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80085fc:	4804      	ldr	r0, [pc, #16]	@ (8008610 <BSP_SD_Init+0x2c>)
 80085fe:	f7fc fa1b 	bl	8004a38 <HAL_SD_Init>
 8008602:	4603      	mov	r3, r0
 8008604:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008606:	79fb      	ldrb	r3, [r7, #7]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3708      	adds	r7, #8
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	200021ec 	.word	0x200021ec

08008614 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af02      	add	r7, sp, #8
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	68f9      	ldr	r1, [r7, #12]
 8008630:	4806      	ldr	r0, [pc, #24]	@ (800864c <BSP_SD_ReadBlocks+0x38>)
 8008632:	f7fc fae3 	bl	8004bfc <HAL_SD_ReadBlocks>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008640:	7dfb      	ldrb	r3, [r7, #23]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200021ec 	.word	0x200021ec

08008650 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af02      	add	r7, sp, #8
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	4806      	ldr	r0, [pc, #24]	@ (8008688 <BSP_SD_WriteBlocks+0x38>)
 800866e:	f7fc fca3 	bl	8004fb8 <HAL_SD_WriteBlocks>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800867c:	7dfb      	ldrb	r3, [r7, #23]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3718      	adds	r7, #24
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200021ec 	.word	0x200021ec

0800868c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008690:	4805      	ldr	r0, [pc, #20]	@ (80086a8 <BSP_SD_GetCardState+0x1c>)
 8008692:	f7fd fa23 	bl	8005adc <HAL_SD_GetCardState>
 8008696:	4603      	mov	r3, r0
 8008698:	2b04      	cmp	r3, #4
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	200021ec 	.word	0x200021ec

080086ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(BSP_SD_CardInfo *CardInfo)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80086b4:	6879      	ldr	r1, [r7, #4]
 80086b6:	4803      	ldr	r0, [pc, #12]	@ (80086c4 <BSP_SD_GetCardInfo+0x18>)
 80086b8:	f7fd f928 	bl	800590c <HAL_SD_GetCardInfo>
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200021ec 	.word	0x200021ec

080086c8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80086d0:	f000 f818 	bl	8008704 <BSP_SD_AbortCallback>
}
 80086d4:	bf00      	nop
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80086e4:	f000 f815 	bl	8008712 <BSP_SD_WriteCpltCallback>
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}

080086f0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80086f8:	f000 f812 	bl	8008720 <BSP_SD_ReadCpltCallback>
}
 80086fc:	bf00      	nop
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0

}
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8008712:	b480      	push	{r7}
 8008714:	af00      	add	r7, sp, #0

}
 8008716:	bf00      	nop
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0

}
 8008724:	bf00      	nop
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b082      	sub	sp, #8
 8008732:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008734:	2301      	movs	r3, #1
 8008736:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008738:	f000 f80c 	bl	8008754 <BSP_PlatformIsDetected>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008742:	2300      	movs	r3, #0
 8008744:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	b2db      	uxtb	r3, r3
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800875a:	2301      	movs	r3, #1
 800875c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800875e:	2110      	movs	r1, #16
 8008760:	4806      	ldr	r0, [pc, #24]	@ (800877c <BSP_PlatformIsDetected+0x28>)
 8008762:	f7f9 fc85 	bl	8002070 <HAL_GPIO_ReadPin>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800876c:	2300      	movs	r3, #0
 800876e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008770:	79fb      	ldrb	r3, [r7, #7]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	48000400 	.word	0x48000400

08008780 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	4603      	mov	r3, r0
 8008788:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800878a:	4b0b      	ldr	r3, [pc, #44]	@ (80087b8 <SD_CheckStatus+0x38>)
 800878c:	2201      	movs	r2, #1
 800878e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008790:	f7ff ff7c 	bl	800868c <BSP_SD_GetCardState>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d107      	bne.n	80087aa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800879a:	4b07      	ldr	r3, [pc, #28]	@ (80087b8 <SD_CheckStatus+0x38>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	4b04      	ldr	r3, [pc, #16]	@ (80087b8 <SD_CheckStatus+0x38>)
 80087a8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80087aa:	4b03      	ldr	r3, [pc, #12]	@ (80087b8 <SD_CheckStatus+0x38>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	b2db      	uxtb	r3, r3
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000035 	.word	0x20000035

080087bc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80087c6:	4b0b      	ldr	r3, [pc, #44]	@ (80087f4 <SD_initialize+0x38>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80087cc:	f7ff ff0a 	bl	80085e4 <BSP_SD_Init>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d107      	bne.n	80087e6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	4618      	mov	r0, r3
 80087da:	f7ff ffd1 	bl	8008780 <SD_CheckStatus>
 80087de:	4603      	mov	r3, r0
 80087e0:	461a      	mov	r2, r3
 80087e2:	4b04      	ldr	r3, [pc, #16]	@ (80087f4 <SD_initialize+0x38>)
 80087e4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80087e6:	4b03      	ldr	r3, [pc, #12]	@ (80087f4 <SD_initialize+0x38>)
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b2db      	uxtb	r3, r3
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3708      	adds	r7, #8
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	20000035 	.word	0x20000035

080087f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff ffbb 	bl	8008780 <SD_CheckStatus>
 800880a:	4603      	mov	r3, r0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60b9      	str	r1, [r7, #8]
 800881c:	607a      	str	r2, [r7, #4]
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008828:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	68b8      	ldr	r0, [r7, #8]
 8008832:	f7ff feef 	bl	8008614 <BSP_SD_ReadBlocks>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d107      	bne.n	800884c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800883c:	bf00      	nop
 800883e:	f7ff ff25 	bl	800868c <BSP_SD_GetCardState>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1fa      	bne.n	800883e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800884c:	7dfb      	ldrb	r3, [r7, #23]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b086      	sub	sp, #24
 800885a:	af00      	add	r7, sp, #0
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800886a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	68b8      	ldr	r0, [r7, #8]
 8008874:	f7ff feec 	bl	8008650 <BSP_SD_WriteBlocks>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d107      	bne.n	800888e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800887e:	bf00      	nop
 8008880:	f7ff ff04 	bl	800868c <BSP_SD_GetCardState>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1fa      	bne.n	8008880 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800888e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3718      	adds	r7, #24
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08c      	sub	sp, #48	@ 0x30
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	603a      	str	r2, [r7, #0]
 80088a2:	71fb      	strb	r3, [r7, #7]
 80088a4:	460b      	mov	r3, r1
 80088a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80088ae:	4b25      	ldr	r3, [pc, #148]	@ (8008944 <SD_ioctl+0xac>)
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d001      	beq.n	80088c0 <SD_ioctl+0x28>
 80088bc:	2303      	movs	r3, #3
 80088be:	e03c      	b.n	800893a <SD_ioctl+0xa2>

  switch (cmd)
 80088c0:	79bb      	ldrb	r3, [r7, #6]
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d834      	bhi.n	8008930 <SD_ioctl+0x98>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <SD_ioctl+0x34>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	080088e5 	.word	0x080088e5
 80088d4:	080088fd 	.word	0x080088fd
 80088d8:	08008917 	.word	0x08008917
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80088dc:	2300      	movs	r3, #0
 80088de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80088e2:	e028      	b.n	8008936 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80088e4:	f107 030c 	add.w	r3, r7, #12
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7ff fedf 	bl	80086ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80088ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80088fa:	e01c      	b.n	8008936 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80088fc:	f107 030c 	add.w	r3, r7, #12
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff fed3 	bl	80086ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008908:	b29a      	uxth	r2, r3
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008914:	e00f      	b.n	8008936 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff fec6 	bl	80086ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	0a5a      	lsrs	r2, r3, #9
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800892e:	e002      	b.n	8008936 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008930:	2304      	movs	r3, #4
 8008932:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8008936:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800893a:	4618      	mov	r0, r3
 800893c:	3730      	adds	r7, #48	@ 0x30
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000035 	.word	0x20000035

08008948 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	4603      	mov	r3, r0
 8008950:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	4a08      	ldr	r2, [pc, #32]	@ (8008978 <disk_status+0x30>)
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	79fa      	ldrb	r2, [r7, #7]
 8008960:	4905      	ldr	r1, [pc, #20]	@ (8008978 <disk_status+0x30>)
 8008962:	440a      	add	r2, r1
 8008964:	7a12      	ldrb	r2, [r2, #8]
 8008966:	4610      	mov	r0, r2
 8008968:	4798      	blx	r3
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800896e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	200025c8 	.word	0x200025c8

0800897c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008986:	2300      	movs	r3, #0
 8008988:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	4a0d      	ldr	r2, [pc, #52]	@ (80089c4 <disk_initialize+0x48>)
 800898e:	5cd3      	ldrb	r3, [r2, r3]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d111      	bne.n	80089b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008994:	79fb      	ldrb	r3, [r7, #7]
 8008996:	4a0b      	ldr	r2, [pc, #44]	@ (80089c4 <disk_initialize+0x48>)
 8008998:	2101      	movs	r1, #1
 800899a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	4a09      	ldr	r2, [pc, #36]	@ (80089c4 <disk_initialize+0x48>)
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	4413      	add	r3, r2
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	79fa      	ldrb	r2, [r7, #7]
 80089aa:	4906      	ldr	r1, [pc, #24]	@ (80089c4 <disk_initialize+0x48>)
 80089ac:	440a      	add	r2, r1
 80089ae:	7a12      	ldrb	r2, [r2, #8]
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
 80089b4:	4603      	mov	r3, r0
 80089b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200025c8 	.word	0x200025c8

080089c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b087      	sub	sp, #28
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	607a      	str	r2, [r7, #4]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	4603      	mov	r3, r0
 80089d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	4a0a      	ldr	r2, [pc, #40]	@ (8008a04 <disk_read+0x3c>)
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	689c      	ldr	r4, [r3, #8]
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4a07      	ldr	r2, [pc, #28]	@ (8008a04 <disk_read+0x3c>)
 80089e8:	4413      	add	r3, r2
 80089ea:	7a18      	ldrb	r0, [r3, #8]
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	47a0      	blx	r4
 80089f4:	4603      	mov	r3, r0
 80089f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd90      	pop	{r4, r7, pc}
 8008a02:	bf00      	nop
 8008a04:	200025c8 	.word	0x200025c8

08008a08 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008a08:	b590      	push	{r4, r7, lr}
 8008a0a:	b087      	sub	sp, #28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60b9      	str	r1, [r7, #8]
 8008a10:	607a      	str	r2, [r7, #4]
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a44 <disk_write+0x3c>)
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	68dc      	ldr	r4, [r3, #12]
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
 8008a26:	4a07      	ldr	r2, [pc, #28]	@ (8008a44 <disk_write+0x3c>)
 8008a28:	4413      	add	r3, r2
 8008a2a:	7a18      	ldrb	r0, [r3, #8]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	68b9      	ldr	r1, [r7, #8]
 8008a32:	47a0      	blx	r4
 8008a34:	4603      	mov	r3, r0
 8008a36:	75fb      	strb	r3, [r7, #23]
  return res;
 8008a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	371c      	adds	r7, #28
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd90      	pop	{r4, r7, pc}
 8008a42:	bf00      	nop
 8008a44:	200025c8 	.word	0x200025c8

08008a48 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	603a      	str	r2, [r7, #0]
 8008a52:	71fb      	strb	r3, [r7, #7]
 8008a54:	460b      	mov	r3, r1
 8008a56:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	4a09      	ldr	r2, [pc, #36]	@ (8008a80 <disk_ioctl+0x38>)
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	79fa      	ldrb	r2, [r7, #7]
 8008a66:	4906      	ldr	r1, [pc, #24]	@ (8008a80 <disk_ioctl+0x38>)
 8008a68:	440a      	add	r2, r1
 8008a6a:	7a10      	ldrb	r0, [r2, #8]
 8008a6c:	79b9      	ldrb	r1, [r7, #6]
 8008a6e:	683a      	ldr	r2, [r7, #0]
 8008a70:	4798      	blx	r3
 8008a72:	4603      	mov	r3, r0
 8008a74:	73fb      	strb	r3, [r7, #15]
  return res;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	200025c8 	.word	0x200025c8

08008a84 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008a94:	89fb      	ldrh	r3, [r7, #14]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	b21a      	sxth	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	b21b      	sxth	r3, r3
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	b21b      	sxth	r3, r3
 8008aa4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3303      	adds	r3, #3
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	021b      	lsls	r3, r3, #8
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	3202      	adds	r2, #2
 8008acc:	7812      	ldrb	r2, [r2, #0]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	021b      	lsls	r3, r3, #8
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	3201      	adds	r2, #1
 8008ada:	7812      	ldrb	r2, [r2, #0]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	7812      	ldrb	r2, [r2, #0]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
	return rv;
 8008aec:	68fb      	ldr	r3, [r7, #12]
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	460b      	mov	r3, r1
 8008b04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	887a      	ldrh	r2, [r7, #2]
 8008b0e:	b2d2      	uxtb	r2, r2
 8008b10:	701a      	strb	r2, [r3, #0]
 8008b12:	887b      	ldrh	r3, [r7, #2]
 8008b14:	0a1b      	lsrs	r3, r3, #8
 8008b16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	887a      	ldrh	r2, [r7, #2]
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	1c5a      	adds	r2, r3, #1
 8008b3e:	607a      	str	r2, [r7, #4]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	0a1b      	lsrs	r3, r3, #8
 8008b4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	0a1b      	lsrs	r3, r3, #8
 8008b5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	607a      	str	r2, [r7, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	1c5a      	adds	r2, r3, #1
 8008b74:	607a      	str	r2, [r7, #4]
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	701a      	strb	r2, [r3, #0]
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00d      	beq.n	8008bbe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	1c53      	adds	r3, r2, #1
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	1c59      	adds	r1, r3, #1
 8008bac:	6179      	str	r1, [r7, #20]
 8008bae:	7812      	ldrb	r2, [r2, #0]
 8008bb0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	607b      	str	r3, [r7, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d1f1      	bne.n	8008ba2 <mem_cpy+0x1a>
	}
}
 8008bbe:	bf00      	nop
 8008bc0:	371c      	adds	r7, #28
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008bca:	b480      	push	{r7}
 8008bcc:	b087      	sub	sp, #28
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	617a      	str	r2, [r7, #20]
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	b2d2      	uxtb	r2, r2
 8008be4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3b01      	subs	r3, #1
 8008bea:	607b      	str	r3, [r7, #4]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1f3      	bne.n	8008bda <mem_set+0x10>
}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008c00:	b480      	push	{r7}
 8008c02:	b089      	sub	sp, #36	@ 0x24
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	61fa      	str	r2, [r7, #28]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	61ba      	str	r2, [r7, #24]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	1acb      	subs	r3, r1, r3
 8008c2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3b01      	subs	r3, #1
 8008c32:	607b      	str	r3, [r7, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <mem_cmp+0x40>
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0eb      	beq.n	8008c18 <mem_cmp+0x18>

	return r;
 8008c40:	697b      	ldr	r3, [r7, #20]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3724      	adds	r7, #36	@ 0x24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008c4e:	b480      	push	{r7}
 8008c50:	b083      	sub	sp, #12
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008c58:	e002      	b.n	8008c60 <chk_chr+0x12>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	607b      	str	r3, [r7, #4]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <chk_chr+0x26>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d1f2      	bne.n	8008c5a <chk_chr+0xc>
	return *str;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	781b      	ldrb	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60bb      	str	r3, [r7, #8]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	60fb      	str	r3, [r7, #12]
 8008c96:	e029      	b.n	8008cec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008c98:	4a27      	ldr	r2, [pc, #156]	@ (8008d38 <chk_lock+0xb4>)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	4413      	add	r3, r2
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d01d      	beq.n	8008ce2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008ca6:	4a24      	ldr	r2, [pc, #144]	@ (8008d38 <chk_lock+0xb4>)
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	4413      	add	r3, r2
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d116      	bne.n	8008ce6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8008d38 <chk_lock+0xb4>)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	011b      	lsls	r3, r3, #4
 8008cbe:	4413      	add	r3, r2
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d10c      	bne.n	8008ce6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8008d38 <chk_lock+0xb4>)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	011b      	lsls	r3, r3, #4
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d102      	bne.n	8008ce6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008ce0:	e007      	b.n	8008cf2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d9d2      	bls.n	8008c98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d109      	bne.n	8008d0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d102      	bne.n	8008d04 <chk_lock+0x80>
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d101      	bne.n	8008d08 <chk_lock+0x84>
 8008d04:	2300      	movs	r3, #0
 8008d06:	e010      	b.n	8008d2a <chk_lock+0xa6>
 8008d08:	2312      	movs	r3, #18
 8008d0a:	e00e      	b.n	8008d2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d108      	bne.n	8008d24 <chk_lock+0xa0>
 8008d12:	4a09      	ldr	r2, [pc, #36]	@ (8008d38 <chk_lock+0xb4>)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	011b      	lsls	r3, r3, #4
 8008d18:	4413      	add	r3, r2
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	881b      	ldrh	r3, [r3, #0]
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d22:	d101      	bne.n	8008d28 <chk_lock+0xa4>
 8008d24:	2310      	movs	r3, #16
 8008d26:	e000      	b.n	8008d2a <chk_lock+0xa6>
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	200025a8 	.word	0x200025a8

08008d3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008d42:	2300      	movs	r3, #0
 8008d44:	607b      	str	r3, [r7, #4]
 8008d46:	e002      	b.n	8008d4e <enq_lock+0x12>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	607b      	str	r3, [r7, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d806      	bhi.n	8008d62 <enq_lock+0x26>
 8008d54:	4a09      	ldr	r2, [pc, #36]	@ (8008d7c <enq_lock+0x40>)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	011b      	lsls	r3, r3, #4
 8008d5a:	4413      	add	r3, r2
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1f2      	bne.n	8008d48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	200025a8 	.word	0x200025a8

08008d80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	e01f      	b.n	8008dd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008d90:	4a41      	ldr	r2, [pc, #260]	@ (8008e98 <inc_lock+0x118>)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	4413      	add	r3, r2
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d113      	bne.n	8008dca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008da2:	4a3d      	ldr	r2, [pc, #244]	@ (8008e98 <inc_lock+0x118>)
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	4413      	add	r3, r2
 8008daa:	3304      	adds	r3, #4
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d109      	bne.n	8008dca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008db6:	4a38      	ldr	r2, [pc, #224]	@ (8008e98 <inc_lock+0x118>)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	011b      	lsls	r3, r3, #4
 8008dbc:	4413      	add	r3, r2
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d006      	beq.n	8008dd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d9dc      	bls.n	8008d90 <inc_lock+0x10>
 8008dd6:	e000      	b.n	8008dda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008dd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d132      	bne.n	8008e46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e002      	b.n	8008dec <inc_lock+0x6c>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3301      	adds	r3, #1
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d806      	bhi.n	8008e00 <inc_lock+0x80>
 8008df2:	4a29      	ldr	r2, [pc, #164]	@ (8008e98 <inc_lock+0x118>)
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	4413      	add	r3, r2
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1f2      	bne.n	8008de6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d101      	bne.n	8008e0a <inc_lock+0x8a>
 8008e06:	2300      	movs	r3, #0
 8008e08:	e040      	b.n	8008e8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4922      	ldr	r1, [pc, #136]	@ (8008e98 <inc_lock+0x118>)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	011b      	lsls	r3, r3, #4
 8008e14:	440b      	add	r3, r1
 8008e16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	491e      	ldr	r1, [pc, #120]	@ (8008e98 <inc_lock+0x118>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	011b      	lsls	r3, r3, #4
 8008e22:	440b      	add	r3, r1
 8008e24:	3304      	adds	r3, #4
 8008e26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	695a      	ldr	r2, [r3, #20]
 8008e2c:	491a      	ldr	r1, [pc, #104]	@ (8008e98 <inc_lock+0x118>)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	011b      	lsls	r3, r3, #4
 8008e32:	440b      	add	r3, r1
 8008e34:	3308      	adds	r3, #8
 8008e36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008e38:	4a17      	ldr	r2, [pc, #92]	@ (8008e98 <inc_lock+0x118>)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	4413      	add	r3, r2
 8008e40:	330c      	adds	r3, #12
 8008e42:	2200      	movs	r2, #0
 8008e44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d009      	beq.n	8008e60 <inc_lock+0xe0>
 8008e4c:	4a12      	ldr	r2, [pc, #72]	@ (8008e98 <inc_lock+0x118>)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	011b      	lsls	r3, r3, #4
 8008e52:	4413      	add	r3, r2
 8008e54:	330c      	adds	r3, #12
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <inc_lock+0xe0>
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	e015      	b.n	8008e8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d108      	bne.n	8008e78 <inc_lock+0xf8>
 8008e66:	4a0c      	ldr	r2, [pc, #48]	@ (8008e98 <inc_lock+0x118>)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	4413      	add	r3, r2
 8008e6e:	330c      	adds	r3, #12
 8008e70:	881b      	ldrh	r3, [r3, #0]
 8008e72:	3301      	adds	r3, #1
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	e001      	b.n	8008e7c <inc_lock+0xfc>
 8008e78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e7c:	4906      	ldr	r1, [pc, #24]	@ (8008e98 <inc_lock+0x118>)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	440b      	add	r3, r1
 8008e84:	330c      	adds	r3, #12
 8008e86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3301      	adds	r3, #1
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	200025a8 	.word	0x200025a8

08008e9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	607b      	str	r3, [r7, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d825      	bhi.n	8008efc <dec_lock+0x60>
		n = Files[i].ctr;
 8008eb0:	4a17      	ldr	r2, [pc, #92]	@ (8008f10 <dec_lock+0x74>)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	011b      	lsls	r3, r3, #4
 8008eb6:	4413      	add	r3, r2
 8008eb8:	330c      	adds	r3, #12
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008ebe:	89fb      	ldrh	r3, [r7, #14]
 8008ec0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ec4:	d101      	bne.n	8008eca <dec_lock+0x2e>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008eca:	89fb      	ldrh	r3, [r7, #14]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d002      	beq.n	8008ed6 <dec_lock+0x3a>
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8008f10 <dec_lock+0x74>)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	4413      	add	r3, r2
 8008ede:	330c      	adds	r3, #12
 8008ee0:	89fa      	ldrh	r2, [r7, #14]
 8008ee2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008ee4:	89fb      	ldrh	r3, [r7, #14]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <dec_lock+0x5a>
 8008eea:	4a09      	ldr	r2, [pc, #36]	@ (8008f10 <dec_lock+0x74>)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	011b      	lsls	r3, r3, #4
 8008ef0:	4413      	add	r3, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	737b      	strb	r3, [r7, #13]
 8008efa:	e001      	b.n	8008f00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008efc:	2302      	movs	r3, #2
 8008efe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008f00:	7b7b      	ldrb	r3, [r7, #13]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3714      	adds	r7, #20
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	200025a8 	.word	0x200025a8

08008f14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	e010      	b.n	8008f44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008f22:	4a0d      	ldr	r2, [pc, #52]	@ (8008f58 <clear_lock+0x44>)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	011b      	lsls	r3, r3, #4
 8008f28:	4413      	add	r3, r2
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d105      	bne.n	8008f3e <clear_lock+0x2a>
 8008f32:	4a09      	ldr	r2, [pc, #36]	@ (8008f58 <clear_lock+0x44>)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	4413      	add	r3, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3301      	adds	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d9eb      	bls.n	8008f22 <clear_lock+0xe>
	}
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr
 8008f58:	200025a8 	.word	0x200025a8

08008f5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	78db      	ldrb	r3, [r3, #3]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d034      	beq.n	8008fda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	7858      	ldrb	r0, [r3, #1]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008f80:	2301      	movs	r3, #1
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	f7ff fd40 	bl	8008a08 <disk_write>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d002      	beq.n	8008f94 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	73fb      	strb	r3, [r7, #15]
 8008f92:	e022      	b.n	8008fda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	1ad2      	subs	r2, r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d217      	bcs.n	8008fda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	789b      	ldrb	r3, [r3, #2]
 8008fae:	613b      	str	r3, [r7, #16]
 8008fb0:	e010      	b.n	8008fd4 <sync_window+0x78>
					wsect += fs->fsize;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	69db      	ldr	r3, [r3, #28]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	7858      	ldrb	r0, [r3, #1]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	f7ff fd1d 	bl	8008a08 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	3b01      	subs	r3, #1
 8008fd2:	613b      	str	r3, [r7, #16]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d8eb      	bhi.n	8008fb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d01b      	beq.n	8009034 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff ffad 	bl	8008f5c <sync_window>
 8009002:	4603      	mov	r3, r0
 8009004:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d113      	bne.n	8009034 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7858      	ldrb	r0, [r3, #1]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009016:	2301      	movs	r3, #1
 8009018:	683a      	ldr	r2, [r7, #0]
 800901a:	f7ff fcd5 	bl	80089c8 <disk_read>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009028:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800902a:	2301      	movs	r3, #1
 800902c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	683a      	ldr	r2, [r7, #0]
 8009032:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f7ff ff87 	bl	8008f5c <sync_window>
 800904e:	4603      	mov	r3, r0
 8009050:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d159      	bne.n	800910c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	2b03      	cmp	r3, #3
 800905e:	d149      	bne.n	80090f4 <sync_fs+0xb4>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	791b      	ldrb	r3, [r3, #4]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d145      	bne.n	80090f4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	899b      	ldrh	r3, [r3, #12]
 8009072:	461a      	mov	r2, r3
 8009074:	2100      	movs	r1, #0
 8009076:	f7ff fda8 	bl	8008bca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	3334      	adds	r3, #52	@ 0x34
 800907e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009082:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff fd37 	bl	8008afa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	3334      	adds	r3, #52	@ 0x34
 8009090:	4921      	ldr	r1, [pc, #132]	@ (8009118 <sync_fs+0xd8>)
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff fd4c 	bl	8008b30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3334      	adds	r3, #52	@ 0x34
 800909c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80090a0:	491e      	ldr	r1, [pc, #120]	@ (800911c <sync_fs+0xdc>)
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff fd44 	bl	8008b30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3334      	adds	r3, #52	@ 0x34
 80090ac:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	4619      	mov	r1, r3
 80090b6:	4610      	mov	r0, r2
 80090b8:	f7ff fd3a 	bl	8008b30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	3334      	adds	r3, #52	@ 0x34
 80090c0:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f7ff fd30 	bl	8008b30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7858      	ldrb	r0, [r3, #1]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090e8:	2301      	movs	r3, #1
 80090ea:	f7ff fc8d 	bl	8008a08 <disk_write>
			fs->fsi_flag = 0;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	785b      	ldrb	r3, [r3, #1]
 80090f8:	2200      	movs	r2, #0
 80090fa:	2100      	movs	r1, #0
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff fca3 	bl	8008a48 <disk_ioctl>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <sync_fs+0xcc>
 8009108:	2301      	movs	r3, #1
 800910a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800910c:	7bfb      	ldrb	r3, [r7, #15]
}
 800910e:	4618      	mov	r0, r3
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	41615252 	.word	0x41615252
 800911c:	61417272 	.word	0x61417272

08009120 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	3b02      	subs	r3, #2
 800912e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	3b02      	subs	r3, #2
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	429a      	cmp	r2, r3
 800913a:	d301      	bcc.n	8009140 <clust2sect+0x20>
 800913c:	2300      	movs	r3, #0
 800913e:	e008      	b.n	8009152 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	895b      	ldrh	r3, [r3, #10]
 8009144:	461a      	mov	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	fb03 f202 	mul.w	r2, r3, r2
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009150:	4413      	add	r3, r2
}
 8009152:	4618      	mov	r0, r3
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	2b01      	cmp	r3, #1
 8009172:	d904      	bls.n	800917e <get_fat+0x20>
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d302      	bcc.n	8009184 <get_fat+0x26>
		val = 1;	/* Internal error */
 800917e:	2301      	movs	r3, #1
 8009180:	617b      	str	r3, [r7, #20]
 8009182:	e0ba      	b.n	80092fa <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009188:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	2b03      	cmp	r3, #3
 8009190:	f000 8082 	beq.w	8009298 <get_fat+0x13a>
 8009194:	2b03      	cmp	r3, #3
 8009196:	f300 80a6 	bgt.w	80092e6 <get_fat+0x188>
 800919a:	2b01      	cmp	r3, #1
 800919c:	d002      	beq.n	80091a4 <get_fat+0x46>
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d055      	beq.n	800924e <get_fat+0xf0>
 80091a2:	e0a0      	b.n	80092e6 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	085b      	lsrs	r3, r3, #1
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4413      	add	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	899b      	ldrh	r3, [r3, #12]
 80091ba:	4619      	mov	r1, r3
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	fbb3 f3f1 	udiv	r3, r3, r1
 80091c2:	4413      	add	r3, r2
 80091c4:	4619      	mov	r1, r3
 80091c6:	6938      	ldr	r0, [r7, #16]
 80091c8:	f7ff ff0c 	bl	8008fe4 <move_window>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	f040 808c 	bne.w	80092ec <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	1c5a      	adds	r2, r3, #1
 80091d8:	60fa      	str	r2, [r7, #12]
 80091da:	693a      	ldr	r2, [r7, #16]
 80091dc:	8992      	ldrh	r2, [r2, #12]
 80091de:	fbb3 f1f2 	udiv	r1, r3, r2
 80091e2:	fb01 f202 	mul.w	r2, r1, r2
 80091e6:	1a9b      	subs	r3, r3, r2
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4413      	add	r3, r2
 80091ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80091f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	899b      	ldrh	r3, [r3, #12]
 80091fa:	4619      	mov	r1, r3
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009202:	4413      	add	r3, r2
 8009204:	4619      	mov	r1, r3
 8009206:	6938      	ldr	r0, [r7, #16]
 8009208:	f7ff feec 	bl	8008fe4 <move_window>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d16e      	bne.n	80092f0 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	899b      	ldrh	r3, [r3, #12]
 8009216:	461a      	mov	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	fbb3 f1f2 	udiv	r1, r3, r2
 800921e:	fb01 f202 	mul.w	r2, r1, r2
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	4413      	add	r3, r2
 8009228:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	4313      	orrs	r3, r2
 8009232:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d002      	beq.n	8009244 <get_fat+0xe6>
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	091b      	lsrs	r3, r3, #4
 8009242:	e002      	b.n	800924a <get_fat+0xec>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800924a:	617b      	str	r3, [r7, #20]
			break;
 800924c:	e055      	b.n	80092fa <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	899b      	ldrh	r3, [r3, #12]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	b29b      	uxth	r3, r3
 800925a:	4619      	mov	r1, r3
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009262:	4413      	add	r3, r2
 8009264:	4619      	mov	r1, r3
 8009266:	6938      	ldr	r0, [r7, #16]
 8009268:	f7ff febc 	bl	8008fe4 <move_window>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d140      	bne.n	80092f4 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	005b      	lsls	r3, r3, #1
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	8992      	ldrh	r2, [r2, #12]
 8009280:	fbb3 f0f2 	udiv	r0, r3, r2
 8009284:	fb00 f202 	mul.w	r2, r0, r2
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	440b      	add	r3, r1
 800928c:	4618      	mov	r0, r3
 800928e:	f7ff fbf9 	bl	8008a84 <ld_word>
 8009292:	4603      	mov	r3, r0
 8009294:	617b      	str	r3, [r7, #20]
			break;
 8009296:	e030      	b.n	80092fa <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	899b      	ldrh	r3, [r3, #12]
 80092a0:	089b      	lsrs	r3, r3, #2
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	4619      	mov	r1, r3
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80092ac:	4413      	add	r3, r2
 80092ae:	4619      	mov	r1, r3
 80092b0:	6938      	ldr	r0, [r7, #16]
 80092b2:	f7ff fe97 	bl	8008fe4 <move_window>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d11d      	bne.n	80092f8 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	8992      	ldrh	r2, [r2, #12]
 80092ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80092ce:	fb00 f202 	mul.w	r2, r0, r2
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	440b      	add	r3, r1
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff fbec 	bl	8008ab4 <ld_dword>
 80092dc:	4603      	mov	r3, r0
 80092de:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80092e2:	617b      	str	r3, [r7, #20]
			break;
 80092e4:	e009      	b.n	80092fa <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80092e6:	2301      	movs	r3, #1
 80092e8:	617b      	str	r3, [r7, #20]
 80092ea:	e006      	b.n	80092fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ec:	bf00      	nop
 80092ee:	e004      	b.n	80092fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092f0:	bf00      	nop
 80092f2:	e002      	b.n	80092fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80092f4:	bf00      	nop
 80092f6:	e000      	b.n	80092fa <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80092f8:	bf00      	nop
		}
	}

	return val;
 80092fa:	697b      	ldr	r3, [r7, #20]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009304:	b590      	push	{r4, r7, lr}
 8009306:	b089      	sub	sp, #36	@ 0x24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009310:	2302      	movs	r3, #2
 8009312:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b01      	cmp	r3, #1
 8009318:	f240 8109 	bls.w	800952e <put_fat+0x22a>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	f080 8103 	bcs.w	800952e <put_fat+0x22a>
		switch (fs->fs_type) {
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	2b03      	cmp	r3, #3
 800932e:	f000 80b6 	beq.w	800949e <put_fat+0x19a>
 8009332:	2b03      	cmp	r3, #3
 8009334:	f300 80fb 	bgt.w	800952e <put_fat+0x22a>
 8009338:	2b01      	cmp	r3, #1
 800933a:	d003      	beq.n	8009344 <put_fat+0x40>
 800933c:	2b02      	cmp	r3, #2
 800933e:	f000 8083 	beq.w	8009448 <put_fat+0x144>
 8009342:	e0f4      	b.n	800952e <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	61bb      	str	r3, [r7, #24]
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	085b      	lsrs	r3, r3, #1
 800934c:	69ba      	ldr	r2, [r7, #24]
 800934e:	4413      	add	r3, r2
 8009350:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	899b      	ldrh	r3, [r3, #12]
 800935a:	4619      	mov	r1, r3
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009362:	4413      	add	r3, r2
 8009364:	4619      	mov	r1, r3
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f7ff fe3c 	bl	8008fe4 <move_window>
 800936c:	4603      	mov	r3, r0
 800936e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009370:	7ffb      	ldrb	r3, [r7, #31]
 8009372:	2b00      	cmp	r3, #0
 8009374:	f040 80d4 	bne.w	8009520 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	61ba      	str	r2, [r7, #24]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	8992      	ldrh	r2, [r2, #12]
 8009388:	fbb3 f0f2 	udiv	r0, r3, r2
 800938c:	fb00 f202 	mul.w	r2, r0, r2
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	440b      	add	r3, r1
 8009394:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00d      	beq.n	80093bc <put_fat+0xb8>
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	b25b      	sxtb	r3, r3
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	b25a      	sxtb	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	011b      	lsls	r3, r3, #4
 80093b2:	b25b      	sxtb	r3, r3
 80093b4:	4313      	orrs	r3, r2
 80093b6:	b25b      	sxtb	r3, r3
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	e001      	b.n	80093c0 <put_fat+0xbc>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2201      	movs	r2, #1
 80093c8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	899b      	ldrh	r3, [r3, #12]
 80093d2:	4619      	mov	r1, r3
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80093da:	4413      	add	r3, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f7ff fe00 	bl	8008fe4 <move_window>
 80093e4:	4603      	mov	r3, r0
 80093e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80093e8:	7ffb      	ldrb	r3, [r7, #31]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f040 809a 	bne.w	8009524 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	899b      	ldrh	r3, [r3, #12]
 80093fa:	461a      	mov	r2, r3
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8009402:	fb00 f202 	mul.w	r2, r0, r2
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	440b      	add	r3, r1
 800940a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d003      	beq.n	800941e <put_fat+0x11a>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	091b      	lsrs	r3, r3, #4
 800941a:	b2db      	uxtb	r3, r3
 800941c:	e00e      	b.n	800943c <put_fat+0x138>
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	b25b      	sxtb	r3, r3
 8009424:	f023 030f 	bic.w	r3, r3, #15
 8009428:	b25a      	sxtb	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	0a1b      	lsrs	r3, r3, #8
 800942e:	b25b      	sxtb	r3, r3
 8009430:	f003 030f 	and.w	r3, r3, #15
 8009434:	b25b      	sxtb	r3, r3
 8009436:	4313      	orrs	r3, r2
 8009438:	b25b      	sxtb	r3, r3
 800943a:	b2db      	uxtb	r3, r3
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2201      	movs	r2, #1
 8009444:	70da      	strb	r2, [r3, #3]
			break;
 8009446:	e072      	b.n	800952e <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	899b      	ldrh	r3, [r3, #12]
 8009450:	085b      	lsrs	r3, r3, #1
 8009452:	b29b      	uxth	r3, r3
 8009454:	4619      	mov	r1, r3
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	fbb3 f3f1 	udiv	r3, r3, r1
 800945c:	4413      	add	r3, r2
 800945e:	4619      	mov	r1, r3
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff fdbf 	bl	8008fe4 <move_window>
 8009466:	4603      	mov	r3, r0
 8009468:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800946a:	7ffb      	ldrb	r3, [r7, #31]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d15b      	bne.n	8009528 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	005b      	lsls	r3, r3, #1
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	8992      	ldrh	r2, [r2, #12]
 800947e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009482:	fb00 f202 	mul.w	r2, r0, r2
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	440b      	add	r3, r1
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	b292      	uxth	r2, r2
 800948e:	4611      	mov	r1, r2
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff fb32 	bl	8008afa <st_word>
			fs->wflag = 1;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2201      	movs	r2, #1
 800949a:	70da      	strb	r2, [r3, #3]
			break;
 800949c:	e047      	b.n	800952e <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	899b      	ldrh	r3, [r3, #12]
 80094a6:	089b      	lsrs	r3, r3, #2
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	4619      	mov	r1, r3
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80094b2:	4413      	add	r3, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fd94 	bl	8008fe4 <move_window>
 80094bc:	4603      	mov	r3, r0
 80094be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094c0:	7ffb      	ldrb	r3, [r7, #31]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d132      	bne.n	800952c <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	8992      	ldrh	r2, [r2, #12]
 80094da:	fbb3 f0f2 	udiv	r0, r3, r2
 80094de:	fb00 f202 	mul.w	r2, r0, r2
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	440b      	add	r3, r1
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff fae4 	bl	8008ab4 <ld_dword>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80094f2:	4323      	orrs	r3, r4
 80094f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	8992      	ldrh	r2, [r2, #12]
 8009504:	fbb3 f0f2 	udiv	r0, r3, r2
 8009508:	fb00 f202 	mul.w	r2, r0, r2
 800950c:	1a9b      	subs	r3, r3, r2
 800950e:	440b      	add	r3, r1
 8009510:	6879      	ldr	r1, [r7, #4]
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fb0c 	bl	8008b30 <st_dword>
			fs->wflag = 1;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	70da      	strb	r2, [r3, #3]
			break;
 800951e:	e006      	b.n	800952e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009520:	bf00      	nop
 8009522:	e004      	b.n	800952e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009524:	bf00      	nop
 8009526:	e002      	b.n	800952e <put_fat+0x22a>
			if (res != FR_OK) break;
 8009528:	bf00      	nop
 800952a:	e000      	b.n	800952e <put_fat+0x22a>
			if (res != FR_OK) break;
 800952c:	bf00      	nop
		}
	}
	return res;
 800952e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3724      	adds	r7, #36	@ 0x24
 8009534:	46bd      	mov	sp, r7
 8009536:	bd90      	pop	{r4, r7, pc}

08009538 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b088      	sub	sp, #32
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d904      	bls.n	800955e <remove_chain+0x26>
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	429a      	cmp	r2, r3
 800955c:	d301      	bcc.n	8009562 <remove_chain+0x2a>
 800955e:	2302      	movs	r3, #2
 8009560:	e04b      	b.n	80095fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009568:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	69b8      	ldr	r0, [r7, #24]
 8009570:	f7ff fec8 	bl	8009304 <put_fat>
 8009574:	4603      	mov	r3, r0
 8009576:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009578:	7ffb      	ldrb	r3, [r7, #31]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <remove_chain+0x4a>
 800957e:	7ffb      	ldrb	r3, [r7, #31]
 8009580:	e03b      	b.n	80095fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7ff fdea 	bl	800915e <get_fat>
 800958a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d031      	beq.n	80095f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d101      	bne.n	800959c <remove_chain+0x64>
 8009598:	2302      	movs	r3, #2
 800959a:	e02e      	b.n	80095fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095a2:	d101      	bne.n	80095a8 <remove_chain+0x70>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e028      	b.n	80095fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80095a8:	2200      	movs	r2, #0
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	69b8      	ldr	r0, [r7, #24]
 80095ae:	f7ff fea9 	bl	8009304 <put_fat>
 80095b2:	4603      	mov	r3, r0
 80095b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80095b6:	7ffb      	ldrb	r3, [r7, #31]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <remove_chain+0x88>
 80095bc:	7ffb      	ldrb	r3, [r7, #31]
 80095be:	e01c      	b.n	80095fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	695a      	ldr	r2, [r3, #20]
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	3b02      	subs	r3, #2
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d20b      	bcs.n	80095e6 <remove_chain+0xae>
			fs->free_clst++;
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	1c5a      	adds	r2, r3, #1
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	791b      	ldrb	r3, [r3, #4]
 80095dc:	f043 0301 	orr.w	r3, r3, #1
 80095e0:	b2da      	uxtb	r2, r3
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	699b      	ldr	r3, [r3, #24]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d3c6      	bcc.n	8009582 <remove_chain+0x4a>
 80095f4:	e000      	b.n	80095f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80095f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3720      	adds	r7, #32
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b088      	sub	sp, #32
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10d      	bne.n	8009634 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	691b      	ldr	r3, [r3, #16]
 800961c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <create_chain+0x2c>
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	429a      	cmp	r2, r3
 800962c:	d31b      	bcc.n	8009666 <create_chain+0x64>
 800962e:	2301      	movs	r3, #1
 8009630:	61bb      	str	r3, [r7, #24]
 8009632:	e018      	b.n	8009666 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff fd91 	bl	800915e <get_fat>
 800963c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d801      	bhi.n	8009648 <create_chain+0x46>
 8009644:	2301      	movs	r3, #1
 8009646:	e070      	b.n	800972a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800964e:	d101      	bne.n	8009654 <create_chain+0x52>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	e06a      	b.n	800972a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	429a      	cmp	r2, r3
 800965c:	d201      	bcs.n	8009662 <create_chain+0x60>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	e063      	b.n	800972a <create_chain+0x128>
		scl = clst;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	3301      	adds	r3, #1
 800966e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	69fa      	ldr	r2, [r7, #28]
 8009676:	429a      	cmp	r2, r3
 8009678:	d307      	bcc.n	800968a <create_chain+0x88>
				ncl = 2;
 800967a:	2302      	movs	r3, #2
 800967c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	429a      	cmp	r2, r3
 8009684:	d901      	bls.n	800968a <create_chain+0x88>
 8009686:	2300      	movs	r3, #0
 8009688:	e04f      	b.n	800972a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800968a:	69f9      	ldr	r1, [r7, #28]
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7ff fd66 	bl	800915e <get_fat>
 8009692:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d003      	beq.n	80096a8 <create_chain+0xa6>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096a6:	d101      	bne.n	80096ac <create_chain+0xaa>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	e03e      	b.n	800972a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d1da      	bne.n	800966a <create_chain+0x68>
 80096b4:	2300      	movs	r3, #0
 80096b6:	e038      	b.n	800972a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80096b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80096ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80096be:	69f9      	ldr	r1, [r7, #28]
 80096c0:	6938      	ldr	r0, [r7, #16]
 80096c2:	f7ff fe1f 	bl	8009304 <put_fat>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80096ca:	7dfb      	ldrb	r3, [r7, #23]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d109      	bne.n	80096e4 <create_chain+0xe2>
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	6839      	ldr	r1, [r7, #0]
 80096da:	6938      	ldr	r0, [r7, #16]
 80096dc:	f7ff fe12 	bl	8009304 <put_fat>
 80096e0:	4603      	mov	r3, r0
 80096e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80096e4:	7dfb      	ldrb	r3, [r7, #23]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d116      	bne.n	8009718 <create_chain+0x116>
		fs->last_clst = ncl;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	695a      	ldr	r2, [r3, #20]
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	3b02      	subs	r3, #2
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d804      	bhi.n	8009708 <create_chain+0x106>
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	695b      	ldr	r3, [r3, #20]
 8009702:	1e5a      	subs	r2, r3, #1
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	791b      	ldrb	r3, [r3, #4]
 800970c:	f043 0301 	orr.w	r3, r3, #1
 8009710:	b2da      	uxtb	r2, r3
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	711a      	strb	r2, [r3, #4]
 8009716:	e007      	b.n	8009728 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009718:	7dfb      	ldrb	r3, [r7, #23]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d102      	bne.n	8009724 <create_chain+0x122>
 800971e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009722:	e000      	b.n	8009726 <create_chain+0x124>
 8009724:	2301      	movs	r3, #1
 8009726:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009728:	69fb      	ldr	r3, [r7, #28]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3720      	adds	r7, #32
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009732:	b480      	push	{r7}
 8009734:	b087      	sub	sp, #28
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	3304      	adds	r3, #4
 8009748:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	899b      	ldrh	r3, [r3, #12]
 800974e:	461a      	mov	r2, r3
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	fbb3 f3f2 	udiv	r3, r3, r2
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	8952      	ldrh	r2, [r2, #10]
 800975a:	fbb3 f3f2 	udiv	r3, r3, r2
 800975e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	1d1a      	adds	r2, r3, #4
 8009764:	613a      	str	r2, [r7, #16]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <clmt_clust+0x42>
 8009770:	2300      	movs	r3, #0
 8009772:	e010      	b.n	8009796 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	429a      	cmp	r2, r3
 800977a:	d307      	bcc.n	800978c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	3304      	adds	r3, #4
 8009788:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800978a:	e7e9      	b.n	8009760 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800978c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	4413      	add	r3, r2
}
 8009796:	4618      	mov	r0, r3
 8009798:	371c      	adds	r7, #28
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097b8:	d204      	bcs.n	80097c4 <dir_sdi+0x22>
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	f003 031f 	and.w	r3, r3, #31
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80097c4:	2302      	movs	r3, #2
 80097c6:	e071      	b.n	80098ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d106      	bne.n	80097e8 <dir_sdi+0x46>
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d902      	bls.n	80097e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10c      	bne.n	8009808 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	095b      	lsrs	r3, r3, #5
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	8912      	ldrh	r2, [r2, #8]
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d301      	bcc.n	80097fe <dir_sdi+0x5c>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e056      	b.n	80098ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	61da      	str	r2, [r3, #28]
 8009806:	e02d      	b.n	8009864 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	895b      	ldrh	r3, [r3, #10]
 800980c:	461a      	mov	r2, r3
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	899b      	ldrh	r3, [r3, #12]
 8009812:	fb02 f303 	mul.w	r3, r2, r3
 8009816:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009818:	e019      	b.n	800984e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6979      	ldr	r1, [r7, #20]
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fc9d 	bl	800915e <get_fat>
 8009824:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800982c:	d101      	bne.n	8009832 <dir_sdi+0x90>
 800982e:	2301      	movs	r3, #1
 8009830:	e03c      	b.n	80098ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d904      	bls.n	8009842 <dir_sdi+0xa0>
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	429a      	cmp	r2, r3
 8009840:	d301      	bcc.n	8009846 <dir_sdi+0xa4>
 8009842:	2302      	movs	r3, #2
 8009844:	e032      	b.n	80098ac <dir_sdi+0x10a>
			ofs -= csz;
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	429a      	cmp	r2, r3
 8009854:	d2e1      	bcs.n	800981a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009856:	6979      	ldr	r1, [r7, #20]
 8009858:	6938      	ldr	r0, [r7, #16]
 800985a:	f7ff fc61 	bl	8009120 <clust2sect>
 800985e:	4602      	mov	r2, r0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	697a      	ldr	r2, [r7, #20]
 8009868:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69db      	ldr	r3, [r3, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d101      	bne.n	8009876 <dir_sdi+0xd4>
 8009872:	2302      	movs	r3, #2
 8009874:	e01a      	b.n	80098ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	69da      	ldr	r2, [r3, #28]
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	899b      	ldrh	r3, [r3, #12]
 800987e:	4619      	mov	r1, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	fbb3 f3f1 	udiv	r3, r3, r1
 8009886:	441a      	add	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	899b      	ldrh	r3, [r3, #12]
 8009896:	461a      	mov	r2, r3
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	fbb3 f0f2 	udiv	r0, r3, r2
 800989e:	fb00 f202 	mul.w	r2, r0, r2
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	18ca      	adds	r2, r1, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	3320      	adds	r3, #32
 80098ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	69db      	ldr	r3, [r3, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <dir_next+0x28>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80098da:	d301      	bcc.n	80098e0 <dir_next+0x2c>
 80098dc:	2304      	movs	r3, #4
 80098de:	e0bb      	b.n	8009a58 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	899b      	ldrh	r3, [r3, #12]
 80098e4:	461a      	mov	r2, r3
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80098ec:	fb01 f202 	mul.w	r2, r1, r2
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	f040 809d 	bne.w	8009a32 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	8912      	ldrh	r2, [r2, #8]
 8009912:	4293      	cmp	r3, r2
 8009914:	f0c0 808d 	bcc.w	8009a32 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	61da      	str	r2, [r3, #28]
 800991e:	2304      	movs	r3, #4
 8009920:	e09a      	b.n	8009a58 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	899b      	ldrh	r3, [r3, #12]
 8009926:	461a      	mov	r2, r3
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	fbb3 f3f2 	udiv	r3, r3, r2
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	8952      	ldrh	r2, [r2, #10]
 8009932:	3a01      	subs	r2, #1
 8009934:	4013      	ands	r3, r2
 8009936:	2b00      	cmp	r3, #0
 8009938:	d17b      	bne.n	8009a32 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	4619      	mov	r1, r3
 8009942:	4610      	mov	r0, r2
 8009944:	f7ff fc0b 	bl	800915e <get_fat>
 8009948:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d801      	bhi.n	8009954 <dir_next+0xa0>
 8009950:	2302      	movs	r3, #2
 8009952:	e081      	b.n	8009a58 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800995a:	d101      	bne.n	8009960 <dir_next+0xac>
 800995c:	2301      	movs	r3, #1
 800995e:	e07b      	b.n	8009a58 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	429a      	cmp	r2, r3
 8009968:	d359      	bcc.n	8009a1e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d104      	bne.n	800997a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	61da      	str	r2, [r3, #28]
 8009976:	2304      	movs	r3, #4
 8009978:	e06e      	b.n	8009a58 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	4619      	mov	r1, r3
 8009982:	4610      	mov	r0, r2
 8009984:	f7ff fe3d 	bl	8009602 <create_chain>
 8009988:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <dir_next+0xe0>
 8009990:	2307      	movs	r3, #7
 8009992:	e061      	b.n	8009a58 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d101      	bne.n	800999e <dir_next+0xea>
 800999a:	2302      	movs	r3, #2
 800999c:	e05c      	b.n	8009a58 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099a4:	d101      	bne.n	80099aa <dir_next+0xf6>
 80099a6:	2301      	movs	r3, #1
 80099a8:	e056      	b.n	8009a58 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff fad6 	bl	8008f5c <sync_window>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <dir_next+0x106>
 80099b6:	2301      	movs	r3, #1
 80099b8:	e04e      	b.n	8009a58 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	899b      	ldrh	r3, [r3, #12]
 80099c4:	461a      	mov	r2, r3
 80099c6:	2100      	movs	r1, #0
 80099c8:	f7ff f8ff 	bl	8008bca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	6979      	ldr	r1, [r7, #20]
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f7ff fba4 	bl	8009120 <clust2sect>
 80099d8:	4602      	mov	r2, r0
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80099de:	e012      	b.n	8009a06 <dir_next+0x152>
						fs->wflag = 1;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2201      	movs	r2, #1
 80099e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff fab8 	bl	8008f5c <sync_window>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <dir_next+0x142>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e030      	b.n	8009a58 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	3301      	adds	r3, #1
 80099fa:	613b      	str	r3, [r7, #16]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	895b      	ldrh	r3, [r3, #10]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d3e6      	bcc.n	80099e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	1ad2      	subs	r2, r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009a24:	6979      	ldr	r1, [r7, #20]
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fb7a 	bl	8009120 <clust2sect>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	899b      	ldrh	r3, [r3, #12]
 8009a42:	461a      	mov	r2, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a4a:	fb00 f202 	mul.w	r2, r0, r2
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	18ca      	adds	r2, r1, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3718      	adds	r7, #24
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b086      	sub	sp, #24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fe95 	bl	80097a2 <dir_sdi>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d12b      	bne.n	8009ada <dir_alloc+0x7a>
		n = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	69db      	ldr	r3, [r3, #28]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	f7ff faa9 	bl	8008fe4 <move_window>
 8009a92:	4603      	mov	r3, r0
 8009a94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d11d      	bne.n	8009ad8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	2be5      	cmp	r3, #229	@ 0xe5
 8009aa4:	d004      	beq.n	8009ab0 <dir_alloc+0x50>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d107      	bne.n	8009ac0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	613b      	str	r3, [r7, #16]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d102      	bne.n	8009ac4 <dir_alloc+0x64>
 8009abe:	e00c      	b.n	8009ada <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff fef4 	bl	80098b4 <dir_next>
 8009acc:	4603      	mov	r3, r0
 8009ace:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0d7      	beq.n	8009a86 <dir_alloc+0x26>
 8009ad6:	e000      	b.n	8009ada <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009ad8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d101      	bne.n	8009ae4 <dir_alloc+0x84>
 8009ae0:	2307      	movs	r3, #7
 8009ae2:	75fb      	strb	r3, [r7, #23]
	return res;
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	331a      	adds	r3, #26
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe ffc1 	bl	8008a84 <ld_word>
 8009b02:	4603      	mov	r3, r0
 8009b04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d109      	bne.n	8009b22 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	3314      	adds	r3, #20
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe ffb6 	bl	8008a84 <ld_word>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009b22:	68fb      	ldr	r3, [r7, #12]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	331a      	adds	r3, #26
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	b292      	uxth	r2, r2
 8009b40:	4611      	mov	r1, r2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe ffd9 	bl	8008afa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	d109      	bne.n	8009b64 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f103 0214 	add.w	r2, r3, #20
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	0c1b      	lsrs	r3, r3, #16
 8009b5a:	b29b      	uxth	r3, r3
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4610      	mov	r0, r2
 8009b60:	f7fe ffcb 	bl	8008afa <st_word>
	}
}
 8009b64:	bf00      	nop
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7ff fe10 	bl	80097a2 <dir_sdi>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <dir_find+0x24>
 8009b8c:	7dfb      	ldrb	r3, [r7, #23]
 8009b8e:	e03e      	b.n	8009c0e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	69db      	ldr	r3, [r3, #28]
 8009b94:	4619      	mov	r1, r3
 8009b96:	6938      	ldr	r0, [r7, #16]
 8009b98:	f7ff fa24 	bl	8008fe4 <move_window>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d12f      	bne.n	8009c06 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <dir_find+0x4e>
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	75fb      	strb	r3, [r7, #23]
 8009bb8:	e028      	b.n	8009c0c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	330b      	adds	r3, #11
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	330b      	adds	r3, #11
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <dir_find+0x86>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a18      	ldr	r0, [r3, #32]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3324      	adds	r3, #36	@ 0x24
 8009be4:	220b      	movs	r2, #11
 8009be6:	4619      	mov	r1, r3
 8009be8:	f7ff f80a 	bl	8008c00 <mem_cmp>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f7ff fe5d 	bl	80098b4 <dir_next>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0c5      	beq.n	8009b90 <dir_find+0x24>
 8009c04:	e002      	b.n	8009c0c <dir_find+0xa0>
		if (res != FR_OK) break;
 8009c06:	bf00      	nop
 8009c08:	e000      	b.n	8009c0c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009c0a:	bf00      	nop

	return res;
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009c16:	b580      	push	{r7, lr}
 8009c18:	b084      	sub	sp, #16
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009c24:	2101      	movs	r1, #1
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff ff1a 	bl	8009a60 <dir_alloc>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d11c      	bne.n	8009c70 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	68b8      	ldr	r0, [r7, #8]
 8009c3e:	f7ff f9d1 	bl	8008fe4 <move_window>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d111      	bne.n	8009c70 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	2220      	movs	r2, #32
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7fe ffb8 	bl	8008bca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a18      	ldr	r0, [r3, #32]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	3324      	adds	r3, #36	@ 0x24
 8009c62:	220b      	movs	r2, #11
 8009c64:	4619      	mov	r1, r3
 8009c66:	f7fe ff8f 	bl	8008b88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b088      	sub	sp, #32
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	60fb      	str	r3, [r7, #12]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3324      	adds	r3, #36	@ 0x24
 8009c90:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009c92:	220b      	movs	r2, #11
 8009c94:	2120      	movs	r1, #32
 8009c96:	68b8      	ldr	r0, [r7, #8]
 8009c98:	f7fe ff97 	bl	8008bca <mem_set>
	si = i = 0; ni = 8;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009ca8:	69fb      	ldr	r3, [r7, #28]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	61fa      	str	r2, [r7, #28]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009cb6:	7efb      	ldrb	r3, [r7, #27]
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	d94e      	bls.n	8009d5a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009cbc:	7efb      	ldrb	r3, [r7, #27]
 8009cbe:	2b2f      	cmp	r3, #47	@ 0x2f
 8009cc0:	d006      	beq.n	8009cd0 <create_name+0x54>
 8009cc2:	7efb      	ldrb	r3, [r7, #27]
 8009cc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009cc6:	d110      	bne.n	8009cea <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009cc8:	e002      	b.n	8009cd0 <create_name+0x54>
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	61fb      	str	r3, [r7, #28]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009cda:	d0f6      	beq.n	8009cca <create_name+0x4e>
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b5c      	cmp	r3, #92	@ 0x5c
 8009ce6:	d0f0      	beq.n	8009cca <create_name+0x4e>
			break;
 8009ce8:	e038      	b.n	8009d5c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009cea:	7efb      	ldrb	r3, [r7, #27]
 8009cec:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cee:	d003      	beq.n	8009cf8 <create_name+0x7c>
 8009cf0:	693a      	ldr	r2, [r7, #16]
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d30c      	bcc.n	8009d12 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2b0b      	cmp	r3, #11
 8009cfc:	d002      	beq.n	8009d04 <create_name+0x88>
 8009cfe:	7efb      	ldrb	r3, [r7, #27]
 8009d00:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d02:	d001      	beq.n	8009d08 <create_name+0x8c>
 8009d04:	2306      	movs	r3, #6
 8009d06:	e044      	b.n	8009d92 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009d08:	2308      	movs	r3, #8
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	230b      	movs	r3, #11
 8009d0e:	617b      	str	r3, [r7, #20]
			continue;
 8009d10:	e022      	b.n	8009d58 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009d12:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da04      	bge.n	8009d24 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009d1a:	7efb      	ldrb	r3, [r7, #27]
 8009d1c:	3b80      	subs	r3, #128	@ 0x80
 8009d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8009d9c <create_name+0x120>)
 8009d20:	5cd3      	ldrb	r3, [r2, r3]
 8009d22:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009d24:	7efb      	ldrb	r3, [r7, #27]
 8009d26:	4619      	mov	r1, r3
 8009d28:	481d      	ldr	r0, [pc, #116]	@ (8009da0 <create_name+0x124>)
 8009d2a:	f7fe ff90 	bl	8008c4e <chk_chr>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <create_name+0xbc>
 8009d34:	2306      	movs	r3, #6
 8009d36:	e02c      	b.n	8009d92 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009d38:	7efb      	ldrb	r3, [r7, #27]
 8009d3a:	2b60      	cmp	r3, #96	@ 0x60
 8009d3c:	d905      	bls.n	8009d4a <create_name+0xce>
 8009d3e:	7efb      	ldrb	r3, [r7, #27]
 8009d40:	2b7a      	cmp	r3, #122	@ 0x7a
 8009d42:	d802      	bhi.n	8009d4a <create_name+0xce>
 8009d44:	7efb      	ldrb	r3, [r7, #27]
 8009d46:	3b20      	subs	r3, #32
 8009d48:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	613a      	str	r2, [r7, #16]
 8009d50:	68ba      	ldr	r2, [r7, #8]
 8009d52:	4413      	add	r3, r2
 8009d54:	7efa      	ldrb	r2, [r7, #27]
 8009d56:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009d58:	e7a6      	b.n	8009ca8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009d5a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	441a      	add	r2, r3
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <create_name+0xf4>
 8009d6c:	2306      	movs	r3, #6
 8009d6e:	e010      	b.n	8009d92 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2be5      	cmp	r3, #229	@ 0xe5
 8009d76:	d102      	bne.n	8009d7e <create_name+0x102>
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009d7e:	7efb      	ldrb	r3, [r7, #27]
 8009d80:	2b20      	cmp	r3, #32
 8009d82:	d801      	bhi.n	8009d88 <create_name+0x10c>
 8009d84:	2204      	movs	r2, #4
 8009d86:	e000      	b.n	8009d8a <create_name+0x10e>
 8009d88:	2200      	movs	r2, #0
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	330b      	adds	r3, #11
 8009d8e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009d90:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3720      	adds	r7, #32
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	0800d308 	.word	0x0800d308
 8009da0:	0800d25c 	.word	0x0800d25c

08009da4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009db2:	693b      	ldr	r3, [r7, #16]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009db8:	e002      	b.n	8009dc0 <follow_path+0x1c>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	603b      	str	r3, [r7, #0]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	2b2f      	cmp	r3, #47	@ 0x2f
 8009dc6:	d0f8      	beq.n	8009dba <follow_path+0x16>
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	2b5c      	cmp	r3, #92	@ 0x5c
 8009dce:	d0f4      	beq.n	8009dba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	2b1f      	cmp	r3, #31
 8009ddc:	d80a      	bhi.n	8009df4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2280      	movs	r2, #128	@ 0x80
 8009de2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009de6:	2100      	movs	r1, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f7ff fcda 	bl	80097a2 <dir_sdi>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]
 8009df2:	e048      	b.n	8009e86 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009df4:	463b      	mov	r3, r7
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff ff3f 	bl	8009c7c <create_name>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d139      	bne.n	8009e7c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff feaf 	bl	8009b6c <dir_find>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009e18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009e1a:	7dfb      	ldrb	r3, [r7, #23]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00a      	beq.n	8009e36 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b04      	cmp	r3, #4
 8009e24:	d12c      	bne.n	8009e80 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d127      	bne.n	8009e80 <follow_path+0xdc>
 8009e30:	2305      	movs	r3, #5
 8009e32:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009e34:	e024      	b.n	8009e80 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e36:	7afb      	ldrb	r3, [r7, #11]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d121      	bne.n	8009e84 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	799b      	ldrb	r3, [r3, #6]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009e4c:	2305      	movs	r3, #5
 8009e4e:	75fb      	strb	r3, [r7, #23]
 8009e50:	e019      	b.n	8009e86 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	8992      	ldrh	r2, [r2, #12]
 8009e60:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e64:	fb00 f202 	mul.w	r2, r0, r2
 8009e68:	1a9b      	subs	r3, r3, r2
 8009e6a:	440b      	add	r3, r1
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f7ff fe3d 	bl	8009aee <ld_clust>
 8009e74:	4602      	mov	r2, r0
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009e7a:	e7bb      	b.n	8009df4 <follow_path+0x50>
			if (res != FR_OK) break;
 8009e7c:	bf00      	nop
 8009e7e:	e002      	b.n	8009e86 <follow_path+0xe2>
				break;
 8009e80:	bf00      	nop
 8009e82:	e000      	b.n	8009e86 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009e84:	bf00      	nop
			}
		}
	}

	return res;
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e9c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d031      	beq.n	8009f0a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	e002      	b.n	8009eb4 <get_ldnumber+0x24>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	617b      	str	r3, [r7, #20]
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b20      	cmp	r3, #32
 8009eba:	d903      	bls.n	8009ec4 <get_ldnumber+0x34>
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	2b3a      	cmp	r3, #58	@ 0x3a
 8009ec2:	d1f4      	bne.n	8009eae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b3a      	cmp	r3, #58	@ 0x3a
 8009eca:	d11c      	bne.n	8009f06 <get_ldnumber+0x76>
			tp = *path;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1c5a      	adds	r2, r3, #1
 8009ed6:	60fa      	str	r2, [r7, #12]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	3b30      	subs	r3, #48	@ 0x30
 8009edc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	2b09      	cmp	r3, #9
 8009ee2:	d80e      	bhi.n	8009f02 <get_ldnumber+0x72>
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d10a      	bne.n	8009f02 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d107      	bne.n	8009f02 <get_ldnumber+0x72>
					vol = (int)i;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	e002      	b.n	8009f0c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009f06:	2300      	movs	r3, #0
 8009f08:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009f0a:	693b      	ldr	r3, [r7, #16]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	70da      	strb	r2, [r3, #3]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f2e:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff f856 	bl	8008fe4 <move_window>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <check_fs+0x2a>
 8009f3e:	2304      	movs	r3, #4
 8009f40:	e038      	b.n	8009fb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3334      	adds	r3, #52	@ 0x34
 8009f46:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7fe fd9a 	bl	8008a84 <ld_word>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d001      	beq.n	8009f60 <check_fs+0x48>
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	e029      	b.n	8009fb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009f66:	2be9      	cmp	r3, #233	@ 0xe9
 8009f68:	d009      	beq.n	8009f7e <check_fs+0x66>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009f70:	2beb      	cmp	r3, #235	@ 0xeb
 8009f72:	d11e      	bne.n	8009fb2 <check_fs+0x9a>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009f7a:	2b90      	cmp	r3, #144	@ 0x90
 8009f7c:	d119      	bne.n	8009fb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	3334      	adds	r3, #52	@ 0x34
 8009f82:	3336      	adds	r3, #54	@ 0x36
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fd95 	bl	8008ab4 <ld_dword>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009f90:	4a0a      	ldr	r2, [pc, #40]	@ (8009fbc <check_fs+0xa4>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d101      	bne.n	8009f9a <check_fs+0x82>
 8009f96:	2300      	movs	r3, #0
 8009f98:	e00c      	b.n	8009fb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3334      	adds	r3, #52	@ 0x34
 8009f9e:	3352      	adds	r3, #82	@ 0x52
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f7fe fd87 	bl	8008ab4 <ld_dword>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	4a05      	ldr	r2, [pc, #20]	@ (8009fc0 <check_fs+0xa8>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d101      	bne.n	8009fb2 <check_fs+0x9a>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e000      	b.n	8009fb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009fb2:	2302      	movs	r3, #2
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	00544146 	.word	0x00544146
 8009fc0:	33544146 	.word	0x33544146

08009fc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b096      	sub	sp, #88	@ 0x58
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ff59 	bl	8009e90 <get_ldnumber>
 8009fde:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	da01      	bge.n	8009fea <find_volume+0x26>
 8009fe6:	230b      	movs	r3, #11
 8009fe8:	e262      	b.n	800a4b0 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009fea:	4a9f      	ldr	r2, [pc, #636]	@ (800a268 <find_volume+0x2a4>)
 8009fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d101      	bne.n	8009ffe <find_volume+0x3a>
 8009ffa:	230c      	movs	r3, #12
 8009ffc:	e258      	b.n	800a4b0 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a002:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	f023 0301 	bic.w	r3, r3, #1
 800a00a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a00c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d01a      	beq.n	800a04a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a016:	785b      	ldrb	r3, [r3, #1]
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe fc95 	bl	8008948 <disk_status>
 800a01e:	4603      	mov	r3, r0
 800a020:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a024:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10c      	bne.n	800a04a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d007      	beq.n	800a046 <find_volume+0x82>
 800a036:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a03a:	f003 0304 	and.w	r3, r3, #4
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d001      	beq.n	800a046 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a042:	230a      	movs	r3, #10
 800a044:	e234      	b.n	800a4b0 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800a046:	2300      	movs	r3, #0
 800a048:	e232      	b.n	800a4b0 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04c:	2200      	movs	r2, #0
 800a04e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a052:	b2da      	uxtb	r2, r3
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	785b      	ldrb	r3, [r3, #1]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fe fc8d 	bl	800897c <disk_initialize>
 800a062:	4603      	mov	r3, r0
 800a064:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a068:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a074:	2303      	movs	r3, #3
 800a076:	e21b      	b.n	800a4b0 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a078:	79fb      	ldrb	r3, [r7, #7]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <find_volume+0xca>
 800a07e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a082:	f003 0304 	and.w	r3, r3, #4
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a08a:	230a      	movs	r3, #10
 800a08c:	e210      	b.n	800a4b0 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a090:	7858      	ldrb	r0, [r3, #1]
 800a092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a094:	330c      	adds	r3, #12
 800a096:	461a      	mov	r2, r3
 800a098:	2102      	movs	r1, #2
 800a09a:	f7fe fcd5 	bl	8008a48 <disk_ioctl>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <find_volume+0xe4>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e203      	b.n	800a4b0 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0aa:	899b      	ldrh	r3, [r3, #12]
 800a0ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0b0:	d80d      	bhi.n	800a0ce <find_volume+0x10a>
 800a0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b4:	899b      	ldrh	r3, [r3, #12]
 800a0b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ba:	d308      	bcc.n	800a0ce <find_volume+0x10a>
 800a0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0be:	899b      	ldrh	r3, [r3, #12]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0c4:	899b      	ldrh	r3, [r3, #12]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d001      	beq.n	800a0d2 <find_volume+0x10e>
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e1ee      	b.n	800a4b0 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a0d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a0d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a0da:	f7ff ff1d 	bl	8009f18 <check_fs>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a0e8:	2b02      	cmp	r3, #2
 800a0ea:	d149      	bne.n	800a180 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0f0:	e01e      	b.n	800a130 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a0f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0fa:	011b      	lsls	r3, r3, #4
 800a0fc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800a100:	4413      	add	r3, r2
 800a102:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a106:	3304      	adds	r3, #4
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d006      	beq.n	800a11c <find_volume+0x158>
 800a10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a110:	3308      	adds	r3, #8
 800a112:	4618      	mov	r0, r3
 800a114:	f7fe fcce 	bl	8008ab4 <ld_dword>
 800a118:	4602      	mov	r2, r0
 800a11a:	e000      	b.n	800a11e <find_volume+0x15a>
 800a11c:	2200      	movs	r2, #0
 800a11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	3358      	adds	r3, #88	@ 0x58
 800a124:	443b      	add	r3, r7
 800a126:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a12c:	3301      	adds	r3, #1
 800a12e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a132:	2b03      	cmp	r3, #3
 800a134:	d9dd      	bls.n	800a0f2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a136:	2300      	movs	r3, #0
 800a138:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800a13a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <find_volume+0x182>
 800a140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a142:	3b01      	subs	r3, #1
 800a144:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	3358      	adds	r3, #88	@ 0x58
 800a14c:	443b      	add	r3, r7
 800a14e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a152:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a154:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a156:	2b00      	cmp	r3, #0
 800a158:	d005      	beq.n	800a166 <find_volume+0x1a2>
 800a15a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a15c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a15e:	f7ff fedb 	bl	8009f18 <check_fs>
 800a162:	4603      	mov	r3, r0
 800a164:	e000      	b.n	800a168 <find_volume+0x1a4>
 800a166:	2303      	movs	r3, #3
 800a168:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a16c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a170:	2b01      	cmp	r3, #1
 800a172:	d905      	bls.n	800a180 <find_volume+0x1bc>
 800a174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a176:	3301      	adds	r3, #1
 800a178:	643b      	str	r3, [r7, #64]	@ 0x40
 800a17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a17c:	2b03      	cmp	r3, #3
 800a17e:	d9e2      	bls.n	800a146 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a180:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a184:	2b04      	cmp	r3, #4
 800a186:	d101      	bne.n	800a18c <find_volume+0x1c8>
 800a188:	2301      	movs	r3, #1
 800a18a:	e191      	b.n	800a4b0 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a18c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a190:	2b01      	cmp	r3, #1
 800a192:	d901      	bls.n	800a198 <find_volume+0x1d4>
 800a194:	230d      	movs	r3, #13
 800a196:	e18b      	b.n	800a4b0 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19a:	3334      	adds	r3, #52	@ 0x34
 800a19c:	330b      	adds	r3, #11
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe fc70 	bl	8008a84 <ld_word>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1aa:	899b      	ldrh	r3, [r3, #12]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d001      	beq.n	800a1b4 <find_volume+0x1f0>
 800a1b0:	230d      	movs	r3, #13
 800a1b2:	e17d      	b.n	800a4b0 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b6:	3334      	adds	r3, #52	@ 0x34
 800a1b8:	3316      	adds	r3, #22
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fc62 	bl	8008a84 <ld_word>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a1c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d106      	bne.n	800a1d8 <find_volume+0x214>
 800a1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1cc:	3334      	adds	r3, #52	@ 0x34
 800a1ce:	3324      	adds	r3, #36	@ 0x24
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7fe fc6f 	bl	8008ab4 <ld_dword>
 800a1d6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800a1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800a1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ea:	789b      	ldrb	r3, [r3, #2]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d005      	beq.n	800a1fc <find_volume+0x238>
 800a1f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f2:	789b      	ldrb	r3, [r3, #2]
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d001      	beq.n	800a1fc <find_volume+0x238>
 800a1f8:	230d      	movs	r3, #13
 800a1fa:	e159      	b.n	800a4b0 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fe:	789b      	ldrb	r3, [r3, #2]
 800a200:	461a      	mov	r2, r3
 800a202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a204:	fb02 f303 	mul.w	r3, r2, r3
 800a208:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a210:	461a      	mov	r2, r3
 800a212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a214:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a218:	895b      	ldrh	r3, [r3, #10]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d008      	beq.n	800a230 <find_volume+0x26c>
 800a21e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a220:	895b      	ldrh	r3, [r3, #10]
 800a222:	461a      	mov	r2, r3
 800a224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a226:	895b      	ldrh	r3, [r3, #10]
 800a228:	3b01      	subs	r3, #1
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d001      	beq.n	800a234 <find_volume+0x270>
 800a230:	230d      	movs	r3, #13
 800a232:	e13d      	b.n	800a4b0 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	3334      	adds	r3, #52	@ 0x34
 800a238:	3311      	adds	r3, #17
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fc22 	bl	8008a84 <ld_word>
 800a240:	4603      	mov	r3, r0
 800a242:	461a      	mov	r2, r3
 800a244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a246:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24a:	891b      	ldrh	r3, [r3, #8]
 800a24c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a24e:	8992      	ldrh	r2, [r2, #12]
 800a250:	0952      	lsrs	r2, r2, #5
 800a252:	b292      	uxth	r2, r2
 800a254:	fbb3 f1f2 	udiv	r1, r3, r2
 800a258:	fb01 f202 	mul.w	r2, r1, r2
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	b29b      	uxth	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <find_volume+0x2a8>
 800a264:	230d      	movs	r3, #13
 800a266:	e123      	b.n	800a4b0 <find_volume+0x4ec>
 800a268:	200025a0 	.word	0x200025a0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a26c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a26e:	3334      	adds	r3, #52	@ 0x34
 800a270:	3313      	adds	r3, #19
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fc06 	bl	8008a84 <ld_word>
 800a278:	4603      	mov	r3, r0
 800a27a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a27c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d106      	bne.n	800a290 <find_volume+0x2cc>
 800a282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a284:	3334      	adds	r3, #52	@ 0x34
 800a286:	3320      	adds	r3, #32
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fc13 	bl	8008ab4 <ld_dword>
 800a28e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	3334      	adds	r3, #52	@ 0x34
 800a294:	330e      	adds	r3, #14
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fbf4 	bl	8008a84 <ld_word>
 800a29c:	4603      	mov	r3, r0
 800a29e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a2a0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <find_volume+0x2e6>
 800a2a6:	230d      	movs	r3, #13
 800a2a8:	e102      	b.n	800a4b0 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a2aa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a2ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2ae:	4413      	add	r3, r2
 800a2b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2b2:	8911      	ldrh	r1, [r2, #8]
 800a2b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2b6:	8992      	ldrh	r2, [r2, #12]
 800a2b8:	0952      	lsrs	r2, r2, #5
 800a2ba:	b292      	uxth	r2, r2
 800a2bc:	fbb1 f2f2 	udiv	r2, r1, r2
 800a2c0:	b292      	uxth	r2, r2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a2c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d201      	bcs.n	800a2d2 <find_volume+0x30e>
 800a2ce:	230d      	movs	r3, #13
 800a2d0:	e0ee      	b.n	800a4b0 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a2d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a2da:	8952      	ldrh	r2, [r2, #10]
 800a2dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <find_volume+0x328>
 800a2e8:	230d      	movs	r3, #13
 800a2ea:	e0e1      	b.n	800a4b0 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d802      	bhi.n	800a302 <find_volume+0x33e>
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a308:	4293      	cmp	r3, r2
 800a30a:	d802      	bhi.n	800a312 <find_volume+0x34e>
 800a30c:	2301      	movs	r3, #1
 800a30e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a314:	1c9a      	adds	r2, r3, #2
 800a316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a318:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a31c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a31e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a320:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a324:	441a      	add	r2, r3
 800a326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a328:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a32a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32e:	441a      	add	r2, r3
 800a330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a332:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800a334:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a338:	2b03      	cmp	r3, #3
 800a33a:	d11e      	bne.n	800a37a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a33e:	3334      	adds	r3, #52	@ 0x34
 800a340:	332a      	adds	r3, #42	@ 0x2a
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fb9e 	bl	8008a84 <ld_word>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d001      	beq.n	800a352 <find_volume+0x38e>
 800a34e:	230d      	movs	r3, #13
 800a350:	e0ae      	b.n	800a4b0 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a354:	891b      	ldrh	r3, [r3, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <find_volume+0x39a>
 800a35a:	230d      	movs	r3, #13
 800a35c:	e0a8      	b.n	800a4b0 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a360:	3334      	adds	r3, #52	@ 0x34
 800a362:	332c      	adds	r3, #44	@ 0x2c
 800a364:	4618      	mov	r0, r3
 800a366:	f7fe fba5 	bl	8008ab4 <ld_dword>
 800a36a:	4602      	mov	r2, r0
 800a36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a36e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	647b      	str	r3, [r7, #68]	@ 0x44
 800a378:	e01f      	b.n	800a3ba <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	891b      	ldrh	r3, [r3, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <find_volume+0x3c2>
 800a382:	230d      	movs	r3, #13
 800a384:	e094      	b.n	800a4b0 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a388:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a38a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a38c:	441a      	add	r2, r3
 800a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a390:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a392:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a396:	2b02      	cmp	r3, #2
 800a398:	d103      	bne.n	800a3a2 <find_volume+0x3de>
 800a39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	005b      	lsls	r3, r3, #1
 800a3a0:	e00a      	b.n	800a3b8 <find_volume+0x3f4>
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	4413      	add	r3, r2
 800a3ac:	085a      	lsrs	r2, r3, #1
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	699b      	ldr	r3, [r3, #24]
 800a3b2:	f003 0301 	and.w	r3, r3, #1
 800a3b6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a3b8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3bc:	69da      	ldr	r2, [r3, #28]
 800a3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c0:	899b      	ldrh	r3, [r3, #12]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a3cc:	8989      	ldrh	r1, [r1, #12]
 800a3ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d201      	bcs.n	800a3da <find_volume+0x416>
 800a3d6:	230d      	movs	r3, #13
 800a3d8:	e06a      	b.n	800a4b0 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3e0:	615a      	str	r2, [r3, #20]
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e4:	695a      	ldr	r2, [r3, #20]
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ec:	2280      	movs	r2, #128	@ 0x80
 800a3ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a3f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d149      	bne.n	800a48c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	3334      	adds	r3, #52	@ 0x34
 800a3fc:	3330      	adds	r3, #48	@ 0x30
 800a3fe:	4618      	mov	r0, r3
 800a400:	f7fe fb40 	bl	8008a84 <ld_word>
 800a404:	4603      	mov	r3, r0
 800a406:	2b01      	cmp	r3, #1
 800a408:	d140      	bne.n	800a48c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a40a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a40c:	3301      	adds	r3, #1
 800a40e:	4619      	mov	r1, r3
 800a410:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a412:	f7fe fde7 	bl	8008fe4 <move_window>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d137      	bne.n	800a48c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800a41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41e:	2200      	movs	r2, #0
 800a420:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a424:	3334      	adds	r3, #52	@ 0x34
 800a426:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fb2a 	bl	8008a84 <ld_word>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a438:	429a      	cmp	r2, r3
 800a43a:	d127      	bne.n	800a48c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43e:	3334      	adds	r3, #52	@ 0x34
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe fb37 	bl	8008ab4 <ld_dword>
 800a446:	4603      	mov	r3, r0
 800a448:	4a1b      	ldr	r2, [pc, #108]	@ (800a4b8 <find_volume+0x4f4>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d11e      	bne.n	800a48c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a450:	3334      	adds	r3, #52	@ 0x34
 800a452:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a456:	4618      	mov	r0, r3
 800a458:	f7fe fb2c 	bl	8008ab4 <ld_dword>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4a17      	ldr	r2, [pc, #92]	@ (800a4bc <find_volume+0x4f8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d113      	bne.n	800a48c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a466:	3334      	adds	r3, #52	@ 0x34
 800a468:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7fe fb21 	bl	8008ab4 <ld_dword>
 800a472:	4602      	mov	r2, r0
 800a474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a476:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47a:	3334      	adds	r3, #52	@ 0x34
 800a47c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a480:	4618      	mov	r0, r3
 800a482:	f7fe fb17 	bl	8008ab4 <ld_dword>
 800a486:	4602      	mov	r2, r0
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a492:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a494:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c0 <find_volume+0x4fc>)
 800a496:	881b      	ldrh	r3, [r3, #0]
 800a498:	3301      	adds	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	4b08      	ldr	r3, [pc, #32]	@ (800a4c0 <find_volume+0x4fc>)
 800a49e:	801a      	strh	r2, [r3, #0]
 800a4a0:	4b07      	ldr	r3, [pc, #28]	@ (800a4c0 <find_volume+0x4fc>)
 800a4a2:	881a      	ldrh	r2, [r3, #0]
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a4a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4aa:	f7fe fd33 	bl	8008f14 <clear_lock>
#endif
	return FR_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3758      	adds	r7, #88	@ 0x58
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	41615252 	.word	0x41615252
 800a4bc:	61417272 	.word	0x61417272
 800a4c0:	200025a4 	.word	0x200025a4

0800a4c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a4ce:	2309      	movs	r3, #9
 800a4d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d01c      	beq.n	800a512 <validate+0x4e>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d018      	beq.n	800a512 <validate+0x4e>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d013      	beq.n	800a512 <validate+0x4e>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	889a      	ldrh	r2, [r3, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	88db      	ldrh	r3, [r3, #6]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d10c      	bne.n	800a512 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	785b      	ldrb	r3, [r3, #1]
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fa22 	bl	8008948 <disk_status>
 800a504:	4603      	mov	r3, r0
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <validate+0x4e>
			res = FR_OK;
 800a50e:	2300      	movs	r3, #0
 800a510:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d102      	bne.n	800a51e <validate+0x5a>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	e000      	b.n	800a520 <validate+0x5c>
 800a51e:	2300      	movs	r3, #0
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	6013      	str	r3, [r2, #0]
	return res;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
	...

0800a530 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	4613      	mov	r3, r2
 800a53c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a542:	f107 0310 	add.w	r3, r7, #16
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fca2 	bl	8009e90 <get_ldnumber>
 800a54c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	2b00      	cmp	r3, #0
 800a552:	da01      	bge.n	800a558 <f_mount+0x28>
 800a554:	230b      	movs	r3, #11
 800a556:	e02b      	b.n	800a5b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a558:	4a17      	ldr	r2, [pc, #92]	@ (800a5b8 <f_mount+0x88>)
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a560:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a568:	69b8      	ldr	r0, [r7, #24]
 800a56a:	f7fe fcd3 	bl	8008f14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d002      	beq.n	800a580 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	490d      	ldr	r1, [pc, #52]	@ (800a5b8 <f_mount+0x88>)
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <f_mount+0x66>
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d001      	beq.n	800a59a <f_mount+0x6a>
 800a596:	2300      	movs	r3, #0
 800a598:	e00a      	b.n	800a5b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a59a:	f107 010c 	add.w	r1, r7, #12
 800a59e:	f107 0308 	add.w	r3, r7, #8
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f7ff fd0d 	bl	8009fc4 <find_volume>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3720      	adds	r7, #32
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	200025a0 	.word	0x200025a0

0800a5bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b098      	sub	sp, #96	@ 0x60
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d101      	bne.n	800a5d4 <f_open+0x18>
 800a5d0:	2309      	movs	r3, #9
 800a5d2:	e1b7      	b.n	800a944 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a5d4:	79fb      	ldrb	r3, [r7, #7]
 800a5d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a5da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a5dc:	79fa      	ldrb	r2, [r7, #7]
 800a5de:	f107 0110 	add.w	r1, r7, #16
 800a5e2:	f107 0308 	add.w	r3, r7, #8
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7ff fcec 	bl	8009fc4 <find_volume>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a5f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	f040 819b 	bne.w	800a932 <f_open+0x376>
		dj.obj.fs = fs;
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	f107 0314 	add.w	r3, r7, #20
 800a606:	4611      	mov	r1, r2
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fbcb 	bl	8009da4 <follow_path>
 800a60e:	4603      	mov	r3, r0
 800a610:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a614:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d118      	bne.n	800a64e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a61c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a620:	b25b      	sxtb	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	da03      	bge.n	800a62e <f_open+0x72>
				res = FR_INVALID_NAME;
 800a626:	2306      	movs	r3, #6
 800a628:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a62c:	e00f      	b.n	800a64e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	2b01      	cmp	r3, #1
 800a632:	bf8c      	ite	hi
 800a634:	2301      	movhi	r3, #1
 800a636:	2300      	movls	r3, #0
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	461a      	mov	r2, r3
 800a63c:	f107 0314 	add.w	r3, r7, #20
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe fb1e 	bl	8008c84 <chk_lock>
 800a648:	4603      	mov	r3, r0
 800a64a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	f003 031c 	and.w	r3, r3, #28
 800a654:	2b00      	cmp	r3, #0
 800a656:	d07f      	beq.n	800a758 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a658:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d017      	beq.n	800a690 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a660:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a664:	2b04      	cmp	r3, #4
 800a666:	d10e      	bne.n	800a686 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a668:	f7fe fb68 	bl	8008d3c <enq_lock>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d006      	beq.n	800a680 <f_open+0xc4>
 800a672:	f107 0314 	add.w	r3, r7, #20
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff facd 	bl	8009c16 <dir_register>
 800a67c:	4603      	mov	r3, r0
 800a67e:	e000      	b.n	800a682 <f_open+0xc6>
 800a680:	2312      	movs	r3, #18
 800a682:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a686:	79fb      	ldrb	r3, [r7, #7]
 800a688:	f043 0308 	orr.w	r3, r3, #8
 800a68c:	71fb      	strb	r3, [r7, #7]
 800a68e:	e010      	b.n	800a6b2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a690:	7ebb      	ldrb	r3, [r7, #26]
 800a692:	f003 0311 	and.w	r3, r3, #17
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <f_open+0xe6>
					res = FR_DENIED;
 800a69a:	2307      	movs	r3, #7
 800a69c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6a0:	e007      	b.n	800a6b2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a6a2:	79fb      	ldrb	r3, [r7, #7]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <f_open+0xf6>
 800a6ac:	2308      	movs	r3, #8
 800a6ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a6b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d168      	bne.n	800a78c <f_open+0x1d0>
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	f003 0308 	and.w	r3, r3, #8
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d063      	beq.n	800a78c <f_open+0x1d0>
				dw = GET_FATTIME();
 800a6c4:	f7fd ff86 	bl	80085d4 <get_fattime>
 800a6c8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6cc:	330e      	adds	r3, #14
 800a6ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fa2d 	bl	8008b30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d8:	3316      	adds	r3, #22
 800a6da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fa27 	bl	8008b30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e4:	330b      	adds	r3, #11
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7ff f9fc 	bl	8009aee <ld_clust>
 800a6f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fa14 	bl	8009b2c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a706:	331c      	adds	r3, #28
 800a708:	2100      	movs	r1, #0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fa10 	bl	8008b30 <st_dword>
					fs->wflag = 1;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	2201      	movs	r2, #1
 800a714:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d037      	beq.n	800a78c <f_open+0x1d0>
						dw = fs->winsect;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a720:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a722:	f107 0314 	add.w	r3, r7, #20
 800a726:	2200      	movs	r2, #0
 800a728:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7fe ff04 	bl	8009538 <remove_chain>
 800a730:	4603      	mov	r3, r0
 800a732:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a736:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d126      	bne.n	800a78c <f_open+0x1d0>
							res = move_window(fs, dw);
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe fc4e 	bl	8008fe4 <move_window>
 800a748:	4603      	mov	r3, r0
 800a74a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a752:	3a01      	subs	r2, #1
 800a754:	611a      	str	r2, [r3, #16]
 800a756:	e019      	b.n	800a78c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a758:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d115      	bne.n	800a78c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a760:	7ebb      	ldrb	r3, [r7, #26]
 800a762:	f003 0310 	and.w	r3, r3, #16
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <f_open+0x1b6>
					res = FR_NO_FILE;
 800a76a:	2304      	movs	r3, #4
 800a76c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a770:	e00c      	b.n	800a78c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a772:	79fb      	ldrb	r3, [r7, #7]
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d007      	beq.n	800a78c <f_open+0x1d0>
 800a77c:	7ebb      	ldrb	r3, [r7, #26]
 800a77e:	f003 0301 	and.w	r3, r3, #1
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <f_open+0x1d0>
						res = FR_DENIED;
 800a786:	2307      	movs	r3, #7
 800a788:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a78c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a790:	2b00      	cmp	r3, #0
 800a792:	d126      	bne.n	800a7e2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a794:	79fb      	ldrb	r3, [r7, #7]
 800a796:	f003 0308 	and.w	r3, r3, #8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a7ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7b4:	79fb      	ldrb	r3, [r7, #7]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	bf8c      	ite	hi
 800a7ba:	2301      	movhi	r3, #1
 800a7bc:	2300      	movls	r3, #0
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	f107 0314 	add.w	r3, r7, #20
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fe fad9 	bl	8008d80 <inc_lock>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d102      	bne.n	800a7e2 <f_open+0x226>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a7e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f040 80a3 	bne.w	800a932 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff f97b 	bl	8009aee <ld_clust>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a800:	331c      	adds	r3, #28
 800a802:	4618      	mov	r0, r3
 800a804:	f7fe f956 	bl	8008ab4 <ld_dword>
 800a808:	4602      	mov	r2, r0
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	88da      	ldrh	r2, [r3, #6]
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	79fa      	ldrb	r2, [r7, #7]
 800a826:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2200      	movs	r2, #0
 800a832:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3330      	adds	r3, #48	@ 0x30
 800a83e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a842:	2100      	movs	r1, #0
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe f9c0 	bl	8008bca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a84a:	79fb      	ldrb	r3, [r7, #7]
 800a84c:	f003 0320 	and.w	r3, r3, #32
 800a850:	2b00      	cmp	r3, #0
 800a852:	d06e      	beq.n	800a932 <f_open+0x376>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68db      	ldr	r3, [r3, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d06a      	beq.n	800a932 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	895b      	ldrh	r3, [r3, #10]
 800a868:	461a      	mov	r2, r3
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	899b      	ldrh	r3, [r3, #12]
 800a86e:	fb02 f303 	mul.w	r3, r2, r3
 800a872:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a880:	e016      	b.n	800a8b0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a886:	4618      	mov	r0, r3
 800a888:	f7fe fc69 	bl	800915e <get_fat>
 800a88c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a88e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a890:	2b01      	cmp	r3, #1
 800a892:	d802      	bhi.n	800a89a <f_open+0x2de>
 800a894:	2302      	movs	r3, #2
 800a896:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a89a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a89c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8a0:	d102      	bne.n	800a8a8 <f_open+0x2ec>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a8a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d103      	bne.n	800a8c0 <f_open+0x304>
 800a8b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d8e0      	bhi.n	800a882 <f_open+0x2c6>
				}
				fp->clust = clst;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8c4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d131      	bne.n	800a932 <f_open+0x376>
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	899b      	ldrh	r3, [r3, #12]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8da:	fb01 f202 	mul.w	r2, r1, r2
 800a8de:	1a9b      	subs	r3, r3, r2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d026      	beq.n	800a932 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7fe fc19 	bl	8009120 <clust2sect>
 800a8ee:	6478      	str	r0, [r7, #68]	@ 0x44
 800a8f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d103      	bne.n	800a8fe <f_open+0x342>
						res = FR_INT_ERR;
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a8fc:	e019      	b.n	800a932 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	899b      	ldrh	r3, [r3, #12]
 800a902:	461a      	mov	r2, r3
 800a904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a906:	fbb3 f2f2 	udiv	r2, r3, r2
 800a90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a90c:	441a      	add	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	7858      	ldrb	r0, [r3, #1]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	2301      	movs	r3, #1
 800a922:	f7fe f851 	bl	80089c8 <disk_read>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d002      	beq.n	800a932 <f_open+0x376>
 800a92c:	2301      	movs	r3, #1
 800a92e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a932:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <f_open+0x384>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a944:	4618      	mov	r0, r3
 800a946:	3760      	adds	r7, #96	@ 0x60
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08c      	sub	sp, #48	@ 0x30
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2200      	movs	r2, #0
 800a962:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f107 0210 	add.w	r2, r7, #16
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7ff fda9 	bl	800a4c4 <validate>
 800a972:	4603      	mov	r3, r0
 800a974:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d107      	bne.n	800a990 <f_write+0x44>
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	7d5b      	ldrb	r3, [r3, #21]
 800a984:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a988:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <f_write+0x4a>
 800a990:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a994:	e16a      	b.n	800ac6c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	7d1b      	ldrb	r3, [r3, #20]
 800a99a:	f003 0302 	and.w	r3, r3, #2
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <f_write+0x5a>
 800a9a2:	2307      	movs	r3, #7
 800a9a4:	e162      	b.n	800ac6c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	699a      	ldr	r2, [r3, #24]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	441a      	add	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	f080 814c 	bcs.w	800ac50 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	699b      	ldr	r3, [r3, #24]
 800a9bc:	43db      	mvns	r3, r3
 800a9be:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a9c0:	e146      	b.n	800ac50 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	693a      	ldr	r2, [r7, #16]
 800a9c8:	8992      	ldrh	r2, [r2, #12]
 800a9ca:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9ce:	fb01 f202 	mul.w	r2, r1, r2
 800a9d2:	1a9b      	subs	r3, r3, r2
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f040 80f1 	bne.w	800abbc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	699b      	ldr	r3, [r3, #24]
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	8992      	ldrh	r2, [r2, #12]
 800a9e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	8952      	ldrh	r2, [r2, #10]
 800a9ea:	3a01      	subs	r2, #1
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d143      	bne.n	800aa7e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d10c      	bne.n	800aa18 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d11a      	bne.n	800aa40 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe fdf7 	bl	8009602 <create_chain>
 800aa14:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa16:	e013      	b.n	800aa40 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d007      	beq.n	800aa30 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	4619      	mov	r1, r3
 800aa26:	68f8      	ldr	r0, [r7, #12]
 800aa28:	f7fe fe83 	bl	8009732 <clmt_clust>
 800aa2c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa2e:	e007      	b.n	800aa40 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	69db      	ldr	r3, [r3, #28]
 800aa36:	4619      	mov	r1, r3
 800aa38:	4610      	mov	r0, r2
 800aa3a:	f7fe fde2 	bl	8009602 <create_chain>
 800aa3e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800aa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 8109 	beq.w	800ac5a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d104      	bne.n	800aa58 <f_write+0x10c>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2202      	movs	r2, #2
 800aa52:	755a      	strb	r2, [r3, #21]
 800aa54:	2302      	movs	r3, #2
 800aa56:	e109      	b.n	800ac6c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aa58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa5e:	d104      	bne.n	800aa6a <f_write+0x11e>
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	755a      	strb	r2, [r3, #21]
 800aa66:	2301      	movs	r3, #1
 800aa68:	e100      	b.n	800ac6c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa6e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <f_write+0x132>
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa7c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	7d1b      	ldrb	r3, [r3, #20]
 800aa82:	b25b      	sxtb	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	da18      	bge.n	800aaba <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	7858      	ldrb	r0, [r3, #1]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a1a      	ldr	r2, [r3, #32]
 800aa96:	2301      	movs	r3, #1
 800aa98:	f7fd ffb6 	bl	8008a08 <disk_write>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d004      	beq.n	800aaac <f_write+0x160>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	755a      	strb	r2, [r3, #21]
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	e0df      	b.n	800ac6c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	7d1b      	ldrb	r3, [r3, #20]
 800aab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aab4:	b2da      	uxtb	r2, r3
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f7fe fb2c 	bl	8009120 <clust2sect>
 800aac8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <f_write+0x18e>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2202      	movs	r2, #2
 800aad4:	755a      	strb	r2, [r3, #21]
 800aad6:	2302      	movs	r3, #2
 800aad8:	e0c8      	b.n	800ac6c <f_write+0x320>
			sect += csect;
 800aada:	697a      	ldr	r2, [r7, #20]
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	4413      	add	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	899b      	ldrh	r3, [r3, #12]
 800aae6:	461a      	mov	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aaf0:	6a3b      	ldr	r3, [r7, #32]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d043      	beq.n	800ab7e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	6a3b      	ldr	r3, [r7, #32]
 800aafa:	4413      	add	r3, r2
 800aafc:	693a      	ldr	r2, [r7, #16]
 800aafe:	8952      	ldrh	r2, [r2, #10]
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d905      	bls.n	800ab10 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	895b      	ldrh	r3, [r3, #10]
 800ab08:	461a      	mov	r2, r3
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	1ad3      	subs	r3, r2, r3
 800ab0e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	7858      	ldrb	r0, [r3, #1]
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	69f9      	ldr	r1, [r7, #28]
 800ab1a:	f7fd ff75 	bl	8008a08 <disk_write>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <f_write+0x1e2>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2201      	movs	r2, #1
 800ab28:	755a      	strb	r2, [r3, #21]
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	e09e      	b.n	800ac6c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6a1a      	ldr	r2, [r3, #32]
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	6a3a      	ldr	r2, [r7, #32]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d918      	bls.n	800ab6e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6a1a      	ldr	r2, [r3, #32]
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	1ad3      	subs	r3, r2, r3
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	8992      	ldrh	r2, [r2, #12]
 800ab4e:	fb02 f303 	mul.w	r3, r2, r3
 800ab52:	69fa      	ldr	r2, [r7, #28]
 800ab54:	18d1      	adds	r1, r2, r3
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	899b      	ldrh	r3, [r3, #12]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f7fe f814 	bl	8008b88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	7d1b      	ldrb	r3, [r3, #20]
 800ab64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	899b      	ldrh	r3, [r3, #12]
 800ab72:	461a      	mov	r2, r3
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	fb02 f303 	mul.w	r3, r2, r3
 800ab7a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800ab7c:	e04b      	b.n	800ac16 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	697a      	ldr	r2, [r7, #20]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d016      	beq.n	800abb6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	699a      	ldr	r2, [r3, #24]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d210      	bcs.n	800abb6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	7858      	ldrb	r0, [r3, #1]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ab9e:	2301      	movs	r3, #1
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	f7fd ff11 	bl	80089c8 <disk_read>
 800aba6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2201      	movs	r2, #1
 800abb0:	755a      	strb	r2, [r3, #21]
 800abb2:	2301      	movs	r3, #1
 800abb4:	e05a      	b.n	800ac6c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	697a      	ldr	r2, [r7, #20]
 800abba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	899b      	ldrh	r3, [r3, #12]
 800abc0:	4618      	mov	r0, r3
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	8992      	ldrh	r2, [r2, #12]
 800abca:	fbb3 f1f2 	udiv	r1, r3, r2
 800abce:	fb01 f202 	mul.w	r2, r1, r2
 800abd2:	1a9b      	subs	r3, r3, r2
 800abd4:	1ac3      	subs	r3, r0, r3
 800abd6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800abd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d901      	bls.n	800abe4 <f_write+0x298>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	8992      	ldrh	r2, [r2, #12]
 800abf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800abf6:	fb00 f202 	mul.w	r2, r0, r2
 800abfa:	1a9b      	subs	r3, r3, r2
 800abfc:	440b      	add	r3, r1
 800abfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac00:	69f9      	ldr	r1, [r7, #28]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7fd ffc0 	bl	8008b88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	7d1b      	ldrb	r3, [r3, #20]
 800ac0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	4413      	add	r3, r2
 800ac1c:	61fb      	str	r3, [r7, #28]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	699a      	ldr	r2, [r3, #24]
 800ac22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac24:	441a      	add	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	619a      	str	r2, [r3, #24]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	68da      	ldr	r2, [r3, #12]
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	bf38      	it	cc
 800ac36:	461a      	movcc	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	60da      	str	r2, [r3, #12]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	441a      	add	r2, r3
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac4c:	1ad3      	subs	r3, r2, r3
 800ac4e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f47f aeb5 	bne.w	800a9c2 <f_write+0x76>
 800ac58:	e000      	b.n	800ac5c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ac5a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	7d1b      	ldrb	r3, [r3, #20]
 800ac60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac64:	b2da      	uxtb	r2, r3
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3730      	adds	r7, #48	@ 0x30
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f107 0208 	add.w	r2, r7, #8
 800ac82:	4611      	mov	r1, r2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7ff fc1d 	bl	800a4c4 <validate>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac8e:	7dfb      	ldrb	r3, [r7, #23]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d168      	bne.n	800ad66 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	7d1b      	ldrb	r3, [r3, #20]
 800ac98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d062      	beq.n	800ad66 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7d1b      	ldrb	r3, [r3, #20]
 800aca4:	b25b      	sxtb	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da15      	bge.n	800acd6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	7858      	ldrb	r0, [r3, #1]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a1a      	ldr	r2, [r3, #32]
 800acb8:	2301      	movs	r3, #1
 800acba:	f7fd fea5 	bl	8008a08 <disk_write>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <f_sync+0x54>
 800acc4:	2301      	movs	r3, #1
 800acc6:	e04f      	b.n	800ad68 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	7d1b      	ldrb	r3, [r3, #20]
 800accc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acd0:	b2da      	uxtb	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800acd6:	f7fd fc7d 	bl	80085d4 <get_fattime>
 800acda:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800acdc:	68ba      	ldr	r2, [r7, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	4619      	mov	r1, r3
 800ace4:	4610      	mov	r0, r2
 800ace6:	f7fe f97d 	bl	8008fe4 <move_window>
 800acea:	4603      	mov	r3, r0
 800acec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800acee:	7dfb      	ldrb	r3, [r7, #23]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d138      	bne.n	800ad66 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	330b      	adds	r3, #11
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	330b      	adds	r3, #11
 800ad04:	f042 0220 	orr.w	r2, r2, #32
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6818      	ldr	r0, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	461a      	mov	r2, r3
 800ad16:	68f9      	ldr	r1, [r7, #12]
 800ad18:	f7fe ff08 	bl	8009b2c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f103 021c 	add.w	r2, r3, #28
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f7fd ff01 	bl	8008b30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3316      	adds	r3, #22
 800ad32:	6939      	ldr	r1, [r7, #16]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7fd fefb 	bl	8008b30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3312      	adds	r3, #18
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fd feda 	bl	8008afa <st_word>
					fs->wflag = 1;
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe f976 	bl	8009040 <sync_fs>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	7d1b      	ldrb	r3, [r3, #20]
 800ad5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff ff7b 	bl	800ac74 <f_sync>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ad82:	7bfb      	ldrb	r3, [r7, #15]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d118      	bne.n	800adba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f107 0208 	add.w	r2, r7, #8
 800ad8e:	4611      	mov	r1, r2
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7ff fb97 	bl	800a4c4 <validate>
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10c      	bne.n	800adba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	691b      	ldr	r3, [r3, #16]
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe f879 	bl	8008e9c <dec_lock>
 800adaa:	4603      	mov	r3, r0
 800adac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800adae:	7bfb      	ldrb	r3, [r7, #15]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d102      	bne.n	800adba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800adba:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b090      	sub	sp, #64	@ 0x40
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f107 0208 	add.w	r2, r7, #8
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff fb74 	bl	800a4c4 <validate>
 800addc:	4603      	mov	r3, r0
 800adde:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ade2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d103      	bne.n	800adf2 <f_lseek+0x2e>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	7d5b      	ldrb	r3, [r3, #21]
 800adee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800adf2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d002      	beq.n	800ae00 <f_lseek+0x3c>
 800adfa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800adfe:	e201      	b.n	800b204 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80d9 	beq.w	800afbc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae10:	d15a      	bne.n	800aec8 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae16:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	1d1a      	adds	r2, r3, #4
 800ae1c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	2302      	movs	r3, #2
 800ae24:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689b      	ldr	r3, [r3, #8]
 800ae2a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800ae2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d03a      	beq.n	800aea8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ae32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae34:	613b      	str	r3, [r7, #16]
 800ae36:	2300      	movs	r3, #0
 800ae38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3c:	3302      	adds	r3, #2
 800ae3e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800ae40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae42:	60fb      	str	r3, [r7, #12]
 800ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae46:	3301      	adds	r3, #1
 800ae48:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7fe f985 	bl	800915e <get_fat>
 800ae54:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ae56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d804      	bhi.n	800ae66 <f_lseek+0xa2>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	755a      	strb	r2, [r3, #21]
 800ae62:	2302      	movs	r3, #2
 800ae64:	e1ce      	b.n	800b204 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae6c:	d104      	bne.n	800ae78 <f_lseek+0xb4>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	755a      	strb	r2, [r3, #21]
 800ae74:	2301      	movs	r3, #1
 800ae76:	e1c5      	b.n	800b204 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d0de      	beq.n	800ae40 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ae82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d809      	bhi.n	800ae9e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	1d1a      	adds	r2, r3, #4
 800ae8e:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae96:	1d1a      	adds	r2, r3, #4
 800ae98:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae9a:	693a      	ldr	r2, [r7, #16]
 800ae9c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	699b      	ldr	r3, [r3, #24]
 800aea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d3c4      	bcc.n	800ae32 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800aeb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d803      	bhi.n	800aec0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800aeb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeba:	2200      	movs	r2, #0
 800aebc:	601a      	str	r2, [r3, #0]
 800aebe:	e19f      	b.n	800b200 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800aec0:	2311      	movs	r3, #17
 800aec2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800aec6:	e19b      	b.n	800b200 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	683a      	ldr	r2, [r7, #0]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d902      	bls.n	800aed8 <f_lseek+0x114>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 818d 	beq.w	800b200 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7fe fc20 	bl	8009732 <clmt_clust>
 800aef2:	4602      	mov	r2, r0
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	4619      	mov	r1, r3
 800af00:	4610      	mov	r0, r2
 800af02:	f7fe f90d 	bl	8009120 <clust2sect>
 800af06:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d104      	bne.n	800af18 <f_lseek+0x154>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2202      	movs	r2, #2
 800af12:	755a      	strb	r2, [r3, #21]
 800af14:	2302      	movs	r3, #2
 800af16:	e175      	b.n	800b204 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	8992      	ldrh	r2, [r2, #12]
 800af20:	fbb3 f3f2 	udiv	r3, r3, r2
 800af24:	68ba      	ldr	r2, [r7, #8]
 800af26:	8952      	ldrh	r2, [r2, #10]
 800af28:	3a01      	subs	r2, #1
 800af2a:	4013      	ands	r3, r2
 800af2c:	69ba      	ldr	r2, [r7, #24]
 800af2e:	4413      	add	r3, r2
 800af30:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	8992      	ldrh	r2, [r2, #12]
 800af3a:	fbb3 f1f2 	udiv	r1, r3, r2
 800af3e:	fb01 f202 	mul.w	r2, r1, r2
 800af42:	1a9b      	subs	r3, r3, r2
 800af44:	2b00      	cmp	r3, #0
 800af46:	f000 815b 	beq.w	800b200 <f_lseek+0x43c>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	69ba      	ldr	r2, [r7, #24]
 800af50:	429a      	cmp	r2, r3
 800af52:	f000 8155 	beq.w	800b200 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	7d1b      	ldrb	r3, [r3, #20]
 800af5a:	b25b      	sxtb	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	da18      	bge.n	800af92 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	7858      	ldrb	r0, [r3, #1]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a1a      	ldr	r2, [r3, #32]
 800af6e:	2301      	movs	r3, #1
 800af70:	f7fd fd4a 	bl	8008a08 <disk_write>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d004      	beq.n	800af84 <f_lseek+0x1c0>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2201      	movs	r2, #1
 800af7e:	755a      	strb	r2, [r3, #21]
 800af80:	2301      	movs	r3, #1
 800af82:	e13f      	b.n	800b204 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	7d1b      	ldrb	r3, [r3, #20]
 800af88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	7858      	ldrb	r0, [r3, #1]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800af9c:	2301      	movs	r3, #1
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	f7fd fd12 	bl	80089c8 <disk_read>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d004      	beq.n	800afb4 <f_lseek+0x1f0>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	755a      	strb	r2, [r3, #21]
 800afb0:	2301      	movs	r3, #1
 800afb2:	e127      	b.n	800b204 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	69ba      	ldr	r2, [r7, #24]
 800afb8:	621a      	str	r2, [r3, #32]
 800afba:	e121      	b.n	800b200 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d908      	bls.n	800afd8 <f_lseek+0x214>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	7d1b      	ldrb	r3, [r3, #20]
 800afca:	f003 0302 	and.w	r3, r3, #2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d102      	bne.n	800afd8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800afde:	2300      	movs	r3, #0
 800afe0:	637b      	str	r3, [r7, #52]	@ 0x34
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afe6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b00      	cmp	r3, #0
 800afec:	f000 80b5 	beq.w	800b15a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	895b      	ldrh	r3, [r3, #10]
 800aff4:	461a      	mov	r2, r3
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	899b      	ldrh	r3, [r3, #12]
 800affa:	fb02 f303 	mul.w	r3, r2, r3
 800affe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d01b      	beq.n	800b03e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	1e5a      	subs	r2, r3, #1
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	1e59      	subs	r1, r3, #1
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d30f      	bcc.n	800b03e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	1e5a      	subs	r2, r3, #1
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	425b      	negs	r3, r3
 800b026:	401a      	ands	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	1ad3      	subs	r3, r2, r3
 800b034:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	69db      	ldr	r3, [r3, #28]
 800b03a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b03c:	e022      	b.n	800b084 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800b044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b046:	2b00      	cmp	r3, #0
 800b048:	d119      	bne.n	800b07e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2100      	movs	r1, #0
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fe fad7 	bl	8009602 <create_chain>
 800b054:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d104      	bne.n	800b066 <f_lseek+0x2a2>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	755a      	strb	r2, [r3, #21]
 800b062:	2302      	movs	r3, #2
 800b064:	e0ce      	b.n	800b204 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b06c:	d104      	bne.n	800b078 <f_lseek+0x2b4>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2201      	movs	r2, #1
 800b072:	755a      	strb	r2, [r3, #21]
 800b074:	2301      	movs	r3, #1
 800b076:	e0c5      	b.n	800b204 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b07c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b082:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800b084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b086:	2b00      	cmp	r3, #0
 800b088:	d067      	beq.n	800b15a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800b08a:	e03a      	b.n	800b102 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	699a      	ldr	r2, [r3, #24]
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	441a      	add	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	7d1b      	ldrb	r3, [r3, #20]
 800b0a4:	f003 0302 	and.w	r3, r3, #2
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00b      	beq.n	800b0c4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe faa6 	bl	8009602 <create_chain>
 800b0b6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d108      	bne.n	800b0d0 <f_lseek+0x30c>
							ofs = 0; break;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	603b      	str	r3, [r7, #0]
 800b0c2:	e022      	b.n	800b10a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe f848 	bl	800915e <get_fat>
 800b0ce:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0d6:	d104      	bne.n	800b0e2 <f_lseek+0x31e>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	755a      	strb	r2, [r3, #21]
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e090      	b.n	800b204 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d904      	bls.n	800b0f2 <f_lseek+0x32e>
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d304      	bcc.n	800b0fc <f_lseek+0x338>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	755a      	strb	r2, [r3, #21]
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e083      	b.n	800b204 <f_lseek+0x440>
					fp->clust = clst;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b100:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	429a      	cmp	r2, r3
 800b108:	d8c0      	bhi.n	800b08c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	699a      	ldr	r2, [r3, #24]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	441a      	add	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	899b      	ldrh	r3, [r3, #12]
 800b11a:	461a      	mov	r2, r3
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b122:	fb01 f202 	mul.w	r2, r1, r2
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d016      	beq.n	800b15a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b130:	4618      	mov	r0, r3
 800b132:	f7fd fff5 	bl	8009120 <clust2sect>
 800b136:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800b138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d104      	bne.n	800b148 <f_lseek+0x384>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2202      	movs	r2, #2
 800b142:	755a      	strb	r2, [r3, #21]
 800b144:	2302      	movs	r3, #2
 800b146:	e05d      	b.n	800b204 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	899b      	ldrh	r3, [r3, #12]
 800b14c:	461a      	mov	r2, r3
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	fbb3 f3f2 	udiv	r3, r3, r2
 800b154:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b156:	4413      	add	r3, r2
 800b158:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	699a      	ldr	r2, [r3, #24]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68db      	ldr	r3, [r3, #12]
 800b162:	429a      	cmp	r2, r3
 800b164:	d90a      	bls.n	800b17c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	699a      	ldr	r2, [r3, #24]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7d1b      	ldrb	r3, [r3, #20]
 800b172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b176:	b2da      	uxtb	r2, r3
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	699b      	ldr	r3, [r3, #24]
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	8992      	ldrh	r2, [r2, #12]
 800b184:	fbb3 f1f2 	udiv	r1, r3, r2
 800b188:	fb01 f202 	mul.w	r2, r1, r2
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d036      	beq.n	800b200 <f_lseek+0x43c>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a1b      	ldr	r3, [r3, #32]
 800b196:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b198:	429a      	cmp	r2, r3
 800b19a:	d031      	beq.n	800b200 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	7d1b      	ldrb	r3, [r3, #20]
 800b1a0:	b25b      	sxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	da18      	bge.n	800b1d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	7858      	ldrb	r0, [r3, #1]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6a1a      	ldr	r2, [r3, #32]
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f7fd fc27 	bl	8008a08 <disk_write>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d004      	beq.n	800b1ca <f_lseek+0x406>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	755a      	strb	r2, [r3, #21]
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e01c      	b.n	800b204 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	7d1b      	ldrb	r3, [r3, #20]
 800b1ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b1d2:	b2da      	uxtb	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	7858      	ldrb	r0, [r3, #1]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1e6:	f7fd fbef 	bl	80089c8 <disk_read>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <f_lseek+0x436>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	755a      	strb	r2, [r3, #21]
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e004      	b.n	800b204 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b1fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800b200:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b204:	4618      	mov	r0, r3
 800b206:	3740      	adds	r7, #64	@ 0x40
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b087      	sub	sp, #28
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	4613      	mov	r3, r2
 800b218:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b21a:	2301      	movs	r3, #1
 800b21c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b21e:	2300      	movs	r3, #0
 800b220:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b222:	4b1f      	ldr	r3, [pc, #124]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b224:	7a5b      	ldrb	r3, [r3, #9]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d131      	bne.n	800b290 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b22c:	4b1c      	ldr	r3, [pc, #112]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b22e:	7a5b      	ldrb	r3, [r3, #9]
 800b230:	b2db      	uxtb	r3, r3
 800b232:	461a      	mov	r2, r3
 800b234:	4b1a      	ldr	r3, [pc, #104]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b236:	2100      	movs	r1, #0
 800b238:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b23a:	4b19      	ldr	r3, [pc, #100]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b23c:	7a5b      	ldrb	r3, [r3, #9]
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	4a17      	ldr	r2, [pc, #92]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	68fa      	ldr	r2, [r7, #12]
 800b248:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b24a:	4b15      	ldr	r3, [pc, #84]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b24c:	7a5b      	ldrb	r3, [r3, #9]
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	4b13      	ldr	r3, [pc, #76]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b254:	4413      	add	r3, r2
 800b256:	79fa      	ldrb	r2, [r7, #7]
 800b258:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b25a:	4b11      	ldr	r3, [pc, #68]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b25c:	7a5b      	ldrb	r3, [r3, #9]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	1c5a      	adds	r2, r3, #1
 800b262:	b2d1      	uxtb	r1, r2
 800b264:	4a0e      	ldr	r2, [pc, #56]	@ (800b2a0 <FATFS_LinkDriverEx+0x94>)
 800b266:	7251      	strb	r1, [r2, #9]
 800b268:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b26a:	7dbb      	ldrb	r3, [r7, #22]
 800b26c:	3330      	adds	r3, #48	@ 0x30
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	3301      	adds	r3, #1
 800b278:	223a      	movs	r2, #58	@ 0x3a
 800b27a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	3302      	adds	r3, #2
 800b280:	222f      	movs	r2, #47	@ 0x2f
 800b282:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	3303      	adds	r3, #3
 800b288:	2200      	movs	r2, #0
 800b28a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b290:	7dfb      	ldrb	r3, [r7, #23]
}
 800b292:	4618      	mov	r0, r3
 800b294:	371c      	adds	r7, #28
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	200025c8 	.word	0x200025c8

0800b2a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff ffaa 	bl	800b20c <FATFS_LinkDriverEx>
 800b2b8:	4603      	mov	r3, r0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3708      	adds	r7, #8
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <setbuf>:
 800b2c2:	fab1 f281 	clz	r2, r1
 800b2c6:	0952      	lsrs	r2, r2, #5
 800b2c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2cc:	0052      	lsls	r2, r2, #1
 800b2ce:	f000 b801 	b.w	800b2d4 <setvbuf>
	...

0800b2d4 <setvbuf>:
 800b2d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2d8:	461d      	mov	r5, r3
 800b2da:	4b57      	ldr	r3, [pc, #348]	@ (800b438 <setvbuf+0x164>)
 800b2dc:	681f      	ldr	r7, [r3, #0]
 800b2de:	4604      	mov	r4, r0
 800b2e0:	460e      	mov	r6, r1
 800b2e2:	4690      	mov	r8, r2
 800b2e4:	b127      	cbz	r7, 800b2f0 <setvbuf+0x1c>
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	b913      	cbnz	r3, 800b2f0 <setvbuf+0x1c>
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	f000 f9d6 	bl	800b69c <__sinit>
 800b2f0:	f1b8 0f02 	cmp.w	r8, #2
 800b2f4:	d006      	beq.n	800b304 <setvbuf+0x30>
 800b2f6:	f1b8 0f01 	cmp.w	r8, #1
 800b2fa:	f200 809a 	bhi.w	800b432 <setvbuf+0x15e>
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	f2c0 8097 	blt.w	800b432 <setvbuf+0x15e>
 800b304:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b306:	07d9      	lsls	r1, r3, #31
 800b308:	d405      	bmi.n	800b316 <setvbuf+0x42>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	059a      	lsls	r2, r3, #22
 800b30e:	d402      	bmi.n	800b316 <setvbuf+0x42>
 800b310:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b312:	f000 fb66 	bl	800b9e2 <__retarget_lock_acquire_recursive>
 800b316:	4621      	mov	r1, r4
 800b318:	4638      	mov	r0, r7
 800b31a:	f001 fc59 	bl	800cbd0 <_fflush_r>
 800b31e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b320:	b141      	cbz	r1, 800b334 <setvbuf+0x60>
 800b322:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b326:	4299      	cmp	r1, r3
 800b328:	d002      	beq.n	800b330 <setvbuf+0x5c>
 800b32a:	4638      	mov	r0, r7
 800b32c:	f000 fb5c 	bl	800b9e8 <_free_r>
 800b330:	2300      	movs	r3, #0
 800b332:	6363      	str	r3, [r4, #52]	@ 0x34
 800b334:	2300      	movs	r3, #0
 800b336:	61a3      	str	r3, [r4, #24]
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	89a3      	ldrh	r3, [r4, #12]
 800b33c:	061b      	lsls	r3, r3, #24
 800b33e:	d503      	bpl.n	800b348 <setvbuf+0x74>
 800b340:	6921      	ldr	r1, [r4, #16]
 800b342:	4638      	mov	r0, r7
 800b344:	f000 fb50 	bl	800b9e8 <_free_r>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b34e:	f023 0303 	bic.w	r3, r3, #3
 800b352:	f1b8 0f02 	cmp.w	r8, #2
 800b356:	81a3      	strh	r3, [r4, #12]
 800b358:	d061      	beq.n	800b41e <setvbuf+0x14a>
 800b35a:	ab01      	add	r3, sp, #4
 800b35c:	466a      	mov	r2, sp
 800b35e:	4621      	mov	r1, r4
 800b360:	4638      	mov	r0, r7
 800b362:	f000 f9d1 	bl	800b708 <__swhatbuf_r>
 800b366:	89a3      	ldrh	r3, [r4, #12]
 800b368:	4318      	orrs	r0, r3
 800b36a:	81a0      	strh	r0, [r4, #12]
 800b36c:	bb2d      	cbnz	r5, 800b3ba <setvbuf+0xe6>
 800b36e:	9d00      	ldr	r5, [sp, #0]
 800b370:	4628      	mov	r0, r5
 800b372:	f000 ffe9 	bl	800c348 <malloc>
 800b376:	4606      	mov	r6, r0
 800b378:	2800      	cmp	r0, #0
 800b37a:	d152      	bne.n	800b422 <setvbuf+0x14e>
 800b37c:	f8dd 9000 	ldr.w	r9, [sp]
 800b380:	45a9      	cmp	r9, r5
 800b382:	d140      	bne.n	800b406 <setvbuf+0x132>
 800b384:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38c:	f043 0202 	orr.w	r2, r3, #2
 800b390:	81a2      	strh	r2, [r4, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	60a2      	str	r2, [r4, #8]
 800b396:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b39a:	6022      	str	r2, [r4, #0]
 800b39c:	6122      	str	r2, [r4, #16]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	6162      	str	r2, [r4, #20]
 800b3a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3a4:	07d6      	lsls	r6, r2, #31
 800b3a6:	d404      	bmi.n	800b3b2 <setvbuf+0xde>
 800b3a8:	0598      	lsls	r0, r3, #22
 800b3aa:	d402      	bmi.n	800b3b2 <setvbuf+0xde>
 800b3ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ae:	f000 fb19 	bl	800b9e4 <__retarget_lock_release_recursive>
 800b3b2:	4628      	mov	r0, r5
 800b3b4:	b003      	add	sp, #12
 800b3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3ba:	2e00      	cmp	r6, #0
 800b3bc:	d0d8      	beq.n	800b370 <setvbuf+0x9c>
 800b3be:	6a3b      	ldr	r3, [r7, #32]
 800b3c0:	b913      	cbnz	r3, 800b3c8 <setvbuf+0xf4>
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	f000 f96a 	bl	800b69c <__sinit>
 800b3c8:	f1b8 0f01 	cmp.w	r8, #1
 800b3cc:	bf08      	it	eq
 800b3ce:	89a3      	ldrheq	r3, [r4, #12]
 800b3d0:	6026      	str	r6, [r4, #0]
 800b3d2:	bf04      	itt	eq
 800b3d4:	f043 0301 	orreq.w	r3, r3, #1
 800b3d8:	81a3      	strheq	r3, [r4, #12]
 800b3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3de:	f013 0208 	ands.w	r2, r3, #8
 800b3e2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b3e6:	d01e      	beq.n	800b426 <setvbuf+0x152>
 800b3e8:	07d9      	lsls	r1, r3, #31
 800b3ea:	bf41      	itttt	mi
 800b3ec:	2200      	movmi	r2, #0
 800b3ee:	426d      	negmi	r5, r5
 800b3f0:	60a2      	strmi	r2, [r4, #8]
 800b3f2:	61a5      	strmi	r5, [r4, #24]
 800b3f4:	bf58      	it	pl
 800b3f6:	60a5      	strpl	r5, [r4, #8]
 800b3f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3fa:	07d2      	lsls	r2, r2, #31
 800b3fc:	d401      	bmi.n	800b402 <setvbuf+0x12e>
 800b3fe:	059b      	lsls	r3, r3, #22
 800b400:	d513      	bpl.n	800b42a <setvbuf+0x156>
 800b402:	2500      	movs	r5, #0
 800b404:	e7d5      	b.n	800b3b2 <setvbuf+0xde>
 800b406:	4648      	mov	r0, r9
 800b408:	f000 ff9e 	bl	800c348 <malloc>
 800b40c:	4606      	mov	r6, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	d0b8      	beq.n	800b384 <setvbuf+0xb0>
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b418:	81a3      	strh	r3, [r4, #12]
 800b41a:	464d      	mov	r5, r9
 800b41c:	e7cf      	b.n	800b3be <setvbuf+0xea>
 800b41e:	2500      	movs	r5, #0
 800b420:	e7b2      	b.n	800b388 <setvbuf+0xb4>
 800b422:	46a9      	mov	r9, r5
 800b424:	e7f5      	b.n	800b412 <setvbuf+0x13e>
 800b426:	60a2      	str	r2, [r4, #8]
 800b428:	e7e6      	b.n	800b3f8 <setvbuf+0x124>
 800b42a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b42c:	f000 fada 	bl	800b9e4 <__retarget_lock_release_recursive>
 800b430:	e7e7      	b.n	800b402 <setvbuf+0x12e>
 800b432:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b436:	e7bc      	b.n	800b3b2 <setvbuf+0xde>
 800b438:	20000044 	.word	0x20000044

0800b43c <sniprintf>:
 800b43c:	b40c      	push	{r2, r3}
 800b43e:	b530      	push	{r4, r5, lr}
 800b440:	4b17      	ldr	r3, [pc, #92]	@ (800b4a0 <sniprintf+0x64>)
 800b442:	1e0c      	subs	r4, r1, #0
 800b444:	681d      	ldr	r5, [r3, #0]
 800b446:	b09d      	sub	sp, #116	@ 0x74
 800b448:	da08      	bge.n	800b45c <sniprintf+0x20>
 800b44a:	238b      	movs	r3, #139	@ 0x8b
 800b44c:	602b      	str	r3, [r5, #0]
 800b44e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b452:	b01d      	add	sp, #116	@ 0x74
 800b454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b458:	b002      	add	sp, #8
 800b45a:	4770      	bx	lr
 800b45c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b460:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b464:	bf14      	ite	ne
 800b466:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b46a:	4623      	moveq	r3, r4
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	9307      	str	r3, [sp, #28]
 800b470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b474:	9002      	str	r0, [sp, #8]
 800b476:	9006      	str	r0, [sp, #24]
 800b478:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b47c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b47e:	ab21      	add	r3, sp, #132	@ 0x84
 800b480:	a902      	add	r1, sp, #8
 800b482:	4628      	mov	r0, r5
 800b484:	9301      	str	r3, [sp, #4]
 800b486:	f000 fb55 	bl	800bb34 <_svfiprintf_r>
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	bfbc      	itt	lt
 800b48e:	238b      	movlt	r3, #139	@ 0x8b
 800b490:	602b      	strlt	r3, [r5, #0]
 800b492:	2c00      	cmp	r4, #0
 800b494:	d0dd      	beq.n	800b452 <sniprintf+0x16>
 800b496:	9b02      	ldr	r3, [sp, #8]
 800b498:	2200      	movs	r2, #0
 800b49a:	701a      	strb	r2, [r3, #0]
 800b49c:	e7d9      	b.n	800b452 <sniprintf+0x16>
 800b49e:	bf00      	nop
 800b4a0:	20000044 	.word	0x20000044

0800b4a4 <siscanf>:
 800b4a4:	b40e      	push	{r1, r2, r3}
 800b4a6:	b530      	push	{r4, r5, lr}
 800b4a8:	b09c      	sub	sp, #112	@ 0x70
 800b4aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 800b4ac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800b4b0:	f854 5b04 	ldr.w	r5, [r4], #4
 800b4b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800b4b8:	9002      	str	r0, [sp, #8]
 800b4ba:	9006      	str	r0, [sp, #24]
 800b4bc:	f7f4 fe88 	bl	80001d0 <strlen>
 800b4c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f0 <siscanf+0x4c>)
 800b4c2:	9003      	str	r0, [sp, #12]
 800b4c4:	9007      	str	r0, [sp, #28]
 800b4c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b4c8:	480a      	ldr	r0, [pc, #40]	@ (800b4f4 <siscanf+0x50>)
 800b4ca:	9401      	str	r4, [sp, #4]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800b4d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b4d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b4da:	462a      	mov	r2, r5
 800b4dc:	4623      	mov	r3, r4
 800b4de:	a902      	add	r1, sp, #8
 800b4e0:	6800      	ldr	r0, [r0, #0]
 800b4e2:	f000 fc7b 	bl	800bddc <__ssvfiscanf_r>
 800b4e6:	b01c      	add	sp, #112	@ 0x70
 800b4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b4ec:	b003      	add	sp, #12
 800b4ee:	4770      	bx	lr
 800b4f0:	0800b51b 	.word	0x0800b51b
 800b4f4:	20000044 	.word	0x20000044

0800b4f8 <__sread>:
 800b4f8:	b510      	push	{r4, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b500:	f000 fa20 	bl	800b944 <_read_r>
 800b504:	2800      	cmp	r0, #0
 800b506:	bfab      	itete	ge
 800b508:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b50a:	89a3      	ldrhlt	r3, [r4, #12]
 800b50c:	181b      	addge	r3, r3, r0
 800b50e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b512:	bfac      	ite	ge
 800b514:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b516:	81a3      	strhlt	r3, [r4, #12]
 800b518:	bd10      	pop	{r4, pc}

0800b51a <__seofread>:
 800b51a:	2000      	movs	r0, #0
 800b51c:	4770      	bx	lr

0800b51e <__swrite>:
 800b51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	461f      	mov	r7, r3
 800b524:	898b      	ldrh	r3, [r1, #12]
 800b526:	05db      	lsls	r3, r3, #23
 800b528:	4605      	mov	r5, r0
 800b52a:	460c      	mov	r4, r1
 800b52c:	4616      	mov	r6, r2
 800b52e:	d505      	bpl.n	800b53c <__swrite+0x1e>
 800b530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b534:	2302      	movs	r3, #2
 800b536:	2200      	movs	r2, #0
 800b538:	f000 f9f2 	bl	800b920 <_lseek_r>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b546:	81a3      	strh	r3, [r4, #12]
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	4628      	mov	r0, r5
 800b54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b552:	f000 ba09 	b.w	800b968 <_write_r>

0800b556 <__sseek>:
 800b556:	b510      	push	{r4, lr}
 800b558:	460c      	mov	r4, r1
 800b55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55e:	f000 f9df 	bl	800b920 <_lseek_r>
 800b562:	1c43      	adds	r3, r0, #1
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	bf15      	itete	ne
 800b568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b56a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b56e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b572:	81a3      	strheq	r3, [r4, #12]
 800b574:	bf18      	it	ne
 800b576:	81a3      	strhne	r3, [r4, #12]
 800b578:	bd10      	pop	{r4, pc}

0800b57a <__sclose>:
 800b57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57e:	f000 b99d 	b.w	800b8bc <_close_r>
	...

0800b584 <std>:
 800b584:	2300      	movs	r3, #0
 800b586:	b510      	push	{r4, lr}
 800b588:	4604      	mov	r4, r0
 800b58a:	e9c0 3300 	strd	r3, r3, [r0]
 800b58e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b592:	6083      	str	r3, [r0, #8]
 800b594:	8181      	strh	r1, [r0, #12]
 800b596:	6643      	str	r3, [r0, #100]	@ 0x64
 800b598:	81c2      	strh	r2, [r0, #14]
 800b59a:	6183      	str	r3, [r0, #24]
 800b59c:	4619      	mov	r1, r3
 800b59e:	2208      	movs	r2, #8
 800b5a0:	305c      	adds	r0, #92	@ 0x5c
 800b5a2:	f000 f983 	bl	800b8ac <memset>
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <std+0x58>)
 800b5a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e0 <std+0x5c>)
 800b5ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e4 <std+0x60>)
 800b5b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b5e8 <std+0x64>)
 800b5b4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ec <std+0x68>)
 800b5b8:	6224      	str	r4, [r4, #32]
 800b5ba:	429c      	cmp	r4, r3
 800b5bc:	d006      	beq.n	800b5cc <std+0x48>
 800b5be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5c2:	4294      	cmp	r4, r2
 800b5c4:	d002      	beq.n	800b5cc <std+0x48>
 800b5c6:	33d0      	adds	r3, #208	@ 0xd0
 800b5c8:	429c      	cmp	r4, r3
 800b5ca:	d105      	bne.n	800b5d8 <std+0x54>
 800b5cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d4:	f000 ba04 	b.w	800b9e0 <__retarget_lock_init_recursive>
 800b5d8:	bd10      	pop	{r4, pc}
 800b5da:	bf00      	nop
 800b5dc:	0800b4f9 	.word	0x0800b4f9
 800b5e0:	0800b51f 	.word	0x0800b51f
 800b5e4:	0800b557 	.word	0x0800b557
 800b5e8:	0800b57b 	.word	0x0800b57b
 800b5ec:	200025d4 	.word	0x200025d4

0800b5f0 <stdio_exit_handler>:
 800b5f0:	4a02      	ldr	r2, [pc, #8]	@ (800b5fc <stdio_exit_handler+0xc>)
 800b5f2:	4903      	ldr	r1, [pc, #12]	@ (800b600 <stdio_exit_handler+0x10>)
 800b5f4:	4803      	ldr	r0, [pc, #12]	@ (800b604 <stdio_exit_handler+0x14>)
 800b5f6:	f000 b869 	b.w	800b6cc <_fwalk_sglue>
 800b5fa:	bf00      	nop
 800b5fc:	20000038 	.word	0x20000038
 800b600:	0800cbd1 	.word	0x0800cbd1
 800b604:	20000048 	.word	0x20000048

0800b608 <cleanup_stdio>:
 800b608:	6841      	ldr	r1, [r0, #4]
 800b60a:	4b0c      	ldr	r3, [pc, #48]	@ (800b63c <cleanup_stdio+0x34>)
 800b60c:	4299      	cmp	r1, r3
 800b60e:	b510      	push	{r4, lr}
 800b610:	4604      	mov	r4, r0
 800b612:	d001      	beq.n	800b618 <cleanup_stdio+0x10>
 800b614:	f001 fadc 	bl	800cbd0 <_fflush_r>
 800b618:	68a1      	ldr	r1, [r4, #8]
 800b61a:	4b09      	ldr	r3, [pc, #36]	@ (800b640 <cleanup_stdio+0x38>)
 800b61c:	4299      	cmp	r1, r3
 800b61e:	d002      	beq.n	800b626 <cleanup_stdio+0x1e>
 800b620:	4620      	mov	r0, r4
 800b622:	f001 fad5 	bl	800cbd0 <_fflush_r>
 800b626:	68e1      	ldr	r1, [r4, #12]
 800b628:	4b06      	ldr	r3, [pc, #24]	@ (800b644 <cleanup_stdio+0x3c>)
 800b62a:	4299      	cmp	r1, r3
 800b62c:	d004      	beq.n	800b638 <cleanup_stdio+0x30>
 800b62e:	4620      	mov	r0, r4
 800b630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b634:	f001 bacc 	b.w	800cbd0 <_fflush_r>
 800b638:	bd10      	pop	{r4, pc}
 800b63a:	bf00      	nop
 800b63c:	200025d4 	.word	0x200025d4
 800b640:	2000263c 	.word	0x2000263c
 800b644:	200026a4 	.word	0x200026a4

0800b648 <global_stdio_init.part.0>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	4b0b      	ldr	r3, [pc, #44]	@ (800b678 <global_stdio_init.part.0+0x30>)
 800b64c:	4c0b      	ldr	r4, [pc, #44]	@ (800b67c <global_stdio_init.part.0+0x34>)
 800b64e:	4a0c      	ldr	r2, [pc, #48]	@ (800b680 <global_stdio_init.part.0+0x38>)
 800b650:	601a      	str	r2, [r3, #0]
 800b652:	4620      	mov	r0, r4
 800b654:	2200      	movs	r2, #0
 800b656:	2104      	movs	r1, #4
 800b658:	f7ff ff94 	bl	800b584 <std>
 800b65c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b660:	2201      	movs	r2, #1
 800b662:	2109      	movs	r1, #9
 800b664:	f7ff ff8e 	bl	800b584 <std>
 800b668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b66c:	2202      	movs	r2, #2
 800b66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b672:	2112      	movs	r1, #18
 800b674:	f7ff bf86 	b.w	800b584 <std>
 800b678:	2000270c 	.word	0x2000270c
 800b67c:	200025d4 	.word	0x200025d4
 800b680:	0800b5f1 	.word	0x0800b5f1

0800b684 <__sfp_lock_acquire>:
 800b684:	4801      	ldr	r0, [pc, #4]	@ (800b68c <__sfp_lock_acquire+0x8>)
 800b686:	f000 b9ac 	b.w	800b9e2 <__retarget_lock_acquire_recursive>
 800b68a:	bf00      	nop
 800b68c:	20002715 	.word	0x20002715

0800b690 <__sfp_lock_release>:
 800b690:	4801      	ldr	r0, [pc, #4]	@ (800b698 <__sfp_lock_release+0x8>)
 800b692:	f000 b9a7 	b.w	800b9e4 <__retarget_lock_release_recursive>
 800b696:	bf00      	nop
 800b698:	20002715 	.word	0x20002715

0800b69c <__sinit>:
 800b69c:	b510      	push	{r4, lr}
 800b69e:	4604      	mov	r4, r0
 800b6a0:	f7ff fff0 	bl	800b684 <__sfp_lock_acquire>
 800b6a4:	6a23      	ldr	r3, [r4, #32]
 800b6a6:	b11b      	cbz	r3, 800b6b0 <__sinit+0x14>
 800b6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6ac:	f7ff bff0 	b.w	800b690 <__sfp_lock_release>
 800b6b0:	4b04      	ldr	r3, [pc, #16]	@ (800b6c4 <__sinit+0x28>)
 800b6b2:	6223      	str	r3, [r4, #32]
 800b6b4:	4b04      	ldr	r3, [pc, #16]	@ (800b6c8 <__sinit+0x2c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f5      	bne.n	800b6a8 <__sinit+0xc>
 800b6bc:	f7ff ffc4 	bl	800b648 <global_stdio_init.part.0>
 800b6c0:	e7f2      	b.n	800b6a8 <__sinit+0xc>
 800b6c2:	bf00      	nop
 800b6c4:	0800b609 	.word	0x0800b609
 800b6c8:	2000270c 	.word	0x2000270c

0800b6cc <_fwalk_sglue>:
 800b6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	4688      	mov	r8, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	2600      	movs	r6, #0
 800b6d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6dc:	f1b9 0901 	subs.w	r9, r9, #1
 800b6e0:	d505      	bpl.n	800b6ee <_fwalk_sglue+0x22>
 800b6e2:	6824      	ldr	r4, [r4, #0]
 800b6e4:	2c00      	cmp	r4, #0
 800b6e6:	d1f7      	bne.n	800b6d8 <_fwalk_sglue+0xc>
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6ee:	89ab      	ldrh	r3, [r5, #12]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d907      	bls.n	800b704 <_fwalk_sglue+0x38>
 800b6f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	d003      	beq.n	800b704 <_fwalk_sglue+0x38>
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	4638      	mov	r0, r7
 800b700:	47c0      	blx	r8
 800b702:	4306      	orrs	r6, r0
 800b704:	3568      	adds	r5, #104	@ 0x68
 800b706:	e7e9      	b.n	800b6dc <_fwalk_sglue+0x10>

0800b708 <__swhatbuf_r>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	460c      	mov	r4, r1
 800b70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b710:	2900      	cmp	r1, #0
 800b712:	b096      	sub	sp, #88	@ 0x58
 800b714:	4615      	mov	r5, r2
 800b716:	461e      	mov	r6, r3
 800b718:	da0d      	bge.n	800b736 <__swhatbuf_r+0x2e>
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b720:	f04f 0100 	mov.w	r1, #0
 800b724:	bf14      	ite	ne
 800b726:	2340      	movne	r3, #64	@ 0x40
 800b728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b72c:	2000      	movs	r0, #0
 800b72e:	6031      	str	r1, [r6, #0]
 800b730:	602b      	str	r3, [r5, #0]
 800b732:	b016      	add	sp, #88	@ 0x58
 800b734:	bd70      	pop	{r4, r5, r6, pc}
 800b736:	466a      	mov	r2, sp
 800b738:	f000 f8d0 	bl	800b8dc <_fstat_r>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	dbec      	blt.n	800b71a <__swhatbuf_r+0x12>
 800b740:	9901      	ldr	r1, [sp, #4]
 800b742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b74a:	4259      	negs	r1, r3
 800b74c:	4159      	adcs	r1, r3
 800b74e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b752:	e7eb      	b.n	800b72c <__swhatbuf_r+0x24>

0800b754 <__smakebuf_r>:
 800b754:	898b      	ldrh	r3, [r1, #12]
 800b756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b758:	079d      	lsls	r5, r3, #30
 800b75a:	4606      	mov	r6, r0
 800b75c:	460c      	mov	r4, r1
 800b75e:	d507      	bpl.n	800b770 <__smakebuf_r+0x1c>
 800b760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b764:	6023      	str	r3, [r4, #0]
 800b766:	6123      	str	r3, [r4, #16]
 800b768:	2301      	movs	r3, #1
 800b76a:	6163      	str	r3, [r4, #20]
 800b76c:	b003      	add	sp, #12
 800b76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b770:	ab01      	add	r3, sp, #4
 800b772:	466a      	mov	r2, sp
 800b774:	f7ff ffc8 	bl	800b708 <__swhatbuf_r>
 800b778:	9f00      	ldr	r7, [sp, #0]
 800b77a:	4605      	mov	r5, r0
 800b77c:	4639      	mov	r1, r7
 800b77e:	4630      	mov	r0, r6
 800b780:	f000 fe0c 	bl	800c39c <_malloc_r>
 800b784:	b948      	cbnz	r0, 800b79a <__smakebuf_r+0x46>
 800b786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78a:	059a      	lsls	r2, r3, #22
 800b78c:	d4ee      	bmi.n	800b76c <__smakebuf_r+0x18>
 800b78e:	f023 0303 	bic.w	r3, r3, #3
 800b792:	f043 0302 	orr.w	r3, r3, #2
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	e7e2      	b.n	800b760 <__smakebuf_r+0xc>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	6020      	str	r0, [r4, #0]
 800b79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7a2:	81a3      	strh	r3, [r4, #12]
 800b7a4:	9b01      	ldr	r3, [sp, #4]
 800b7a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7aa:	b15b      	cbz	r3, 800b7c4 <__smakebuf_r+0x70>
 800b7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	f000 f8a5 	bl	800b900 <_isatty_r>
 800b7b6:	b128      	cbz	r0, 800b7c4 <__smakebuf_r+0x70>
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	f023 0303 	bic.w	r3, r3, #3
 800b7be:	f043 0301 	orr.w	r3, r3, #1
 800b7c2:	81a3      	strh	r3, [r4, #12]
 800b7c4:	89a3      	ldrh	r3, [r4, #12]
 800b7c6:	431d      	orrs	r5, r3
 800b7c8:	81a5      	strh	r5, [r4, #12]
 800b7ca:	e7cf      	b.n	800b76c <__smakebuf_r+0x18>

0800b7cc <iprintf>:
 800b7cc:	b40f      	push	{r0, r1, r2, r3}
 800b7ce:	b507      	push	{r0, r1, r2, lr}
 800b7d0:	4906      	ldr	r1, [pc, #24]	@ (800b7ec <iprintf+0x20>)
 800b7d2:	ab04      	add	r3, sp, #16
 800b7d4:	6808      	ldr	r0, [r1, #0]
 800b7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7da:	6881      	ldr	r1, [r0, #8]
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	f000 fc9b 	bl	800c118 <_vfiprintf_r>
 800b7e2:	b003      	add	sp, #12
 800b7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e8:	b004      	add	sp, #16
 800b7ea:	4770      	bx	lr
 800b7ec:	20000044 	.word	0x20000044

0800b7f0 <_puts_r>:
 800b7f0:	6a03      	ldr	r3, [r0, #32]
 800b7f2:	b570      	push	{r4, r5, r6, lr}
 800b7f4:	6884      	ldr	r4, [r0, #8]
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	460e      	mov	r6, r1
 800b7fa:	b90b      	cbnz	r3, 800b800 <_puts_r+0x10>
 800b7fc:	f7ff ff4e 	bl	800b69c <__sinit>
 800b800:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b802:	07db      	lsls	r3, r3, #31
 800b804:	d405      	bmi.n	800b812 <_puts_r+0x22>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	0598      	lsls	r0, r3, #22
 800b80a:	d402      	bmi.n	800b812 <_puts_r+0x22>
 800b80c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b80e:	f000 f8e8 	bl	800b9e2 <__retarget_lock_acquire_recursive>
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	0719      	lsls	r1, r3, #28
 800b816:	d502      	bpl.n	800b81e <_puts_r+0x2e>
 800b818:	6923      	ldr	r3, [r4, #16]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d135      	bne.n	800b88a <_puts_r+0x9a>
 800b81e:	4621      	mov	r1, r4
 800b820:	4628      	mov	r0, r5
 800b822:	f001 fb9b 	bl	800cf5c <__swsetup_r>
 800b826:	b380      	cbz	r0, 800b88a <_puts_r+0x9a>
 800b828:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b82c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b82e:	07da      	lsls	r2, r3, #31
 800b830:	d405      	bmi.n	800b83e <_puts_r+0x4e>
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	059b      	lsls	r3, r3, #22
 800b836:	d402      	bmi.n	800b83e <_puts_r+0x4e>
 800b838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b83a:	f000 f8d3 	bl	800b9e4 <__retarget_lock_release_recursive>
 800b83e:	4628      	mov	r0, r5
 800b840:	bd70      	pop	{r4, r5, r6, pc}
 800b842:	2b00      	cmp	r3, #0
 800b844:	da04      	bge.n	800b850 <_puts_r+0x60>
 800b846:	69a2      	ldr	r2, [r4, #24]
 800b848:	429a      	cmp	r2, r3
 800b84a:	dc17      	bgt.n	800b87c <_puts_r+0x8c>
 800b84c:	290a      	cmp	r1, #10
 800b84e:	d015      	beq.n	800b87c <_puts_r+0x8c>
 800b850:	6823      	ldr	r3, [r4, #0]
 800b852:	1c5a      	adds	r2, r3, #1
 800b854:	6022      	str	r2, [r4, #0]
 800b856:	7019      	strb	r1, [r3, #0]
 800b858:	68a3      	ldr	r3, [r4, #8]
 800b85a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b85e:	3b01      	subs	r3, #1
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	2900      	cmp	r1, #0
 800b864:	d1ed      	bne.n	800b842 <_puts_r+0x52>
 800b866:	2b00      	cmp	r3, #0
 800b868:	da11      	bge.n	800b88e <_puts_r+0x9e>
 800b86a:	4622      	mov	r2, r4
 800b86c:	210a      	movs	r1, #10
 800b86e:	4628      	mov	r0, r5
 800b870:	f001 fb36 	bl	800cee0 <__swbuf_r>
 800b874:	3001      	adds	r0, #1
 800b876:	d0d7      	beq.n	800b828 <_puts_r+0x38>
 800b878:	250a      	movs	r5, #10
 800b87a:	e7d7      	b.n	800b82c <_puts_r+0x3c>
 800b87c:	4622      	mov	r2, r4
 800b87e:	4628      	mov	r0, r5
 800b880:	f001 fb2e 	bl	800cee0 <__swbuf_r>
 800b884:	3001      	adds	r0, #1
 800b886:	d1e7      	bne.n	800b858 <_puts_r+0x68>
 800b888:	e7ce      	b.n	800b828 <_puts_r+0x38>
 800b88a:	3e01      	subs	r6, #1
 800b88c:	e7e4      	b.n	800b858 <_puts_r+0x68>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	1c5a      	adds	r2, r3, #1
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	220a      	movs	r2, #10
 800b896:	701a      	strb	r2, [r3, #0]
 800b898:	e7ee      	b.n	800b878 <_puts_r+0x88>
	...

0800b89c <puts>:
 800b89c:	4b02      	ldr	r3, [pc, #8]	@ (800b8a8 <puts+0xc>)
 800b89e:	4601      	mov	r1, r0
 800b8a0:	6818      	ldr	r0, [r3, #0]
 800b8a2:	f7ff bfa5 	b.w	800b7f0 <_puts_r>
 800b8a6:	bf00      	nop
 800b8a8:	20000044 	.word	0x20000044

0800b8ac <memset>:
 800b8ac:	4402      	add	r2, r0
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d100      	bne.n	800b8b6 <memset+0xa>
 800b8b4:	4770      	bx	lr
 800b8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b8ba:	e7f9      	b.n	800b8b0 <memset+0x4>

0800b8bc <_close_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d06      	ldr	r5, [pc, #24]	@ (800b8d8 <_close_r+0x1c>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	602b      	str	r3, [r5, #0]
 800b8c8:	f7f5 fd59 	bl	800137e <_close>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_close_r+0x1a>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_close_r+0x1a>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20002710 	.word	0x20002710

0800b8dc <_fstat_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d07      	ldr	r5, [pc, #28]	@ (800b8fc <_fstat_r+0x20>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	602b      	str	r3, [r5, #0]
 800b8ea:	f7f5 fd54 	bl	8001396 <_fstat>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d102      	bne.n	800b8f8 <_fstat_r+0x1c>
 800b8f2:	682b      	ldr	r3, [r5, #0]
 800b8f4:	b103      	cbz	r3, 800b8f8 <_fstat_r+0x1c>
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	bd38      	pop	{r3, r4, r5, pc}
 800b8fa:	bf00      	nop
 800b8fc:	20002710 	.word	0x20002710

0800b900 <_isatty_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d06      	ldr	r5, [pc, #24]	@ (800b91c <_isatty_r+0x1c>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	602b      	str	r3, [r5, #0]
 800b90c:	f7f5 fd53 	bl	80013b6 <_isatty>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_isatty_r+0x1a>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_isatty_r+0x1a>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20002710 	.word	0x20002710

0800b920 <_lseek_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d07      	ldr	r5, [pc, #28]	@ (800b940 <_lseek_r+0x20>)
 800b924:	4604      	mov	r4, r0
 800b926:	4608      	mov	r0, r1
 800b928:	4611      	mov	r1, r2
 800b92a:	2200      	movs	r2, #0
 800b92c:	602a      	str	r2, [r5, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	f7f5 fd4c 	bl	80013cc <_lseek>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_lseek_r+0x1e>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_lseek_r+0x1e>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	20002710 	.word	0x20002710

0800b944 <_read_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4d07      	ldr	r5, [pc, #28]	@ (800b964 <_read_r+0x20>)
 800b948:	4604      	mov	r4, r0
 800b94a:	4608      	mov	r0, r1
 800b94c:	4611      	mov	r1, r2
 800b94e:	2200      	movs	r2, #0
 800b950:	602a      	str	r2, [r5, #0]
 800b952:	461a      	mov	r2, r3
 800b954:	f7f5 fcf6 	bl	8001344 <_read>
 800b958:	1c43      	adds	r3, r0, #1
 800b95a:	d102      	bne.n	800b962 <_read_r+0x1e>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	b103      	cbz	r3, 800b962 <_read_r+0x1e>
 800b960:	6023      	str	r3, [r4, #0]
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	20002710 	.word	0x20002710

0800b968 <_write_r>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	4d07      	ldr	r5, [pc, #28]	@ (800b988 <_write_r+0x20>)
 800b96c:	4604      	mov	r4, r0
 800b96e:	4608      	mov	r0, r1
 800b970:	4611      	mov	r1, r2
 800b972:	2200      	movs	r2, #0
 800b974:	602a      	str	r2, [r5, #0]
 800b976:	461a      	mov	r2, r3
 800b978:	f7f5 faca 	bl	8000f10 <_write>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_write_r+0x1e>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_write_r+0x1e>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20002710 	.word	0x20002710

0800b98c <__errno>:
 800b98c:	4b01      	ldr	r3, [pc, #4]	@ (800b994 <__errno+0x8>)
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20000044 	.word	0x20000044

0800b998 <__libc_init_array>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	4d0d      	ldr	r5, [pc, #52]	@ (800b9d0 <__libc_init_array+0x38>)
 800b99c:	4c0d      	ldr	r4, [pc, #52]	@ (800b9d4 <__libc_init_array+0x3c>)
 800b99e:	1b64      	subs	r4, r4, r5
 800b9a0:	10a4      	asrs	r4, r4, #2
 800b9a2:	2600      	movs	r6, #0
 800b9a4:	42a6      	cmp	r6, r4
 800b9a6:	d109      	bne.n	800b9bc <__libc_init_array+0x24>
 800b9a8:	4d0b      	ldr	r5, [pc, #44]	@ (800b9d8 <__libc_init_array+0x40>)
 800b9aa:	4c0c      	ldr	r4, [pc, #48]	@ (800b9dc <__libc_init_array+0x44>)
 800b9ac:	f001 fb6c 	bl	800d088 <_init>
 800b9b0:	1b64      	subs	r4, r4, r5
 800b9b2:	10a4      	asrs	r4, r4, #2
 800b9b4:	2600      	movs	r6, #0
 800b9b6:	42a6      	cmp	r6, r4
 800b9b8:	d105      	bne.n	800b9c6 <__libc_init_array+0x2e>
 800b9ba:	bd70      	pop	{r4, r5, r6, pc}
 800b9bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c0:	4798      	blx	r3
 800b9c2:	3601      	adds	r6, #1
 800b9c4:	e7ee      	b.n	800b9a4 <__libc_init_array+0xc>
 800b9c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ca:	4798      	blx	r3
 800b9cc:	3601      	adds	r6, #1
 800b9ce:	e7f2      	b.n	800b9b6 <__libc_init_array+0x1e>
 800b9d0:	0800d4e0 	.word	0x0800d4e0
 800b9d4:	0800d4e0 	.word	0x0800d4e0
 800b9d8:	0800d4e0 	.word	0x0800d4e0
 800b9dc:	0800d4e4 	.word	0x0800d4e4

0800b9e0 <__retarget_lock_init_recursive>:
 800b9e0:	4770      	bx	lr

0800b9e2 <__retarget_lock_acquire_recursive>:
 800b9e2:	4770      	bx	lr

0800b9e4 <__retarget_lock_release_recursive>:
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <_free_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	2900      	cmp	r1, #0
 800b9ee:	d041      	beq.n	800ba74 <_free_r+0x8c>
 800b9f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f4:	1f0c      	subs	r4, r1, #4
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	bfb8      	it	lt
 800b9fa:	18e4      	addlt	r4, r4, r3
 800b9fc:	f001 f910 	bl	800cc20 <__malloc_lock>
 800ba00:	4a1d      	ldr	r2, [pc, #116]	@ (800ba78 <_free_r+0x90>)
 800ba02:	6813      	ldr	r3, [r2, #0]
 800ba04:	b933      	cbnz	r3, 800ba14 <_free_r+0x2c>
 800ba06:	6063      	str	r3, [r4, #4]
 800ba08:	6014      	str	r4, [r2, #0]
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba10:	f001 b90c 	b.w	800cc2c <__malloc_unlock>
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	d908      	bls.n	800ba2a <_free_r+0x42>
 800ba18:	6820      	ldr	r0, [r4, #0]
 800ba1a:	1821      	adds	r1, r4, r0
 800ba1c:	428b      	cmp	r3, r1
 800ba1e:	bf01      	itttt	eq
 800ba20:	6819      	ldreq	r1, [r3, #0]
 800ba22:	685b      	ldreq	r3, [r3, #4]
 800ba24:	1809      	addeq	r1, r1, r0
 800ba26:	6021      	streq	r1, [r4, #0]
 800ba28:	e7ed      	b.n	800ba06 <_free_r+0x1e>
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	b10b      	cbz	r3, 800ba34 <_free_r+0x4c>
 800ba30:	42a3      	cmp	r3, r4
 800ba32:	d9fa      	bls.n	800ba2a <_free_r+0x42>
 800ba34:	6811      	ldr	r1, [r2, #0]
 800ba36:	1850      	adds	r0, r2, r1
 800ba38:	42a0      	cmp	r0, r4
 800ba3a:	d10b      	bne.n	800ba54 <_free_r+0x6c>
 800ba3c:	6820      	ldr	r0, [r4, #0]
 800ba3e:	4401      	add	r1, r0
 800ba40:	1850      	adds	r0, r2, r1
 800ba42:	4283      	cmp	r3, r0
 800ba44:	6011      	str	r1, [r2, #0]
 800ba46:	d1e0      	bne.n	800ba0a <_free_r+0x22>
 800ba48:	6818      	ldr	r0, [r3, #0]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	6053      	str	r3, [r2, #4]
 800ba4e:	4408      	add	r0, r1
 800ba50:	6010      	str	r0, [r2, #0]
 800ba52:	e7da      	b.n	800ba0a <_free_r+0x22>
 800ba54:	d902      	bls.n	800ba5c <_free_r+0x74>
 800ba56:	230c      	movs	r3, #12
 800ba58:	602b      	str	r3, [r5, #0]
 800ba5a:	e7d6      	b.n	800ba0a <_free_r+0x22>
 800ba5c:	6820      	ldr	r0, [r4, #0]
 800ba5e:	1821      	adds	r1, r4, r0
 800ba60:	428b      	cmp	r3, r1
 800ba62:	bf04      	itt	eq
 800ba64:	6819      	ldreq	r1, [r3, #0]
 800ba66:	685b      	ldreq	r3, [r3, #4]
 800ba68:	6063      	str	r3, [r4, #4]
 800ba6a:	bf04      	itt	eq
 800ba6c:	1809      	addeq	r1, r1, r0
 800ba6e:	6021      	streq	r1, [r4, #0]
 800ba70:	6054      	str	r4, [r2, #4]
 800ba72:	e7ca      	b.n	800ba0a <_free_r+0x22>
 800ba74:	bd38      	pop	{r3, r4, r5, pc}
 800ba76:	bf00      	nop
 800ba78:	2000271c 	.word	0x2000271c

0800ba7c <__ssputs_r>:
 800ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	688e      	ldr	r6, [r1, #8]
 800ba82:	461f      	mov	r7, r3
 800ba84:	42be      	cmp	r6, r7
 800ba86:	680b      	ldr	r3, [r1, #0]
 800ba88:	4682      	mov	sl, r0
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	4690      	mov	r8, r2
 800ba8e:	d82d      	bhi.n	800baec <__ssputs_r+0x70>
 800ba90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba98:	d026      	beq.n	800bae8 <__ssputs_r+0x6c>
 800ba9a:	6965      	ldr	r5, [r4, #20]
 800ba9c:	6909      	ldr	r1, [r1, #16]
 800ba9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baa2:	eba3 0901 	sub.w	r9, r3, r1
 800baa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baaa:	1c7b      	adds	r3, r7, #1
 800baac:	444b      	add	r3, r9
 800baae:	106d      	asrs	r5, r5, #1
 800bab0:	429d      	cmp	r5, r3
 800bab2:	bf38      	it	cc
 800bab4:	461d      	movcc	r5, r3
 800bab6:	0553      	lsls	r3, r2, #21
 800bab8:	d527      	bpl.n	800bb0a <__ssputs_r+0x8e>
 800baba:	4629      	mov	r1, r5
 800babc:	f000 fc6e 	bl	800c39c <_malloc_r>
 800bac0:	4606      	mov	r6, r0
 800bac2:	b360      	cbz	r0, 800bb1e <__ssputs_r+0xa2>
 800bac4:	6921      	ldr	r1, [r4, #16]
 800bac6:	464a      	mov	r2, r9
 800bac8:	f001 fac8 	bl	800d05c <memcpy>
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bad6:	81a3      	strh	r3, [r4, #12]
 800bad8:	6126      	str	r6, [r4, #16]
 800bada:	6165      	str	r5, [r4, #20]
 800badc:	444e      	add	r6, r9
 800bade:	eba5 0509 	sub.w	r5, r5, r9
 800bae2:	6026      	str	r6, [r4, #0]
 800bae4:	60a5      	str	r5, [r4, #8]
 800bae6:	463e      	mov	r6, r7
 800bae8:	42be      	cmp	r6, r7
 800baea:	d900      	bls.n	800baee <__ssputs_r+0x72>
 800baec:	463e      	mov	r6, r7
 800baee:	6820      	ldr	r0, [r4, #0]
 800baf0:	4632      	mov	r2, r6
 800baf2:	4641      	mov	r1, r8
 800baf4:	f001 fa88 	bl	800d008 <memmove>
 800baf8:	68a3      	ldr	r3, [r4, #8]
 800bafa:	1b9b      	subs	r3, r3, r6
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	4433      	add	r3, r6
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	2000      	movs	r0, #0
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	f001 f8ce 	bl	800ccac <_realloc_r>
 800bb10:	4606      	mov	r6, r0
 800bb12:	2800      	cmp	r0, #0
 800bb14:	d1e0      	bne.n	800bad8 <__ssputs_r+0x5c>
 800bb16:	6921      	ldr	r1, [r4, #16]
 800bb18:	4650      	mov	r0, sl
 800bb1a:	f7ff ff65 	bl	800b9e8 <_free_r>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	f8ca 3000 	str.w	r3, [sl]
 800bb24:	89a3      	ldrh	r3, [r4, #12]
 800bb26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb30:	e7e9      	b.n	800bb06 <__ssputs_r+0x8a>
	...

0800bb34 <_svfiprintf_r>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	4698      	mov	r8, r3
 800bb3a:	898b      	ldrh	r3, [r1, #12]
 800bb3c:	061b      	lsls	r3, r3, #24
 800bb3e:	b09d      	sub	sp, #116	@ 0x74
 800bb40:	4607      	mov	r7, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	d510      	bpl.n	800bb6a <_svfiprintf_r+0x36>
 800bb48:	690b      	ldr	r3, [r1, #16]
 800bb4a:	b973      	cbnz	r3, 800bb6a <_svfiprintf_r+0x36>
 800bb4c:	2140      	movs	r1, #64	@ 0x40
 800bb4e:	f000 fc25 	bl	800c39c <_malloc_r>
 800bb52:	6028      	str	r0, [r5, #0]
 800bb54:	6128      	str	r0, [r5, #16]
 800bb56:	b930      	cbnz	r0, 800bb66 <_svfiprintf_r+0x32>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb60:	b01d      	add	sp, #116	@ 0x74
 800bb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb66:	2340      	movs	r3, #64	@ 0x40
 800bb68:	616b      	str	r3, [r5, #20]
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb6e:	2320      	movs	r3, #32
 800bb70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb74:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb78:	2330      	movs	r3, #48	@ 0x30
 800bb7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd18 <_svfiprintf_r+0x1e4>
 800bb7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb82:	f04f 0901 	mov.w	r9, #1
 800bb86:	4623      	mov	r3, r4
 800bb88:	469a      	mov	sl, r3
 800bb8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8e:	b10a      	cbz	r2, 800bb94 <_svfiprintf_r+0x60>
 800bb90:	2a25      	cmp	r2, #37	@ 0x25
 800bb92:	d1f9      	bne.n	800bb88 <_svfiprintf_r+0x54>
 800bb94:	ebba 0b04 	subs.w	fp, sl, r4
 800bb98:	d00b      	beq.n	800bbb2 <_svfiprintf_r+0x7e>
 800bb9a:	465b      	mov	r3, fp
 800bb9c:	4622      	mov	r2, r4
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4638      	mov	r0, r7
 800bba2:	f7ff ff6b 	bl	800ba7c <__ssputs_r>
 800bba6:	3001      	adds	r0, #1
 800bba8:	f000 80a7 	beq.w	800bcfa <_svfiprintf_r+0x1c6>
 800bbac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbae:	445a      	add	r2, fp
 800bbb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 809f 	beq.w	800bcfa <_svfiprintf_r+0x1c6>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc6:	f10a 0a01 	add.w	sl, sl, #1
 800bbca:	9304      	str	r3, [sp, #16]
 800bbcc:	9307      	str	r3, [sp, #28]
 800bbce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbd4:	4654      	mov	r4, sl
 800bbd6:	2205      	movs	r2, #5
 800bbd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbdc:	484e      	ldr	r0, [pc, #312]	@ (800bd18 <_svfiprintf_r+0x1e4>)
 800bbde:	f7f4 fb0f 	bl	8000200 <memchr>
 800bbe2:	9a04      	ldr	r2, [sp, #16]
 800bbe4:	b9d8      	cbnz	r0, 800bc1e <_svfiprintf_r+0xea>
 800bbe6:	06d0      	lsls	r0, r2, #27
 800bbe8:	bf44      	itt	mi
 800bbea:	2320      	movmi	r3, #32
 800bbec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf0:	0711      	lsls	r1, r2, #28
 800bbf2:	bf44      	itt	mi
 800bbf4:	232b      	movmi	r3, #43	@ 0x2b
 800bbf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbfa:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc00:	d015      	beq.n	800bc2e <_svfiprintf_r+0xfa>
 800bc02:	9a07      	ldr	r2, [sp, #28]
 800bc04:	4654      	mov	r4, sl
 800bc06:	2000      	movs	r0, #0
 800bc08:	f04f 0c0a 	mov.w	ip, #10
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc12:	3b30      	subs	r3, #48	@ 0x30
 800bc14:	2b09      	cmp	r3, #9
 800bc16:	d94b      	bls.n	800bcb0 <_svfiprintf_r+0x17c>
 800bc18:	b1b0      	cbz	r0, 800bc48 <_svfiprintf_r+0x114>
 800bc1a:	9207      	str	r2, [sp, #28]
 800bc1c:	e014      	b.n	800bc48 <_svfiprintf_r+0x114>
 800bc1e:	eba0 0308 	sub.w	r3, r0, r8
 800bc22:	fa09 f303 	lsl.w	r3, r9, r3
 800bc26:	4313      	orrs	r3, r2
 800bc28:	9304      	str	r3, [sp, #16]
 800bc2a:	46a2      	mov	sl, r4
 800bc2c:	e7d2      	b.n	800bbd4 <_svfiprintf_r+0xa0>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	1d19      	adds	r1, r3, #4
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	9103      	str	r1, [sp, #12]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	bfbb      	ittet	lt
 800bc3a:	425b      	neglt	r3, r3
 800bc3c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc40:	9307      	strge	r3, [sp, #28]
 800bc42:	9307      	strlt	r3, [sp, #28]
 800bc44:	bfb8      	it	lt
 800bc46:	9204      	strlt	r2, [sp, #16]
 800bc48:	7823      	ldrb	r3, [r4, #0]
 800bc4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc4c:	d10a      	bne.n	800bc64 <_svfiprintf_r+0x130>
 800bc4e:	7863      	ldrb	r3, [r4, #1]
 800bc50:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc52:	d132      	bne.n	800bcba <_svfiprintf_r+0x186>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	1d1a      	adds	r2, r3, #4
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	9203      	str	r2, [sp, #12]
 800bc5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc60:	3402      	adds	r4, #2
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd28 <_svfiprintf_r+0x1f4>
 800bc68:	7821      	ldrb	r1, [r4, #0]
 800bc6a:	2203      	movs	r2, #3
 800bc6c:	4650      	mov	r0, sl
 800bc6e:	f7f4 fac7 	bl	8000200 <memchr>
 800bc72:	b138      	cbz	r0, 800bc84 <_svfiprintf_r+0x150>
 800bc74:	9b04      	ldr	r3, [sp, #16]
 800bc76:	eba0 000a 	sub.w	r0, r0, sl
 800bc7a:	2240      	movs	r2, #64	@ 0x40
 800bc7c:	4082      	lsls	r2, r0
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	3401      	adds	r4, #1
 800bc82:	9304      	str	r3, [sp, #16]
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	4824      	ldr	r0, [pc, #144]	@ (800bd1c <_svfiprintf_r+0x1e8>)
 800bc8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc8e:	2206      	movs	r2, #6
 800bc90:	f7f4 fab6 	bl	8000200 <memchr>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	d036      	beq.n	800bd06 <_svfiprintf_r+0x1d2>
 800bc98:	4b21      	ldr	r3, [pc, #132]	@ (800bd20 <_svfiprintf_r+0x1ec>)
 800bc9a:	bb1b      	cbnz	r3, 800bce4 <_svfiprintf_r+0x1b0>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	3307      	adds	r3, #7
 800bca0:	f023 0307 	bic.w	r3, r3, #7
 800bca4:	3308      	adds	r3, #8
 800bca6:	9303      	str	r3, [sp, #12]
 800bca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcaa:	4433      	add	r3, r6
 800bcac:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcae:	e76a      	b.n	800bb86 <_svfiprintf_r+0x52>
 800bcb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcb4:	460c      	mov	r4, r1
 800bcb6:	2001      	movs	r0, #1
 800bcb8:	e7a8      	b.n	800bc0c <_svfiprintf_r+0xd8>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	3401      	adds	r4, #1
 800bcbe:	9305      	str	r3, [sp, #20]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	f04f 0c0a 	mov.w	ip, #10
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bccc:	3a30      	subs	r2, #48	@ 0x30
 800bcce:	2a09      	cmp	r2, #9
 800bcd0:	d903      	bls.n	800bcda <_svfiprintf_r+0x1a6>
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d0c6      	beq.n	800bc64 <_svfiprintf_r+0x130>
 800bcd6:	9105      	str	r1, [sp, #20]
 800bcd8:	e7c4      	b.n	800bc64 <_svfiprintf_r+0x130>
 800bcda:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcde:	4604      	mov	r4, r0
 800bce0:	2301      	movs	r3, #1
 800bce2:	e7f0      	b.n	800bcc6 <_svfiprintf_r+0x192>
 800bce4:	ab03      	add	r3, sp, #12
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	462a      	mov	r2, r5
 800bcea:	4b0e      	ldr	r3, [pc, #56]	@ (800bd24 <_svfiprintf_r+0x1f0>)
 800bcec:	a904      	add	r1, sp, #16
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f3af 8000 	nop.w
 800bcf4:	1c42      	adds	r2, r0, #1
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	d1d6      	bne.n	800bca8 <_svfiprintf_r+0x174>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	065b      	lsls	r3, r3, #25
 800bcfe:	f53f af2d 	bmi.w	800bb5c <_svfiprintf_r+0x28>
 800bd02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd04:	e72c      	b.n	800bb60 <_svfiprintf_r+0x2c>
 800bd06:	ab03      	add	r3, sp, #12
 800bd08:	9300      	str	r3, [sp, #0]
 800bd0a:	462a      	mov	r2, r5
 800bd0c:	4b05      	ldr	r3, [pc, #20]	@ (800bd24 <_svfiprintf_r+0x1f0>)
 800bd0e:	a904      	add	r1, sp, #16
 800bd10:	4638      	mov	r0, r7
 800bd12:	f000 fc31 	bl	800c578 <_printf_i>
 800bd16:	e7ed      	b.n	800bcf4 <_svfiprintf_r+0x1c0>
 800bd18:	0800d388 	.word	0x0800d388
 800bd1c:	0800d392 	.word	0x0800d392
 800bd20:	00000000 	.word	0x00000000
 800bd24:	0800ba7d 	.word	0x0800ba7d
 800bd28:	0800d38e 	.word	0x0800d38e

0800bd2c <_sungetc_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	1c4b      	adds	r3, r1, #1
 800bd30:	4614      	mov	r4, r2
 800bd32:	d103      	bne.n	800bd3c <_sungetc_r+0x10>
 800bd34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800bd38:	4628      	mov	r0, r5
 800bd3a:	bd38      	pop	{r3, r4, r5, pc}
 800bd3c:	8993      	ldrh	r3, [r2, #12]
 800bd3e:	f023 0320 	bic.w	r3, r3, #32
 800bd42:	8193      	strh	r3, [r2, #12]
 800bd44:	6853      	ldr	r3, [r2, #4]
 800bd46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bd48:	b2cd      	uxtb	r5, r1
 800bd4a:	b18a      	cbz	r2, 800bd70 <_sungetc_r+0x44>
 800bd4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	dd08      	ble.n	800bd64 <_sungetc_r+0x38>
 800bd52:	6823      	ldr	r3, [r4, #0]
 800bd54:	1e5a      	subs	r2, r3, #1
 800bd56:	6022      	str	r2, [r4, #0]
 800bd58:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd5c:	6863      	ldr	r3, [r4, #4]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	6063      	str	r3, [r4, #4]
 800bd62:	e7e9      	b.n	800bd38 <_sungetc_r+0xc>
 800bd64:	4621      	mov	r1, r4
 800bd66:	f000 ff67 	bl	800cc38 <__submore>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	d0f1      	beq.n	800bd52 <_sungetc_r+0x26>
 800bd6e:	e7e1      	b.n	800bd34 <_sungetc_r+0x8>
 800bd70:	6921      	ldr	r1, [r4, #16]
 800bd72:	6822      	ldr	r2, [r4, #0]
 800bd74:	b141      	cbz	r1, 800bd88 <_sungetc_r+0x5c>
 800bd76:	4291      	cmp	r1, r2
 800bd78:	d206      	bcs.n	800bd88 <_sungetc_r+0x5c>
 800bd7a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bd7e:	42a9      	cmp	r1, r5
 800bd80:	d102      	bne.n	800bd88 <_sungetc_r+0x5c>
 800bd82:	3a01      	subs	r2, #1
 800bd84:	6022      	str	r2, [r4, #0]
 800bd86:	e7ea      	b.n	800bd5e <_sungetc_r+0x32>
 800bd88:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800bd8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd90:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd92:	2303      	movs	r3, #3
 800bd94:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bd96:	4623      	mov	r3, r4
 800bd98:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bd9c:	6023      	str	r3, [r4, #0]
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e7de      	b.n	800bd60 <_sungetc_r+0x34>

0800bda2 <__ssrefill_r>:
 800bda2:	b510      	push	{r4, lr}
 800bda4:	460c      	mov	r4, r1
 800bda6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bda8:	b169      	cbz	r1, 800bdc6 <__ssrefill_r+0x24>
 800bdaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdae:	4299      	cmp	r1, r3
 800bdb0:	d001      	beq.n	800bdb6 <__ssrefill_r+0x14>
 800bdb2:	f7ff fe19 	bl	800b9e8 <_free_r>
 800bdb6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bdb8:	6063      	str	r3, [r4, #4]
 800bdba:	2000      	movs	r0, #0
 800bdbc:	6360      	str	r0, [r4, #52]	@ 0x34
 800bdbe:	b113      	cbz	r3, 800bdc6 <__ssrefill_r+0x24>
 800bdc0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	6923      	ldr	r3, [r4, #16]
 800bdc8:	6023      	str	r3, [r4, #0]
 800bdca:	2300      	movs	r3, #0
 800bdcc:	6063      	str	r3, [r4, #4]
 800bdce:	89a3      	ldrh	r3, [r4, #12]
 800bdd0:	f043 0320 	orr.w	r3, r3, #32
 800bdd4:	81a3      	strh	r3, [r4, #12]
 800bdd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdda:	e7f3      	b.n	800bdc4 <__ssrefill_r+0x22>

0800bddc <__ssvfiscanf_r>:
 800bddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde0:	460c      	mov	r4, r1
 800bde2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800bde6:	2100      	movs	r1, #0
 800bde8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bdec:	49a5      	ldr	r1, [pc, #660]	@ (800c084 <__ssvfiscanf_r+0x2a8>)
 800bdee:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bdf0:	f10d 0804 	add.w	r8, sp, #4
 800bdf4:	49a4      	ldr	r1, [pc, #656]	@ (800c088 <__ssvfiscanf_r+0x2ac>)
 800bdf6:	4fa5      	ldr	r7, [pc, #660]	@ (800c08c <__ssvfiscanf_r+0x2b0>)
 800bdf8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bdfc:	4606      	mov	r6, r0
 800bdfe:	91a1      	str	r1, [sp, #644]	@ 0x284
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	7813      	ldrb	r3, [r2, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 8158 	beq.w	800c0ba <__ssvfiscanf_r+0x2de>
 800be0a:	5cf9      	ldrb	r1, [r7, r3]
 800be0c:	f011 0108 	ands.w	r1, r1, #8
 800be10:	f102 0501 	add.w	r5, r2, #1
 800be14:	d019      	beq.n	800be4a <__ssvfiscanf_r+0x6e>
 800be16:	6863      	ldr	r3, [r4, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dd0f      	ble.n	800be3c <__ssvfiscanf_r+0x60>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	781a      	ldrb	r2, [r3, #0]
 800be20:	5cba      	ldrb	r2, [r7, r2]
 800be22:	0712      	lsls	r2, r2, #28
 800be24:	d401      	bmi.n	800be2a <__ssvfiscanf_r+0x4e>
 800be26:	462a      	mov	r2, r5
 800be28:	e7eb      	b.n	800be02 <__ssvfiscanf_r+0x26>
 800be2a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800be2c:	3201      	adds	r2, #1
 800be2e:	9245      	str	r2, [sp, #276]	@ 0x114
 800be30:	6862      	ldr	r2, [r4, #4]
 800be32:	3301      	adds	r3, #1
 800be34:	3a01      	subs	r2, #1
 800be36:	6062      	str	r2, [r4, #4]
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	e7ec      	b.n	800be16 <__ssvfiscanf_r+0x3a>
 800be3c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800be3e:	4621      	mov	r1, r4
 800be40:	4630      	mov	r0, r6
 800be42:	4798      	blx	r3
 800be44:	2800      	cmp	r0, #0
 800be46:	d0e9      	beq.n	800be1c <__ssvfiscanf_r+0x40>
 800be48:	e7ed      	b.n	800be26 <__ssvfiscanf_r+0x4a>
 800be4a:	2b25      	cmp	r3, #37	@ 0x25
 800be4c:	d012      	beq.n	800be74 <__ssvfiscanf_r+0x98>
 800be4e:	4699      	mov	r9, r3
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	f340 8093 	ble.w	800bf7e <__ssvfiscanf_r+0x1a2>
 800be58:	6822      	ldr	r2, [r4, #0]
 800be5a:	7813      	ldrb	r3, [r2, #0]
 800be5c:	454b      	cmp	r3, r9
 800be5e:	f040 812c 	bne.w	800c0ba <__ssvfiscanf_r+0x2de>
 800be62:	6863      	ldr	r3, [r4, #4]
 800be64:	3b01      	subs	r3, #1
 800be66:	6063      	str	r3, [r4, #4]
 800be68:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800be6a:	3201      	adds	r2, #1
 800be6c:	3301      	adds	r3, #1
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	9345      	str	r3, [sp, #276]	@ 0x114
 800be72:	e7d8      	b.n	800be26 <__ssvfiscanf_r+0x4a>
 800be74:	9141      	str	r1, [sp, #260]	@ 0x104
 800be76:	9143      	str	r1, [sp, #268]	@ 0x10c
 800be78:	7853      	ldrb	r3, [r2, #1]
 800be7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be7c:	bf02      	ittt	eq
 800be7e:	2310      	moveq	r3, #16
 800be80:	1c95      	addeq	r5, r2, #2
 800be82:	9341      	streq	r3, [sp, #260]	@ 0x104
 800be84:	220a      	movs	r2, #10
 800be86:	46a9      	mov	r9, r5
 800be88:	f819 1b01 	ldrb.w	r1, [r9], #1
 800be8c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800be90:	2b09      	cmp	r3, #9
 800be92:	d91e      	bls.n	800bed2 <__ssvfiscanf_r+0xf6>
 800be94:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c090 <__ssvfiscanf_r+0x2b4>
 800be98:	2203      	movs	r2, #3
 800be9a:	4650      	mov	r0, sl
 800be9c:	f7f4 f9b0 	bl	8000200 <memchr>
 800bea0:	b138      	cbz	r0, 800beb2 <__ssvfiscanf_r+0xd6>
 800bea2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bea4:	eba0 000a 	sub.w	r0, r0, sl
 800bea8:	2301      	movs	r3, #1
 800beaa:	4083      	lsls	r3, r0
 800beac:	4313      	orrs	r3, r2
 800beae:	9341      	str	r3, [sp, #260]	@ 0x104
 800beb0:	464d      	mov	r5, r9
 800beb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800beb6:	2b78      	cmp	r3, #120	@ 0x78
 800beb8:	d806      	bhi.n	800bec8 <__ssvfiscanf_r+0xec>
 800beba:	2b57      	cmp	r3, #87	@ 0x57
 800bebc:	d810      	bhi.n	800bee0 <__ssvfiscanf_r+0x104>
 800bebe:	2b25      	cmp	r3, #37	@ 0x25
 800bec0:	d0c5      	beq.n	800be4e <__ssvfiscanf_r+0x72>
 800bec2:	d857      	bhi.n	800bf74 <__ssvfiscanf_r+0x198>
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d065      	beq.n	800bf94 <__ssvfiscanf_r+0x1b8>
 800bec8:	2303      	movs	r3, #3
 800beca:	9347      	str	r3, [sp, #284]	@ 0x11c
 800becc:	230a      	movs	r3, #10
 800bece:	9342      	str	r3, [sp, #264]	@ 0x108
 800bed0:	e078      	b.n	800bfc4 <__ssvfiscanf_r+0x1e8>
 800bed2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800bed4:	fb02 1103 	mla	r1, r2, r3, r1
 800bed8:	3930      	subs	r1, #48	@ 0x30
 800beda:	9143      	str	r1, [sp, #268]	@ 0x10c
 800bedc:	464d      	mov	r5, r9
 800bede:	e7d2      	b.n	800be86 <__ssvfiscanf_r+0xaa>
 800bee0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800bee4:	2a20      	cmp	r2, #32
 800bee6:	d8ef      	bhi.n	800bec8 <__ssvfiscanf_r+0xec>
 800bee8:	a101      	add	r1, pc, #4	@ (adr r1, 800bef0 <__ssvfiscanf_r+0x114>)
 800beea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bfa3 	.word	0x0800bfa3
 800bef4:	0800bec9 	.word	0x0800bec9
 800bef8:	0800bec9 	.word	0x0800bec9
 800befc:	0800bffd 	.word	0x0800bffd
 800bf00:	0800bec9 	.word	0x0800bec9
 800bf04:	0800bec9 	.word	0x0800bec9
 800bf08:	0800bec9 	.word	0x0800bec9
 800bf0c:	0800bec9 	.word	0x0800bec9
 800bf10:	0800bec9 	.word	0x0800bec9
 800bf14:	0800bec9 	.word	0x0800bec9
 800bf18:	0800bec9 	.word	0x0800bec9
 800bf1c:	0800c013 	.word	0x0800c013
 800bf20:	0800bff9 	.word	0x0800bff9
 800bf24:	0800bf7b 	.word	0x0800bf7b
 800bf28:	0800bf7b 	.word	0x0800bf7b
 800bf2c:	0800bf7b 	.word	0x0800bf7b
 800bf30:	0800bec9 	.word	0x0800bec9
 800bf34:	0800bfb5 	.word	0x0800bfb5
 800bf38:	0800bec9 	.word	0x0800bec9
 800bf3c:	0800bec9 	.word	0x0800bec9
 800bf40:	0800bec9 	.word	0x0800bec9
 800bf44:	0800bec9 	.word	0x0800bec9
 800bf48:	0800c023 	.word	0x0800c023
 800bf4c:	0800bfbd 	.word	0x0800bfbd
 800bf50:	0800bf9b 	.word	0x0800bf9b
 800bf54:	0800bec9 	.word	0x0800bec9
 800bf58:	0800bec9 	.word	0x0800bec9
 800bf5c:	0800c01f 	.word	0x0800c01f
 800bf60:	0800bec9 	.word	0x0800bec9
 800bf64:	0800bff9 	.word	0x0800bff9
 800bf68:	0800bec9 	.word	0x0800bec9
 800bf6c:	0800bec9 	.word	0x0800bec9
 800bf70:	0800bfa3 	.word	0x0800bfa3
 800bf74:	3b45      	subs	r3, #69	@ 0x45
 800bf76:	2b02      	cmp	r3, #2
 800bf78:	d8a6      	bhi.n	800bec8 <__ssvfiscanf_r+0xec>
 800bf7a:	2305      	movs	r3, #5
 800bf7c:	e021      	b.n	800bfc2 <__ssvfiscanf_r+0x1e6>
 800bf7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bf80:	4621      	mov	r1, r4
 800bf82:	4630      	mov	r0, r6
 800bf84:	4798      	blx	r3
 800bf86:	2800      	cmp	r0, #0
 800bf88:	f43f af66 	beq.w	800be58 <__ssvfiscanf_r+0x7c>
 800bf8c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bf8e:	2800      	cmp	r0, #0
 800bf90:	f040 808b 	bne.w	800c0aa <__ssvfiscanf_r+0x2ce>
 800bf94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf98:	e08b      	b.n	800c0b2 <__ssvfiscanf_r+0x2d6>
 800bf9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf9c:	f042 0220 	orr.w	r2, r2, #32
 800bfa0:	9241      	str	r2, [sp, #260]	@ 0x104
 800bfa2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bfa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfa8:	9241      	str	r2, [sp, #260]	@ 0x104
 800bfaa:	2210      	movs	r2, #16
 800bfac:	2b6e      	cmp	r3, #110	@ 0x6e
 800bfae:	9242      	str	r2, [sp, #264]	@ 0x108
 800bfb0:	d902      	bls.n	800bfb8 <__ssvfiscanf_r+0x1dc>
 800bfb2:	e005      	b.n	800bfc0 <__ssvfiscanf_r+0x1e4>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	9342      	str	r3, [sp, #264]	@ 0x108
 800bfb8:	2303      	movs	r3, #3
 800bfba:	e002      	b.n	800bfc2 <__ssvfiscanf_r+0x1e6>
 800bfbc:	2308      	movs	r3, #8
 800bfbe:	9342      	str	r3, [sp, #264]	@ 0x108
 800bfc0:	2304      	movs	r3, #4
 800bfc2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bfc4:	6863      	ldr	r3, [r4, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dd39      	ble.n	800c03e <__ssvfiscanf_r+0x262>
 800bfca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bfcc:	0659      	lsls	r1, r3, #25
 800bfce:	d404      	bmi.n	800bfda <__ssvfiscanf_r+0x1fe>
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	5cba      	ldrb	r2, [r7, r2]
 800bfd6:	0712      	lsls	r2, r2, #28
 800bfd8:	d438      	bmi.n	800c04c <__ssvfiscanf_r+0x270>
 800bfda:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bfdc:	2b02      	cmp	r3, #2
 800bfde:	dc47      	bgt.n	800c070 <__ssvfiscanf_r+0x294>
 800bfe0:	466b      	mov	r3, sp
 800bfe2:	4622      	mov	r2, r4
 800bfe4:	a941      	add	r1, sp, #260	@ 0x104
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f000 fbe6 	bl	800c7b8 <_scanf_chars>
 800bfec:	2801      	cmp	r0, #1
 800bfee:	d064      	beq.n	800c0ba <__ssvfiscanf_r+0x2de>
 800bff0:	2802      	cmp	r0, #2
 800bff2:	f47f af18 	bne.w	800be26 <__ssvfiscanf_r+0x4a>
 800bff6:	e7c9      	b.n	800bf8c <__ssvfiscanf_r+0x1b0>
 800bff8:	220a      	movs	r2, #10
 800bffa:	e7d7      	b.n	800bfac <__ssvfiscanf_r+0x1d0>
 800bffc:	4629      	mov	r1, r5
 800bffe:	4640      	mov	r0, r8
 800c000:	f000 fd28 	bl	800ca54 <__sccl>
 800c004:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c00a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c00c:	4605      	mov	r5, r0
 800c00e:	2301      	movs	r3, #1
 800c010:	e7d7      	b.n	800bfc2 <__ssvfiscanf_r+0x1e6>
 800c012:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c018:	9341      	str	r3, [sp, #260]	@ 0x104
 800c01a:	2300      	movs	r3, #0
 800c01c:	e7d1      	b.n	800bfc2 <__ssvfiscanf_r+0x1e6>
 800c01e:	2302      	movs	r3, #2
 800c020:	e7cf      	b.n	800bfc2 <__ssvfiscanf_r+0x1e6>
 800c022:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c024:	06c3      	lsls	r3, r0, #27
 800c026:	f53f aefe 	bmi.w	800be26 <__ssvfiscanf_r+0x4a>
 800c02a:	9b00      	ldr	r3, [sp, #0]
 800c02c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c02e:	1d19      	adds	r1, r3, #4
 800c030:	9100      	str	r1, [sp, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	07c0      	lsls	r0, r0, #31
 800c036:	bf4c      	ite	mi
 800c038:	801a      	strhmi	r2, [r3, #0]
 800c03a:	601a      	strpl	r2, [r3, #0]
 800c03c:	e6f3      	b.n	800be26 <__ssvfiscanf_r+0x4a>
 800c03e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c040:	4621      	mov	r1, r4
 800c042:	4630      	mov	r0, r6
 800c044:	4798      	blx	r3
 800c046:	2800      	cmp	r0, #0
 800c048:	d0bf      	beq.n	800bfca <__ssvfiscanf_r+0x1ee>
 800c04a:	e79f      	b.n	800bf8c <__ssvfiscanf_r+0x1b0>
 800c04c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c04e:	3201      	adds	r2, #1
 800c050:	9245      	str	r2, [sp, #276]	@ 0x114
 800c052:	6862      	ldr	r2, [r4, #4]
 800c054:	3a01      	subs	r2, #1
 800c056:	2a00      	cmp	r2, #0
 800c058:	6062      	str	r2, [r4, #4]
 800c05a:	dd02      	ble.n	800c062 <__ssvfiscanf_r+0x286>
 800c05c:	3301      	adds	r3, #1
 800c05e:	6023      	str	r3, [r4, #0]
 800c060:	e7b6      	b.n	800bfd0 <__ssvfiscanf_r+0x1f4>
 800c062:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c064:	4621      	mov	r1, r4
 800c066:	4630      	mov	r0, r6
 800c068:	4798      	blx	r3
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d0b0      	beq.n	800bfd0 <__ssvfiscanf_r+0x1f4>
 800c06e:	e78d      	b.n	800bf8c <__ssvfiscanf_r+0x1b0>
 800c070:	2b04      	cmp	r3, #4
 800c072:	dc0f      	bgt.n	800c094 <__ssvfiscanf_r+0x2b8>
 800c074:	466b      	mov	r3, sp
 800c076:	4622      	mov	r2, r4
 800c078:	a941      	add	r1, sp, #260	@ 0x104
 800c07a:	4630      	mov	r0, r6
 800c07c:	f000 fbf6 	bl	800c86c <_scanf_i>
 800c080:	e7b4      	b.n	800bfec <__ssvfiscanf_r+0x210>
 800c082:	bf00      	nop
 800c084:	0800bd2d 	.word	0x0800bd2d
 800c088:	0800bda3 	.word	0x0800bda3
 800c08c:	0800d3d7 	.word	0x0800d3d7
 800c090:	0800d38e 	.word	0x0800d38e
 800c094:	4b0a      	ldr	r3, [pc, #40]	@ (800c0c0 <__ssvfiscanf_r+0x2e4>)
 800c096:	2b00      	cmp	r3, #0
 800c098:	f43f aec5 	beq.w	800be26 <__ssvfiscanf_r+0x4a>
 800c09c:	466b      	mov	r3, sp
 800c09e:	4622      	mov	r2, r4
 800c0a0:	a941      	add	r1, sp, #260	@ 0x104
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	f3af 8000 	nop.w
 800c0a8:	e7a0      	b.n	800bfec <__ssvfiscanf_r+0x210>
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	065b      	lsls	r3, r3, #25
 800c0ae:	f53f af71 	bmi.w	800bf94 <__ssvfiscanf_r+0x1b8>
 800c0b2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c0bc:	e7f9      	b.n	800c0b2 <__ssvfiscanf_r+0x2d6>
 800c0be:	bf00      	nop
 800c0c0:	00000000 	.word	0x00000000

0800c0c4 <__sfputc_r>:
 800c0c4:	6893      	ldr	r3, [r2, #8]
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	b410      	push	{r4}
 800c0cc:	6093      	str	r3, [r2, #8]
 800c0ce:	da08      	bge.n	800c0e2 <__sfputc_r+0x1e>
 800c0d0:	6994      	ldr	r4, [r2, #24]
 800c0d2:	42a3      	cmp	r3, r4
 800c0d4:	db01      	blt.n	800c0da <__sfputc_r+0x16>
 800c0d6:	290a      	cmp	r1, #10
 800c0d8:	d103      	bne.n	800c0e2 <__sfputc_r+0x1e>
 800c0da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0de:	f000 beff 	b.w	800cee0 <__swbuf_r>
 800c0e2:	6813      	ldr	r3, [r2, #0]
 800c0e4:	1c58      	adds	r0, r3, #1
 800c0e6:	6010      	str	r0, [r2, #0]
 800c0e8:	7019      	strb	r1, [r3, #0]
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <__sfputs_r>:
 800c0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	4614      	mov	r4, r2
 800c0fa:	18d5      	adds	r5, r2, r3
 800c0fc:	42ac      	cmp	r4, r5
 800c0fe:	d101      	bne.n	800c104 <__sfputs_r+0x12>
 800c100:	2000      	movs	r0, #0
 800c102:	e007      	b.n	800c114 <__sfputs_r+0x22>
 800c104:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c108:	463a      	mov	r2, r7
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7ff ffda 	bl	800c0c4 <__sfputc_r>
 800c110:	1c43      	adds	r3, r0, #1
 800c112:	d1f3      	bne.n	800c0fc <__sfputs_r+0xa>
 800c114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c118 <_vfiprintf_r>:
 800c118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	460d      	mov	r5, r1
 800c11e:	b09d      	sub	sp, #116	@ 0x74
 800c120:	4614      	mov	r4, r2
 800c122:	4698      	mov	r8, r3
 800c124:	4606      	mov	r6, r0
 800c126:	b118      	cbz	r0, 800c130 <_vfiprintf_r+0x18>
 800c128:	6a03      	ldr	r3, [r0, #32]
 800c12a:	b90b      	cbnz	r3, 800c130 <_vfiprintf_r+0x18>
 800c12c:	f7ff fab6 	bl	800b69c <__sinit>
 800c130:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c132:	07d9      	lsls	r1, r3, #31
 800c134:	d405      	bmi.n	800c142 <_vfiprintf_r+0x2a>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	059a      	lsls	r2, r3, #22
 800c13a:	d402      	bmi.n	800c142 <_vfiprintf_r+0x2a>
 800c13c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c13e:	f7ff fc50 	bl	800b9e2 <__retarget_lock_acquire_recursive>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	071b      	lsls	r3, r3, #28
 800c146:	d501      	bpl.n	800c14c <_vfiprintf_r+0x34>
 800c148:	692b      	ldr	r3, [r5, #16]
 800c14a:	b99b      	cbnz	r3, 800c174 <_vfiprintf_r+0x5c>
 800c14c:	4629      	mov	r1, r5
 800c14e:	4630      	mov	r0, r6
 800c150:	f000 ff04 	bl	800cf5c <__swsetup_r>
 800c154:	b170      	cbz	r0, 800c174 <_vfiprintf_r+0x5c>
 800c156:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c158:	07dc      	lsls	r4, r3, #31
 800c15a:	d504      	bpl.n	800c166 <_vfiprintf_r+0x4e>
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c160:	b01d      	add	sp, #116	@ 0x74
 800c162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	0598      	lsls	r0, r3, #22
 800c16a:	d4f7      	bmi.n	800c15c <_vfiprintf_r+0x44>
 800c16c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c16e:	f7ff fc39 	bl	800b9e4 <__retarget_lock_release_recursive>
 800c172:	e7f3      	b.n	800c15c <_vfiprintf_r+0x44>
 800c174:	2300      	movs	r3, #0
 800c176:	9309      	str	r3, [sp, #36]	@ 0x24
 800c178:	2320      	movs	r3, #32
 800c17a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c17e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c182:	2330      	movs	r3, #48	@ 0x30
 800c184:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c334 <_vfiprintf_r+0x21c>
 800c188:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c18c:	f04f 0901 	mov.w	r9, #1
 800c190:	4623      	mov	r3, r4
 800c192:	469a      	mov	sl, r3
 800c194:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c198:	b10a      	cbz	r2, 800c19e <_vfiprintf_r+0x86>
 800c19a:	2a25      	cmp	r2, #37	@ 0x25
 800c19c:	d1f9      	bne.n	800c192 <_vfiprintf_r+0x7a>
 800c19e:	ebba 0b04 	subs.w	fp, sl, r4
 800c1a2:	d00b      	beq.n	800c1bc <_vfiprintf_r+0xa4>
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	4629      	mov	r1, r5
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f7ff ffa1 	bl	800c0f2 <__sfputs_r>
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	f000 80a7 	beq.w	800c304 <_vfiprintf_r+0x1ec>
 800c1b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1b8:	445a      	add	r2, fp
 800c1ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 809f 	beq.w	800c304 <_vfiprintf_r+0x1ec>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c1cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1d0:	f10a 0a01 	add.w	sl, sl, #1
 800c1d4:	9304      	str	r3, [sp, #16]
 800c1d6:	9307      	str	r3, [sp, #28]
 800c1d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1de:	4654      	mov	r4, sl
 800c1e0:	2205      	movs	r2, #5
 800c1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e6:	4853      	ldr	r0, [pc, #332]	@ (800c334 <_vfiprintf_r+0x21c>)
 800c1e8:	f7f4 f80a 	bl	8000200 <memchr>
 800c1ec:	9a04      	ldr	r2, [sp, #16]
 800c1ee:	b9d8      	cbnz	r0, 800c228 <_vfiprintf_r+0x110>
 800c1f0:	06d1      	lsls	r1, r2, #27
 800c1f2:	bf44      	itt	mi
 800c1f4:	2320      	movmi	r3, #32
 800c1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c1fa:	0713      	lsls	r3, r2, #28
 800c1fc:	bf44      	itt	mi
 800c1fe:	232b      	movmi	r3, #43	@ 0x2b
 800c200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c204:	f89a 3000 	ldrb.w	r3, [sl]
 800c208:	2b2a      	cmp	r3, #42	@ 0x2a
 800c20a:	d015      	beq.n	800c238 <_vfiprintf_r+0x120>
 800c20c:	9a07      	ldr	r2, [sp, #28]
 800c20e:	4654      	mov	r4, sl
 800c210:	2000      	movs	r0, #0
 800c212:	f04f 0c0a 	mov.w	ip, #10
 800c216:	4621      	mov	r1, r4
 800c218:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c21c:	3b30      	subs	r3, #48	@ 0x30
 800c21e:	2b09      	cmp	r3, #9
 800c220:	d94b      	bls.n	800c2ba <_vfiprintf_r+0x1a2>
 800c222:	b1b0      	cbz	r0, 800c252 <_vfiprintf_r+0x13a>
 800c224:	9207      	str	r2, [sp, #28]
 800c226:	e014      	b.n	800c252 <_vfiprintf_r+0x13a>
 800c228:	eba0 0308 	sub.w	r3, r0, r8
 800c22c:	fa09 f303 	lsl.w	r3, r9, r3
 800c230:	4313      	orrs	r3, r2
 800c232:	9304      	str	r3, [sp, #16]
 800c234:	46a2      	mov	sl, r4
 800c236:	e7d2      	b.n	800c1de <_vfiprintf_r+0xc6>
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	1d19      	adds	r1, r3, #4
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	9103      	str	r1, [sp, #12]
 800c240:	2b00      	cmp	r3, #0
 800c242:	bfbb      	ittet	lt
 800c244:	425b      	neglt	r3, r3
 800c246:	f042 0202 	orrlt.w	r2, r2, #2
 800c24a:	9307      	strge	r3, [sp, #28]
 800c24c:	9307      	strlt	r3, [sp, #28]
 800c24e:	bfb8      	it	lt
 800c250:	9204      	strlt	r2, [sp, #16]
 800c252:	7823      	ldrb	r3, [r4, #0]
 800c254:	2b2e      	cmp	r3, #46	@ 0x2e
 800c256:	d10a      	bne.n	800c26e <_vfiprintf_r+0x156>
 800c258:	7863      	ldrb	r3, [r4, #1]
 800c25a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c25c:	d132      	bne.n	800c2c4 <_vfiprintf_r+0x1ac>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	1d1a      	adds	r2, r3, #4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	9203      	str	r2, [sp, #12]
 800c266:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c26a:	3402      	adds	r4, #2
 800c26c:	9305      	str	r3, [sp, #20]
 800c26e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c344 <_vfiprintf_r+0x22c>
 800c272:	7821      	ldrb	r1, [r4, #0]
 800c274:	2203      	movs	r2, #3
 800c276:	4650      	mov	r0, sl
 800c278:	f7f3 ffc2 	bl	8000200 <memchr>
 800c27c:	b138      	cbz	r0, 800c28e <_vfiprintf_r+0x176>
 800c27e:	9b04      	ldr	r3, [sp, #16]
 800c280:	eba0 000a 	sub.w	r0, r0, sl
 800c284:	2240      	movs	r2, #64	@ 0x40
 800c286:	4082      	lsls	r2, r0
 800c288:	4313      	orrs	r3, r2
 800c28a:	3401      	adds	r4, #1
 800c28c:	9304      	str	r3, [sp, #16]
 800c28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c292:	4829      	ldr	r0, [pc, #164]	@ (800c338 <_vfiprintf_r+0x220>)
 800c294:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c298:	2206      	movs	r2, #6
 800c29a:	f7f3 ffb1 	bl	8000200 <memchr>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d03f      	beq.n	800c322 <_vfiprintf_r+0x20a>
 800c2a2:	4b26      	ldr	r3, [pc, #152]	@ (800c33c <_vfiprintf_r+0x224>)
 800c2a4:	bb1b      	cbnz	r3, 800c2ee <_vfiprintf_r+0x1d6>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	3307      	adds	r3, #7
 800c2aa:	f023 0307 	bic.w	r3, r3, #7
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	9303      	str	r3, [sp, #12]
 800c2b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2b4:	443b      	add	r3, r7
 800c2b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2b8:	e76a      	b.n	800c190 <_vfiprintf_r+0x78>
 800c2ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2be:	460c      	mov	r4, r1
 800c2c0:	2001      	movs	r0, #1
 800c2c2:	e7a8      	b.n	800c216 <_vfiprintf_r+0xfe>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	3401      	adds	r4, #1
 800c2c8:	9305      	str	r3, [sp, #20]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	f04f 0c0a 	mov.w	ip, #10
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2d6:	3a30      	subs	r2, #48	@ 0x30
 800c2d8:	2a09      	cmp	r2, #9
 800c2da:	d903      	bls.n	800c2e4 <_vfiprintf_r+0x1cc>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0c6      	beq.n	800c26e <_vfiprintf_r+0x156>
 800c2e0:	9105      	str	r1, [sp, #20]
 800c2e2:	e7c4      	b.n	800c26e <_vfiprintf_r+0x156>
 800c2e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2e8:	4604      	mov	r4, r0
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	e7f0      	b.n	800c2d0 <_vfiprintf_r+0x1b8>
 800c2ee:	ab03      	add	r3, sp, #12
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	4b12      	ldr	r3, [pc, #72]	@ (800c340 <_vfiprintf_r+0x228>)
 800c2f6:	a904      	add	r1, sp, #16
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	f3af 8000 	nop.w
 800c2fe:	4607      	mov	r7, r0
 800c300:	1c78      	adds	r0, r7, #1
 800c302:	d1d6      	bne.n	800c2b2 <_vfiprintf_r+0x19a>
 800c304:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c306:	07d9      	lsls	r1, r3, #31
 800c308:	d405      	bmi.n	800c316 <_vfiprintf_r+0x1fe>
 800c30a:	89ab      	ldrh	r3, [r5, #12]
 800c30c:	059a      	lsls	r2, r3, #22
 800c30e:	d402      	bmi.n	800c316 <_vfiprintf_r+0x1fe>
 800c310:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c312:	f7ff fb67 	bl	800b9e4 <__retarget_lock_release_recursive>
 800c316:	89ab      	ldrh	r3, [r5, #12]
 800c318:	065b      	lsls	r3, r3, #25
 800c31a:	f53f af1f 	bmi.w	800c15c <_vfiprintf_r+0x44>
 800c31e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c320:	e71e      	b.n	800c160 <_vfiprintf_r+0x48>
 800c322:	ab03      	add	r3, sp, #12
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	462a      	mov	r2, r5
 800c328:	4b05      	ldr	r3, [pc, #20]	@ (800c340 <_vfiprintf_r+0x228>)
 800c32a:	a904      	add	r1, sp, #16
 800c32c:	4630      	mov	r0, r6
 800c32e:	f000 f923 	bl	800c578 <_printf_i>
 800c332:	e7e4      	b.n	800c2fe <_vfiprintf_r+0x1e6>
 800c334:	0800d388 	.word	0x0800d388
 800c338:	0800d392 	.word	0x0800d392
 800c33c:	00000000 	.word	0x00000000
 800c340:	0800c0f3 	.word	0x0800c0f3
 800c344:	0800d38e 	.word	0x0800d38e

0800c348 <malloc>:
 800c348:	4b02      	ldr	r3, [pc, #8]	@ (800c354 <malloc+0xc>)
 800c34a:	4601      	mov	r1, r0
 800c34c:	6818      	ldr	r0, [r3, #0]
 800c34e:	f000 b825 	b.w	800c39c <_malloc_r>
 800c352:	bf00      	nop
 800c354:	20000044 	.word	0x20000044

0800c358 <sbrk_aligned>:
 800c358:	b570      	push	{r4, r5, r6, lr}
 800c35a:	4e0f      	ldr	r6, [pc, #60]	@ (800c398 <sbrk_aligned+0x40>)
 800c35c:	460c      	mov	r4, r1
 800c35e:	6831      	ldr	r1, [r6, #0]
 800c360:	4605      	mov	r5, r0
 800c362:	b911      	cbnz	r1, 800c36a <sbrk_aligned+0x12>
 800c364:	f000 fe6a 	bl	800d03c <_sbrk_r>
 800c368:	6030      	str	r0, [r6, #0]
 800c36a:	4621      	mov	r1, r4
 800c36c:	4628      	mov	r0, r5
 800c36e:	f000 fe65 	bl	800d03c <_sbrk_r>
 800c372:	1c43      	adds	r3, r0, #1
 800c374:	d103      	bne.n	800c37e <sbrk_aligned+0x26>
 800c376:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c37a:	4620      	mov	r0, r4
 800c37c:	bd70      	pop	{r4, r5, r6, pc}
 800c37e:	1cc4      	adds	r4, r0, #3
 800c380:	f024 0403 	bic.w	r4, r4, #3
 800c384:	42a0      	cmp	r0, r4
 800c386:	d0f8      	beq.n	800c37a <sbrk_aligned+0x22>
 800c388:	1a21      	subs	r1, r4, r0
 800c38a:	4628      	mov	r0, r5
 800c38c:	f000 fe56 	bl	800d03c <_sbrk_r>
 800c390:	3001      	adds	r0, #1
 800c392:	d1f2      	bne.n	800c37a <sbrk_aligned+0x22>
 800c394:	e7ef      	b.n	800c376 <sbrk_aligned+0x1e>
 800c396:	bf00      	nop
 800c398:	20002718 	.word	0x20002718

0800c39c <_malloc_r>:
 800c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3a0:	1ccd      	adds	r5, r1, #3
 800c3a2:	f025 0503 	bic.w	r5, r5, #3
 800c3a6:	3508      	adds	r5, #8
 800c3a8:	2d0c      	cmp	r5, #12
 800c3aa:	bf38      	it	cc
 800c3ac:	250c      	movcc	r5, #12
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	db01      	blt.n	800c3b8 <_malloc_r+0x1c>
 800c3b4:	42a9      	cmp	r1, r5
 800c3b6:	d904      	bls.n	800c3c2 <_malloc_r+0x26>
 800c3b8:	230c      	movs	r3, #12
 800c3ba:	6033      	str	r3, [r6, #0]
 800c3bc:	2000      	movs	r0, #0
 800c3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c498 <_malloc_r+0xfc>
 800c3c6:	f000 fc2b 	bl	800cc20 <__malloc_lock>
 800c3ca:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ce:	461c      	mov	r4, r3
 800c3d0:	bb44      	cbnz	r4, 800c424 <_malloc_r+0x88>
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	4630      	mov	r0, r6
 800c3d6:	f7ff ffbf 	bl	800c358 <sbrk_aligned>
 800c3da:	1c43      	adds	r3, r0, #1
 800c3dc:	4604      	mov	r4, r0
 800c3de:	d158      	bne.n	800c492 <_malloc_r+0xf6>
 800c3e0:	f8d8 4000 	ldr.w	r4, [r8]
 800c3e4:	4627      	mov	r7, r4
 800c3e6:	2f00      	cmp	r7, #0
 800c3e8:	d143      	bne.n	800c472 <_malloc_r+0xd6>
 800c3ea:	2c00      	cmp	r4, #0
 800c3ec:	d04b      	beq.n	800c486 <_malloc_r+0xea>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	eb04 0903 	add.w	r9, r4, r3
 800c3f8:	f000 fe20 	bl	800d03c <_sbrk_r>
 800c3fc:	4581      	cmp	r9, r0
 800c3fe:	d142      	bne.n	800c486 <_malloc_r+0xea>
 800c400:	6821      	ldr	r1, [r4, #0]
 800c402:	1a6d      	subs	r5, r5, r1
 800c404:	4629      	mov	r1, r5
 800c406:	4630      	mov	r0, r6
 800c408:	f7ff ffa6 	bl	800c358 <sbrk_aligned>
 800c40c:	3001      	adds	r0, #1
 800c40e:	d03a      	beq.n	800c486 <_malloc_r+0xea>
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	442b      	add	r3, r5
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	f8d8 3000 	ldr.w	r3, [r8]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	bb62      	cbnz	r2, 800c478 <_malloc_r+0xdc>
 800c41e:	f8c8 7000 	str.w	r7, [r8]
 800c422:	e00f      	b.n	800c444 <_malloc_r+0xa8>
 800c424:	6822      	ldr	r2, [r4, #0]
 800c426:	1b52      	subs	r2, r2, r5
 800c428:	d420      	bmi.n	800c46c <_malloc_r+0xd0>
 800c42a:	2a0b      	cmp	r2, #11
 800c42c:	d917      	bls.n	800c45e <_malloc_r+0xc2>
 800c42e:	1961      	adds	r1, r4, r5
 800c430:	42a3      	cmp	r3, r4
 800c432:	6025      	str	r5, [r4, #0]
 800c434:	bf18      	it	ne
 800c436:	6059      	strne	r1, [r3, #4]
 800c438:	6863      	ldr	r3, [r4, #4]
 800c43a:	bf08      	it	eq
 800c43c:	f8c8 1000 	streq.w	r1, [r8]
 800c440:	5162      	str	r2, [r4, r5]
 800c442:	604b      	str	r3, [r1, #4]
 800c444:	4630      	mov	r0, r6
 800c446:	f000 fbf1 	bl	800cc2c <__malloc_unlock>
 800c44a:	f104 000b 	add.w	r0, r4, #11
 800c44e:	1d23      	adds	r3, r4, #4
 800c450:	f020 0007 	bic.w	r0, r0, #7
 800c454:	1ac2      	subs	r2, r0, r3
 800c456:	bf1c      	itt	ne
 800c458:	1a1b      	subne	r3, r3, r0
 800c45a:	50a3      	strne	r3, [r4, r2]
 800c45c:	e7af      	b.n	800c3be <_malloc_r+0x22>
 800c45e:	6862      	ldr	r2, [r4, #4]
 800c460:	42a3      	cmp	r3, r4
 800c462:	bf0c      	ite	eq
 800c464:	f8c8 2000 	streq.w	r2, [r8]
 800c468:	605a      	strne	r2, [r3, #4]
 800c46a:	e7eb      	b.n	800c444 <_malloc_r+0xa8>
 800c46c:	4623      	mov	r3, r4
 800c46e:	6864      	ldr	r4, [r4, #4]
 800c470:	e7ae      	b.n	800c3d0 <_malloc_r+0x34>
 800c472:	463c      	mov	r4, r7
 800c474:	687f      	ldr	r7, [r7, #4]
 800c476:	e7b6      	b.n	800c3e6 <_malloc_r+0x4a>
 800c478:	461a      	mov	r2, r3
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	42a3      	cmp	r3, r4
 800c47e:	d1fb      	bne.n	800c478 <_malloc_r+0xdc>
 800c480:	2300      	movs	r3, #0
 800c482:	6053      	str	r3, [r2, #4]
 800c484:	e7de      	b.n	800c444 <_malloc_r+0xa8>
 800c486:	230c      	movs	r3, #12
 800c488:	6033      	str	r3, [r6, #0]
 800c48a:	4630      	mov	r0, r6
 800c48c:	f000 fbce 	bl	800cc2c <__malloc_unlock>
 800c490:	e794      	b.n	800c3bc <_malloc_r+0x20>
 800c492:	6005      	str	r5, [r0, #0]
 800c494:	e7d6      	b.n	800c444 <_malloc_r+0xa8>
 800c496:	bf00      	nop
 800c498:	2000271c 	.word	0x2000271c

0800c49c <_printf_common>:
 800c49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a0:	4616      	mov	r6, r2
 800c4a2:	4698      	mov	r8, r3
 800c4a4:	688a      	ldr	r2, [r1, #8]
 800c4a6:	690b      	ldr	r3, [r1, #16]
 800c4a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	bfb8      	it	lt
 800c4b0:	4613      	movlt	r3, r2
 800c4b2:	6033      	str	r3, [r6, #0]
 800c4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c4b8:	4607      	mov	r7, r0
 800c4ba:	460c      	mov	r4, r1
 800c4bc:	b10a      	cbz	r2, 800c4c2 <_printf_common+0x26>
 800c4be:	3301      	adds	r3, #1
 800c4c0:	6033      	str	r3, [r6, #0]
 800c4c2:	6823      	ldr	r3, [r4, #0]
 800c4c4:	0699      	lsls	r1, r3, #26
 800c4c6:	bf42      	ittt	mi
 800c4c8:	6833      	ldrmi	r3, [r6, #0]
 800c4ca:	3302      	addmi	r3, #2
 800c4cc:	6033      	strmi	r3, [r6, #0]
 800c4ce:	6825      	ldr	r5, [r4, #0]
 800c4d0:	f015 0506 	ands.w	r5, r5, #6
 800c4d4:	d106      	bne.n	800c4e4 <_printf_common+0x48>
 800c4d6:	f104 0a19 	add.w	sl, r4, #25
 800c4da:	68e3      	ldr	r3, [r4, #12]
 800c4dc:	6832      	ldr	r2, [r6, #0]
 800c4de:	1a9b      	subs	r3, r3, r2
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	dc26      	bgt.n	800c532 <_printf_common+0x96>
 800c4e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c4e8:	6822      	ldr	r2, [r4, #0]
 800c4ea:	3b00      	subs	r3, #0
 800c4ec:	bf18      	it	ne
 800c4ee:	2301      	movne	r3, #1
 800c4f0:	0692      	lsls	r2, r2, #26
 800c4f2:	d42b      	bmi.n	800c54c <_printf_common+0xb0>
 800c4f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c4f8:	4641      	mov	r1, r8
 800c4fa:	4638      	mov	r0, r7
 800c4fc:	47c8      	blx	r9
 800c4fe:	3001      	adds	r0, #1
 800c500:	d01e      	beq.n	800c540 <_printf_common+0xa4>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	6922      	ldr	r2, [r4, #16]
 800c506:	f003 0306 	and.w	r3, r3, #6
 800c50a:	2b04      	cmp	r3, #4
 800c50c:	bf02      	ittt	eq
 800c50e:	68e5      	ldreq	r5, [r4, #12]
 800c510:	6833      	ldreq	r3, [r6, #0]
 800c512:	1aed      	subeq	r5, r5, r3
 800c514:	68a3      	ldr	r3, [r4, #8]
 800c516:	bf0c      	ite	eq
 800c518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c51c:	2500      	movne	r5, #0
 800c51e:	4293      	cmp	r3, r2
 800c520:	bfc4      	itt	gt
 800c522:	1a9b      	subgt	r3, r3, r2
 800c524:	18ed      	addgt	r5, r5, r3
 800c526:	2600      	movs	r6, #0
 800c528:	341a      	adds	r4, #26
 800c52a:	42b5      	cmp	r5, r6
 800c52c:	d11a      	bne.n	800c564 <_printf_common+0xc8>
 800c52e:	2000      	movs	r0, #0
 800c530:	e008      	b.n	800c544 <_printf_common+0xa8>
 800c532:	2301      	movs	r3, #1
 800c534:	4652      	mov	r2, sl
 800c536:	4641      	mov	r1, r8
 800c538:	4638      	mov	r0, r7
 800c53a:	47c8      	blx	r9
 800c53c:	3001      	adds	r0, #1
 800c53e:	d103      	bne.n	800c548 <_printf_common+0xac>
 800c540:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c548:	3501      	adds	r5, #1
 800c54a:	e7c6      	b.n	800c4da <_printf_common+0x3e>
 800c54c:	18e1      	adds	r1, r4, r3
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	2030      	movs	r0, #48	@ 0x30
 800c552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c556:	4422      	add	r2, r4
 800c558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c55c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c560:	3302      	adds	r3, #2
 800c562:	e7c7      	b.n	800c4f4 <_printf_common+0x58>
 800c564:	2301      	movs	r3, #1
 800c566:	4622      	mov	r2, r4
 800c568:	4641      	mov	r1, r8
 800c56a:	4638      	mov	r0, r7
 800c56c:	47c8      	blx	r9
 800c56e:	3001      	adds	r0, #1
 800c570:	d0e6      	beq.n	800c540 <_printf_common+0xa4>
 800c572:	3601      	adds	r6, #1
 800c574:	e7d9      	b.n	800c52a <_printf_common+0x8e>
	...

0800c578 <_printf_i>:
 800c578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c57c:	7e0f      	ldrb	r7, [r1, #24]
 800c57e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c580:	2f78      	cmp	r7, #120	@ 0x78
 800c582:	4691      	mov	r9, r2
 800c584:	4680      	mov	r8, r0
 800c586:	460c      	mov	r4, r1
 800c588:	469a      	mov	sl, r3
 800c58a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c58e:	d807      	bhi.n	800c5a0 <_printf_i+0x28>
 800c590:	2f62      	cmp	r7, #98	@ 0x62
 800c592:	d80a      	bhi.n	800c5aa <_printf_i+0x32>
 800c594:	2f00      	cmp	r7, #0
 800c596:	f000 80d2 	beq.w	800c73e <_printf_i+0x1c6>
 800c59a:	2f58      	cmp	r7, #88	@ 0x58
 800c59c:	f000 80b9 	beq.w	800c712 <_printf_i+0x19a>
 800c5a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c5a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c5a8:	e03a      	b.n	800c620 <_printf_i+0xa8>
 800c5aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c5ae:	2b15      	cmp	r3, #21
 800c5b0:	d8f6      	bhi.n	800c5a0 <_printf_i+0x28>
 800c5b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c5b8 <_printf_i+0x40>)
 800c5b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5b8:	0800c611 	.word	0x0800c611
 800c5bc:	0800c625 	.word	0x0800c625
 800c5c0:	0800c5a1 	.word	0x0800c5a1
 800c5c4:	0800c5a1 	.word	0x0800c5a1
 800c5c8:	0800c5a1 	.word	0x0800c5a1
 800c5cc:	0800c5a1 	.word	0x0800c5a1
 800c5d0:	0800c625 	.word	0x0800c625
 800c5d4:	0800c5a1 	.word	0x0800c5a1
 800c5d8:	0800c5a1 	.word	0x0800c5a1
 800c5dc:	0800c5a1 	.word	0x0800c5a1
 800c5e0:	0800c5a1 	.word	0x0800c5a1
 800c5e4:	0800c725 	.word	0x0800c725
 800c5e8:	0800c64f 	.word	0x0800c64f
 800c5ec:	0800c6df 	.word	0x0800c6df
 800c5f0:	0800c5a1 	.word	0x0800c5a1
 800c5f4:	0800c5a1 	.word	0x0800c5a1
 800c5f8:	0800c747 	.word	0x0800c747
 800c5fc:	0800c5a1 	.word	0x0800c5a1
 800c600:	0800c64f 	.word	0x0800c64f
 800c604:	0800c5a1 	.word	0x0800c5a1
 800c608:	0800c5a1 	.word	0x0800c5a1
 800c60c:	0800c6e7 	.word	0x0800c6e7
 800c610:	6833      	ldr	r3, [r6, #0]
 800c612:	1d1a      	adds	r2, r3, #4
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6032      	str	r2, [r6, #0]
 800c618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c61c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c620:	2301      	movs	r3, #1
 800c622:	e09d      	b.n	800c760 <_printf_i+0x1e8>
 800c624:	6833      	ldr	r3, [r6, #0]
 800c626:	6820      	ldr	r0, [r4, #0]
 800c628:	1d19      	adds	r1, r3, #4
 800c62a:	6031      	str	r1, [r6, #0]
 800c62c:	0606      	lsls	r6, r0, #24
 800c62e:	d501      	bpl.n	800c634 <_printf_i+0xbc>
 800c630:	681d      	ldr	r5, [r3, #0]
 800c632:	e003      	b.n	800c63c <_printf_i+0xc4>
 800c634:	0645      	lsls	r5, r0, #25
 800c636:	d5fb      	bpl.n	800c630 <_printf_i+0xb8>
 800c638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c63c:	2d00      	cmp	r5, #0
 800c63e:	da03      	bge.n	800c648 <_printf_i+0xd0>
 800c640:	232d      	movs	r3, #45	@ 0x2d
 800c642:	426d      	negs	r5, r5
 800c644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c648:	4859      	ldr	r0, [pc, #356]	@ (800c7b0 <_printf_i+0x238>)
 800c64a:	230a      	movs	r3, #10
 800c64c:	e011      	b.n	800c672 <_printf_i+0xfa>
 800c64e:	6821      	ldr	r1, [r4, #0]
 800c650:	6833      	ldr	r3, [r6, #0]
 800c652:	0608      	lsls	r0, r1, #24
 800c654:	f853 5b04 	ldr.w	r5, [r3], #4
 800c658:	d402      	bmi.n	800c660 <_printf_i+0xe8>
 800c65a:	0649      	lsls	r1, r1, #25
 800c65c:	bf48      	it	mi
 800c65e:	b2ad      	uxthmi	r5, r5
 800c660:	2f6f      	cmp	r7, #111	@ 0x6f
 800c662:	4853      	ldr	r0, [pc, #332]	@ (800c7b0 <_printf_i+0x238>)
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	bf14      	ite	ne
 800c668:	230a      	movne	r3, #10
 800c66a:	2308      	moveq	r3, #8
 800c66c:	2100      	movs	r1, #0
 800c66e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c672:	6866      	ldr	r6, [r4, #4]
 800c674:	60a6      	str	r6, [r4, #8]
 800c676:	2e00      	cmp	r6, #0
 800c678:	bfa2      	ittt	ge
 800c67a:	6821      	ldrge	r1, [r4, #0]
 800c67c:	f021 0104 	bicge.w	r1, r1, #4
 800c680:	6021      	strge	r1, [r4, #0]
 800c682:	b90d      	cbnz	r5, 800c688 <_printf_i+0x110>
 800c684:	2e00      	cmp	r6, #0
 800c686:	d04b      	beq.n	800c720 <_printf_i+0x1a8>
 800c688:	4616      	mov	r6, r2
 800c68a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c68e:	fb03 5711 	mls	r7, r3, r1, r5
 800c692:	5dc7      	ldrb	r7, [r0, r7]
 800c694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c698:	462f      	mov	r7, r5
 800c69a:	42bb      	cmp	r3, r7
 800c69c:	460d      	mov	r5, r1
 800c69e:	d9f4      	bls.n	800c68a <_printf_i+0x112>
 800c6a0:	2b08      	cmp	r3, #8
 800c6a2:	d10b      	bne.n	800c6bc <_printf_i+0x144>
 800c6a4:	6823      	ldr	r3, [r4, #0]
 800c6a6:	07df      	lsls	r7, r3, #31
 800c6a8:	d508      	bpl.n	800c6bc <_printf_i+0x144>
 800c6aa:	6923      	ldr	r3, [r4, #16]
 800c6ac:	6861      	ldr	r1, [r4, #4]
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	bfde      	ittt	le
 800c6b2:	2330      	movle	r3, #48	@ 0x30
 800c6b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c6b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c6bc:	1b92      	subs	r2, r2, r6
 800c6be:	6122      	str	r2, [r4, #16]
 800c6c0:	f8cd a000 	str.w	sl, [sp]
 800c6c4:	464b      	mov	r3, r9
 800c6c6:	aa03      	add	r2, sp, #12
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	f7ff fee6 	bl	800c49c <_printf_common>
 800c6d0:	3001      	adds	r0, #1
 800c6d2:	d14a      	bne.n	800c76a <_printf_i+0x1f2>
 800c6d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c6d8:	b004      	add	sp, #16
 800c6da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6de:	6823      	ldr	r3, [r4, #0]
 800c6e0:	f043 0320 	orr.w	r3, r3, #32
 800c6e4:	6023      	str	r3, [r4, #0]
 800c6e6:	4833      	ldr	r0, [pc, #204]	@ (800c7b4 <_printf_i+0x23c>)
 800c6e8:	2778      	movs	r7, #120	@ 0x78
 800c6ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	6831      	ldr	r1, [r6, #0]
 800c6f2:	061f      	lsls	r7, r3, #24
 800c6f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c6f8:	d402      	bmi.n	800c700 <_printf_i+0x188>
 800c6fa:	065f      	lsls	r7, r3, #25
 800c6fc:	bf48      	it	mi
 800c6fe:	b2ad      	uxthmi	r5, r5
 800c700:	6031      	str	r1, [r6, #0]
 800c702:	07d9      	lsls	r1, r3, #31
 800c704:	bf44      	itt	mi
 800c706:	f043 0320 	orrmi.w	r3, r3, #32
 800c70a:	6023      	strmi	r3, [r4, #0]
 800c70c:	b11d      	cbz	r5, 800c716 <_printf_i+0x19e>
 800c70e:	2310      	movs	r3, #16
 800c710:	e7ac      	b.n	800c66c <_printf_i+0xf4>
 800c712:	4827      	ldr	r0, [pc, #156]	@ (800c7b0 <_printf_i+0x238>)
 800c714:	e7e9      	b.n	800c6ea <_printf_i+0x172>
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	f023 0320 	bic.w	r3, r3, #32
 800c71c:	6023      	str	r3, [r4, #0]
 800c71e:	e7f6      	b.n	800c70e <_printf_i+0x196>
 800c720:	4616      	mov	r6, r2
 800c722:	e7bd      	b.n	800c6a0 <_printf_i+0x128>
 800c724:	6833      	ldr	r3, [r6, #0]
 800c726:	6825      	ldr	r5, [r4, #0]
 800c728:	6961      	ldr	r1, [r4, #20]
 800c72a:	1d18      	adds	r0, r3, #4
 800c72c:	6030      	str	r0, [r6, #0]
 800c72e:	062e      	lsls	r6, r5, #24
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	d501      	bpl.n	800c738 <_printf_i+0x1c0>
 800c734:	6019      	str	r1, [r3, #0]
 800c736:	e002      	b.n	800c73e <_printf_i+0x1c6>
 800c738:	0668      	lsls	r0, r5, #25
 800c73a:	d5fb      	bpl.n	800c734 <_printf_i+0x1bc>
 800c73c:	8019      	strh	r1, [r3, #0]
 800c73e:	2300      	movs	r3, #0
 800c740:	6123      	str	r3, [r4, #16]
 800c742:	4616      	mov	r6, r2
 800c744:	e7bc      	b.n	800c6c0 <_printf_i+0x148>
 800c746:	6833      	ldr	r3, [r6, #0]
 800c748:	1d1a      	adds	r2, r3, #4
 800c74a:	6032      	str	r2, [r6, #0]
 800c74c:	681e      	ldr	r6, [r3, #0]
 800c74e:	6862      	ldr	r2, [r4, #4]
 800c750:	2100      	movs	r1, #0
 800c752:	4630      	mov	r0, r6
 800c754:	f7f3 fd54 	bl	8000200 <memchr>
 800c758:	b108      	cbz	r0, 800c75e <_printf_i+0x1e6>
 800c75a:	1b80      	subs	r0, r0, r6
 800c75c:	6060      	str	r0, [r4, #4]
 800c75e:	6863      	ldr	r3, [r4, #4]
 800c760:	6123      	str	r3, [r4, #16]
 800c762:	2300      	movs	r3, #0
 800c764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c768:	e7aa      	b.n	800c6c0 <_printf_i+0x148>
 800c76a:	6923      	ldr	r3, [r4, #16]
 800c76c:	4632      	mov	r2, r6
 800c76e:	4649      	mov	r1, r9
 800c770:	4640      	mov	r0, r8
 800c772:	47d0      	blx	sl
 800c774:	3001      	adds	r0, #1
 800c776:	d0ad      	beq.n	800c6d4 <_printf_i+0x15c>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	079b      	lsls	r3, r3, #30
 800c77c:	d413      	bmi.n	800c7a6 <_printf_i+0x22e>
 800c77e:	68e0      	ldr	r0, [r4, #12]
 800c780:	9b03      	ldr	r3, [sp, #12]
 800c782:	4298      	cmp	r0, r3
 800c784:	bfb8      	it	lt
 800c786:	4618      	movlt	r0, r3
 800c788:	e7a6      	b.n	800c6d8 <_printf_i+0x160>
 800c78a:	2301      	movs	r3, #1
 800c78c:	4632      	mov	r2, r6
 800c78e:	4649      	mov	r1, r9
 800c790:	4640      	mov	r0, r8
 800c792:	47d0      	blx	sl
 800c794:	3001      	adds	r0, #1
 800c796:	d09d      	beq.n	800c6d4 <_printf_i+0x15c>
 800c798:	3501      	adds	r5, #1
 800c79a:	68e3      	ldr	r3, [r4, #12]
 800c79c:	9903      	ldr	r1, [sp, #12]
 800c79e:	1a5b      	subs	r3, r3, r1
 800c7a0:	42ab      	cmp	r3, r5
 800c7a2:	dcf2      	bgt.n	800c78a <_printf_i+0x212>
 800c7a4:	e7eb      	b.n	800c77e <_printf_i+0x206>
 800c7a6:	2500      	movs	r5, #0
 800c7a8:	f104 0619 	add.w	r6, r4, #25
 800c7ac:	e7f5      	b.n	800c79a <_printf_i+0x222>
 800c7ae:	bf00      	nop
 800c7b0:	0800d399 	.word	0x0800d399
 800c7b4:	0800d3aa 	.word	0x0800d3aa

0800c7b8 <_scanf_chars>:
 800c7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	4615      	mov	r5, r2
 800c7be:	688a      	ldr	r2, [r1, #8]
 800c7c0:	4680      	mov	r8, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	b932      	cbnz	r2, 800c7d4 <_scanf_chars+0x1c>
 800c7c6:	698a      	ldr	r2, [r1, #24]
 800c7c8:	2a00      	cmp	r2, #0
 800c7ca:	bf14      	ite	ne
 800c7cc:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800c7d0:	2201      	moveq	r2, #1
 800c7d2:	608a      	str	r2, [r1, #8]
 800c7d4:	6822      	ldr	r2, [r4, #0]
 800c7d6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c868 <_scanf_chars+0xb0>
 800c7da:	06d1      	lsls	r1, r2, #27
 800c7dc:	bf5f      	itttt	pl
 800c7de:	681a      	ldrpl	r2, [r3, #0]
 800c7e0:	1d11      	addpl	r1, r2, #4
 800c7e2:	6019      	strpl	r1, [r3, #0]
 800c7e4:	6816      	ldrpl	r6, [r2, #0]
 800c7e6:	2700      	movs	r7, #0
 800c7e8:	69a0      	ldr	r0, [r4, #24]
 800c7ea:	b188      	cbz	r0, 800c810 <_scanf_chars+0x58>
 800c7ec:	2801      	cmp	r0, #1
 800c7ee:	d107      	bne.n	800c800 <_scanf_chars+0x48>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	781a      	ldrb	r2, [r3, #0]
 800c7f4:	6963      	ldr	r3, [r4, #20]
 800c7f6:	5c9b      	ldrb	r3, [r3, r2]
 800c7f8:	b953      	cbnz	r3, 800c810 <_scanf_chars+0x58>
 800c7fa:	2f00      	cmp	r7, #0
 800c7fc:	d031      	beq.n	800c862 <_scanf_chars+0xaa>
 800c7fe:	e022      	b.n	800c846 <_scanf_chars+0x8e>
 800c800:	2802      	cmp	r0, #2
 800c802:	d120      	bne.n	800c846 <_scanf_chars+0x8e>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c80c:	071b      	lsls	r3, r3, #28
 800c80e:	d41a      	bmi.n	800c846 <_scanf_chars+0x8e>
 800c810:	6823      	ldr	r3, [r4, #0]
 800c812:	06da      	lsls	r2, r3, #27
 800c814:	bf5e      	ittt	pl
 800c816:	682b      	ldrpl	r3, [r5, #0]
 800c818:	781b      	ldrbpl	r3, [r3, #0]
 800c81a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c81e:	682a      	ldr	r2, [r5, #0]
 800c820:	686b      	ldr	r3, [r5, #4]
 800c822:	3201      	adds	r2, #1
 800c824:	602a      	str	r2, [r5, #0]
 800c826:	68a2      	ldr	r2, [r4, #8]
 800c828:	3b01      	subs	r3, #1
 800c82a:	3a01      	subs	r2, #1
 800c82c:	606b      	str	r3, [r5, #4]
 800c82e:	3701      	adds	r7, #1
 800c830:	60a2      	str	r2, [r4, #8]
 800c832:	b142      	cbz	r2, 800c846 <_scanf_chars+0x8e>
 800c834:	2b00      	cmp	r3, #0
 800c836:	dcd7      	bgt.n	800c7e8 <_scanf_chars+0x30>
 800c838:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c83c:	4629      	mov	r1, r5
 800c83e:	4640      	mov	r0, r8
 800c840:	4798      	blx	r3
 800c842:	2800      	cmp	r0, #0
 800c844:	d0d0      	beq.n	800c7e8 <_scanf_chars+0x30>
 800c846:	6823      	ldr	r3, [r4, #0]
 800c848:	f013 0310 	ands.w	r3, r3, #16
 800c84c:	d105      	bne.n	800c85a <_scanf_chars+0xa2>
 800c84e:	68e2      	ldr	r2, [r4, #12]
 800c850:	3201      	adds	r2, #1
 800c852:	60e2      	str	r2, [r4, #12]
 800c854:	69a2      	ldr	r2, [r4, #24]
 800c856:	b102      	cbz	r2, 800c85a <_scanf_chars+0xa2>
 800c858:	7033      	strb	r3, [r6, #0]
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	443b      	add	r3, r7
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	2000      	movs	r0, #0
 800c862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c866:	bf00      	nop
 800c868:	0800d3d7 	.word	0x0800d3d7

0800c86c <_scanf_i>:
 800c86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	4698      	mov	r8, r3
 800c872:	4b74      	ldr	r3, [pc, #464]	@ (800ca44 <_scanf_i+0x1d8>)
 800c874:	460c      	mov	r4, r1
 800c876:	4682      	mov	sl, r0
 800c878:	4616      	mov	r6, r2
 800c87a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c87e:	b087      	sub	sp, #28
 800c880:	ab03      	add	r3, sp, #12
 800c882:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c886:	4b70      	ldr	r3, [pc, #448]	@ (800ca48 <_scanf_i+0x1dc>)
 800c888:	69a1      	ldr	r1, [r4, #24]
 800c88a:	4a70      	ldr	r2, [pc, #448]	@ (800ca4c <_scanf_i+0x1e0>)
 800c88c:	2903      	cmp	r1, #3
 800c88e:	bf08      	it	eq
 800c890:	461a      	moveq	r2, r3
 800c892:	68a3      	ldr	r3, [r4, #8]
 800c894:	9201      	str	r2, [sp, #4]
 800c896:	1e5a      	subs	r2, r3, #1
 800c898:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c89c:	bf88      	it	hi
 800c89e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8a2:	4627      	mov	r7, r4
 800c8a4:	bf82      	ittt	hi
 800c8a6:	eb03 0905 	addhi.w	r9, r3, r5
 800c8aa:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8ae:	60a3      	strhi	r3, [r4, #8]
 800c8b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c8b4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c8b8:	bf98      	it	ls
 800c8ba:	f04f 0900 	movls.w	r9, #0
 800c8be:	6023      	str	r3, [r4, #0]
 800c8c0:	463d      	mov	r5, r7
 800c8c2:	f04f 0b00 	mov.w	fp, #0
 800c8c6:	6831      	ldr	r1, [r6, #0]
 800c8c8:	ab03      	add	r3, sp, #12
 800c8ca:	7809      	ldrb	r1, [r1, #0]
 800c8cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	f7f3 fc95 	bl	8000200 <memchr>
 800c8d6:	b328      	cbz	r0, 800c924 <_scanf_i+0xb8>
 800c8d8:	f1bb 0f01 	cmp.w	fp, #1
 800c8dc:	d159      	bne.n	800c992 <_scanf_i+0x126>
 800c8de:	6862      	ldr	r2, [r4, #4]
 800c8e0:	b92a      	cbnz	r2, 800c8ee <_scanf_i+0x82>
 800c8e2:	6822      	ldr	r2, [r4, #0]
 800c8e4:	2108      	movs	r1, #8
 800c8e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c8ea:	6061      	str	r1, [r4, #4]
 800c8ec:	6022      	str	r2, [r4, #0]
 800c8ee:	6822      	ldr	r2, [r4, #0]
 800c8f0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c8f4:	6022      	str	r2, [r4, #0]
 800c8f6:	68a2      	ldr	r2, [r4, #8]
 800c8f8:	1e51      	subs	r1, r2, #1
 800c8fa:	60a1      	str	r1, [r4, #8]
 800c8fc:	b192      	cbz	r2, 800c924 <_scanf_i+0xb8>
 800c8fe:	6832      	ldr	r2, [r6, #0]
 800c900:	1c51      	adds	r1, r2, #1
 800c902:	6031      	str	r1, [r6, #0]
 800c904:	7812      	ldrb	r2, [r2, #0]
 800c906:	f805 2b01 	strb.w	r2, [r5], #1
 800c90a:	6872      	ldr	r2, [r6, #4]
 800c90c:	3a01      	subs	r2, #1
 800c90e:	2a00      	cmp	r2, #0
 800c910:	6072      	str	r2, [r6, #4]
 800c912:	dc07      	bgt.n	800c924 <_scanf_i+0xb8>
 800c914:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c918:	4631      	mov	r1, r6
 800c91a:	4650      	mov	r0, sl
 800c91c:	4790      	blx	r2
 800c91e:	2800      	cmp	r0, #0
 800c920:	f040 8085 	bne.w	800ca2e <_scanf_i+0x1c2>
 800c924:	f10b 0b01 	add.w	fp, fp, #1
 800c928:	f1bb 0f03 	cmp.w	fp, #3
 800c92c:	d1cb      	bne.n	800c8c6 <_scanf_i+0x5a>
 800c92e:	6863      	ldr	r3, [r4, #4]
 800c930:	b90b      	cbnz	r3, 800c936 <_scanf_i+0xca>
 800c932:	230a      	movs	r3, #10
 800c934:	6063      	str	r3, [r4, #4]
 800c936:	6863      	ldr	r3, [r4, #4]
 800c938:	4945      	ldr	r1, [pc, #276]	@ (800ca50 <_scanf_i+0x1e4>)
 800c93a:	6960      	ldr	r0, [r4, #20]
 800c93c:	1ac9      	subs	r1, r1, r3
 800c93e:	f000 f889 	bl	800ca54 <__sccl>
 800c942:	f04f 0b00 	mov.w	fp, #0
 800c946:	68a3      	ldr	r3, [r4, #8]
 800c948:	6822      	ldr	r2, [r4, #0]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d03d      	beq.n	800c9ca <_scanf_i+0x15e>
 800c94e:	6831      	ldr	r1, [r6, #0]
 800c950:	6960      	ldr	r0, [r4, #20]
 800c952:	f891 c000 	ldrb.w	ip, [r1]
 800c956:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d035      	beq.n	800c9ca <_scanf_i+0x15e>
 800c95e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c962:	d124      	bne.n	800c9ae <_scanf_i+0x142>
 800c964:	0510      	lsls	r0, r2, #20
 800c966:	d522      	bpl.n	800c9ae <_scanf_i+0x142>
 800c968:	f10b 0b01 	add.w	fp, fp, #1
 800c96c:	f1b9 0f00 	cmp.w	r9, #0
 800c970:	d003      	beq.n	800c97a <_scanf_i+0x10e>
 800c972:	3301      	adds	r3, #1
 800c974:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800c978:	60a3      	str	r3, [r4, #8]
 800c97a:	6873      	ldr	r3, [r6, #4]
 800c97c:	3b01      	subs	r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	6073      	str	r3, [r6, #4]
 800c982:	dd1b      	ble.n	800c9bc <_scanf_i+0x150>
 800c984:	6833      	ldr	r3, [r6, #0]
 800c986:	3301      	adds	r3, #1
 800c988:	6033      	str	r3, [r6, #0]
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	3b01      	subs	r3, #1
 800c98e:	60a3      	str	r3, [r4, #8]
 800c990:	e7d9      	b.n	800c946 <_scanf_i+0xda>
 800c992:	f1bb 0f02 	cmp.w	fp, #2
 800c996:	d1ae      	bne.n	800c8f6 <_scanf_i+0x8a>
 800c998:	6822      	ldr	r2, [r4, #0]
 800c99a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c99e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c9a2:	d1bf      	bne.n	800c924 <_scanf_i+0xb8>
 800c9a4:	2110      	movs	r1, #16
 800c9a6:	6061      	str	r1, [r4, #4]
 800c9a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9ac:	e7a2      	b.n	800c8f4 <_scanf_i+0x88>
 800c9ae:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c9b2:	6022      	str	r2, [r4, #0]
 800c9b4:	780b      	ldrb	r3, [r1, #0]
 800c9b6:	f805 3b01 	strb.w	r3, [r5], #1
 800c9ba:	e7de      	b.n	800c97a <_scanf_i+0x10e>
 800c9bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c9c0:	4631      	mov	r1, r6
 800c9c2:	4650      	mov	r0, sl
 800c9c4:	4798      	blx	r3
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0df      	beq.n	800c98a <_scanf_i+0x11e>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	05d9      	lsls	r1, r3, #23
 800c9ce:	d50d      	bpl.n	800c9ec <_scanf_i+0x180>
 800c9d0:	42bd      	cmp	r5, r7
 800c9d2:	d909      	bls.n	800c9e8 <_scanf_i+0x17c>
 800c9d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c9d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c9dc:	4632      	mov	r2, r6
 800c9de:	4650      	mov	r0, sl
 800c9e0:	4798      	blx	r3
 800c9e2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800c9e6:	464d      	mov	r5, r9
 800c9e8:	42bd      	cmp	r5, r7
 800c9ea:	d028      	beq.n	800ca3e <_scanf_i+0x1d2>
 800c9ec:	6822      	ldr	r2, [r4, #0]
 800c9ee:	f012 0210 	ands.w	r2, r2, #16
 800c9f2:	d113      	bne.n	800ca1c <_scanf_i+0x1b0>
 800c9f4:	702a      	strb	r2, [r5, #0]
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	9e01      	ldr	r6, [sp, #4]
 800c9fa:	4639      	mov	r1, r7
 800c9fc:	4650      	mov	r0, sl
 800c9fe:	47b0      	blx	r6
 800ca00:	f8d8 3000 	ldr.w	r3, [r8]
 800ca04:	6821      	ldr	r1, [r4, #0]
 800ca06:	1d1a      	adds	r2, r3, #4
 800ca08:	f8c8 2000 	str.w	r2, [r8]
 800ca0c:	f011 0f20 	tst.w	r1, #32
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	d00f      	beq.n	800ca34 <_scanf_i+0x1c8>
 800ca14:	6018      	str	r0, [r3, #0]
 800ca16:	68e3      	ldr	r3, [r4, #12]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	60e3      	str	r3, [r4, #12]
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	1bed      	subs	r5, r5, r7
 800ca20:	445d      	add	r5, fp
 800ca22:	442b      	add	r3, r5
 800ca24:	6123      	str	r3, [r4, #16]
 800ca26:	2000      	movs	r0, #0
 800ca28:	b007      	add	sp, #28
 800ca2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2e:	f04f 0b00 	mov.w	fp, #0
 800ca32:	e7ca      	b.n	800c9ca <_scanf_i+0x15e>
 800ca34:	07ca      	lsls	r2, r1, #31
 800ca36:	bf4c      	ite	mi
 800ca38:	8018      	strhmi	r0, [r3, #0]
 800ca3a:	6018      	strpl	r0, [r3, #0]
 800ca3c:	e7eb      	b.n	800ca16 <_scanf_i+0x1aa>
 800ca3e:	2001      	movs	r0, #1
 800ca40:	e7f2      	b.n	800ca28 <_scanf_i+0x1bc>
 800ca42:	bf00      	nop
 800ca44:	0800d2a0 	.word	0x0800d2a0
 800ca48:	0800cdfd 	.word	0x0800cdfd
 800ca4c:	0800cedd 	.word	0x0800cedd
 800ca50:	0800d3cb 	.word	0x0800d3cb

0800ca54 <__sccl>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	780b      	ldrb	r3, [r1, #0]
 800ca58:	4604      	mov	r4, r0
 800ca5a:	2b5e      	cmp	r3, #94	@ 0x5e
 800ca5c:	bf0b      	itete	eq
 800ca5e:	784b      	ldrbeq	r3, [r1, #1]
 800ca60:	1c4a      	addne	r2, r1, #1
 800ca62:	1c8a      	addeq	r2, r1, #2
 800ca64:	2100      	movne	r1, #0
 800ca66:	bf08      	it	eq
 800ca68:	2101      	moveq	r1, #1
 800ca6a:	3801      	subs	r0, #1
 800ca6c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ca70:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ca74:	42a8      	cmp	r0, r5
 800ca76:	d1fb      	bne.n	800ca70 <__sccl+0x1c>
 800ca78:	b90b      	cbnz	r3, 800ca7e <__sccl+0x2a>
 800ca7a:	1e50      	subs	r0, r2, #1
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}
 800ca7e:	f081 0101 	eor.w	r1, r1, #1
 800ca82:	54e1      	strb	r1, [r4, r3]
 800ca84:	4610      	mov	r0, r2
 800ca86:	4602      	mov	r2, r0
 800ca88:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ca8c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ca8e:	d005      	beq.n	800ca9c <__sccl+0x48>
 800ca90:	2d5d      	cmp	r5, #93	@ 0x5d
 800ca92:	d016      	beq.n	800cac2 <__sccl+0x6e>
 800ca94:	2d00      	cmp	r5, #0
 800ca96:	d0f1      	beq.n	800ca7c <__sccl+0x28>
 800ca98:	462b      	mov	r3, r5
 800ca9a:	e7f2      	b.n	800ca82 <__sccl+0x2e>
 800ca9c:	7846      	ldrb	r6, [r0, #1]
 800ca9e:	2e5d      	cmp	r6, #93	@ 0x5d
 800caa0:	d0fa      	beq.n	800ca98 <__sccl+0x44>
 800caa2:	42b3      	cmp	r3, r6
 800caa4:	dcf8      	bgt.n	800ca98 <__sccl+0x44>
 800caa6:	3002      	adds	r0, #2
 800caa8:	461a      	mov	r2, r3
 800caaa:	3201      	adds	r2, #1
 800caac:	4296      	cmp	r6, r2
 800caae:	54a1      	strb	r1, [r4, r2]
 800cab0:	dcfb      	bgt.n	800caaa <__sccl+0x56>
 800cab2:	1af2      	subs	r2, r6, r3
 800cab4:	3a01      	subs	r2, #1
 800cab6:	1c5d      	adds	r5, r3, #1
 800cab8:	42b3      	cmp	r3, r6
 800caba:	bfa8      	it	ge
 800cabc:	2200      	movge	r2, #0
 800cabe:	18ab      	adds	r3, r5, r2
 800cac0:	e7e1      	b.n	800ca86 <__sccl+0x32>
 800cac2:	4610      	mov	r0, r2
 800cac4:	e7da      	b.n	800ca7c <__sccl+0x28>
	...

0800cac8 <__sflush_r>:
 800cac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad0:	0716      	lsls	r6, r2, #28
 800cad2:	4605      	mov	r5, r0
 800cad4:	460c      	mov	r4, r1
 800cad6:	d454      	bmi.n	800cb82 <__sflush_r+0xba>
 800cad8:	684b      	ldr	r3, [r1, #4]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	dc02      	bgt.n	800cae4 <__sflush_r+0x1c>
 800cade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	dd48      	ble.n	800cb76 <__sflush_r+0xae>
 800cae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cae6:	2e00      	cmp	r6, #0
 800cae8:	d045      	beq.n	800cb76 <__sflush_r+0xae>
 800caea:	2300      	movs	r3, #0
 800caec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800caf0:	682f      	ldr	r7, [r5, #0]
 800caf2:	6a21      	ldr	r1, [r4, #32]
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	d030      	beq.n	800cb5a <__sflush_r+0x92>
 800caf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	0759      	lsls	r1, r3, #29
 800cafe:	d505      	bpl.n	800cb0c <__sflush_r+0x44>
 800cb00:	6863      	ldr	r3, [r4, #4]
 800cb02:	1ad2      	subs	r2, r2, r3
 800cb04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb06:	b10b      	cbz	r3, 800cb0c <__sflush_r+0x44>
 800cb08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb0a:	1ad2      	subs	r2, r2, r3
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb10:	6a21      	ldr	r1, [r4, #32]
 800cb12:	4628      	mov	r0, r5
 800cb14:	47b0      	blx	r6
 800cb16:	1c43      	adds	r3, r0, #1
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	d106      	bne.n	800cb2a <__sflush_r+0x62>
 800cb1c:	6829      	ldr	r1, [r5, #0]
 800cb1e:	291d      	cmp	r1, #29
 800cb20:	d82b      	bhi.n	800cb7a <__sflush_r+0xb2>
 800cb22:	4a2a      	ldr	r2, [pc, #168]	@ (800cbcc <__sflush_r+0x104>)
 800cb24:	410a      	asrs	r2, r1
 800cb26:	07d6      	lsls	r6, r2, #31
 800cb28:	d427      	bmi.n	800cb7a <__sflush_r+0xb2>
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	6062      	str	r2, [r4, #4]
 800cb2e:	04d9      	lsls	r1, r3, #19
 800cb30:	6922      	ldr	r2, [r4, #16]
 800cb32:	6022      	str	r2, [r4, #0]
 800cb34:	d504      	bpl.n	800cb40 <__sflush_r+0x78>
 800cb36:	1c42      	adds	r2, r0, #1
 800cb38:	d101      	bne.n	800cb3e <__sflush_r+0x76>
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	b903      	cbnz	r3, 800cb40 <__sflush_r+0x78>
 800cb3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb42:	602f      	str	r7, [r5, #0]
 800cb44:	b1b9      	cbz	r1, 800cb76 <__sflush_r+0xae>
 800cb46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb4a:	4299      	cmp	r1, r3
 800cb4c:	d002      	beq.n	800cb54 <__sflush_r+0x8c>
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f7fe ff4a 	bl	800b9e8 <_free_r>
 800cb54:	2300      	movs	r3, #0
 800cb56:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb58:	e00d      	b.n	800cb76 <__sflush_r+0xae>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b0      	blx	r6
 800cb60:	4602      	mov	r2, r0
 800cb62:	1c50      	adds	r0, r2, #1
 800cb64:	d1c9      	bne.n	800cafa <__sflush_r+0x32>
 800cb66:	682b      	ldr	r3, [r5, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d0c6      	beq.n	800cafa <__sflush_r+0x32>
 800cb6c:	2b1d      	cmp	r3, #29
 800cb6e:	d001      	beq.n	800cb74 <__sflush_r+0xac>
 800cb70:	2b16      	cmp	r3, #22
 800cb72:	d11e      	bne.n	800cbb2 <__sflush_r+0xea>
 800cb74:	602f      	str	r7, [r5, #0]
 800cb76:	2000      	movs	r0, #0
 800cb78:	e022      	b.n	800cbc0 <__sflush_r+0xf8>
 800cb7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb7e:	b21b      	sxth	r3, r3
 800cb80:	e01b      	b.n	800cbba <__sflush_r+0xf2>
 800cb82:	690f      	ldr	r7, [r1, #16]
 800cb84:	2f00      	cmp	r7, #0
 800cb86:	d0f6      	beq.n	800cb76 <__sflush_r+0xae>
 800cb88:	0793      	lsls	r3, r2, #30
 800cb8a:	680e      	ldr	r6, [r1, #0]
 800cb8c:	bf08      	it	eq
 800cb8e:	694b      	ldreq	r3, [r1, #20]
 800cb90:	600f      	str	r7, [r1, #0]
 800cb92:	bf18      	it	ne
 800cb94:	2300      	movne	r3, #0
 800cb96:	eba6 0807 	sub.w	r8, r6, r7
 800cb9a:	608b      	str	r3, [r1, #8]
 800cb9c:	f1b8 0f00 	cmp.w	r8, #0
 800cba0:	dde9      	ble.n	800cb76 <__sflush_r+0xae>
 800cba2:	6a21      	ldr	r1, [r4, #32]
 800cba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cba6:	4643      	mov	r3, r8
 800cba8:	463a      	mov	r2, r7
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b0      	blx	r6
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	dc08      	bgt.n	800cbc4 <__sflush_r+0xfc>
 800cbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc4:	4407      	add	r7, r0
 800cbc6:	eba8 0800 	sub.w	r8, r8, r0
 800cbca:	e7e7      	b.n	800cb9c <__sflush_r+0xd4>
 800cbcc:	dfbffffe 	.word	0xdfbffffe

0800cbd0 <_fflush_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	690b      	ldr	r3, [r1, #16]
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	b913      	cbnz	r3, 800cbe0 <_fflush_r+0x10>
 800cbda:	2500      	movs	r5, #0
 800cbdc:	4628      	mov	r0, r5
 800cbde:	bd38      	pop	{r3, r4, r5, pc}
 800cbe0:	b118      	cbz	r0, 800cbea <_fflush_r+0x1a>
 800cbe2:	6a03      	ldr	r3, [r0, #32]
 800cbe4:	b90b      	cbnz	r3, 800cbea <_fflush_r+0x1a>
 800cbe6:	f7fe fd59 	bl	800b69c <__sinit>
 800cbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0f3      	beq.n	800cbda <_fflush_r+0xa>
 800cbf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbf4:	07d0      	lsls	r0, r2, #31
 800cbf6:	d404      	bmi.n	800cc02 <_fflush_r+0x32>
 800cbf8:	0599      	lsls	r1, r3, #22
 800cbfa:	d402      	bmi.n	800cc02 <_fflush_r+0x32>
 800cbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbfe:	f7fe fef0 	bl	800b9e2 <__retarget_lock_acquire_recursive>
 800cc02:	4628      	mov	r0, r5
 800cc04:	4621      	mov	r1, r4
 800cc06:	f7ff ff5f 	bl	800cac8 <__sflush_r>
 800cc0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc0c:	07da      	lsls	r2, r3, #31
 800cc0e:	4605      	mov	r5, r0
 800cc10:	d4e4      	bmi.n	800cbdc <_fflush_r+0xc>
 800cc12:	89a3      	ldrh	r3, [r4, #12]
 800cc14:	059b      	lsls	r3, r3, #22
 800cc16:	d4e1      	bmi.n	800cbdc <_fflush_r+0xc>
 800cc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc1a:	f7fe fee3 	bl	800b9e4 <__retarget_lock_release_recursive>
 800cc1e:	e7dd      	b.n	800cbdc <_fflush_r+0xc>

0800cc20 <__malloc_lock>:
 800cc20:	4801      	ldr	r0, [pc, #4]	@ (800cc28 <__malloc_lock+0x8>)
 800cc22:	f7fe bede 	b.w	800b9e2 <__retarget_lock_acquire_recursive>
 800cc26:	bf00      	nop
 800cc28:	20002714 	.word	0x20002714

0800cc2c <__malloc_unlock>:
 800cc2c:	4801      	ldr	r0, [pc, #4]	@ (800cc34 <__malloc_unlock+0x8>)
 800cc2e:	f7fe bed9 	b.w	800b9e4 <__retarget_lock_release_recursive>
 800cc32:	bf00      	nop
 800cc34:	20002714 	.word	0x20002714

0800cc38 <__submore>:
 800cc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3c:	460c      	mov	r4, r1
 800cc3e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cc40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d11d      	bne.n	800cc84 <__submore+0x4c>
 800cc48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cc4c:	f7ff fba6 	bl	800c39c <_malloc_r>
 800cc50:	b918      	cbnz	r0, 800cc5a <__submore+0x22>
 800cc52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc5e:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cc60:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cc64:	6360      	str	r0, [r4, #52]	@ 0x34
 800cc66:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cc6a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cc6e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800cc72:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cc76:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cc7a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cc7e:	6020      	str	r0, [r4, #0]
 800cc80:	2000      	movs	r0, #0
 800cc82:	e7e8      	b.n	800cc56 <__submore+0x1e>
 800cc84:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cc86:	0077      	lsls	r7, r6, #1
 800cc88:	463a      	mov	r2, r7
 800cc8a:	f000 f80f 	bl	800ccac <_realloc_r>
 800cc8e:	4605      	mov	r5, r0
 800cc90:	2800      	cmp	r0, #0
 800cc92:	d0de      	beq.n	800cc52 <__submore+0x1a>
 800cc94:	eb00 0806 	add.w	r8, r0, r6
 800cc98:	4601      	mov	r1, r0
 800cc9a:	4632      	mov	r2, r6
 800cc9c:	4640      	mov	r0, r8
 800cc9e:	f000 f9dd 	bl	800d05c <memcpy>
 800cca2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800cca6:	f8c4 8000 	str.w	r8, [r4]
 800ccaa:	e7e9      	b.n	800cc80 <__submore+0x48>

0800ccac <_realloc_r>:
 800ccac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	4615      	mov	r5, r2
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	b921      	cbnz	r1, 800ccc2 <_realloc_r+0x16>
 800ccb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	f7ff bb6d 	b.w	800c39c <_malloc_r>
 800ccc2:	b92a      	cbnz	r2, 800ccd0 <_realloc_r+0x24>
 800ccc4:	f7fe fe90 	bl	800b9e8 <_free_r>
 800ccc8:	2400      	movs	r4, #0
 800ccca:	4620      	mov	r0, r4
 800cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd0:	f000 f9d2 	bl	800d078 <_malloc_usable_size_r>
 800ccd4:	4285      	cmp	r5, r0
 800ccd6:	4606      	mov	r6, r0
 800ccd8:	d802      	bhi.n	800cce0 <_realloc_r+0x34>
 800ccda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ccde:	d8f4      	bhi.n	800ccca <_realloc_r+0x1e>
 800cce0:	4629      	mov	r1, r5
 800cce2:	4640      	mov	r0, r8
 800cce4:	f7ff fb5a 	bl	800c39c <_malloc_r>
 800cce8:	4607      	mov	r7, r0
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d0ec      	beq.n	800ccc8 <_realloc_r+0x1c>
 800ccee:	42b5      	cmp	r5, r6
 800ccf0:	462a      	mov	r2, r5
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	bf28      	it	cs
 800ccf6:	4632      	movcs	r2, r6
 800ccf8:	f000 f9b0 	bl	800d05c <memcpy>
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	4640      	mov	r0, r8
 800cd00:	f7fe fe72 	bl	800b9e8 <_free_r>
 800cd04:	463c      	mov	r4, r7
 800cd06:	e7e0      	b.n	800ccca <_realloc_r+0x1e>

0800cd08 <_strtol_l.constprop.0>:
 800cd08:	2b24      	cmp	r3, #36	@ 0x24
 800cd0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd0e:	4686      	mov	lr, r0
 800cd10:	4690      	mov	r8, r2
 800cd12:	d801      	bhi.n	800cd18 <_strtol_l.constprop.0+0x10>
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d106      	bne.n	800cd26 <_strtol_l.constprop.0+0x1e>
 800cd18:	f7fe fe38 	bl	800b98c <__errno>
 800cd1c:	2316      	movs	r3, #22
 800cd1e:	6003      	str	r3, [r0, #0]
 800cd20:	2000      	movs	r0, #0
 800cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd26:	4834      	ldr	r0, [pc, #208]	@ (800cdf8 <_strtol_l.constprop.0+0xf0>)
 800cd28:	460d      	mov	r5, r1
 800cd2a:	462a      	mov	r2, r5
 800cd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd30:	5d06      	ldrb	r6, [r0, r4]
 800cd32:	f016 0608 	ands.w	r6, r6, #8
 800cd36:	d1f8      	bne.n	800cd2a <_strtol_l.constprop.0+0x22>
 800cd38:	2c2d      	cmp	r4, #45	@ 0x2d
 800cd3a:	d12d      	bne.n	800cd98 <_strtol_l.constprop.0+0x90>
 800cd3c:	782c      	ldrb	r4, [r5, #0]
 800cd3e:	2601      	movs	r6, #1
 800cd40:	1c95      	adds	r5, r2, #2
 800cd42:	f033 0210 	bics.w	r2, r3, #16
 800cd46:	d109      	bne.n	800cd5c <_strtol_l.constprop.0+0x54>
 800cd48:	2c30      	cmp	r4, #48	@ 0x30
 800cd4a:	d12a      	bne.n	800cda2 <_strtol_l.constprop.0+0x9a>
 800cd4c:	782a      	ldrb	r2, [r5, #0]
 800cd4e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cd52:	2a58      	cmp	r2, #88	@ 0x58
 800cd54:	d125      	bne.n	800cda2 <_strtol_l.constprop.0+0x9a>
 800cd56:	786c      	ldrb	r4, [r5, #1]
 800cd58:	2310      	movs	r3, #16
 800cd5a:	3502      	adds	r5, #2
 800cd5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cd60:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800cd64:	2200      	movs	r2, #0
 800cd66:	fbbc f9f3 	udiv	r9, ip, r3
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	fb03 ca19 	mls	sl, r3, r9, ip
 800cd70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cd74:	2f09      	cmp	r7, #9
 800cd76:	d81b      	bhi.n	800cdb0 <_strtol_l.constprop.0+0xa8>
 800cd78:	463c      	mov	r4, r7
 800cd7a:	42a3      	cmp	r3, r4
 800cd7c:	dd27      	ble.n	800cdce <_strtol_l.constprop.0+0xc6>
 800cd7e:	1c57      	adds	r7, r2, #1
 800cd80:	d007      	beq.n	800cd92 <_strtol_l.constprop.0+0x8a>
 800cd82:	4581      	cmp	r9, r0
 800cd84:	d320      	bcc.n	800cdc8 <_strtol_l.constprop.0+0xc0>
 800cd86:	d101      	bne.n	800cd8c <_strtol_l.constprop.0+0x84>
 800cd88:	45a2      	cmp	sl, r4
 800cd8a:	db1d      	blt.n	800cdc8 <_strtol_l.constprop.0+0xc0>
 800cd8c:	fb00 4003 	mla	r0, r0, r3, r4
 800cd90:	2201      	movs	r2, #1
 800cd92:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd96:	e7eb      	b.n	800cd70 <_strtol_l.constprop.0+0x68>
 800cd98:	2c2b      	cmp	r4, #43	@ 0x2b
 800cd9a:	bf04      	itt	eq
 800cd9c:	782c      	ldrbeq	r4, [r5, #0]
 800cd9e:	1c95      	addeq	r5, r2, #2
 800cda0:	e7cf      	b.n	800cd42 <_strtol_l.constprop.0+0x3a>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d1da      	bne.n	800cd5c <_strtol_l.constprop.0+0x54>
 800cda6:	2c30      	cmp	r4, #48	@ 0x30
 800cda8:	bf0c      	ite	eq
 800cdaa:	2308      	moveq	r3, #8
 800cdac:	230a      	movne	r3, #10
 800cdae:	e7d5      	b.n	800cd5c <_strtol_l.constprop.0+0x54>
 800cdb0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cdb4:	2f19      	cmp	r7, #25
 800cdb6:	d801      	bhi.n	800cdbc <_strtol_l.constprop.0+0xb4>
 800cdb8:	3c37      	subs	r4, #55	@ 0x37
 800cdba:	e7de      	b.n	800cd7a <_strtol_l.constprop.0+0x72>
 800cdbc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cdc0:	2f19      	cmp	r7, #25
 800cdc2:	d804      	bhi.n	800cdce <_strtol_l.constprop.0+0xc6>
 800cdc4:	3c57      	subs	r4, #87	@ 0x57
 800cdc6:	e7d8      	b.n	800cd7a <_strtol_l.constprop.0+0x72>
 800cdc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdcc:	e7e1      	b.n	800cd92 <_strtol_l.constprop.0+0x8a>
 800cdce:	1c53      	adds	r3, r2, #1
 800cdd0:	d108      	bne.n	800cde4 <_strtol_l.constprop.0+0xdc>
 800cdd2:	2322      	movs	r3, #34	@ 0x22
 800cdd4:	f8ce 3000 	str.w	r3, [lr]
 800cdd8:	4660      	mov	r0, ip
 800cdda:	f1b8 0f00 	cmp.w	r8, #0
 800cdde:	d0a0      	beq.n	800cd22 <_strtol_l.constprop.0+0x1a>
 800cde0:	1e69      	subs	r1, r5, #1
 800cde2:	e006      	b.n	800cdf2 <_strtol_l.constprop.0+0xea>
 800cde4:	b106      	cbz	r6, 800cde8 <_strtol_l.constprop.0+0xe0>
 800cde6:	4240      	negs	r0, r0
 800cde8:	f1b8 0f00 	cmp.w	r8, #0
 800cdec:	d099      	beq.n	800cd22 <_strtol_l.constprop.0+0x1a>
 800cdee:	2a00      	cmp	r2, #0
 800cdf0:	d1f6      	bne.n	800cde0 <_strtol_l.constprop.0+0xd8>
 800cdf2:	f8c8 1000 	str.w	r1, [r8]
 800cdf6:	e794      	b.n	800cd22 <_strtol_l.constprop.0+0x1a>
 800cdf8:	0800d3d7 	.word	0x0800d3d7

0800cdfc <_strtol_r>:
 800cdfc:	f7ff bf84 	b.w	800cd08 <_strtol_l.constprop.0>

0800ce00 <_strtoul_l.constprop.0>:
 800ce00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce04:	4e34      	ldr	r6, [pc, #208]	@ (800ced8 <_strtoul_l.constprop.0+0xd8>)
 800ce06:	4686      	mov	lr, r0
 800ce08:	460d      	mov	r5, r1
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce10:	5d37      	ldrb	r7, [r6, r4]
 800ce12:	f017 0708 	ands.w	r7, r7, #8
 800ce16:	d1f8      	bne.n	800ce0a <_strtoul_l.constprop.0+0xa>
 800ce18:	2c2d      	cmp	r4, #45	@ 0x2d
 800ce1a:	d12f      	bne.n	800ce7c <_strtoul_l.constprop.0+0x7c>
 800ce1c:	782c      	ldrb	r4, [r5, #0]
 800ce1e:	2701      	movs	r7, #1
 800ce20:	1c85      	adds	r5, r0, #2
 800ce22:	f033 0010 	bics.w	r0, r3, #16
 800ce26:	d109      	bne.n	800ce3c <_strtoul_l.constprop.0+0x3c>
 800ce28:	2c30      	cmp	r4, #48	@ 0x30
 800ce2a:	d12c      	bne.n	800ce86 <_strtoul_l.constprop.0+0x86>
 800ce2c:	7828      	ldrb	r0, [r5, #0]
 800ce2e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ce32:	2858      	cmp	r0, #88	@ 0x58
 800ce34:	d127      	bne.n	800ce86 <_strtoul_l.constprop.0+0x86>
 800ce36:	786c      	ldrb	r4, [r5, #1]
 800ce38:	2310      	movs	r3, #16
 800ce3a:	3502      	adds	r5, #2
 800ce3c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800ce40:	2600      	movs	r6, #0
 800ce42:	fbb8 f8f3 	udiv	r8, r8, r3
 800ce46:	fb03 f908 	mul.w	r9, r3, r8
 800ce4a:	ea6f 0909 	mvn.w	r9, r9
 800ce4e:	4630      	mov	r0, r6
 800ce50:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ce54:	f1bc 0f09 	cmp.w	ip, #9
 800ce58:	d81c      	bhi.n	800ce94 <_strtoul_l.constprop.0+0x94>
 800ce5a:	4664      	mov	r4, ip
 800ce5c:	42a3      	cmp	r3, r4
 800ce5e:	dd2a      	ble.n	800ceb6 <_strtoul_l.constprop.0+0xb6>
 800ce60:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800ce64:	d007      	beq.n	800ce76 <_strtoul_l.constprop.0+0x76>
 800ce66:	4580      	cmp	r8, r0
 800ce68:	d322      	bcc.n	800ceb0 <_strtoul_l.constprop.0+0xb0>
 800ce6a:	d101      	bne.n	800ce70 <_strtoul_l.constprop.0+0x70>
 800ce6c:	45a1      	cmp	r9, r4
 800ce6e:	db1f      	blt.n	800ceb0 <_strtoul_l.constprop.0+0xb0>
 800ce70:	fb00 4003 	mla	r0, r0, r3, r4
 800ce74:	2601      	movs	r6, #1
 800ce76:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce7a:	e7e9      	b.n	800ce50 <_strtoul_l.constprop.0+0x50>
 800ce7c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ce7e:	bf04      	itt	eq
 800ce80:	782c      	ldrbeq	r4, [r5, #0]
 800ce82:	1c85      	addeq	r5, r0, #2
 800ce84:	e7cd      	b.n	800ce22 <_strtoul_l.constprop.0+0x22>
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1d8      	bne.n	800ce3c <_strtoul_l.constprop.0+0x3c>
 800ce8a:	2c30      	cmp	r4, #48	@ 0x30
 800ce8c:	bf0c      	ite	eq
 800ce8e:	2308      	moveq	r3, #8
 800ce90:	230a      	movne	r3, #10
 800ce92:	e7d3      	b.n	800ce3c <_strtoul_l.constprop.0+0x3c>
 800ce94:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ce98:	f1bc 0f19 	cmp.w	ip, #25
 800ce9c:	d801      	bhi.n	800cea2 <_strtoul_l.constprop.0+0xa2>
 800ce9e:	3c37      	subs	r4, #55	@ 0x37
 800cea0:	e7dc      	b.n	800ce5c <_strtoul_l.constprop.0+0x5c>
 800cea2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cea6:	f1bc 0f19 	cmp.w	ip, #25
 800ceaa:	d804      	bhi.n	800ceb6 <_strtoul_l.constprop.0+0xb6>
 800ceac:	3c57      	subs	r4, #87	@ 0x57
 800ceae:	e7d5      	b.n	800ce5c <_strtoul_l.constprop.0+0x5c>
 800ceb0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800ceb4:	e7df      	b.n	800ce76 <_strtoul_l.constprop.0+0x76>
 800ceb6:	1c73      	adds	r3, r6, #1
 800ceb8:	d106      	bne.n	800cec8 <_strtoul_l.constprop.0+0xc8>
 800ceba:	2322      	movs	r3, #34	@ 0x22
 800cebc:	f8ce 3000 	str.w	r3, [lr]
 800cec0:	4630      	mov	r0, r6
 800cec2:	b932      	cbnz	r2, 800ced2 <_strtoul_l.constprop.0+0xd2>
 800cec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cec8:	b107      	cbz	r7, 800cecc <_strtoul_l.constprop.0+0xcc>
 800ceca:	4240      	negs	r0, r0
 800cecc:	2a00      	cmp	r2, #0
 800cece:	d0f9      	beq.n	800cec4 <_strtoul_l.constprop.0+0xc4>
 800ced0:	b106      	cbz	r6, 800ced4 <_strtoul_l.constprop.0+0xd4>
 800ced2:	1e69      	subs	r1, r5, #1
 800ced4:	6011      	str	r1, [r2, #0]
 800ced6:	e7f5      	b.n	800cec4 <_strtoul_l.constprop.0+0xc4>
 800ced8:	0800d3d7 	.word	0x0800d3d7

0800cedc <_strtoul_r>:
 800cedc:	f7ff bf90 	b.w	800ce00 <_strtoul_l.constprop.0>

0800cee0 <__swbuf_r>:
 800cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee2:	460e      	mov	r6, r1
 800cee4:	4614      	mov	r4, r2
 800cee6:	4605      	mov	r5, r0
 800cee8:	b118      	cbz	r0, 800cef2 <__swbuf_r+0x12>
 800ceea:	6a03      	ldr	r3, [r0, #32]
 800ceec:	b90b      	cbnz	r3, 800cef2 <__swbuf_r+0x12>
 800ceee:	f7fe fbd5 	bl	800b69c <__sinit>
 800cef2:	69a3      	ldr	r3, [r4, #24]
 800cef4:	60a3      	str	r3, [r4, #8]
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	071a      	lsls	r2, r3, #28
 800cefa:	d501      	bpl.n	800cf00 <__swbuf_r+0x20>
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	b943      	cbnz	r3, 800cf12 <__swbuf_r+0x32>
 800cf00:	4621      	mov	r1, r4
 800cf02:	4628      	mov	r0, r5
 800cf04:	f000 f82a 	bl	800cf5c <__swsetup_r>
 800cf08:	b118      	cbz	r0, 800cf12 <__swbuf_r+0x32>
 800cf0a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cf0e:	4638      	mov	r0, r7
 800cf10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf12:	6823      	ldr	r3, [r4, #0]
 800cf14:	6922      	ldr	r2, [r4, #16]
 800cf16:	1a98      	subs	r0, r3, r2
 800cf18:	6963      	ldr	r3, [r4, #20]
 800cf1a:	b2f6      	uxtb	r6, r6
 800cf1c:	4283      	cmp	r3, r0
 800cf1e:	4637      	mov	r7, r6
 800cf20:	dc05      	bgt.n	800cf2e <__swbuf_r+0x4e>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f7ff fe53 	bl	800cbd0 <_fflush_r>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d1ed      	bne.n	800cf0a <__swbuf_r+0x2a>
 800cf2e:	68a3      	ldr	r3, [r4, #8]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	60a3      	str	r3, [r4, #8]
 800cf34:	6823      	ldr	r3, [r4, #0]
 800cf36:	1c5a      	adds	r2, r3, #1
 800cf38:	6022      	str	r2, [r4, #0]
 800cf3a:	701e      	strb	r6, [r3, #0]
 800cf3c:	6962      	ldr	r2, [r4, #20]
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d004      	beq.n	800cf4e <__swbuf_r+0x6e>
 800cf44:	89a3      	ldrh	r3, [r4, #12]
 800cf46:	07db      	lsls	r3, r3, #31
 800cf48:	d5e1      	bpl.n	800cf0e <__swbuf_r+0x2e>
 800cf4a:	2e0a      	cmp	r6, #10
 800cf4c:	d1df      	bne.n	800cf0e <__swbuf_r+0x2e>
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4628      	mov	r0, r5
 800cf52:	f7ff fe3d 	bl	800cbd0 <_fflush_r>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	d0d9      	beq.n	800cf0e <__swbuf_r+0x2e>
 800cf5a:	e7d6      	b.n	800cf0a <__swbuf_r+0x2a>

0800cf5c <__swsetup_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4b29      	ldr	r3, [pc, #164]	@ (800d004 <__swsetup_r+0xa8>)
 800cf60:	4605      	mov	r5, r0
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	460c      	mov	r4, r1
 800cf66:	b118      	cbz	r0, 800cf70 <__swsetup_r+0x14>
 800cf68:	6a03      	ldr	r3, [r0, #32]
 800cf6a:	b90b      	cbnz	r3, 800cf70 <__swsetup_r+0x14>
 800cf6c:	f7fe fb96 	bl	800b69c <__sinit>
 800cf70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf74:	0719      	lsls	r1, r3, #28
 800cf76:	d422      	bmi.n	800cfbe <__swsetup_r+0x62>
 800cf78:	06da      	lsls	r2, r3, #27
 800cf7a:	d407      	bmi.n	800cf8c <__swsetup_r+0x30>
 800cf7c:	2209      	movs	r2, #9
 800cf7e:	602a      	str	r2, [r5, #0]
 800cf80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf84:	81a3      	strh	r3, [r4, #12]
 800cf86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf8a:	e033      	b.n	800cff4 <__swsetup_r+0x98>
 800cf8c:	0758      	lsls	r0, r3, #29
 800cf8e:	d512      	bpl.n	800cfb6 <__swsetup_r+0x5a>
 800cf90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf92:	b141      	cbz	r1, 800cfa6 <__swsetup_r+0x4a>
 800cf94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf98:	4299      	cmp	r1, r3
 800cf9a:	d002      	beq.n	800cfa2 <__swsetup_r+0x46>
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	f7fe fd23 	bl	800b9e8 <_free_r>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cfac:	81a3      	strh	r3, [r4, #12]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	6063      	str	r3, [r4, #4]
 800cfb2:	6923      	ldr	r3, [r4, #16]
 800cfb4:	6023      	str	r3, [r4, #0]
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f043 0308 	orr.w	r3, r3, #8
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	b94b      	cbnz	r3, 800cfd6 <__swsetup_r+0x7a>
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cfc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfcc:	d003      	beq.n	800cfd6 <__swsetup_r+0x7a>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f7fe fbbf 	bl	800b754 <__smakebuf_r>
 800cfd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfda:	f013 0201 	ands.w	r2, r3, #1
 800cfde:	d00a      	beq.n	800cff6 <__swsetup_r+0x9a>
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	60a2      	str	r2, [r4, #8]
 800cfe4:	6962      	ldr	r2, [r4, #20]
 800cfe6:	4252      	negs	r2, r2
 800cfe8:	61a2      	str	r2, [r4, #24]
 800cfea:	6922      	ldr	r2, [r4, #16]
 800cfec:	b942      	cbnz	r2, 800d000 <__swsetup_r+0xa4>
 800cfee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cff2:	d1c5      	bne.n	800cf80 <__swsetup_r+0x24>
 800cff4:	bd38      	pop	{r3, r4, r5, pc}
 800cff6:	0799      	lsls	r1, r3, #30
 800cff8:	bf58      	it	pl
 800cffa:	6962      	ldrpl	r2, [r4, #20]
 800cffc:	60a2      	str	r2, [r4, #8]
 800cffe:	e7f4      	b.n	800cfea <__swsetup_r+0x8e>
 800d000:	2000      	movs	r0, #0
 800d002:	e7f7      	b.n	800cff4 <__swsetup_r+0x98>
 800d004:	20000044 	.word	0x20000044

0800d008 <memmove>:
 800d008:	4288      	cmp	r0, r1
 800d00a:	b510      	push	{r4, lr}
 800d00c:	eb01 0402 	add.w	r4, r1, r2
 800d010:	d902      	bls.n	800d018 <memmove+0x10>
 800d012:	4284      	cmp	r4, r0
 800d014:	4623      	mov	r3, r4
 800d016:	d807      	bhi.n	800d028 <memmove+0x20>
 800d018:	1e43      	subs	r3, r0, #1
 800d01a:	42a1      	cmp	r1, r4
 800d01c:	d008      	beq.n	800d030 <memmove+0x28>
 800d01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d026:	e7f8      	b.n	800d01a <memmove+0x12>
 800d028:	4402      	add	r2, r0
 800d02a:	4601      	mov	r1, r0
 800d02c:	428a      	cmp	r2, r1
 800d02e:	d100      	bne.n	800d032 <memmove+0x2a>
 800d030:	bd10      	pop	{r4, pc}
 800d032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d03a:	e7f7      	b.n	800d02c <memmove+0x24>

0800d03c <_sbrk_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d06      	ldr	r5, [pc, #24]	@ (800d058 <_sbrk_r+0x1c>)
 800d040:	2300      	movs	r3, #0
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	602b      	str	r3, [r5, #0]
 800d048:	f7f4 f9ce 	bl	80013e8 <_sbrk>
 800d04c:	1c43      	adds	r3, r0, #1
 800d04e:	d102      	bne.n	800d056 <_sbrk_r+0x1a>
 800d050:	682b      	ldr	r3, [r5, #0]
 800d052:	b103      	cbz	r3, 800d056 <_sbrk_r+0x1a>
 800d054:	6023      	str	r3, [r4, #0]
 800d056:	bd38      	pop	{r3, r4, r5, pc}
 800d058:	20002710 	.word	0x20002710

0800d05c <memcpy>:
 800d05c:	440a      	add	r2, r1
 800d05e:	4291      	cmp	r1, r2
 800d060:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d064:	d100      	bne.n	800d068 <memcpy+0xc>
 800d066:	4770      	bx	lr
 800d068:	b510      	push	{r4, lr}
 800d06a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d06e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d072:	4291      	cmp	r1, r2
 800d074:	d1f9      	bne.n	800d06a <memcpy+0xe>
 800d076:	bd10      	pop	{r4, pc}

0800d078 <_malloc_usable_size_r>:
 800d078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d07c:	1f18      	subs	r0, r3, #4
 800d07e:	2b00      	cmp	r3, #0
 800d080:	bfbc      	itt	lt
 800d082:	580b      	ldrlt	r3, [r1, r0]
 800d084:	18c0      	addlt	r0, r0, r3
 800d086:	4770      	bx	lr

0800d088 <_init>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	bf00      	nop
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr

0800d094 <_fini>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	bf00      	nop
 800d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d09a:	bc08      	pop	{r3}
 800d09c:	469e      	mov	lr, r3
 800d09e:	4770      	bx	lr
